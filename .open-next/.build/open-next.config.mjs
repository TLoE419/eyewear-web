import { createRequire as topLevelCreateRequire } from 'module';const require = topLevelCreateRequire(import.meta.url);import bannerUrl from 'url';const __dirname = bannerUrl.fileURLToPath(new URL('.', import.meta.url));
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/open-next/node_modules/esbuild/lib/main.js
var require_main = __commonJS({
  "node_modules/open-next/node_modules/esbuild/lib/main.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames4 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames4(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var node_exports = {};
    __export(node_exports, {
      analyzeMetafile: () => analyzeMetafile,
      analyzeMetafileSync: () => analyzeMetafileSync,
      build: () => build3,
      buildSync: () => buildSync3,
      context: () => context,
      default: () => node_default,
      formatMessages: () => formatMessages,
      formatMessagesSync: () => formatMessagesSync,
      initialize: () => initialize,
      transform: () => transform,
      transformSync: () => transformSync,
      version: () => version
    });
    module.exports = __toCommonJS(node_exports);
    function encodePacket(packet) {
      let visit = (value) => {
        if (value === null) {
          bb.write8(0);
        } else if (typeof value === "boolean") {
          bb.write8(1);
          bb.write8(+value);
        } else if (typeof value === "number") {
          bb.write8(2);
          bb.write32(value | 0);
        } else if (typeof value === "string") {
          bb.write8(3);
          bb.write(encodeUTF8(value));
        } else if (value instanceof Uint8Array) {
          bb.write8(4);
          bb.write(value);
        } else if (value instanceof Array) {
          bb.write8(5);
          bb.write32(value.length);
          for (let item of value) {
            visit(item);
          }
        } else {
          let keys = Object.keys(value);
          bb.write8(6);
          bb.write32(keys.length);
          for (let key of keys) {
            bb.write(encodeUTF8(key));
            visit(value[key]);
          }
        }
      };
      let bb = new ByteBuffer();
      bb.write32(0);
      bb.write32(packet.id << 1 | +!packet.isRequest);
      visit(packet.value);
      writeUInt32LE(bb.buf, bb.len - 4, 0);
      return bb.buf.subarray(0, bb.len);
    }
    function decodePacket(bytes) {
      let visit = () => {
        switch (bb.read8()) {
          case 0:
            return null;
          case 1:
            return !!bb.read8();
          case 2:
            return bb.read32();
          case 3:
            return decodeUTF8(bb.read());
          case 4:
            return bb.read();
          case 5: {
            let count = bb.read32();
            let value2 = [];
            for (let i = 0; i < count; i++) {
              value2.push(visit());
            }
            return value2;
          }
          case 6: {
            let count = bb.read32();
            let value2 = {};
            for (let i = 0; i < count; i++) {
              value2[decodeUTF8(bb.read())] = visit();
            }
            return value2;
          }
          default:
            throw new Error("Invalid packet");
        }
      };
      let bb = new ByteBuffer(bytes);
      let id = bb.read32();
      let isRequest = (id & 1) === 0;
      id >>>= 1;
      let value = visit();
      if (bb.ptr !== bytes.length) {
        throw new Error("Invalid packet");
      }
      return { id, isRequest, value };
    }
    var ByteBuffer = class {
      constructor(buf = new Uint8Array(1024)) {
        this.buf = buf;
        this.len = 0;
        this.ptr = 0;
      }
      _write(delta) {
        if (this.len + delta > this.buf.length) {
          let clone2 = new Uint8Array((this.len + delta) * 2);
          clone2.set(this.buf);
          this.buf = clone2;
        }
        this.len += delta;
        return this.len - delta;
      }
      write8(value) {
        let offset = this._write(1);
        this.buf[offset] = value;
      }
      write32(value) {
        let offset = this._write(4);
        writeUInt32LE(this.buf, value, offset);
      }
      write(bytes) {
        let offset = this._write(4 + bytes.length);
        writeUInt32LE(this.buf, bytes.length, offset);
        this.buf.set(bytes, offset + 4);
      }
      _read(delta) {
        if (this.ptr + delta > this.buf.length) {
          throw new Error("Invalid packet");
        }
        this.ptr += delta;
        return this.ptr - delta;
      }
      read8() {
        return this.buf[this._read(1)];
      }
      read32() {
        return readUInt32LE(this.buf, this._read(4));
      }
      read() {
        let length = this.read32();
        let bytes = new Uint8Array(length);
        let ptr = this._read(bytes.length);
        bytes.set(this.buf.subarray(ptr, ptr + length));
        return bytes;
      }
    };
    var encodeUTF8;
    var decodeUTF8;
    var encodeInvariant;
    if (typeof TextEncoder !== "undefined" && typeof TextDecoder !== "undefined") {
      let encoder = new TextEncoder();
      let decoder = new TextDecoder();
      encodeUTF8 = (text) => encoder.encode(text);
      decodeUTF8 = (bytes) => decoder.decode(bytes);
      encodeInvariant = 'new TextEncoder().encode("")';
    } else if (typeof Buffer !== "undefined") {
      encodeUTF8 = (text) => Buffer.from(text);
      decodeUTF8 = (bytes) => {
        let { buffer, byteOffset, byteLength } = bytes;
        return Buffer.from(buffer, byteOffset, byteLength).toString();
      };
      encodeInvariant = 'Buffer.from("")';
    } else {
      throw new Error("No UTF-8 codec found");
    }
    if (!(encodeUTF8("") instanceof Uint8Array))
      throw new Error(`Invariant violation: "${encodeInvariant} instanceof Uint8Array" is incorrectly false

This indicates that your JavaScript environment is broken. You cannot use
esbuild in this environment because esbuild relies on this invariant. This
is not a problem with esbuild. You need to fix your environment instead.
`);
    function readUInt32LE(buffer, offset) {
      return buffer[offset++] | buffer[offset++] << 8 | buffer[offset++] << 16 | buffer[offset++] << 24;
    }
    function writeUInt32LE(buffer, value, offset) {
      buffer[offset++] = value;
      buffer[offset++] = value >> 8;
      buffer[offset++] = value >> 16;
      buffer[offset++] = value >> 24;
    }
    var quote = JSON.stringify;
    var buildLogLevelDefault = "warning";
    var transformLogLevelDefault = "silent";
    function validateTarget(target) {
      validateStringValue(target, "target");
      if (target.indexOf(",") >= 0)
        throw new Error(`Invalid target: ${target}`);
      return target;
    }
    var canBeAnything = () => null;
    var mustBeBoolean = (value) => typeof value === "boolean" ? null : "a boolean";
    var mustBeString = (value) => typeof value === "string" ? null : "a string";
    var mustBeRegExp = (value) => value instanceof RegExp ? null : "a RegExp object";
    var mustBeInteger = (value) => typeof value === "number" && value === (value | 0) ? null : "an integer";
    var mustBeFunction = (value) => typeof value === "function" ? null : "a function";
    var mustBeArray = (value) => Array.isArray(value) ? null : "an array";
    var mustBeObject = (value) => typeof value === "object" && value !== null && !Array.isArray(value) ? null : "an object";
    var mustBeEntryPoints = (value) => typeof value === "object" && value !== null ? null : "an array or an object";
    var mustBeWebAssemblyModule = (value) => value instanceof WebAssembly.Module ? null : "a WebAssembly.Module";
    var mustBeObjectOrNull = (value) => typeof value === "object" && !Array.isArray(value) ? null : "an object or null";
    var mustBeStringOrBoolean = (value) => typeof value === "string" || typeof value === "boolean" ? null : "a string or a boolean";
    var mustBeStringOrObject = (value) => typeof value === "string" || typeof value === "object" && value !== null && !Array.isArray(value) ? null : "a string or an object";
    var mustBeStringOrArray = (value) => typeof value === "string" || Array.isArray(value) ? null : "a string or an array";
    var mustBeStringOrUint8Array = (value) => typeof value === "string" || value instanceof Uint8Array ? null : "a string or a Uint8Array";
    var mustBeStringOrURL = (value) => typeof value === "string" || value instanceof URL ? null : "a string or a URL";
    function getFlag(object, keys, key, mustBeFn) {
      let value = object[key];
      keys[key + ""] = true;
      if (value === void 0)
        return void 0;
      let mustBe = mustBeFn(value);
      if (mustBe !== null)
        throw new Error(`${quote(key)} must be ${mustBe}`);
      return value;
    }
    function checkForInvalidFlags(object, keys, where) {
      for (let key in object) {
        if (!(key in keys)) {
          throw new Error(`Invalid option ${where}: ${quote(key)}`);
        }
      }
    }
    function validateInitializeOptions(options3) {
      let keys = /* @__PURE__ */ Object.create(null);
      let wasmURL = getFlag(options3, keys, "wasmURL", mustBeStringOrURL);
      let wasmModule = getFlag(options3, keys, "wasmModule", mustBeWebAssemblyModule);
      let worker = getFlag(options3, keys, "worker", mustBeBoolean);
      checkForInvalidFlags(options3, keys, "in initialize() call");
      return {
        wasmURL,
        wasmModule,
        worker
      };
    }
    function validateMangleCache(mangleCache) {
      let validated;
      if (mangleCache !== void 0) {
        validated = /* @__PURE__ */ Object.create(null);
        for (let key in mangleCache) {
          let value = mangleCache[key];
          if (typeof value === "string" || value === false) {
            validated[key] = value;
          } else {
            throw new Error(`Expected ${quote(key)} in mangle cache to map to either a string or false`);
          }
        }
      }
      return validated;
    }
    function pushLogFlags(flags, options3, keys, isTTY2, logLevelDefault) {
      let color = getFlag(options3, keys, "color", mustBeBoolean);
      let logLevel2 = getFlag(options3, keys, "logLevel", mustBeString);
      let logLimit = getFlag(options3, keys, "logLimit", mustBeInteger);
      if (color !== void 0)
        flags.push(`--color=${color}`);
      else if (isTTY2)
        flags.push(`--color=true`);
      flags.push(`--log-level=${logLevel2 || logLevelDefault}`);
      flags.push(`--log-limit=${logLimit || 0}`);
    }
    function validateStringValue(value, what, key) {
      if (typeof value !== "string") {
        throw new Error(`Expected value for ${what}${key !== void 0 ? " " + quote(key) : ""} to be a string, got ${typeof value} instead`);
      }
      return value;
    }
    function pushCommonFlags(flags, options3, keys) {
      let legalComments = getFlag(options3, keys, "legalComments", mustBeString);
      let sourceRoot = getFlag(options3, keys, "sourceRoot", mustBeString);
      let sourcesContent = getFlag(options3, keys, "sourcesContent", mustBeBoolean);
      let target = getFlag(options3, keys, "target", mustBeStringOrArray);
      let format = getFlag(options3, keys, "format", mustBeString);
      let globalName = getFlag(options3, keys, "globalName", mustBeString);
      let mangleProps = getFlag(options3, keys, "mangleProps", mustBeRegExp);
      let reserveProps = getFlag(options3, keys, "reserveProps", mustBeRegExp);
      let mangleQuoted = getFlag(options3, keys, "mangleQuoted", mustBeBoolean);
      let minify2 = getFlag(options3, keys, "minify", mustBeBoolean);
      let minifySyntax = getFlag(options3, keys, "minifySyntax", mustBeBoolean);
      let minifyWhitespace = getFlag(options3, keys, "minifyWhitespace", mustBeBoolean);
      let minifyIdentifiers = getFlag(options3, keys, "minifyIdentifiers", mustBeBoolean);
      let lineLimit = getFlag(options3, keys, "lineLimit", mustBeInteger);
      let drop = getFlag(options3, keys, "drop", mustBeArray);
      let dropLabels = getFlag(options3, keys, "dropLabels", mustBeArray);
      let charset = getFlag(options3, keys, "charset", mustBeString);
      let treeShaking = getFlag(options3, keys, "treeShaking", mustBeBoolean);
      let ignoreAnnotations = getFlag(options3, keys, "ignoreAnnotations", mustBeBoolean);
      let jsx = getFlag(options3, keys, "jsx", mustBeString);
      let jsxFactory = getFlag(options3, keys, "jsxFactory", mustBeString);
      let jsxFragment = getFlag(options3, keys, "jsxFragment", mustBeString);
      let jsxImportSource = getFlag(options3, keys, "jsxImportSource", mustBeString);
      let jsxDev = getFlag(options3, keys, "jsxDev", mustBeBoolean);
      let jsxSideEffects = getFlag(options3, keys, "jsxSideEffects", mustBeBoolean);
      let define = getFlag(options3, keys, "define", mustBeObject);
      let logOverride = getFlag(options3, keys, "logOverride", mustBeObject);
      let supported = getFlag(options3, keys, "supported", mustBeObject);
      let pure = getFlag(options3, keys, "pure", mustBeArray);
      let keepNames = getFlag(options3, keys, "keepNames", mustBeBoolean);
      let platform = getFlag(options3, keys, "platform", mustBeString);
      let tsconfigRaw = getFlag(options3, keys, "tsconfigRaw", mustBeStringOrObject);
      if (legalComments)
        flags.push(`--legal-comments=${legalComments}`);
      if (sourceRoot !== void 0)
        flags.push(`--source-root=${sourceRoot}`);
      if (sourcesContent !== void 0)
        flags.push(`--sources-content=${sourcesContent}`);
      if (target) {
        if (Array.isArray(target))
          flags.push(`--target=${Array.from(target).map(validateTarget).join(",")}`);
        else
          flags.push(`--target=${validateTarget(target)}`);
      }
      if (format)
        flags.push(`--format=${format}`);
      if (globalName)
        flags.push(`--global-name=${globalName}`);
      if (platform)
        flags.push(`--platform=${platform}`);
      if (tsconfigRaw)
        flags.push(`--tsconfig-raw=${typeof tsconfigRaw === "string" ? tsconfigRaw : JSON.stringify(tsconfigRaw)}`);
      if (minify2)
        flags.push("--minify");
      if (minifySyntax)
        flags.push("--minify-syntax");
      if (minifyWhitespace)
        flags.push("--minify-whitespace");
      if (minifyIdentifiers)
        flags.push("--minify-identifiers");
      if (lineLimit)
        flags.push(`--line-limit=${lineLimit}`);
      if (charset)
        flags.push(`--charset=${charset}`);
      if (treeShaking !== void 0)
        flags.push(`--tree-shaking=${treeShaking}`);
      if (ignoreAnnotations)
        flags.push(`--ignore-annotations`);
      if (drop)
        for (let what of drop)
          flags.push(`--drop:${validateStringValue(what, "drop")}`);
      if (dropLabels)
        flags.push(`--drop-labels=${Array.from(dropLabels).map((what) => validateStringValue(what, "dropLabels")).join(",")}`);
      if (mangleProps)
        flags.push(`--mangle-props=${mangleProps.source}`);
      if (reserveProps)
        flags.push(`--reserve-props=${reserveProps.source}`);
      if (mangleQuoted !== void 0)
        flags.push(`--mangle-quoted=${mangleQuoted}`);
      if (jsx)
        flags.push(`--jsx=${jsx}`);
      if (jsxFactory)
        flags.push(`--jsx-factory=${jsxFactory}`);
      if (jsxFragment)
        flags.push(`--jsx-fragment=${jsxFragment}`);
      if (jsxImportSource)
        flags.push(`--jsx-import-source=${jsxImportSource}`);
      if (jsxDev)
        flags.push(`--jsx-dev`);
      if (jsxSideEffects)
        flags.push(`--jsx-side-effects`);
      if (define) {
        for (let key in define) {
          if (key.indexOf("=") >= 0)
            throw new Error(`Invalid define: ${key}`);
          flags.push(`--define:${key}=${validateStringValue(define[key], "define", key)}`);
        }
      }
      if (logOverride) {
        for (let key in logOverride) {
          if (key.indexOf("=") >= 0)
            throw new Error(`Invalid log override: ${key}`);
          flags.push(`--log-override:${key}=${validateStringValue(logOverride[key], "log override", key)}`);
        }
      }
      if (supported) {
        for (let key in supported) {
          if (key.indexOf("=") >= 0)
            throw new Error(`Invalid supported: ${key}`);
          const value = supported[key];
          if (typeof value !== "boolean")
            throw new Error(`Expected value for supported ${quote(key)} to be a boolean, got ${typeof value} instead`);
          flags.push(`--supported:${key}=${value}`);
        }
      }
      if (pure)
        for (let fn of pure)
          flags.push(`--pure:${validateStringValue(fn, "pure")}`);
      if (keepNames)
        flags.push(`--keep-names`);
    }
    function flagsForBuildOptions(callName, options3, isTTY2, logLevelDefault, writeDefault) {
      var _a2;
      let flags = [];
      let entries = [];
      let keys = /* @__PURE__ */ Object.create(null);
      let stdinContents = null;
      let stdinResolveDir = null;
      pushLogFlags(flags, options3, keys, isTTY2, logLevelDefault);
      pushCommonFlags(flags, options3, keys);
      let sourcemap = getFlag(options3, keys, "sourcemap", mustBeStringOrBoolean);
      let bundle = getFlag(options3, keys, "bundle", mustBeBoolean);
      let splitting = getFlag(options3, keys, "splitting", mustBeBoolean);
      let preserveSymlinks = getFlag(options3, keys, "preserveSymlinks", mustBeBoolean);
      let metafile = getFlag(options3, keys, "metafile", mustBeBoolean);
      let outfile = getFlag(options3, keys, "outfile", mustBeString);
      let outdir = getFlag(options3, keys, "outdir", mustBeString);
      let outbase = getFlag(options3, keys, "outbase", mustBeString);
      let tsconfig = getFlag(options3, keys, "tsconfig", mustBeString);
      let resolveExtensions = getFlag(options3, keys, "resolveExtensions", mustBeArray);
      let nodePathsInput = getFlag(options3, keys, "nodePaths", mustBeArray);
      let mainFields = getFlag(options3, keys, "mainFields", mustBeArray);
      let conditions = getFlag(options3, keys, "conditions", mustBeArray);
      let external = getFlag(options3, keys, "external", mustBeArray);
      let packages = getFlag(options3, keys, "packages", mustBeString);
      let alias = getFlag(options3, keys, "alias", mustBeObject);
      let loader = getFlag(options3, keys, "loader", mustBeObject);
      let outExtension = getFlag(options3, keys, "outExtension", mustBeObject);
      let publicPath = getFlag(options3, keys, "publicPath", mustBeString);
      let entryNames = getFlag(options3, keys, "entryNames", mustBeString);
      let chunkNames = getFlag(options3, keys, "chunkNames", mustBeString);
      let assetNames = getFlag(options3, keys, "assetNames", mustBeString);
      let inject = getFlag(options3, keys, "inject", mustBeArray);
      let banner = getFlag(options3, keys, "banner", mustBeObject);
      let footer = getFlag(options3, keys, "footer", mustBeObject);
      let entryPoints = getFlag(options3, keys, "entryPoints", mustBeEntryPoints);
      let absWorkingDir = getFlag(options3, keys, "absWorkingDir", mustBeString);
      let stdin = getFlag(options3, keys, "stdin", mustBeObject);
      let write = (_a2 = getFlag(options3, keys, "write", mustBeBoolean)) != null ? _a2 : writeDefault;
      let allowOverwrite = getFlag(options3, keys, "allowOverwrite", mustBeBoolean);
      let mangleCache = getFlag(options3, keys, "mangleCache", mustBeObject);
      keys.plugins = true;
      checkForInvalidFlags(options3, keys, `in ${callName}() call`);
      if (sourcemap)
        flags.push(`--sourcemap${sourcemap === true ? "" : `=${sourcemap}`}`);
      if (bundle)
        flags.push("--bundle");
      if (allowOverwrite)
        flags.push("--allow-overwrite");
      if (splitting)
        flags.push("--splitting");
      if (preserveSymlinks)
        flags.push("--preserve-symlinks");
      if (metafile)
        flags.push(`--metafile`);
      if (outfile)
        flags.push(`--outfile=${outfile}`);
      if (outdir)
        flags.push(`--outdir=${outdir}`);
      if (outbase)
        flags.push(`--outbase=${outbase}`);
      if (tsconfig)
        flags.push(`--tsconfig=${tsconfig}`);
      if (packages)
        flags.push(`--packages=${packages}`);
      if (resolveExtensions) {
        let values = [];
        for (let value of resolveExtensions) {
          validateStringValue(value, "resolve extension");
          if (value.indexOf(",") >= 0)
            throw new Error(`Invalid resolve extension: ${value}`);
          values.push(value);
        }
        flags.push(`--resolve-extensions=${values.join(",")}`);
      }
      if (publicPath)
        flags.push(`--public-path=${publicPath}`);
      if (entryNames)
        flags.push(`--entry-names=${entryNames}`);
      if (chunkNames)
        flags.push(`--chunk-names=${chunkNames}`);
      if (assetNames)
        flags.push(`--asset-names=${assetNames}`);
      if (mainFields) {
        let values = [];
        for (let value of mainFields) {
          validateStringValue(value, "main field");
          if (value.indexOf(",") >= 0)
            throw new Error(`Invalid main field: ${value}`);
          values.push(value);
        }
        flags.push(`--main-fields=${values.join(",")}`);
      }
      if (conditions) {
        let values = [];
        for (let value of conditions) {
          validateStringValue(value, "condition");
          if (value.indexOf(",") >= 0)
            throw new Error(`Invalid condition: ${value}`);
          values.push(value);
        }
        flags.push(`--conditions=${values.join(",")}`);
      }
      if (external)
        for (let name of external)
          flags.push(`--external:${validateStringValue(name, "external")}`);
      if (alias) {
        for (let old in alias) {
          if (old.indexOf("=") >= 0)
            throw new Error(`Invalid package name in alias: ${old}`);
          flags.push(`--alias:${old}=${validateStringValue(alias[old], "alias", old)}`);
        }
      }
      if (banner) {
        for (let type in banner) {
          if (type.indexOf("=") >= 0)
            throw new Error(`Invalid banner file type: ${type}`);
          flags.push(`--banner:${type}=${validateStringValue(banner[type], "banner", type)}`);
        }
      }
      if (footer) {
        for (let type in footer) {
          if (type.indexOf("=") >= 0)
            throw new Error(`Invalid footer file type: ${type}`);
          flags.push(`--footer:${type}=${validateStringValue(footer[type], "footer", type)}`);
        }
      }
      if (inject)
        for (let path32 of inject)
          flags.push(`--inject:${validateStringValue(path32, "inject")}`);
      if (loader) {
        for (let ext2 in loader) {
          if (ext2.indexOf("=") >= 0)
            throw new Error(`Invalid loader extension: ${ext2}`);
          flags.push(`--loader:${ext2}=${validateStringValue(loader[ext2], "loader", ext2)}`);
        }
      }
      if (outExtension) {
        for (let ext2 in outExtension) {
          if (ext2.indexOf("=") >= 0)
            throw new Error(`Invalid out extension: ${ext2}`);
          flags.push(`--out-extension:${ext2}=${validateStringValue(outExtension[ext2], "out extension", ext2)}`);
        }
      }
      if (entryPoints) {
        if (Array.isArray(entryPoints)) {
          for (let i = 0, n = entryPoints.length; i < n; i++) {
            let entryPoint = entryPoints[i];
            if (typeof entryPoint === "object" && entryPoint !== null) {
              let entryPointKeys = /* @__PURE__ */ Object.create(null);
              let input = getFlag(entryPoint, entryPointKeys, "in", mustBeString);
              let output = getFlag(entryPoint, entryPointKeys, "out", mustBeString);
              checkForInvalidFlags(entryPoint, entryPointKeys, "in entry point at index " + i);
              if (input === void 0)
                throw new Error('Missing property "in" for entry point at index ' + i);
              if (output === void 0)
                throw new Error('Missing property "out" for entry point at index ' + i);
              entries.push([output, input]);
            } else {
              entries.push(["", validateStringValue(entryPoint, "entry point at index " + i)]);
            }
          }
        } else {
          for (let key in entryPoints) {
            entries.push([key, validateStringValue(entryPoints[key], "entry point", key)]);
          }
        }
      }
      if (stdin) {
        let stdinKeys = /* @__PURE__ */ Object.create(null);
        let contents = getFlag(stdin, stdinKeys, "contents", mustBeStringOrUint8Array);
        let resolveDir = getFlag(stdin, stdinKeys, "resolveDir", mustBeString);
        let sourcefile = getFlag(stdin, stdinKeys, "sourcefile", mustBeString);
        let loader2 = getFlag(stdin, stdinKeys, "loader", mustBeString);
        checkForInvalidFlags(stdin, stdinKeys, 'in "stdin" object');
        if (sourcefile)
          flags.push(`--sourcefile=${sourcefile}`);
        if (loader2)
          flags.push(`--loader=${loader2}`);
        if (resolveDir)
          stdinResolveDir = resolveDir;
        if (typeof contents === "string")
          stdinContents = encodeUTF8(contents);
        else if (contents instanceof Uint8Array)
          stdinContents = contents;
      }
      let nodePaths = [];
      if (nodePathsInput) {
        for (let value of nodePathsInput) {
          value += "";
          nodePaths.push(value);
        }
      }
      return {
        entries,
        flags,
        write,
        stdinContents,
        stdinResolveDir,
        absWorkingDir,
        nodePaths,
        mangleCache: validateMangleCache(mangleCache)
      };
    }
    function flagsForTransformOptions(callName, options3, isTTY2, logLevelDefault) {
      let flags = [];
      let keys = /* @__PURE__ */ Object.create(null);
      pushLogFlags(flags, options3, keys, isTTY2, logLevelDefault);
      pushCommonFlags(flags, options3, keys);
      let sourcemap = getFlag(options3, keys, "sourcemap", mustBeStringOrBoolean);
      let sourcefile = getFlag(options3, keys, "sourcefile", mustBeString);
      let loader = getFlag(options3, keys, "loader", mustBeString);
      let banner = getFlag(options3, keys, "banner", mustBeString);
      let footer = getFlag(options3, keys, "footer", mustBeString);
      let mangleCache = getFlag(options3, keys, "mangleCache", mustBeObject);
      checkForInvalidFlags(options3, keys, `in ${callName}() call`);
      if (sourcemap)
        flags.push(`--sourcemap=${sourcemap === true ? "external" : sourcemap}`);
      if (sourcefile)
        flags.push(`--sourcefile=${sourcefile}`);
      if (loader)
        flags.push(`--loader=${loader}`);
      if (banner)
        flags.push(`--banner=${banner}`);
      if (footer)
        flags.push(`--footer=${footer}`);
      return {
        flags,
        mangleCache: validateMangleCache(mangleCache)
      };
    }
    function createChannel(streamIn) {
      const requestCallbacksByKey = {};
      const closeData = { didClose: false, reason: "" };
      let responseCallbacks = {};
      let nextRequestID = 0;
      let nextBuildKey = 0;
      let stdout = new Uint8Array(16 * 1024);
      let stdoutUsed = 0;
      let readFromStdout = (chunk) => {
        let limit = stdoutUsed + chunk.length;
        if (limit > stdout.length) {
          let swap = new Uint8Array(limit * 2);
          swap.set(stdout);
          stdout = swap;
        }
        stdout.set(chunk, stdoutUsed);
        stdoutUsed += chunk.length;
        let offset = 0;
        while (offset + 4 <= stdoutUsed) {
          let length = readUInt32LE(stdout, offset);
          if (offset + 4 + length > stdoutUsed) {
            break;
          }
          offset += 4;
          handleIncomingPacket(stdout.subarray(offset, offset + length));
          offset += length;
        }
        if (offset > 0) {
          stdout.copyWithin(0, offset, stdoutUsed);
          stdoutUsed -= offset;
        }
      };
      let afterClose = (error) => {
        closeData.didClose = true;
        if (error)
          closeData.reason = ": " + (error.message || error);
        const text = "The service was stopped" + closeData.reason;
        for (let id in responseCallbacks) {
          responseCallbacks[id](text, null);
        }
        responseCallbacks = {};
      };
      let sendRequest = (refs, value, callback) => {
        if (closeData.didClose)
          return callback("The service is no longer running" + closeData.reason, null);
        let id = nextRequestID++;
        responseCallbacks[id] = (error, response) => {
          try {
            callback(error, response);
          } finally {
            if (refs)
              refs.unref();
          }
        };
        if (refs)
          refs.ref();
        streamIn.writeToStdin(encodePacket({ id, isRequest: true, value }));
      };
      let sendResponse = (id, value) => {
        if (closeData.didClose)
          throw new Error("The service is no longer running" + closeData.reason);
        streamIn.writeToStdin(encodePacket({ id, isRequest: false, value }));
      };
      let handleRequest = async (id, request) => {
        try {
          if (request.command === "ping") {
            sendResponse(id, {});
            return;
          }
          if (typeof request.key === "number") {
            const requestCallbacks = requestCallbacksByKey[request.key];
            if (requestCallbacks) {
              const callback = requestCallbacks[request.command];
              if (callback) {
                await callback(id, request);
                return;
              }
            }
          }
          throw new Error(`Invalid command: ` + request.command);
        } catch (e) {
          const errors = [extractErrorMessageV8(e, streamIn, null, void 0, "")];
          try {
            sendResponse(id, { errors });
          } catch {
          }
        }
      };
      let isFirstPacket = true;
      let handleIncomingPacket = (bytes) => {
        if (isFirstPacket) {
          isFirstPacket = false;
          let binaryVersion = String.fromCharCode(...bytes);
          if (binaryVersion !== "0.19.2") {
            throw new Error(`Cannot start service: Host version "${"0.19.2"}" does not match binary version ${quote(binaryVersion)}`);
          }
          return;
        }
        let packet = decodePacket(bytes);
        if (packet.isRequest) {
          handleRequest(packet.id, packet.value);
        } else {
          let callback = responseCallbacks[packet.id];
          delete responseCallbacks[packet.id];
          if (packet.value.error)
            callback(packet.value.error, {});
          else
            callback(null, packet.value);
        }
      };
      let buildOrContext = ({ callName, refs, options: options3, isTTY: isTTY2, defaultWD: defaultWD2, callback }) => {
        let refCount = 0;
        const buildKey = nextBuildKey++;
        const requestCallbacks = {};
        const buildRefs = {
          ref() {
            if (++refCount === 1) {
              if (refs)
                refs.ref();
            }
          },
          unref() {
            if (--refCount === 0) {
              delete requestCallbacksByKey[buildKey];
              if (refs)
                refs.unref();
            }
          }
        };
        requestCallbacksByKey[buildKey] = requestCallbacks;
        buildRefs.ref();
        buildOrContextImpl(
          callName,
          buildKey,
          sendRequest,
          sendResponse,
          buildRefs,
          streamIn,
          requestCallbacks,
          options3,
          isTTY2,
          defaultWD2,
          (err, res) => {
            try {
              callback(err, res);
            } finally {
              buildRefs.unref();
            }
          }
        );
      };
      let transform2 = ({ callName, refs, input, options: options3, isTTY: isTTY2, fs: fs32, callback }) => {
        const details = createObjectStash();
        let start = (inputPath) => {
          try {
            if (typeof input !== "string" && !(input instanceof Uint8Array))
              throw new Error('The input to "transform" must be a string or a Uint8Array');
            let {
              flags,
              mangleCache
            } = flagsForTransformOptions(callName, options3, isTTY2, transformLogLevelDefault);
            let request = {
              command: "transform",
              flags,
              inputFS: inputPath !== null,
              input: inputPath !== null ? encodeUTF8(inputPath) : typeof input === "string" ? encodeUTF8(input) : input
            };
            if (mangleCache)
              request.mangleCache = mangleCache;
            sendRequest(refs, request, (error, response) => {
              if (error)
                return callback(new Error(error), null);
              let errors = replaceDetailsInMessages(response.errors, details);
              let warnings = replaceDetailsInMessages(response.warnings, details);
              let outstanding = 1;
              let next = () => {
                if (--outstanding === 0) {
                  let result = {
                    warnings,
                    code: response.code,
                    map: response.map,
                    mangleCache: void 0,
                    legalComments: void 0
                  };
                  if ("legalComments" in response)
                    result.legalComments = response == null ? void 0 : response.legalComments;
                  if (response.mangleCache)
                    result.mangleCache = response == null ? void 0 : response.mangleCache;
                  callback(null, result);
                }
              };
              if (errors.length > 0)
                return callback(failureErrorWithLog("Transform failed", errors, warnings), null);
              if (response.codeFS) {
                outstanding++;
                fs32.readFile(response.code, (err, contents) => {
                  if (err !== null) {
                    callback(err, null);
                  } else {
                    response.code = contents;
                    next();
                  }
                });
              }
              if (response.mapFS) {
                outstanding++;
                fs32.readFile(response.map, (err, contents) => {
                  if (err !== null) {
                    callback(err, null);
                  } else {
                    response.map = contents;
                    next();
                  }
                });
              }
              next();
            });
          } catch (e) {
            let flags = [];
            try {
              pushLogFlags(flags, options3, {}, isTTY2, transformLogLevelDefault);
            } catch {
            }
            const error = extractErrorMessageV8(e, streamIn, details, void 0, "");
            sendRequest(refs, { command: "error", flags, error }, () => {
              error.detail = details.load(error.detail);
              callback(failureErrorWithLog("Transform failed", [error], []), null);
            });
          }
        };
        if ((typeof input === "string" || input instanceof Uint8Array) && input.length > 1024 * 1024) {
          let next = start;
          start = () => fs32.writeFile(input, next);
        }
        start(null);
      };
      let formatMessages2 = ({ callName, refs, messages, options: options3, callback }) => {
        let result = sanitizeMessages(messages, "messages", null, "");
        if (!options3)
          throw new Error(`Missing second argument in ${callName}() call`);
        let keys = {};
        let kind = getFlag(options3, keys, "kind", mustBeString);
        let color = getFlag(options3, keys, "color", mustBeBoolean);
        let terminalWidth = getFlag(options3, keys, "terminalWidth", mustBeInteger);
        checkForInvalidFlags(options3, keys, `in ${callName}() call`);
        if (kind === void 0)
          throw new Error(`Missing "kind" in ${callName}() call`);
        if (kind !== "error" && kind !== "warning")
          throw new Error(`Expected "kind" to be "error" or "warning" in ${callName}() call`);
        let request = {
          command: "format-msgs",
          messages: result,
          isWarning: kind === "warning"
        };
        if (color !== void 0)
          request.color = color;
        if (terminalWidth !== void 0)
          request.terminalWidth = terminalWidth;
        sendRequest(refs, request, (error, response) => {
          if (error)
            return callback(new Error(error), null);
          callback(null, response.messages);
        });
      };
      let analyzeMetafile2 = ({ callName, refs, metafile, options: options3, callback }) => {
        if (options3 === void 0)
          options3 = {};
        let keys = {};
        let color = getFlag(options3, keys, "color", mustBeBoolean);
        let verbose = getFlag(options3, keys, "verbose", mustBeBoolean);
        checkForInvalidFlags(options3, keys, `in ${callName}() call`);
        let request = {
          command: "analyze-metafile",
          metafile
        };
        if (color !== void 0)
          request.color = color;
        if (verbose !== void 0)
          request.verbose = verbose;
        sendRequest(refs, request, (error, response) => {
          if (error)
            return callback(new Error(error), null);
          callback(null, response.result);
        });
      };
      return {
        readFromStdout,
        afterClose,
        service: {
          buildOrContext,
          transform: transform2,
          formatMessages: formatMessages2,
          analyzeMetafile: analyzeMetafile2
        }
      };
    }
    function buildOrContextImpl(callName, buildKey, sendRequest, sendResponse, refs, streamIn, requestCallbacks, options3, isTTY2, defaultWD2, callback) {
      const details = createObjectStash();
      const isContext = callName === "context";
      const handleError = (e, pluginName) => {
        const flags = [];
        try {
          pushLogFlags(flags, options3, {}, isTTY2, buildLogLevelDefault);
        } catch {
        }
        const message = extractErrorMessageV8(e, streamIn, details, void 0, pluginName);
        sendRequest(refs, { command: "error", flags, error: message }, () => {
          message.detail = details.load(message.detail);
          callback(failureErrorWithLog(isContext ? "Context failed" : "Build failed", [message], []), null);
        });
      };
      let plugins;
      if (typeof options3 === "object") {
        const value = options3.plugins;
        if (value !== void 0) {
          if (!Array.isArray(value))
            return handleError(new Error(`"plugins" must be an array`), "");
          plugins = value;
        }
      }
      if (plugins && plugins.length > 0) {
        if (streamIn.isSync)
          return handleError(new Error("Cannot use plugins in synchronous API calls"), "");
        handlePlugins(
          buildKey,
          sendRequest,
          sendResponse,
          refs,
          streamIn,
          requestCallbacks,
          options3,
          plugins,
          details
        ).then(
          (result) => {
            if (!result.ok)
              return handleError(result.error, result.pluginName);
            try {
              buildOrContextContinue(result.requestPlugins, result.runOnEndCallbacks, result.scheduleOnDisposeCallbacks);
            } catch (e) {
              handleError(e, "");
            }
          },
          (e) => handleError(e, "")
        );
        return;
      }
      try {
        buildOrContextContinue(null, (result, done) => done([], []), () => {
        });
      } catch (e) {
        handleError(e, "");
      }
      function buildOrContextContinue(requestPlugins, runOnEndCallbacks, scheduleOnDisposeCallbacks) {
        const writeDefault = streamIn.hasFS;
        const {
          entries,
          flags,
          write,
          stdinContents,
          stdinResolveDir,
          absWorkingDir,
          nodePaths,
          mangleCache
        } = flagsForBuildOptions(callName, options3, isTTY2, buildLogLevelDefault, writeDefault);
        if (write && !streamIn.hasFS)
          throw new Error(`The "write" option is unavailable in this environment`);
        const request = {
          command: "build",
          key: buildKey,
          entries,
          flags,
          write,
          stdinContents,
          stdinResolveDir,
          absWorkingDir: absWorkingDir || defaultWD2,
          nodePaths,
          context: isContext
        };
        if (requestPlugins)
          request.plugins = requestPlugins;
        if (mangleCache)
          request.mangleCache = mangleCache;
        const buildResponseToResult = (response, callback2) => {
          const result = {
            errors: replaceDetailsInMessages(response.errors, details),
            warnings: replaceDetailsInMessages(response.warnings, details),
            outputFiles: void 0,
            metafile: void 0,
            mangleCache: void 0
          };
          const originalErrors = result.errors.slice();
          const originalWarnings = result.warnings.slice();
          if (response.outputFiles)
            result.outputFiles = response.outputFiles.map(convertOutputFiles);
          if (response.metafile)
            result.metafile = JSON.parse(response.metafile);
          if (response.mangleCache)
            result.mangleCache = response.mangleCache;
          if (response.writeToStdout !== void 0)
            console.log(decodeUTF8(response.writeToStdout).replace(/\n$/, ""));
          runOnEndCallbacks(result, (onEndErrors, onEndWarnings) => {
            if (originalErrors.length > 0 || onEndErrors.length > 0) {
              const error = failureErrorWithLog("Build failed", originalErrors.concat(onEndErrors), originalWarnings.concat(onEndWarnings));
              return callback2(error, null, onEndErrors, onEndWarnings);
            }
            callback2(null, result, onEndErrors, onEndWarnings);
          });
        };
        let latestResultPromise;
        let provideLatestResult;
        if (isContext)
          requestCallbacks["on-end"] = (id, request2) => new Promise((resolve2) => {
            buildResponseToResult(request2, (err, result, onEndErrors, onEndWarnings) => {
              const response = {
                errors: onEndErrors,
                warnings: onEndWarnings
              };
              if (provideLatestResult)
                provideLatestResult(err, result);
              latestResultPromise = void 0;
              provideLatestResult = void 0;
              sendResponse(id, response);
              resolve2();
            });
          });
        sendRequest(refs, request, (error, response) => {
          if (error)
            return callback(new Error(error), null);
          if (!isContext) {
            return buildResponseToResult(response, (err, res) => {
              scheduleOnDisposeCallbacks();
              return callback(err, res);
            });
          }
          if (response.errors.length > 0) {
            return callback(failureErrorWithLog("Context failed", response.errors, response.warnings), null);
          }
          let didDispose = false;
          const result = {
            rebuild: () => {
              if (!latestResultPromise)
                latestResultPromise = new Promise((resolve2, reject) => {
                  let settlePromise;
                  provideLatestResult = (err, result2) => {
                    if (!settlePromise)
                      settlePromise = () => err ? reject(err) : resolve2(result2);
                  };
                  const triggerAnotherBuild = () => {
                    const request2 = {
                      command: "rebuild",
                      key: buildKey
                    };
                    sendRequest(refs, request2, (error2, response2) => {
                      if (error2) {
                        reject(new Error(error2));
                      } else if (settlePromise) {
                        settlePromise();
                      } else {
                        triggerAnotherBuild();
                      }
                    });
                  };
                  triggerAnotherBuild();
                });
              return latestResultPromise;
            },
            watch: (options22 = {}) => new Promise((resolve2, reject) => {
              if (!streamIn.hasFS)
                throw new Error(`Cannot use the "watch" API in this environment`);
              const keys = {};
              checkForInvalidFlags(options22, keys, `in watch() call`);
              const request2 = {
                command: "watch",
                key: buildKey
              };
              sendRequest(refs, request2, (error2) => {
                if (error2)
                  reject(new Error(error2));
                else
                  resolve2(void 0);
              });
            }),
            serve: (options22 = {}) => new Promise((resolve2, reject) => {
              if (!streamIn.hasFS)
                throw new Error(`Cannot use the "serve" API in this environment`);
              const keys = {};
              const port = getFlag(options22, keys, "port", mustBeInteger);
              const host = getFlag(options22, keys, "host", mustBeString);
              const servedir = getFlag(options22, keys, "servedir", mustBeString);
              const keyfile = getFlag(options22, keys, "keyfile", mustBeString);
              const certfile = getFlag(options22, keys, "certfile", mustBeString);
              const fallback = getFlag(options22, keys, "fallback", mustBeString);
              const onRequest = getFlag(options22, keys, "onRequest", mustBeFunction);
              checkForInvalidFlags(options22, keys, `in serve() call`);
              const request2 = {
                command: "serve",
                key: buildKey,
                onRequest: !!onRequest
              };
              if (port !== void 0)
                request2.port = port;
              if (host !== void 0)
                request2.host = host;
              if (servedir !== void 0)
                request2.servedir = servedir;
              if (keyfile !== void 0)
                request2.keyfile = keyfile;
              if (certfile !== void 0)
                request2.certfile = certfile;
              if (fallback !== void 0)
                request2.fallback = fallback;
              sendRequest(refs, request2, (error2, response2) => {
                if (error2)
                  return reject(new Error(error2));
                if (onRequest) {
                  requestCallbacks["serve-request"] = (id, request3) => {
                    onRequest(request3.args);
                    sendResponse(id, {});
                  };
                }
                resolve2(response2);
              });
            }),
            cancel: () => new Promise((resolve2) => {
              if (didDispose)
                return resolve2();
              const request2 = {
                command: "cancel",
                key: buildKey
              };
              sendRequest(refs, request2, () => {
                resolve2();
              });
            }),
            dispose: () => new Promise((resolve2) => {
              if (didDispose)
                return resolve2();
              didDispose = true;
              const request2 = {
                command: "dispose",
                key: buildKey
              };
              sendRequest(refs, request2, () => {
                resolve2();
                scheduleOnDisposeCallbacks();
                refs.unref();
              });
            })
          };
          refs.ref();
          callback(null, result);
        });
      }
    }
    var handlePlugins = async (buildKey, sendRequest, sendResponse, refs, streamIn, requestCallbacks, initialOptions, plugins, details) => {
      let onStartCallbacks = [];
      let onEndCallbacks = [];
      let onResolveCallbacks = {};
      let onLoadCallbacks = {};
      let onDisposeCallbacks = [];
      let nextCallbackID = 0;
      let i = 0;
      let requestPlugins = [];
      let isSetupDone = false;
      plugins = [...plugins];
      for (let item of plugins) {
        let keys = {};
        if (typeof item !== "object")
          throw new Error(`Plugin at index ${i} must be an object`);
        const name = getFlag(item, keys, "name", mustBeString);
        if (typeof name !== "string" || name === "")
          throw new Error(`Plugin at index ${i} is missing a name`);
        try {
          let setup2 = getFlag(item, keys, "setup", mustBeFunction);
          if (typeof setup2 !== "function")
            throw new Error(`Plugin is missing a setup function`);
          checkForInvalidFlags(item, keys, `on plugin ${quote(name)}`);
          let plugin = {
            name,
            onStart: false,
            onEnd: false,
            onResolve: [],
            onLoad: []
          };
          i++;
          let resolve2 = (path32, options3 = {}) => {
            if (!isSetupDone)
              throw new Error('Cannot call "resolve" before plugin setup has completed');
            if (typeof path32 !== "string")
              throw new Error(`The path to resolve must be a string`);
            let keys2 = /* @__PURE__ */ Object.create(null);
            let pluginName = getFlag(options3, keys2, "pluginName", mustBeString);
            let importer = getFlag(options3, keys2, "importer", mustBeString);
            let namespace = getFlag(options3, keys2, "namespace", mustBeString);
            let resolveDir = getFlag(options3, keys2, "resolveDir", mustBeString);
            let kind = getFlag(options3, keys2, "kind", mustBeString);
            let pluginData = getFlag(options3, keys2, "pluginData", canBeAnything);
            checkForInvalidFlags(options3, keys2, "in resolve() call");
            return new Promise((resolve22, reject) => {
              const request = {
                command: "resolve",
                path: path32,
                key: buildKey,
                pluginName: name
              };
              if (pluginName != null)
                request.pluginName = pluginName;
              if (importer != null)
                request.importer = importer;
              if (namespace != null)
                request.namespace = namespace;
              if (resolveDir != null)
                request.resolveDir = resolveDir;
              if (kind != null)
                request.kind = kind;
              else
                throw new Error(`Must specify "kind" when calling "resolve"`);
              if (pluginData != null)
                request.pluginData = details.store(pluginData);
              sendRequest(refs, request, (error, response) => {
                if (error !== null)
                  reject(new Error(error));
                else
                  resolve22({
                    errors: replaceDetailsInMessages(response.errors, details),
                    warnings: replaceDetailsInMessages(response.warnings, details),
                    path: response.path,
                    external: response.external,
                    sideEffects: response.sideEffects,
                    namespace: response.namespace,
                    suffix: response.suffix,
                    pluginData: details.load(response.pluginData)
                  });
              });
            });
          };
          let promise = setup2({
            initialOptions,
            resolve: resolve2,
            onStart(callback) {
              let registeredText = `This error came from the "onStart" callback registered here:`;
              let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onStart");
              onStartCallbacks.push({ name, callback, note: registeredNote });
              plugin.onStart = true;
            },
            onEnd(callback) {
              let registeredText = `This error came from the "onEnd" callback registered here:`;
              let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onEnd");
              onEndCallbacks.push({ name, callback, note: registeredNote });
              plugin.onEnd = true;
            },
            onResolve(options3, callback) {
              let registeredText = `This error came from the "onResolve" callback registered here:`;
              let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onResolve");
              let keys2 = {};
              let filter2 = getFlag(options3, keys2, "filter", mustBeRegExp);
              let namespace = getFlag(options3, keys2, "namespace", mustBeString);
              checkForInvalidFlags(options3, keys2, `in onResolve() call for plugin ${quote(name)}`);
              if (filter2 == null)
                throw new Error(`onResolve() call is missing a filter`);
              let id = nextCallbackID++;
              onResolveCallbacks[id] = { name, callback, note: registeredNote };
              plugin.onResolve.push({ id, filter: filter2.source, namespace: namespace || "" });
            },
            onLoad(options3, callback) {
              let registeredText = `This error came from the "onLoad" callback registered here:`;
              let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onLoad");
              let keys2 = {};
              let filter2 = getFlag(options3, keys2, "filter", mustBeRegExp);
              let namespace = getFlag(options3, keys2, "namespace", mustBeString);
              checkForInvalidFlags(options3, keys2, `in onLoad() call for plugin ${quote(name)}`);
              if (filter2 == null)
                throw new Error(`onLoad() call is missing a filter`);
              let id = nextCallbackID++;
              onLoadCallbacks[id] = { name, callback, note: registeredNote };
              plugin.onLoad.push({ id, filter: filter2.source, namespace: namespace || "" });
            },
            onDispose(callback) {
              onDisposeCallbacks.push(callback);
            },
            esbuild: streamIn.esbuild
          });
          if (promise)
            await promise;
          requestPlugins.push(plugin);
        } catch (e) {
          return { ok: false, error: e, pluginName: name };
        }
      }
      requestCallbacks["on-start"] = async (id, request) => {
        let response = { errors: [], warnings: [] };
        await Promise.all(onStartCallbacks.map(async ({ name, callback, note }) => {
          try {
            let result = await callback();
            if (result != null) {
              if (typeof result !== "object")
                throw new Error(`Expected onStart() callback in plugin ${quote(name)} to return an object`);
              let keys = {};
              let errors = getFlag(result, keys, "errors", mustBeArray);
              let warnings = getFlag(result, keys, "warnings", mustBeArray);
              checkForInvalidFlags(result, keys, `from onStart() callback in plugin ${quote(name)}`);
              if (errors != null)
                response.errors.push(...sanitizeMessages(errors, "errors", details, name));
              if (warnings != null)
                response.warnings.push(...sanitizeMessages(warnings, "warnings", details, name));
            }
          } catch (e) {
            response.errors.push(extractErrorMessageV8(e, streamIn, details, note && note(), name));
          }
        }));
        sendResponse(id, response);
      };
      requestCallbacks["on-resolve"] = async (id, request) => {
        let response = {}, name = "", callback, note;
        for (let id2 of request.ids) {
          try {
            ({ name, callback, note } = onResolveCallbacks[id2]);
            let result = await callback({
              path: request.path,
              importer: request.importer,
              namespace: request.namespace,
              resolveDir: request.resolveDir,
              kind: request.kind,
              pluginData: details.load(request.pluginData)
            });
            if (result != null) {
              if (typeof result !== "object")
                throw new Error(`Expected onResolve() callback in plugin ${quote(name)} to return an object`);
              let keys = {};
              let pluginName = getFlag(result, keys, "pluginName", mustBeString);
              let path32 = getFlag(result, keys, "path", mustBeString);
              let namespace = getFlag(result, keys, "namespace", mustBeString);
              let suffix = getFlag(result, keys, "suffix", mustBeString);
              let external = getFlag(result, keys, "external", mustBeBoolean);
              let sideEffects = getFlag(result, keys, "sideEffects", mustBeBoolean);
              let pluginData = getFlag(result, keys, "pluginData", canBeAnything);
              let errors = getFlag(result, keys, "errors", mustBeArray);
              let warnings = getFlag(result, keys, "warnings", mustBeArray);
              let watchFiles = getFlag(result, keys, "watchFiles", mustBeArray);
              let watchDirs = getFlag(result, keys, "watchDirs", mustBeArray);
              checkForInvalidFlags(result, keys, `from onResolve() callback in plugin ${quote(name)}`);
              response.id = id2;
              if (pluginName != null)
                response.pluginName = pluginName;
              if (path32 != null)
                response.path = path32;
              if (namespace != null)
                response.namespace = namespace;
              if (suffix != null)
                response.suffix = suffix;
              if (external != null)
                response.external = external;
              if (sideEffects != null)
                response.sideEffects = sideEffects;
              if (pluginData != null)
                response.pluginData = details.store(pluginData);
              if (errors != null)
                response.errors = sanitizeMessages(errors, "errors", details, name);
              if (warnings != null)
                response.warnings = sanitizeMessages(warnings, "warnings", details, name);
              if (watchFiles != null)
                response.watchFiles = sanitizeStringArray(watchFiles, "watchFiles");
              if (watchDirs != null)
                response.watchDirs = sanitizeStringArray(watchDirs, "watchDirs");
              break;
            }
          } catch (e) {
            response = { id: id2, errors: [extractErrorMessageV8(e, streamIn, details, note && note(), name)] };
            break;
          }
        }
        sendResponse(id, response);
      };
      requestCallbacks["on-load"] = async (id, request) => {
        let response = {}, name = "", callback, note;
        for (let id2 of request.ids) {
          try {
            ({ name, callback, note } = onLoadCallbacks[id2]);
            let result = await callback({
              path: request.path,
              namespace: request.namespace,
              suffix: request.suffix,
              pluginData: details.load(request.pluginData)
            });
            if (result != null) {
              if (typeof result !== "object")
                throw new Error(`Expected onLoad() callback in plugin ${quote(name)} to return an object`);
              let keys = {};
              let pluginName = getFlag(result, keys, "pluginName", mustBeString);
              let contents = getFlag(result, keys, "contents", mustBeStringOrUint8Array);
              let resolveDir = getFlag(result, keys, "resolveDir", mustBeString);
              let pluginData = getFlag(result, keys, "pluginData", canBeAnything);
              let loader = getFlag(result, keys, "loader", mustBeString);
              let errors = getFlag(result, keys, "errors", mustBeArray);
              let warnings = getFlag(result, keys, "warnings", mustBeArray);
              let watchFiles = getFlag(result, keys, "watchFiles", mustBeArray);
              let watchDirs = getFlag(result, keys, "watchDirs", mustBeArray);
              checkForInvalidFlags(result, keys, `from onLoad() callback in plugin ${quote(name)}`);
              response.id = id2;
              if (pluginName != null)
                response.pluginName = pluginName;
              if (contents instanceof Uint8Array)
                response.contents = contents;
              else if (contents != null)
                response.contents = encodeUTF8(contents);
              if (resolveDir != null)
                response.resolveDir = resolveDir;
              if (pluginData != null)
                response.pluginData = details.store(pluginData);
              if (loader != null)
                response.loader = loader;
              if (errors != null)
                response.errors = sanitizeMessages(errors, "errors", details, name);
              if (warnings != null)
                response.warnings = sanitizeMessages(warnings, "warnings", details, name);
              if (watchFiles != null)
                response.watchFiles = sanitizeStringArray(watchFiles, "watchFiles");
              if (watchDirs != null)
                response.watchDirs = sanitizeStringArray(watchDirs, "watchDirs");
              break;
            }
          } catch (e) {
            response = { id: id2, errors: [extractErrorMessageV8(e, streamIn, details, note && note(), name)] };
            break;
          }
        }
        sendResponse(id, response);
      };
      let runOnEndCallbacks = (result, done) => done([], []);
      if (onEndCallbacks.length > 0) {
        runOnEndCallbacks = (result, done) => {
          (async () => {
            const onEndErrors = [];
            const onEndWarnings = [];
            for (const { name, callback, note } of onEndCallbacks) {
              let newErrors;
              let newWarnings;
              try {
                const value = await callback(result);
                if (value != null) {
                  if (typeof value !== "object")
                    throw new Error(`Expected onEnd() callback in plugin ${quote(name)} to return an object`);
                  let keys = {};
                  let errors = getFlag(value, keys, "errors", mustBeArray);
                  let warnings = getFlag(value, keys, "warnings", mustBeArray);
                  checkForInvalidFlags(value, keys, `from onEnd() callback in plugin ${quote(name)}`);
                  if (errors != null)
                    newErrors = sanitizeMessages(errors, "errors", details, name);
                  if (warnings != null)
                    newWarnings = sanitizeMessages(warnings, "warnings", details, name);
                }
              } catch (e) {
                newErrors = [extractErrorMessageV8(e, streamIn, details, note && note(), name)];
              }
              if (newErrors) {
                onEndErrors.push(...newErrors);
                try {
                  result.errors.push(...newErrors);
                } catch {
                }
              }
              if (newWarnings) {
                onEndWarnings.push(...newWarnings);
                try {
                  result.warnings.push(...newWarnings);
                } catch {
                }
              }
            }
            done(onEndErrors, onEndWarnings);
          })();
        };
      }
      let scheduleOnDisposeCallbacks = () => {
        for (const cb of onDisposeCallbacks) {
          setTimeout(() => cb(), 0);
        }
      };
      isSetupDone = true;
      return {
        ok: true,
        requestPlugins,
        runOnEndCallbacks,
        scheduleOnDisposeCallbacks
      };
    };
    function createObjectStash() {
      const map = /* @__PURE__ */ new Map();
      let nextID = 0;
      return {
        load(id) {
          return map.get(id);
        },
        store(value) {
          if (value === void 0)
            return -1;
          const id = nextID++;
          map.set(id, value);
          return id;
        }
      };
    }
    function extractCallerV8(e, streamIn, ident) {
      let note;
      let tried = false;
      return () => {
        if (tried)
          return note;
        tried = true;
        try {
          let lines = (e.stack + "").split("\n");
          lines.splice(1, 1);
          let location = parseStackLinesV8(streamIn, lines, ident);
          if (location) {
            note = { text: e.message, location };
            return note;
          }
        } catch {
        }
      };
    }
    function extractErrorMessageV8(e, streamIn, stash, note, pluginName) {
      let text = "Internal error";
      let location = null;
      try {
        text = (e && e.message || e) + "";
      } catch {
      }
      try {
        location = parseStackLinesV8(streamIn, (e.stack + "").split("\n"), "");
      } catch {
      }
      return { id: "", pluginName, text, location, notes: note ? [note] : [], detail: stash ? stash.store(e) : -1 };
    }
    function parseStackLinesV8(streamIn, lines, ident) {
      let at = "    at ";
      if (streamIn.readFileSync && !lines[0].startsWith(at) && lines[1].startsWith(at)) {
        for (let i = 1; i < lines.length; i++) {
          let line = lines[i];
          if (!line.startsWith(at))
            continue;
          line = line.slice(at.length);
          while (true) {
            let match2 = /^(?:new |async )?\S+ \((.*)\)$/.exec(line);
            if (match2) {
              line = match2[1];
              continue;
            }
            match2 = /^eval at \S+ \((.*)\)(?:, \S+:\d+:\d+)?$/.exec(line);
            if (match2) {
              line = match2[1];
              continue;
            }
            match2 = /^(\S+):(\d+):(\d+)$/.exec(line);
            if (match2) {
              let contents;
              try {
                contents = streamIn.readFileSync(match2[1], "utf8");
              } catch {
                break;
              }
              let lineText = contents.split(/\r\n|\r|\n|\u2028|\u2029/)[+match2[2] - 1] || "";
              let column = +match2[3] - 1;
              let length = lineText.slice(column, column + ident.length) === ident ? ident.length : 0;
              return {
                file: match2[1],
                namespace: "file",
                line: +match2[2],
                column: encodeUTF8(lineText.slice(0, column)).length,
                length: encodeUTF8(lineText.slice(column, column + length)).length,
                lineText: lineText + "\n" + lines.slice(1).join("\n"),
                suggestion: ""
              };
            }
            break;
          }
        }
      }
      return null;
    }
    function failureErrorWithLog(text, errors, warnings) {
      let limit = 5;
      text += errors.length < 1 ? "" : ` with ${errors.length} error${errors.length < 2 ? "" : "s"}:` + errors.slice(0, limit + 1).map((e, i) => {
        if (i === limit)
          return "\n...";
        if (!e.location)
          return `
error: ${e.text}`;
        let { file, line, column } = e.location;
        let pluginText = e.pluginName ? `[plugin: ${e.pluginName}] ` : "";
        return `
${file}:${line}:${column}: ERROR: ${pluginText}${e.text}`;
      }).join("");
      let error = new Error(text);
      for (const [key, value] of [["errors", errors], ["warnings", warnings]]) {
        Object.defineProperty(error, key, {
          configurable: true,
          enumerable: true,
          get: () => value,
          set: (value2) => Object.defineProperty(error, key, {
            configurable: true,
            enumerable: true,
            value: value2
          })
        });
      }
      return error;
    }
    function replaceDetailsInMessages(messages, stash) {
      for (const message of messages) {
        message.detail = stash.load(message.detail);
      }
      return messages;
    }
    function sanitizeLocation(location, where) {
      if (location == null)
        return null;
      let keys = {};
      let file = getFlag(location, keys, "file", mustBeString);
      let namespace = getFlag(location, keys, "namespace", mustBeString);
      let line = getFlag(location, keys, "line", mustBeInteger);
      let column = getFlag(location, keys, "column", mustBeInteger);
      let length = getFlag(location, keys, "length", mustBeInteger);
      let lineText = getFlag(location, keys, "lineText", mustBeString);
      let suggestion = getFlag(location, keys, "suggestion", mustBeString);
      checkForInvalidFlags(location, keys, where);
      return {
        file: file || "",
        namespace: namespace || "",
        line: line || 0,
        column: column || 0,
        length: length || 0,
        lineText: lineText || "",
        suggestion: suggestion || ""
      };
    }
    function sanitizeMessages(messages, property, stash, fallbackPluginName) {
      let messagesClone = [];
      let index = 0;
      for (const message of messages) {
        let keys = {};
        let id = getFlag(message, keys, "id", mustBeString);
        let pluginName = getFlag(message, keys, "pluginName", mustBeString);
        let text = getFlag(message, keys, "text", mustBeString);
        let location = getFlag(message, keys, "location", mustBeObjectOrNull);
        let notes = getFlag(message, keys, "notes", mustBeArray);
        let detail = getFlag(message, keys, "detail", canBeAnything);
        let where = `in element ${index} of "${property}"`;
        checkForInvalidFlags(message, keys, where);
        let notesClone = [];
        if (notes) {
          for (const note of notes) {
            let noteKeys = {};
            let noteText = getFlag(note, noteKeys, "text", mustBeString);
            let noteLocation = getFlag(note, noteKeys, "location", mustBeObjectOrNull);
            checkForInvalidFlags(note, noteKeys, where);
            notesClone.push({
              text: noteText || "",
              location: sanitizeLocation(noteLocation, where)
            });
          }
        }
        messagesClone.push({
          id: id || "",
          pluginName: pluginName || fallbackPluginName,
          text: text || "",
          location: sanitizeLocation(location, where),
          notes: notesClone,
          detail: stash ? stash.store(detail) : -1
        });
        index++;
      }
      return messagesClone;
    }
    function sanitizeStringArray(values, property) {
      const result = [];
      for (const value of values) {
        if (typeof value !== "string")
          throw new Error(`${quote(property)} must be an array of strings`);
        result.push(value);
      }
      return result;
    }
    function convertOutputFiles({ path: path32, contents, hash }) {
      let text = null;
      return {
        path: path32,
        contents,
        hash,
        get text() {
          const binary = this.contents;
          if (text === null || binary !== contents) {
            contents = binary;
            text = decodeUTF8(binary);
          }
          return text;
        }
      };
    }
    var fs10 = __require("fs");
    var os3 = __require("os");
    var path14 = __require("path");
    var ESBUILD_BINARY_PATH = process.env.ESBUILD_BINARY_PATH || ESBUILD_BINARY_PATH;
    var isValidBinaryPath = (x) => !!x && x !== "/usr/bin/esbuild";
    var packageDarwin_arm64 = "@esbuild/darwin-arm64";
    var packageDarwin_x64 = "@esbuild/darwin-x64";
    var knownWindowsPackages = {
      "win32 arm64 LE": "@esbuild/win32-arm64",
      "win32 ia32 LE": "@esbuild/win32-ia32",
      "win32 x64 LE": "@esbuild/win32-x64"
    };
    var knownUnixlikePackages = {
      "android arm64 LE": "@esbuild/android-arm64",
      "darwin arm64 LE": "@esbuild/darwin-arm64",
      "darwin x64 LE": "@esbuild/darwin-x64",
      "freebsd arm64 LE": "@esbuild/freebsd-arm64",
      "freebsd x64 LE": "@esbuild/freebsd-x64",
      "linux arm LE": "@esbuild/linux-arm",
      "linux arm64 LE": "@esbuild/linux-arm64",
      "linux ia32 LE": "@esbuild/linux-ia32",
      "linux mips64el LE": "@esbuild/linux-mips64el",
      "linux ppc64 LE": "@esbuild/linux-ppc64",
      "linux riscv64 LE": "@esbuild/linux-riscv64",
      "linux s390x BE": "@esbuild/linux-s390x",
      "linux x64 LE": "@esbuild/linux-x64",
      "linux loong64 LE": "@esbuild/linux-loong64",
      "netbsd x64 LE": "@esbuild/netbsd-x64",
      "openbsd x64 LE": "@esbuild/openbsd-x64",
      "sunos x64 LE": "@esbuild/sunos-x64"
    };
    var knownWebAssemblyFallbackPackages = {
      "android arm LE": "@esbuild/android-arm",
      "android x64 LE": "@esbuild/android-x64"
    };
    function pkgAndSubpathForCurrentPlatform() {
      let pkg;
      let subpath;
      let isWASM = false;
      let platformKey = `${process.platform} ${os3.arch()} ${os3.endianness()}`;
      if (platformKey in knownWindowsPackages) {
        pkg = knownWindowsPackages[platformKey];
        subpath = "esbuild.exe";
      } else if (platformKey in knownUnixlikePackages) {
        pkg = knownUnixlikePackages[platformKey];
        subpath = "bin/esbuild";
      } else if (platformKey in knownWebAssemblyFallbackPackages) {
        pkg = knownWebAssemblyFallbackPackages[platformKey];
        subpath = "bin/esbuild";
        isWASM = true;
      } else {
        throw new Error(`Unsupported platform: ${platformKey}`);
      }
      return { pkg, subpath, isWASM };
    }
    function pkgForSomeOtherPlatform() {
      const libMainJS = __require.resolve("esbuild");
      const nodeModulesDirectory = path14.dirname(path14.dirname(path14.dirname(libMainJS)));
      if (path14.basename(nodeModulesDirectory) === "node_modules") {
        for (const unixKey in knownUnixlikePackages) {
          try {
            const pkg = knownUnixlikePackages[unixKey];
            if (fs10.existsSync(path14.join(nodeModulesDirectory, pkg)))
              return pkg;
          } catch {
          }
        }
        for (const windowsKey in knownWindowsPackages) {
          try {
            const pkg = knownWindowsPackages[windowsKey];
            if (fs10.existsSync(path14.join(nodeModulesDirectory, pkg)))
              return pkg;
          } catch {
          }
        }
      }
      return null;
    }
    function downloadedBinPath(pkg, subpath) {
      const esbuildLibDir = path14.dirname(__require.resolve("esbuild"));
      return path14.join(esbuildLibDir, `downloaded-${pkg.replace("/", "-")}-${path14.basename(subpath)}`);
    }
    function generateBinPath() {
      if (isValidBinaryPath(ESBUILD_BINARY_PATH)) {
        if (!fs10.existsSync(ESBUILD_BINARY_PATH)) {
          console.warn(`[esbuild] Ignoring bad configuration: ESBUILD_BINARY_PATH=${ESBUILD_BINARY_PATH}`);
        } else {
          return { binPath: ESBUILD_BINARY_PATH, isWASM: false };
        }
      }
      const { pkg, subpath, isWASM } = pkgAndSubpathForCurrentPlatform();
      let binPath;
      try {
        binPath = __require.resolve(`${pkg}/${subpath}`);
      } catch (e) {
        binPath = downloadedBinPath(pkg, subpath);
        if (!fs10.existsSync(binPath)) {
          try {
            __require.resolve(pkg);
          } catch {
            const otherPkg = pkgForSomeOtherPlatform();
            if (otherPkg) {
              let suggestions = `
Specifically the "${otherPkg}" package is present but this platform
needs the "${pkg}" package instead. People often get into this
situation by installing esbuild on Windows or macOS and copying "node_modules"
into a Docker image that runs Linux, or by copying "node_modules" between
Windows and WSL environments.

If you are installing with npm, you can try not copying the "node_modules"
directory when you copy the files over, and running "npm ci" or "npm install"
on the destination platform after the copy. Or you could consider using yarn
instead of npm which has built-in support for installing a package on multiple
platforms simultaneously.

If you are installing with yarn, you can try listing both this platform and the
other platform in your ".yarnrc.yml" file using the "supportedArchitectures"
feature: https://yarnpkg.com/configuration/yarnrc/#supportedArchitectures
Keep in mind that this means multiple copies of esbuild will be present.
`;
              if (pkg === packageDarwin_x64 && otherPkg === packageDarwin_arm64 || pkg === packageDarwin_arm64 && otherPkg === packageDarwin_x64) {
                suggestions = `
Specifically the "${otherPkg}" package is present but this platform
needs the "${pkg}" package instead. People often get into this
situation by installing esbuild with npm running inside of Rosetta 2 and then
trying to use it with node running outside of Rosetta 2, or vice versa (Rosetta
2 is Apple's on-the-fly x86_64-to-arm64 translation service).

If you are installing with npm, you can try ensuring that both npm and node are
not running under Rosetta 2 and then reinstalling esbuild. This likely involves
changing how you installed npm and/or node. For example, installing node with
the universal installer here should work: https://nodejs.org/en/download/. Or
you could consider using yarn instead of npm which has built-in support for
installing a package on multiple platforms simultaneously.

If you are installing with yarn, you can try listing both "arm64" and "x64"
in your ".yarnrc.yml" file using the "supportedArchitectures" feature:
https://yarnpkg.com/configuration/yarnrc/#supportedArchitectures
Keep in mind that this means multiple copies of esbuild will be present.
`;
              }
              throw new Error(`
You installed esbuild for another platform than the one you're currently using.
This won't work because esbuild is written with native code and needs to
install a platform-specific binary executable.
${suggestions}
Another alternative is to use the "esbuild-wasm" package instead, which works
the same way on all platforms. But it comes with a heavy performance cost and
can sometimes be 10x slower than the "esbuild" package, so you may also not
want to do that.
`);
            }
            throw new Error(`The package "${pkg}" could not be found, and is needed by esbuild.

If you are installing esbuild with npm, make sure that you don't specify the
"--no-optional" or "--omit=optional" flags. The "optionalDependencies" feature
of "package.json" is used by esbuild to install the correct binary executable
for your current platform.`);
          }
          throw e;
        }
      }
      if (/\.zip\//.test(binPath)) {
        let pnpapi;
        try {
          pnpapi = __require("pnpapi");
        } catch (e) {
        }
        if (pnpapi) {
          const root = pnpapi.getPackageInformation(pnpapi.topLevel).packageLocation;
          const binTargetPath = path14.join(
            root,
            "node_modules",
            ".cache",
            "esbuild",
            `pnpapi-${pkg.replace("/", "-")}-${"0.19.2"}-${path14.basename(subpath)}`
          );
          if (!fs10.existsSync(binTargetPath)) {
            fs10.mkdirSync(path14.dirname(binTargetPath), { recursive: true });
            fs10.copyFileSync(binPath, binTargetPath);
            fs10.chmodSync(binTargetPath, 493);
          }
          return { binPath: binTargetPath, isWASM };
        }
      }
      return { binPath, isWASM };
    }
    var child_process = __require("child_process");
    var crypto = __require("crypto");
    var path22 = __require("path");
    var fs22 = __require("fs");
    var os22 = __require("os");
    var tty2 = __require("tty");
    var worker_threads;
    if (process.env.ESBUILD_WORKER_THREADS !== "0") {
      try {
        worker_threads = __require("worker_threads");
      } catch {
      }
      let [major, minor] = process.versions.node.split(".");
      if (
        // <v12.17.0 does not work
        +major < 12 || +major === 12 && +minor < 17 || +major === 13 && +minor < 13
      ) {
        worker_threads = void 0;
      }
    }
    var _a;
    var isInternalWorkerThread = ((_a = worker_threads == null ? void 0 : worker_threads.workerData) == null ? void 0 : _a.esbuildVersion) === "0.19.2";
    var esbuildCommandAndArgs = () => {
      if ((!ESBUILD_BINARY_PATH || false) && (path22.basename(__filename) !== "main.js" || path22.basename(__dirname) !== "lib")) {
        throw new Error(
          `The esbuild JavaScript API cannot be bundled. Please mark the "esbuild" package as external so it's not included in the bundle.

More information: The file containing the code for esbuild's JavaScript API (${__filename}) does not appear to be inside the esbuild package on the file system, which usually means that the esbuild package was bundled into another file. This is problematic because the API needs to run a binary executable inside the esbuild package which is located using a relative path from the API code to the executable. If the esbuild package is bundled, the relative path will be incorrect and the executable won't be found.`
        );
      }
      if (false) {
        return ["node", [path22.join(__dirname, "..", "bin", "esbuild")]];
      } else {
        const { binPath, isWASM } = generateBinPath();
        if (isWASM) {
          return ["node", [binPath]];
        } else {
          return [binPath, []];
        }
      }
    };
    var isTTY = () => tty2.isatty(2);
    var fsSync = {
      readFile(tempFile, callback) {
        try {
          let contents = fs22.readFileSync(tempFile, "utf8");
          try {
            fs22.unlinkSync(tempFile);
          } catch {
          }
          callback(null, contents);
        } catch (err) {
          callback(err, null);
        }
      },
      writeFile(contents, callback) {
        try {
          let tempFile = randomFileName();
          fs22.writeFileSync(tempFile, contents);
          callback(tempFile);
        } catch {
          callback(null);
        }
      }
    };
    var fsAsync = {
      readFile(tempFile, callback) {
        try {
          fs22.readFile(tempFile, "utf8", (err, contents) => {
            try {
              fs22.unlink(tempFile, () => callback(err, contents));
            } catch {
              callback(err, contents);
            }
          });
        } catch (err) {
          callback(err, null);
        }
      },
      writeFile(contents, callback) {
        try {
          let tempFile = randomFileName();
          fs22.writeFile(tempFile, contents, (err) => err !== null ? callback(null) : callback(tempFile));
        } catch {
          callback(null);
        }
      }
    };
    var version = "0.19.2";
    var build3 = (options3) => ensureServiceIsRunning().build(options3);
    var context = (buildOptions) => ensureServiceIsRunning().context(buildOptions);
    var transform = (input, options3) => ensureServiceIsRunning().transform(input, options3);
    var formatMessages = (messages, options3) => ensureServiceIsRunning().formatMessages(messages, options3);
    var analyzeMetafile = (messages, options3) => ensureServiceIsRunning().analyzeMetafile(messages, options3);
    var buildSync3 = (options3) => {
      if (worker_threads && !isInternalWorkerThread) {
        if (!workerThreadService)
          workerThreadService = startWorkerThreadService(worker_threads);
        return workerThreadService.buildSync(options3);
      }
      let result;
      runServiceSync((service) => service.buildOrContext({
        callName: "buildSync",
        refs: null,
        options: options3,
        isTTY: isTTY(),
        defaultWD,
        callback: (err, res) => {
          if (err)
            throw err;
          result = res;
        }
      }));
      return result;
    };
    var transformSync = (input, options3) => {
      if (worker_threads && !isInternalWorkerThread) {
        if (!workerThreadService)
          workerThreadService = startWorkerThreadService(worker_threads);
        return workerThreadService.transformSync(input, options3);
      }
      let result;
      runServiceSync((service) => service.transform({
        callName: "transformSync",
        refs: null,
        input,
        options: options3 || {},
        isTTY: isTTY(),
        fs: fsSync,
        callback: (err, res) => {
          if (err)
            throw err;
          result = res;
        }
      }));
      return result;
    };
    var formatMessagesSync = (messages, options3) => {
      if (worker_threads && !isInternalWorkerThread) {
        if (!workerThreadService)
          workerThreadService = startWorkerThreadService(worker_threads);
        return workerThreadService.formatMessagesSync(messages, options3);
      }
      let result;
      runServiceSync((service) => service.formatMessages({
        callName: "formatMessagesSync",
        refs: null,
        messages,
        options: options3,
        callback: (err, res) => {
          if (err)
            throw err;
          result = res;
        }
      }));
      return result;
    };
    var analyzeMetafileSync = (metafile, options3) => {
      if (worker_threads && !isInternalWorkerThread) {
        if (!workerThreadService)
          workerThreadService = startWorkerThreadService(worker_threads);
        return workerThreadService.analyzeMetafileSync(metafile, options3);
      }
      let result;
      runServiceSync((service) => service.analyzeMetafile({
        callName: "analyzeMetafileSync",
        refs: null,
        metafile: typeof metafile === "string" ? metafile : JSON.stringify(metafile),
        options: options3,
        callback: (err, res) => {
          if (err)
            throw err;
          result = res;
        }
      }));
      return result;
    };
    var initializeWasCalled = false;
    var initialize = (options3) => {
      options3 = validateInitializeOptions(options3 || {});
      if (options3.wasmURL)
        throw new Error(`The "wasmURL" option only works in the browser`);
      if (options3.wasmModule)
        throw new Error(`The "wasmModule" option only works in the browser`);
      if (options3.worker)
        throw new Error(`The "worker" option only works in the browser`);
      if (initializeWasCalled)
        throw new Error('Cannot call "initialize" more than once');
      ensureServiceIsRunning();
      initializeWasCalled = true;
      return Promise.resolve();
    };
    var defaultWD = process.cwd();
    var longLivedService;
    var ensureServiceIsRunning = () => {
      if (longLivedService)
        return longLivedService;
      let [command2, args2] = esbuildCommandAndArgs();
      let child = child_process.spawn(command2, args2.concat(`--service=${"0.19.2"}`, "--ping"), {
        windowsHide: true,
        stdio: ["pipe", "pipe", "inherit"],
        cwd: defaultWD
      });
      let { readFromStdout, afterClose, service } = createChannel({
        writeToStdin(bytes) {
          child.stdin.write(bytes, (err) => {
            if (err)
              afterClose(err);
          });
        },
        readFileSync: fs22.readFileSync,
        isSync: false,
        hasFS: true,
        esbuild: node_exports
      });
      child.stdin.on("error", afterClose);
      child.on("error", afterClose);
      const stdin = child.stdin;
      const stdout = child.stdout;
      stdout.on("data", readFromStdout);
      stdout.on("end", afterClose);
      let refCount = 0;
      child.unref();
      if (stdin.unref) {
        stdin.unref();
      }
      if (stdout.unref) {
        stdout.unref();
      }
      const refs = {
        ref() {
          if (++refCount === 1)
            child.ref();
        },
        unref() {
          if (--refCount === 0)
            child.unref();
        }
      };
      longLivedService = {
        build: (options3) => new Promise((resolve2, reject) => {
          service.buildOrContext({
            callName: "build",
            refs,
            options: options3,
            isTTY: isTTY(),
            defaultWD,
            callback: (err, res) => err ? reject(err) : resolve2(res)
          });
        }),
        context: (options3) => new Promise((resolve2, reject) => service.buildOrContext({
          callName: "context",
          refs,
          options: options3,
          isTTY: isTTY(),
          defaultWD,
          callback: (err, res) => err ? reject(err) : resolve2(res)
        })),
        transform: (input, options3) => new Promise((resolve2, reject) => service.transform({
          callName: "transform",
          refs,
          input,
          options: options3 || {},
          isTTY: isTTY(),
          fs: fsAsync,
          callback: (err, res) => err ? reject(err) : resolve2(res)
        })),
        formatMessages: (messages, options3) => new Promise((resolve2, reject) => service.formatMessages({
          callName: "formatMessages",
          refs,
          messages,
          options: options3,
          callback: (err, res) => err ? reject(err) : resolve2(res)
        })),
        analyzeMetafile: (metafile, options3) => new Promise((resolve2, reject) => service.analyzeMetafile({
          callName: "analyzeMetafile",
          refs,
          metafile: typeof metafile === "string" ? metafile : JSON.stringify(metafile),
          options: options3,
          callback: (err, res) => err ? reject(err) : resolve2(res)
        }))
      };
      return longLivedService;
    };
    var runServiceSync = (callback) => {
      let [command2, args2] = esbuildCommandAndArgs();
      let stdin = new Uint8Array();
      let { readFromStdout, afterClose, service } = createChannel({
        writeToStdin(bytes) {
          if (stdin.length !== 0)
            throw new Error("Must run at most one command");
          stdin = bytes;
        },
        isSync: true,
        hasFS: true,
        esbuild: node_exports
      });
      callback(service);
      let stdout = child_process.execFileSync(command2, args2.concat(`--service=${"0.19.2"}`), {
        cwd: defaultWD,
        windowsHide: true,
        input: stdin,
        // We don't know how large the output could be. If it's too large, the
        // command will fail with ENOBUFS. Reserve 16mb for now since that feels
        // like it should be enough. Also allow overriding this with an environment
        // variable.
        maxBuffer: +process.env.ESBUILD_MAX_BUFFER || 16 * 1024 * 1024
      });
      readFromStdout(stdout);
      afterClose(null);
    };
    var randomFileName = () => {
      return path22.join(os22.tmpdir(), `esbuild-${crypto.randomBytes(32).toString("hex")}`);
    };
    var workerThreadService = null;
    var startWorkerThreadService = (worker_threads2) => {
      let { port1: mainPort, port2: workerPort } = new worker_threads2.MessageChannel();
      let worker = new worker_threads2.Worker(__filename, {
        workerData: { workerPort, defaultWD, esbuildVersion: "0.19.2" },
        transferList: [workerPort],
        // From node's documentation: https://nodejs.org/api/worker_threads.html
        //
        //   Take care when launching worker threads from preload scripts (scripts loaded
        //   and run using the `-r` command line flag). Unless the `execArgv` option is
        //   explicitly set, new Worker threads automatically inherit the command line flags
        //   from the running process and will preload the same preload scripts as the main
        //   thread. If the preload script unconditionally launches a worker thread, every
        //   thread spawned will spawn another until the application crashes.
        //
        execArgv: []
      });
      let nextID = 0;
      let fakeBuildError = (text) => {
        let error = new Error(`Build failed with 1 error:
error: ${text}`);
        let errors = [{ id: "", pluginName: "", text, location: null, notes: [], detail: void 0 }];
        error.errors = errors;
        error.warnings = [];
        return error;
      };
      let validateBuildSyncOptions = (options3) => {
        if (!options3)
          return;
        let plugins = options3.plugins;
        if (plugins && plugins.length > 0)
          throw fakeBuildError(`Cannot use plugins in synchronous API calls`);
      };
      let applyProperties = (object, properties) => {
        for (let key in properties) {
          object[key] = properties[key];
        }
      };
      let runCallSync = (command2, args2) => {
        let id = nextID++;
        let sharedBuffer = new SharedArrayBuffer(8);
        let sharedBufferView = new Int32Array(sharedBuffer);
        let msg = { sharedBuffer, id, command: command2, args: args2 };
        worker.postMessage(msg);
        let status = Atomics.wait(sharedBufferView, 0, 0);
        if (status !== "ok" && status !== "not-equal")
          throw new Error("Internal error: Atomics.wait() failed: " + status);
        let { message: { id: id2, resolve: resolve2, reject, properties } } = worker_threads2.receiveMessageOnPort(mainPort);
        if (id !== id2)
          throw new Error(`Internal error: Expected id ${id} but got id ${id2}`);
        if (reject) {
          applyProperties(reject, properties);
          throw reject;
        }
        return resolve2;
      };
      worker.unref();
      return {
        buildSync(options3) {
          validateBuildSyncOptions(options3);
          return runCallSync("build", [options3]);
        },
        transformSync(input, options3) {
          return runCallSync("transform", [input, options3]);
        },
        formatMessagesSync(messages, options3) {
          return runCallSync("formatMessages", [messages, options3]);
        },
        analyzeMetafileSync(metafile, options3) {
          return runCallSync("analyzeMetafile", [metafile, options3]);
        }
      };
    };
    var startSyncServiceWorker = () => {
      let workerPort = worker_threads.workerData.workerPort;
      let parentPort = worker_threads.parentPort;
      let extractProperties = (object) => {
        let properties = {};
        if (object && typeof object === "object") {
          for (let key in object) {
            properties[key] = object[key];
          }
        }
        return properties;
      };
      try {
        let service = ensureServiceIsRunning();
        defaultWD = worker_threads.workerData.defaultWD;
        parentPort.on("message", (msg) => {
          (async () => {
            let { sharedBuffer, id, command: command2, args: args2 } = msg;
            let sharedBufferView = new Int32Array(sharedBuffer);
            try {
              switch (command2) {
                case "build":
                  workerPort.postMessage({ id, resolve: await service.build(args2[0]) });
                  break;
                case "transform":
                  workerPort.postMessage({ id, resolve: await service.transform(args2[0], args2[1]) });
                  break;
                case "formatMessages":
                  workerPort.postMessage({ id, resolve: await service.formatMessages(args2[0], args2[1]) });
                  break;
                case "analyzeMetafile":
                  workerPort.postMessage({ id, resolve: await service.analyzeMetafile(args2[0], args2[1]) });
                  break;
                default:
                  throw new Error(`Invalid command: ${command2}`);
              }
            } catch (reject) {
              workerPort.postMessage({ id, reject, properties: extractProperties(reject) });
            }
            Atomics.add(sharedBufferView, 0, 1);
            Atomics.notify(sharedBufferView, 0, Infinity);
          })();
        });
      } catch (reject) {
        parentPort.on("message", (msg) => {
          let { sharedBuffer, id } = msg;
          let sharedBufferView = new Int32Array(sharedBuffer);
          workerPort.postMessage({ id, reject, properties: extractProperties(reject) });
          Atomics.add(sharedBufferView, 0, 1);
          Atomics.notify(sharedBufferView, 0, Infinity);
        });
      }
    };
    if (isInternalWorkerThread) {
      startSyncServiceWorker();
    }
    var node_default = node_exports;
  }
});

// node_modules/balanced-match/index.js
var require_balanced_match = __commonJS({
  "node_modules/balanced-match/index.js"(exports, module) {
    "use strict";
    module.exports = balanced;
    function balanced(a, b, str) {
      if (a instanceof RegExp)
        a = maybeMatch(a, str);
      if (b instanceof RegExp)
        b = maybeMatch(b, str);
      var r = range(a, b, str);
      return r && {
        start: r[0],
        end: r[1],
        pre: str.slice(0, r[0]),
        body: str.slice(r[0] + a.length, r[1]),
        post: str.slice(r[1] + b.length)
      };
    }
    function maybeMatch(reg, str) {
      var m = str.match(reg);
      return m ? m[0] : null;
    }
    balanced.range = range;
    function range(a, b, str) {
      var begs, beg, left, right, result;
      var ai = str.indexOf(a);
      var bi = str.indexOf(b, ai + 1);
      var i = ai;
      if (ai >= 0 && bi > 0) {
        if (a === b) {
          return [ai, bi];
        }
        begs = [];
        left = str.length;
        while (i >= 0 && !result) {
          if (i == ai) {
            begs.push(i);
            ai = str.indexOf(a, i + 1);
          } else if (begs.length == 1) {
            result = [begs.pop(), bi];
          } else {
            beg = begs.pop();
            if (beg < left) {
              left = beg;
              right = bi;
            }
            bi = str.indexOf(b, i + 1);
          }
          i = ai < bi && ai >= 0 ? ai : bi;
        }
        if (begs.length) {
          result = [left, right];
        }
      }
      return result;
    }
  }
});

// node_modules/@node-minify/core/node_modules/brace-expansion/index.js
var require_brace_expansion = __commonJS({
  "node_modules/@node-minify/core/node_modules/brace-expansion/index.js"(exports, module) {
    var balanced = require_balanced_match();
    module.exports = expandTop;
    var escSlash = "\0SLASH" + Math.random() + "\0";
    var escOpen = "\0OPEN" + Math.random() + "\0";
    var escClose = "\0CLOSE" + Math.random() + "\0";
    var escComma = "\0COMMA" + Math.random() + "\0";
    var escPeriod = "\0PERIOD" + Math.random() + "\0";
    function numeric(str) {
      return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
    }
    function escapeBraces(str) {
      return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
    }
    function unescapeBraces(str) {
      return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
    }
    function parseCommaParts(str) {
      if (!str)
        return [""];
      var parts = [];
      var m = balanced("{", "}", str);
      if (!m)
        return str.split(",");
      var pre = m.pre;
      var body = m.body;
      var post = m.post;
      var p = pre.split(",");
      p[p.length - 1] += "{" + body + "}";
      var postParts = parseCommaParts(post);
      if (post.length) {
        p[p.length - 1] += postParts.shift();
        p.push.apply(p, postParts);
      }
      parts.push.apply(parts, p);
      return parts;
    }
    function expandTop(str) {
      if (!str)
        return [];
      if (str.substr(0, 2) === "{}") {
        str = "\\{\\}" + str.substr(2);
      }
      return expand2(escapeBraces(str), true).map(unescapeBraces);
    }
    function embrace(str) {
      return "{" + str + "}";
    }
    function isPadded(el) {
      return /^-?0\d/.test(el);
    }
    function lte(i, y) {
      return i <= y;
    }
    function gte(i, y) {
      return i >= y;
    }
    function expand2(str, isTop) {
      var expansions = [];
      var m = balanced("{", "}", str);
      if (!m)
        return [str];
      var pre = m.pre;
      var post = m.post.length ? expand2(m.post, false) : [""];
      if (/\$$/.test(m.pre)) {
        for (var k = 0; k < post.length; k++) {
          var expansion = pre + "{" + m.body + "}" + post[k];
          expansions.push(expansion);
        }
      } else {
        var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
        var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
        var isSequence = isNumericSequence || isAlphaSequence;
        var isOptions = m.body.indexOf(",") >= 0;
        if (!isSequence && !isOptions) {
          if (m.post.match(/,(?!,).*\}/)) {
            str = m.pre + "{" + m.body + escClose + m.post;
            return expand2(str);
          }
          return [str];
        }
        var n;
        if (isSequence) {
          n = m.body.split(/\.\./);
        } else {
          n = parseCommaParts(m.body);
          if (n.length === 1) {
            n = expand2(n[0], false).map(embrace);
            if (n.length === 1) {
              return post.map(function(p) {
                return m.pre + n[0] + p;
              });
            }
          }
        }
        var N;
        if (isSequence) {
          var x = numeric(n[0]);
          var y = numeric(n[1]);
          var width = Math.max(n[0].length, n[1].length);
          var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
          var test = lte;
          var reverse = y < x;
          if (reverse) {
            incr *= -1;
            test = gte;
          }
          var pad = n.some(isPadded);
          N = [];
          for (var i = x; test(i, y); i += incr) {
            var c;
            if (isAlphaSequence) {
              c = String.fromCharCode(i);
              if (c === "\\")
                c = "";
            } else {
              c = String(i);
              if (pad) {
                var need = width - c.length;
                if (need > 0) {
                  var z = new Array(need + 1).join("0");
                  if (i < 0)
                    c = "-" + z + c.slice(1);
                  else
                    c = z + c;
                }
              }
            }
            N.push(c);
          }
        } else {
          N = [];
          for (var j = 0; j < n.length; j++) {
            N.push.apply(N, expand2(n[j], false));
          }
        }
        for (var j = 0; j < N.length; j++) {
          for (var k = 0; k < post.length; k++) {
            var expansion = pre + N[j] + post[k];
            if (!isTop || isSequence || expansion)
              expansions.push(expansion);
          }
        }
      }
      return expansions;
    }
  }
});

// node_modules/duplexer/index.js
var require_duplexer = __commonJS({
  "node_modules/duplexer/index.js"(exports, module) {
    var Stream3 = __require("stream");
    var writeMethods = ["write", "end", "destroy"];
    var readMethods = ["resume", "pause"];
    var readEvents = ["data", "close"];
    var slice = Array.prototype.slice;
    module.exports = duplex;
    function forEach(arr, fn) {
      if (arr.forEach) {
        return arr.forEach(fn);
      }
      for (var i = 0; i < arr.length; i++) {
        fn(arr[i], i);
      }
    }
    function duplex(writer, reader) {
      var stream2 = new Stream3();
      var ended = false;
      forEach(writeMethods, proxyWriter);
      forEach(readMethods, proxyReader);
      forEach(readEvents, proxyStream);
      reader.on("end", handleEnd);
      writer.on("drain", function() {
        stream2.emit("drain");
      });
      writer.on("error", reemit);
      reader.on("error", reemit);
      stream2.writable = writer.writable;
      stream2.readable = reader.readable;
      return stream2;
      function proxyWriter(methodName) {
        stream2[methodName] = method;
        function method() {
          return writer[methodName].apply(writer, arguments);
        }
      }
      function proxyReader(methodName) {
        stream2[methodName] = method;
        function method() {
          stream2.emit(methodName);
          var func = reader[methodName];
          if (func) {
            return func.apply(reader, arguments);
          }
          reader.emit(methodName);
        }
      }
      function proxyStream(methodName) {
        reader.on(methodName, reemit2);
        function reemit2() {
          var args2 = slice.call(arguments);
          args2.unshift(methodName);
          stream2.emit.apply(stream2, args2);
        }
      }
      function handleEnd() {
        if (ended) {
          return;
        }
        ended = true;
        var args2 = slice.call(arguments);
        args2.unshift("end");
        stream2.emit.apply(stream2, args2);
      }
      function reemit(err) {
        stream2.emit("error", err);
      }
    }
  }
});

// node_modules/gzip-size/index.js
var require_gzip_size = __commonJS({
  "node_modules/gzip-size/index.js"(exports, module) {
    "use strict";
    var fs10 = __require("fs");
    var stream2 = __require("stream");
    var zlib = __require("zlib");
    var { promisify } = __require("util");
    var duplexer = require_duplexer();
    var getOptions = (options3) => ({ level: 9, ...options3 });
    var gzip = promisify(zlib.gzip);
    module.exports = async (input, options3) => {
      if (!input) {
        return 0;
      }
      const data = await gzip(input, getOptions(options3));
      return data.length;
    };
    module.exports.sync = (input, options3) => zlib.gzipSync(input, getOptions(options3)).length;
    module.exports.stream = (options3) => {
      const input = new stream2.PassThrough();
      const output = new stream2.PassThrough();
      const wrapper = duplexer(input, output);
      let gzipSize2 = 0;
      const gzip2 = zlib.createGzip(getOptions(options3)).on("data", (buf) => {
        gzipSize2 += buf.length;
      }).on("error", () => {
        wrapper.gzipSize = 0;
      }).on("end", () => {
        wrapper.gzipSize = gzipSize2;
        wrapper.emit("gzip-size", gzipSize2);
        output.end();
      });
      input.pipe(gzip2);
      input.pipe(output, { end: false });
      return wrapper;
    };
    module.exports.file = (path14, options3) => {
      return new Promise((resolve2, reject) => {
        const stream3 = fs10.createReadStream(path14);
        stream3.on("error", reject);
        const gzipStream = stream3.pipe(module.exports.stream(options3));
        gzipStream.on("error", reject);
        gzipStream.on("gzip-size", resolve2);
      });
    };
    module.exports.fileSync = (path14, options3) => module.exports.sync(fs10.readFileSync(path14), options3);
  }
});

// node_modules/mkdirp/lib/opts-arg.js
var require_opts_arg = __commonJS({
  "node_modules/mkdirp/lib/opts-arg.js"(exports, module) {
    var { promisify } = __require("util");
    var fs10 = __require("fs");
    var optsArg = (opts) => {
      if (!opts)
        opts = { mode: 511, fs: fs10 };
      else if (typeof opts === "object")
        opts = { mode: 511, fs: fs10, ...opts };
      else if (typeof opts === "number")
        opts = { mode: opts, fs: fs10 };
      else if (typeof opts === "string")
        opts = { mode: parseInt(opts, 8), fs: fs10 };
      else
        throw new TypeError("invalid options argument");
      opts.mkdir = opts.mkdir || opts.fs.mkdir || fs10.mkdir;
      opts.mkdirAsync = promisify(opts.mkdir);
      opts.stat = opts.stat || opts.fs.stat || fs10.stat;
      opts.statAsync = promisify(opts.stat);
      opts.statSync = opts.statSync || opts.fs.statSync || fs10.statSync;
      opts.mkdirSync = opts.mkdirSync || opts.fs.mkdirSync || fs10.mkdirSync;
      return opts;
    };
    module.exports = optsArg;
  }
});

// node_modules/mkdirp/lib/path-arg.js
var require_path_arg = __commonJS({
  "node_modules/mkdirp/lib/path-arg.js"(exports, module) {
    var platform = process.env.__TESTING_MKDIRP_PLATFORM__ || process.platform;
    var { resolve: resolve2, parse: parse4 } = __require("path");
    var pathArg = (path14) => {
      if (/\0/.test(path14)) {
        throw Object.assign(
          new TypeError("path must be a string without null bytes"),
          {
            path: path14,
            code: "ERR_INVALID_ARG_VALUE"
          }
        );
      }
      path14 = resolve2(path14);
      if (platform === "win32") {
        const badWinChars = /[*|"<>?:]/;
        const { root } = parse4(path14);
        if (badWinChars.test(path14.substr(root.length))) {
          throw Object.assign(new Error("Illegal characters in path."), {
            path: path14,
            code: "EINVAL"
          });
        }
      }
      return path14;
    };
    module.exports = pathArg;
  }
});

// node_modules/mkdirp/lib/find-made.js
var require_find_made = __commonJS({
  "node_modules/mkdirp/lib/find-made.js"(exports, module) {
    var { dirname } = __require("path");
    var findMade = (opts, parent, path14 = void 0) => {
      if (path14 === parent)
        return Promise.resolve();
      return opts.statAsync(parent).then(
        (st) => st.isDirectory() ? path14 : void 0,
        // will fail later
        (er) => er.code === "ENOENT" ? findMade(opts, dirname(parent), parent) : void 0
      );
    };
    var findMadeSync = (opts, parent, path14 = void 0) => {
      if (path14 === parent)
        return void 0;
      try {
        return opts.statSync(parent).isDirectory() ? path14 : void 0;
      } catch (er) {
        return er.code === "ENOENT" ? findMadeSync(opts, dirname(parent), parent) : void 0;
      }
    };
    module.exports = { findMade, findMadeSync };
  }
});

// node_modules/mkdirp/lib/mkdirp-manual.js
var require_mkdirp_manual = __commonJS({
  "node_modules/mkdirp/lib/mkdirp-manual.js"(exports, module) {
    var { dirname } = __require("path");
    var mkdirpManual = (path14, opts, made) => {
      opts.recursive = false;
      const parent = dirname(path14);
      if (parent === path14) {
        return opts.mkdirAsync(path14, opts).catch((er) => {
          if (er.code !== "EISDIR")
            throw er;
        });
      }
      return opts.mkdirAsync(path14, opts).then(() => made || path14, (er) => {
        if (er.code === "ENOENT")
          return mkdirpManual(parent, opts).then((made2) => mkdirpManual(path14, opts, made2));
        if (er.code !== "EEXIST" && er.code !== "EROFS")
          throw er;
        return opts.statAsync(path14).then((st) => {
          if (st.isDirectory())
            return made;
          else
            throw er;
        }, () => {
          throw er;
        });
      });
    };
    var mkdirpManualSync = (path14, opts, made) => {
      const parent = dirname(path14);
      opts.recursive = false;
      if (parent === path14) {
        try {
          return opts.mkdirSync(path14, opts);
        } catch (er) {
          if (er.code !== "EISDIR")
            throw er;
          else
            return;
        }
      }
      try {
        opts.mkdirSync(path14, opts);
        return made || path14;
      } catch (er) {
        if (er.code === "ENOENT")
          return mkdirpManualSync(path14, opts, mkdirpManualSync(parent, opts, made));
        if (er.code !== "EEXIST" && er.code !== "EROFS")
          throw er;
        try {
          if (!opts.statSync(path14).isDirectory())
            throw er;
        } catch (_) {
          throw er;
        }
      }
    };
    module.exports = { mkdirpManual, mkdirpManualSync };
  }
});

// node_modules/mkdirp/lib/mkdirp-native.js
var require_mkdirp_native = __commonJS({
  "node_modules/mkdirp/lib/mkdirp-native.js"(exports, module) {
    var { dirname } = __require("path");
    var { findMade, findMadeSync } = require_find_made();
    var { mkdirpManual, mkdirpManualSync } = require_mkdirp_manual();
    var mkdirpNative = (path14, opts) => {
      opts.recursive = true;
      const parent = dirname(path14);
      if (parent === path14)
        return opts.mkdirAsync(path14, opts);
      return findMade(opts, path14).then((made) => opts.mkdirAsync(path14, opts).then(() => made).catch((er) => {
        if (er.code === "ENOENT")
          return mkdirpManual(path14, opts);
        else
          throw er;
      }));
    };
    var mkdirpNativeSync = (path14, opts) => {
      opts.recursive = true;
      const parent = dirname(path14);
      if (parent === path14)
        return opts.mkdirSync(path14, opts);
      const made = findMadeSync(opts, path14);
      try {
        opts.mkdirSync(path14, opts);
        return made;
      } catch (er) {
        if (er.code === "ENOENT")
          return mkdirpManualSync(path14, opts);
        else
          throw er;
      }
    };
    module.exports = { mkdirpNative, mkdirpNativeSync };
  }
});

// node_modules/mkdirp/lib/use-native.js
var require_use_native = __commonJS({
  "node_modules/mkdirp/lib/use-native.js"(exports, module) {
    var fs10 = __require("fs");
    var version = process.env.__TESTING_MKDIRP_NODE_VERSION__ || process.version;
    var versArr = version.replace(/^v/, "").split(".");
    var hasNative = +versArr[0] > 10 || +versArr[0] === 10 && +versArr[1] >= 12;
    var useNative = !hasNative ? () => false : (opts) => opts.mkdir === fs10.mkdir;
    var useNativeSync = !hasNative ? () => false : (opts) => opts.mkdirSync === fs10.mkdirSync;
    module.exports = { useNative, useNativeSync };
  }
});

// node_modules/mkdirp/index.js
var require_mkdirp = __commonJS({
  "node_modules/mkdirp/index.js"(exports, module) {
    var optsArg = require_opts_arg();
    var pathArg = require_path_arg();
    var { mkdirpNative, mkdirpNativeSync } = require_mkdirp_native();
    var { mkdirpManual, mkdirpManualSync } = require_mkdirp_manual();
    var { useNative, useNativeSync } = require_use_native();
    var mkdirp2 = (path14, opts) => {
      path14 = pathArg(path14);
      opts = optsArg(opts);
      return useNative(opts) ? mkdirpNative(path14, opts) : mkdirpManual(path14, opts);
    };
    var mkdirpSync = (path14, opts) => {
      path14 = pathArg(path14);
      opts = optsArg(opts);
      return useNativeSync(opts) ? mkdirpNativeSync(path14, opts) : mkdirpManualSync(path14, opts);
    };
    mkdirp2.sync = mkdirpSync;
    mkdirp2.native = (path14, opts) => mkdirpNative(pathArg(path14), optsArg(opts));
    mkdirp2.manual = (path14, opts) => mkdirpManual(pathArg(path14), optsArg(opts));
    mkdirp2.nativeSync = (path14, opts) => mkdirpNativeSync(pathArg(path14), optsArg(opts));
    mkdirp2.manualSync = (path14, opts) => mkdirpManualSync(pathArg(path14), optsArg(opts));
    module.exports = mkdirp2;
  }
});

// node_modules/open-next/dist/build.js
import cp from "node:child_process";
import fs9, { readFileSync as readFileSync6 } from "node:fs";
import { createRequire as topLevelCreateRequire4 } from "node:module";
import os2 from "node:os";
import path13 from "node:path";
import url5 from "node:url";

// node_modules/open-next/dist/adapters/binary.js
var commonBinaryMimeTypes = /* @__PURE__ */ new Set([
  "application/octet-stream",
  // Docs
  "application/epub+zip",
  "application/msword",
  "application/pdf",
  "application/rtf",
  "application/vnd.amazon.ebook",
  "application/vnd.ms-excel",
  "application/vnd.ms-powerpoint",
  "application/vnd.openxmlformats-officedocument.presentationml.presentation",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  // Fonts
  "font/otf",
  "font/woff",
  "font/woff2",
  // Images
  "image/bmp",
  "image/gif",
  "image/jpeg",
  "image/png",
  "image/tiff",
  "image/vnd.microsoft.icon",
  "image/webp",
  // Audio
  "audio/3gpp",
  "audio/aac",
  "audio/basic",
  "audio/mpeg",
  "audio/ogg",
  "audio/wavaudio/webm",
  "audio/x-aiff",
  "audio/x-midi",
  "audio/x-wav",
  // Video
  "video/3gpp",
  "video/mp2t",
  "video/mpeg",
  "video/ogg",
  "video/quicktime",
  "video/webm",
  "video/x-msvideo",
  // Archives
  "application/java-archive",
  "application/vnd.apple.installer+xml",
  "application/x-7z-compressed",
  "application/x-apple-diskimage",
  "application/x-bzip",
  "application/x-bzip2",
  "application/x-gzip",
  "application/x-java-archive",
  "application/x-rar-compressed",
  "application/x-tar",
  "application/x-zip",
  "application/zip"
]);
function isBinaryContentType(contentType) {
  if (!contentType)
    return false;
  const value = contentType?.split(";")[0] ?? "";
  return commonBinaryMimeTypes.has(value);
}

// node_modules/open-next/dist/build/compileConfig.js
var import_esbuild = __toESM(require_main(), 1);
import fs from "node:fs";
import path from "node:path";

// node_modules/open-next/node_modules/chalk/source/vendor/ansi-styles/index.js
var ANSI_BACKGROUND_OFFSET = 10;
var wrapAnsi16 = (offset = 0) => (code) => `\x1B[${code + offset}m`;
var wrapAnsi256 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`;
var wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
var styles = {
  modifier: {
    reset: [0, 0],
    // 21 isn't widely supported and 22 does the same thing
    bold: [1, 22],
    dim: [2, 22],
    italic: [3, 23],
    underline: [4, 24],
    overline: [53, 55],
    inverse: [7, 27],
    hidden: [8, 28],
    strikethrough: [9, 29]
  },
  color: {
    black: [30, 39],
    red: [31, 39],
    green: [32, 39],
    yellow: [33, 39],
    blue: [34, 39],
    magenta: [35, 39],
    cyan: [36, 39],
    white: [37, 39],
    // Bright color
    blackBright: [90, 39],
    gray: [90, 39],
    // Alias of `blackBright`
    grey: [90, 39],
    // Alias of `blackBright`
    redBright: [91, 39],
    greenBright: [92, 39],
    yellowBright: [93, 39],
    blueBright: [94, 39],
    magentaBright: [95, 39],
    cyanBright: [96, 39],
    whiteBright: [97, 39]
  },
  bgColor: {
    bgBlack: [40, 49],
    bgRed: [41, 49],
    bgGreen: [42, 49],
    bgYellow: [43, 49],
    bgBlue: [44, 49],
    bgMagenta: [45, 49],
    bgCyan: [46, 49],
    bgWhite: [47, 49],
    // Bright color
    bgBlackBright: [100, 49],
    bgGray: [100, 49],
    // Alias of `bgBlackBright`
    bgGrey: [100, 49],
    // Alias of `bgBlackBright`
    bgRedBright: [101, 49],
    bgGreenBright: [102, 49],
    bgYellowBright: [103, 49],
    bgBlueBright: [104, 49],
    bgMagentaBright: [105, 49],
    bgCyanBright: [106, 49],
    bgWhiteBright: [107, 49]
  }
};
var modifierNames = Object.keys(styles.modifier);
var foregroundColorNames = Object.keys(styles.color);
var backgroundColorNames = Object.keys(styles.bgColor);
var colorNames = [...foregroundColorNames, ...backgroundColorNames];
function assembleStyles() {
  const codes = /* @__PURE__ */ new Map();
  for (const [groupName, group] of Object.entries(styles)) {
    for (const [styleName, style] of Object.entries(group)) {
      styles[styleName] = {
        open: `\x1B[${style[0]}m`,
        close: `\x1B[${style[1]}m`
      };
      group[styleName] = styles[styleName];
      codes.set(style[0], style[1]);
    }
    Object.defineProperty(styles, groupName, {
      value: group,
      enumerable: false
    });
  }
  Object.defineProperty(styles, "codes", {
    value: codes,
    enumerable: false
  });
  styles.color.close = "\x1B[39m";
  styles.bgColor.close = "\x1B[49m";
  styles.color.ansi = wrapAnsi16();
  styles.color.ansi256 = wrapAnsi256();
  styles.color.ansi16m = wrapAnsi16m();
  styles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);
  styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
  styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);
  Object.defineProperties(styles, {
    rgbToAnsi256: {
      value(red, green, blue) {
        if (red === green && green === blue) {
          if (red < 8) {
            return 16;
          }
          if (red > 248) {
            return 231;
          }
          return Math.round((red - 8) / 247 * 24) + 232;
        }
        return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);
      },
      enumerable: false
    },
    hexToRgb: {
      value(hex) {
        const matches = /[a-f\d]{6}|[a-f\d]{3}/i.exec(hex.toString(16));
        if (!matches) {
          return [0, 0, 0];
        }
        let [colorString] = matches;
        if (colorString.length === 3) {
          colorString = [...colorString].map((character) => character + character).join("");
        }
        const integer = Number.parseInt(colorString, 16);
        return [
          /* eslint-disable no-bitwise */
          integer >> 16 & 255,
          integer >> 8 & 255,
          integer & 255
          /* eslint-enable no-bitwise */
        ];
      },
      enumerable: false
    },
    hexToAnsi256: {
      value: (hex) => styles.rgbToAnsi256(...styles.hexToRgb(hex)),
      enumerable: false
    },
    ansi256ToAnsi: {
      value(code) {
        if (code < 8) {
          return 30 + code;
        }
        if (code < 16) {
          return 90 + (code - 8);
        }
        let red;
        let green;
        let blue;
        if (code >= 232) {
          red = ((code - 232) * 10 + 8) / 255;
          green = red;
          blue = red;
        } else {
          code -= 16;
          const remainder = code % 36;
          red = Math.floor(code / 36) / 5;
          green = Math.floor(remainder / 6) / 5;
          blue = remainder % 6 / 5;
        }
        const value = Math.max(red, green, blue) * 2;
        if (value === 0) {
          return 30;
        }
        let result = 30 + (Math.round(blue) << 2 | Math.round(green) << 1 | Math.round(red));
        if (value === 2) {
          result += 60;
        }
        return result;
      },
      enumerable: false
    },
    rgbToAnsi: {
      value: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),
      enumerable: false
    },
    hexToAnsi: {
      value: (hex) => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),
      enumerable: false
    }
  });
  return styles;
}
var ansiStyles = assembleStyles();
var ansi_styles_default = ansiStyles;

// node_modules/open-next/node_modules/chalk/source/vendor/supports-color/index.js
import process2 from "node:process";
import os from "node:os";
import tty from "node:tty";
function hasFlag(flag, argv = globalThis.Deno ? globalThis.Deno.args : process2.argv) {
  const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
  const position = argv.indexOf(prefix + flag);
  const terminatorPosition = argv.indexOf("--");
  return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
}
var { env } = process2;
var flagForceColor;
if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
  flagForceColor = 0;
} else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
  flagForceColor = 1;
}
function envForceColor() {
  if ("FORCE_COLOR" in env) {
    if (env.FORCE_COLOR === "true") {
      return 1;
    }
    if (env.FORCE_COLOR === "false") {
      return 0;
    }
    return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
  }
}
function translateLevel(level) {
  if (level === 0) {
    return false;
  }
  return {
    level,
    hasBasic: true,
    has256: level >= 2,
    has16m: level >= 3
  };
}
function _supportsColor(haveStream, { streamIsTTY, sniffFlags = true } = {}) {
  const noFlagForceColor = envForceColor();
  if (noFlagForceColor !== void 0) {
    flagForceColor = noFlagForceColor;
  }
  const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;
  if (forceColor === 0) {
    return 0;
  }
  if (sniffFlags) {
    if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
      return 3;
    }
    if (hasFlag("color=256")) {
      return 2;
    }
  }
  if ("TF_BUILD" in env && "AGENT_NAME" in env) {
    return 1;
  }
  if (haveStream && !streamIsTTY && forceColor === void 0) {
    return 0;
  }
  const min = forceColor || 0;
  if (env.TERM === "dumb") {
    return min;
  }
  if (process2.platform === "win32") {
    const osRelease = os.release().split(".");
    if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
      return Number(osRelease[2]) >= 14931 ? 3 : 2;
    }
    return 1;
  }
  if ("CI" in env) {
    if (["GITHUB_ACTIONS", "GITEA_ACTIONS", "CIRCLECI"].some((key) => key in env)) {
      return 3;
    }
    if (["TRAVIS", "APPVEYOR", "GITLAB_CI", "BUILDKITE", "DRONE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
      return 1;
    }
    return min;
  }
  if ("TEAMCITY_VERSION" in env) {
    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
  }
  if (env.COLORTERM === "truecolor") {
    return 3;
  }
  if (env.TERM === "xterm-kitty") {
    return 3;
  }
  if (env.TERM === "xterm-ghostty") {
    return 3;
  }
  if (env.TERM === "wezterm") {
    return 3;
  }
  if ("TERM_PROGRAM" in env) {
    const version = Number.parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
    switch (env.TERM_PROGRAM) {
      case "iTerm.app": {
        return version >= 3 ? 3 : 2;
      }
      case "Apple_Terminal": {
        return 2;
      }
    }
  }
  if (/-256(color)?$/i.test(env.TERM)) {
    return 2;
  }
  if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
    return 1;
  }
  if ("COLORTERM" in env) {
    return 1;
  }
  return min;
}
function createSupportsColor(stream2, options3 = {}) {
  const level = _supportsColor(stream2, {
    streamIsTTY: stream2 && stream2.isTTY,
    ...options3
  });
  return translateLevel(level);
}
var supportsColor = {
  stdout: createSupportsColor({ isTTY: tty.isatty(1) }),
  stderr: createSupportsColor({ isTTY: tty.isatty(2) })
};
var supports_color_default = supportsColor;

// node_modules/open-next/node_modules/chalk/source/utilities.js
function stringReplaceAll(string, substring, replacer) {
  let index = string.indexOf(substring);
  if (index === -1) {
    return string;
  }
  const substringLength = substring.length;
  let endIndex = 0;
  let returnValue = "";
  do {
    returnValue += string.slice(endIndex, index) + substring + replacer;
    endIndex = index + substringLength;
    index = string.indexOf(substring, endIndex);
  } while (index !== -1);
  returnValue += string.slice(endIndex);
  return returnValue;
}
function stringEncaseCRLFWithFirstIndex(string, prefix, postfix, index) {
  let endIndex = 0;
  let returnValue = "";
  do {
    const gotCR = string[index - 1] === "\r";
    returnValue += string.slice(endIndex, gotCR ? index - 1 : index) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
    endIndex = index + 1;
    index = string.indexOf("\n", endIndex);
  } while (index !== -1);
  returnValue += string.slice(endIndex);
  return returnValue;
}

// node_modules/open-next/node_modules/chalk/source/index.js
var { stdout: stdoutColor, stderr: stderrColor } = supports_color_default;
var GENERATOR = Symbol("GENERATOR");
var STYLER = Symbol("STYLER");
var IS_EMPTY = Symbol("IS_EMPTY");
var levelMapping = [
  "ansi",
  "ansi",
  "ansi256",
  "ansi16m"
];
var styles2 = /* @__PURE__ */ Object.create(null);
var applyOptions = (object, options3 = {}) => {
  if (options3.level && !(Number.isInteger(options3.level) && options3.level >= 0 && options3.level <= 3)) {
    throw new Error("The `level` option should be an integer from 0 to 3");
  }
  const colorLevel = stdoutColor ? stdoutColor.level : 0;
  object.level = options3.level === void 0 ? colorLevel : options3.level;
};
var chalkFactory = (options3) => {
  const chalk2 = (...strings) => strings.join(" ");
  applyOptions(chalk2, options3);
  Object.setPrototypeOf(chalk2, createChalk.prototype);
  return chalk2;
};
function createChalk(options3) {
  return chalkFactory(options3);
}
Object.setPrototypeOf(createChalk.prototype, Function.prototype);
for (const [styleName, style] of Object.entries(ansi_styles_default)) {
  styles2[styleName] = {
    get() {
      const builder = createBuilder(this, createStyler(style.open, style.close, this[STYLER]), this[IS_EMPTY]);
      Object.defineProperty(this, styleName, { value: builder });
      return builder;
    }
  };
}
styles2.visible = {
  get() {
    const builder = createBuilder(this, this[STYLER], true);
    Object.defineProperty(this, "visible", { value: builder });
    return builder;
  }
};
var getModelAnsi = (model, level, type, ...arguments_) => {
  if (model === "rgb") {
    if (level === "ansi16m") {
      return ansi_styles_default[type].ansi16m(...arguments_);
    }
    if (level === "ansi256") {
      return ansi_styles_default[type].ansi256(ansi_styles_default.rgbToAnsi256(...arguments_));
    }
    return ansi_styles_default[type].ansi(ansi_styles_default.rgbToAnsi(...arguments_));
  }
  if (model === "hex") {
    return getModelAnsi("rgb", level, type, ...ansi_styles_default.hexToRgb(...arguments_));
  }
  return ansi_styles_default[type][model](...arguments_);
};
var usedModels = ["rgb", "hex", "ansi256"];
for (const model of usedModels) {
  styles2[model] = {
    get() {
      const { level } = this;
      return function(...arguments_) {
        const styler = createStyler(getModelAnsi(model, levelMapping[level], "color", ...arguments_), ansi_styles_default.color.close, this[STYLER]);
        return createBuilder(this, styler, this[IS_EMPTY]);
      };
    }
  };
  const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
  styles2[bgModel] = {
    get() {
      const { level } = this;
      return function(...arguments_) {
        const styler = createStyler(getModelAnsi(model, levelMapping[level], "bgColor", ...arguments_), ansi_styles_default.bgColor.close, this[STYLER]);
        return createBuilder(this, styler, this[IS_EMPTY]);
      };
    }
  };
}
var proto = Object.defineProperties(() => {
}, {
  ...styles2,
  level: {
    enumerable: true,
    get() {
      return this[GENERATOR].level;
    },
    set(level) {
      this[GENERATOR].level = level;
    }
  }
});
var createStyler = (open, close, parent) => {
  let openAll;
  let closeAll;
  if (parent === void 0) {
    openAll = open;
    closeAll = close;
  } else {
    openAll = parent.openAll + open;
    closeAll = close + parent.closeAll;
  }
  return {
    open,
    close,
    openAll,
    closeAll,
    parent
  };
};
var createBuilder = (self2, _styler, _isEmpty) => {
  const builder = (...arguments_) => applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
  Object.setPrototypeOf(builder, proto);
  builder[GENERATOR] = self2;
  builder[STYLER] = _styler;
  builder[IS_EMPTY] = _isEmpty;
  return builder;
};
var applyStyle = (self2, string) => {
  if (self2.level <= 0 || !string) {
    return self2[IS_EMPTY] ? "" : string;
  }
  let styler = self2[STYLER];
  if (styler === void 0) {
    return string;
  }
  const { openAll, closeAll } = styler;
  if (string.includes("\x1B")) {
    while (styler !== void 0) {
      string = stringReplaceAll(string, styler.close, styler.open);
      styler = styler.parent;
    }
  }
  const lfIndex = string.indexOf("\n");
  if (lfIndex !== -1) {
    string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
  }
  return openAll + string + closeAll;
};
Object.defineProperties(createChalk.prototype, styles2);
var chalk = createChalk();
var chalkStderr = createChalk({ level: stderrColor ? stderrColor.level : 0 });
var source_default = chalk;

// node_modules/open-next/dist/logger.js
var logLevel = "info";
var logger_default = {
  setLevel: (level) => logLevel = level,
  debug: (...args2) => {
    if (logLevel !== "debug")
      return;
    console.log(source_default.magenta("DEBUG"), ...args2);
  },
  info: console.log,
  warn: (...args2) => console.warn(source_default.yellow("WARN"), ...args2),
  error: (...args2) => console.error(source_default.red("ERROR"), ...args2)
};

// node_modules/open-next/dist/build/compileConfig.js
function compileOpenNextConfigNode(tempDir, openNextConfigPath, nodeExternals) {
  const sourcePath = path.join(process.cwd(), openNextConfigPath ?? "open-next.config.ts");
  const outputPath = path.join(tempDir, "open-next.config.mjs");
  if (!fs.existsSync(sourcePath)) {
    logger_default.debug("Cannot find open-next.config.ts. Using default config.");
    fs.writeFileSync(outputPath, [
      "var config = { default: { } };",
      "var open_next_config_default = config;",
      "export { open_next_config_default as default };"
    ].join("\n"));
  } else {
    (0, import_esbuild.buildSync)({
      entryPoints: [sourcePath],
      outfile: outputPath,
      bundle: true,
      format: "esm",
      target: ["node18"],
      external: nodeExternals ? nodeExternals.split(",") : [],
      platform: "node",
      banner: {
        js: [
          "import { createRequire as topLevelCreateRequire } from 'module';",
          "const require = topLevelCreateRequire(import.meta.url);",
          "import bannerUrl from 'url';",
          "const __dirname = bannerUrl.fileURLToPath(new URL('.', import.meta.url));"
        ].join("")
      }
    });
  }
  return outputPath;
}
function compileOpenNextConfigEdge(tempDir, config2, openNextConfigPath) {
  const sourcePath = path.join(process.cwd(), openNextConfigPath ?? "open-next.config.ts");
  const outputPath = path.join(tempDir, "open-next.config.edge.mjs");
  const usesEdgeRuntime = config2.middleware?.external || Object.values(config2.functions || {}).some((fn) => fn.runtime === "edge");
  if (!usesEdgeRuntime) {
    logger_default.debug("No edge runtime found in the open-next.config.ts. Using default config.");
  } else {
    logger_default.info("Compiling open-next.config.ts for edge runtime.", outputPath);
    (0, import_esbuild.buildSync)({
      entryPoints: [sourcePath],
      outfile: outputPath,
      bundle: true,
      format: "esm",
      target: ["es2020"],
      conditions: ["worker", "browser"],
      platform: "browser",
      external: config2.edgeExternals ?? []
    });
    logger_default.info("Compiled open-next.config.ts for edge runtime.");
  }
}

// node_modules/open-next/dist/build/createServerBundle.js
import { existsSync as existsSync3 } from "node:fs";
import { createRequire as topLevelCreateRequire3 } from "node:module";
import fs7 from "fs";
import path11 from "path";
import url4 from "url";

// node_modules/open-next/dist/minimize-js.js
import fs3 from "node:fs/promises";
import path4 from "node:path";

// node_modules/@node-minify/core/dist/index.mjs
import path3 from "path";

// node_modules/@node-minify/core/node_modules/minimatch/dist/mjs/index.js
var import_brace_expansion = __toESM(require_brace_expansion(), 1);

// node_modules/@node-minify/core/node_modules/minimatch/dist/mjs/assert-valid-pattern.js
var MAX_PATTERN_LENGTH = 1024 * 64;
var assertValidPattern = (pattern) => {
  if (typeof pattern !== "string") {
    throw new TypeError("invalid pattern");
  }
  if (pattern.length > MAX_PATTERN_LENGTH) {
    throw new TypeError("pattern is too long");
  }
};

// node_modules/@node-minify/core/node_modules/minimatch/dist/mjs/brace-expressions.js
var posixClasses = {
  "[:alnum:]": ["\\p{L}\\p{Nl}\\p{Nd}", true],
  "[:alpha:]": ["\\p{L}\\p{Nl}", true],
  "[:ascii:]": ["\\x00-\\x7f", false],
  "[:blank:]": ["\\p{Zs}\\t", true],
  "[:cntrl:]": ["\\p{Cc}", true],
  "[:digit:]": ["\\p{Nd}", true],
  "[:graph:]": ["\\p{Z}\\p{C}", true, true],
  "[:lower:]": ["\\p{Ll}", true],
  "[:print:]": ["\\p{C}", true],
  "[:punct:]": ["\\p{P}", true],
  "[:space:]": ["\\p{Z}\\t\\r\\n\\v\\f", true],
  "[:upper:]": ["\\p{Lu}", true],
  "[:word:]": ["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}", true],
  "[:xdigit:]": ["A-Fa-f0-9", false]
};
var braceEscape = (s) => s.replace(/[[\]\\-]/g, "\\$&");
var regexpEscape = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
var rangesToString = (ranges) => ranges.join("");
var parseClass = (glob2, position) => {
  const pos = position;
  if (glob2.charAt(pos) !== "[") {
    throw new Error("not in a brace expression");
  }
  const ranges = [];
  const negs = [];
  let i = pos + 1;
  let sawStart = false;
  let uflag = false;
  let escaping = false;
  let negate = false;
  let endPos = pos;
  let rangeStart = "";
  WHILE:
    while (i < glob2.length) {
      const c = glob2.charAt(i);
      if ((c === "!" || c === "^") && i === pos + 1) {
        negate = true;
        i++;
        continue;
      }
      if (c === "]" && sawStart && !escaping) {
        endPos = i + 1;
        break;
      }
      sawStart = true;
      if (c === "\\") {
        if (!escaping) {
          escaping = true;
          i++;
          continue;
        }
      }
      if (c === "[" && !escaping) {
        for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {
          if (glob2.startsWith(cls, i)) {
            if (rangeStart) {
              return ["$.", false, glob2.length - pos, true];
            }
            i += cls.length;
            if (neg)
              negs.push(unip);
            else
              ranges.push(unip);
            uflag = uflag || u;
            continue WHILE;
          }
        }
      }
      escaping = false;
      if (rangeStart) {
        if (c > rangeStart) {
          ranges.push(braceEscape(rangeStart) + "-" + braceEscape(c));
        } else if (c === rangeStart) {
          ranges.push(braceEscape(c));
        }
        rangeStart = "";
        i++;
        continue;
      }
      if (glob2.startsWith("-]", i + 1)) {
        ranges.push(braceEscape(c + "-"));
        i += 2;
        continue;
      }
      if (glob2.startsWith("-", i + 1)) {
        rangeStart = c;
        i += 2;
        continue;
      }
      ranges.push(braceEscape(c));
      i++;
    }
  if (endPos < i) {
    return ["", false, 0, false];
  }
  if (!ranges.length && !negs.length) {
    return ["$.", false, glob2.length - pos, true];
  }
  if (negs.length === 0 && ranges.length === 1 && /^\\?.$/.test(ranges[0]) && !negate) {
    const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0];
    return [regexpEscape(r), false, endPos - pos, false];
  }
  const sranges = "[" + (negate ? "^" : "") + rangesToString(ranges) + "]";
  const snegs = "[" + (negate ? "" : "^") + rangesToString(negs) + "]";
  const comb = ranges.length && negs.length ? "(" + sranges + "|" + snegs + ")" : ranges.length ? sranges : snegs;
  return [comb, uflag, endPos - pos, true];
};

// node_modules/@node-minify/core/node_modules/minimatch/dist/mjs/unescape.js
var unescape2 = (s, { windowsPathsNoEscape = false } = {}) => {
  return windowsPathsNoEscape ? s.replace(/\[([^\/\\])\]/g, "$1") : s.replace(/((?!\\).|^)\[([^\/\\])\]/g, "$1$2").replace(/\\([^\/])/g, "$1");
};

// node_modules/@node-minify/core/node_modules/minimatch/dist/mjs/ast.js
var types = /* @__PURE__ */ new Set(["!", "?", "+", "*", "@"]);
var isExtglobType = (c) => types.has(c);
var startNoTraversal = "(?!\\.\\.?(?:$|/))";
var startNoDot = "(?!\\.)";
var addPatternStart = /* @__PURE__ */ new Set(["[", "."]);
var justDots = /* @__PURE__ */ new Set(["..", "."]);
var reSpecials = new Set("().*{}+?[]^$\\!");
var regExpEscape = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
var qmark = "[^/]";
var star = qmark + "*?";
var starNoEmpty = qmark + "+?";
var AST = class _AST {
  type;
  #root;
  #hasMagic;
  #uflag = false;
  #parts = [];
  #parent;
  #parentIndex;
  #negs;
  #filledNegs = false;
  #options;
  #toString;
  // set to true if it's an extglob with no children
  // (which really means one child of '')
  #emptyExt = false;
  constructor(type, parent, options3 = {}) {
    this.type = type;
    if (type)
      this.#hasMagic = true;
    this.#parent = parent;
    this.#root = this.#parent ? this.#parent.#root : this;
    this.#options = this.#root === this ? options3 : this.#root.#options;
    this.#negs = this.#root === this ? [] : this.#root.#negs;
    if (type === "!" && !this.#root.#filledNegs)
      this.#negs.push(this);
    this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0;
  }
  get hasMagic() {
    if (this.#hasMagic !== void 0)
      return this.#hasMagic;
    for (const p of this.#parts) {
      if (typeof p === "string")
        continue;
      if (p.type || p.hasMagic)
        return this.#hasMagic = true;
    }
    return this.#hasMagic;
  }
  // reconstructs the pattern
  toString() {
    if (this.#toString !== void 0)
      return this.#toString;
    if (!this.type) {
      return this.#toString = this.#parts.map((p) => String(p)).join("");
    } else {
      return this.#toString = this.type + "(" + this.#parts.map((p) => String(p)).join("|") + ")";
    }
  }
  #fillNegs() {
    if (this !== this.#root)
      throw new Error("should only call on root");
    if (this.#filledNegs)
      return this;
    this.toString();
    this.#filledNegs = true;
    let n;
    while (n = this.#negs.pop()) {
      if (n.type !== "!")
        continue;
      let p = n;
      let pp = p.#parent;
      while (pp) {
        for (let i = p.#parentIndex + 1; !pp.type && i < pp.#parts.length; i++) {
          for (const part of n.#parts) {
            if (typeof part === "string") {
              throw new Error("string part in extglob AST??");
            }
            part.copyIn(pp.#parts[i]);
          }
        }
        p = pp;
        pp = p.#parent;
      }
    }
    return this;
  }
  push(...parts) {
    for (const p of parts) {
      if (p === "")
        continue;
      if (typeof p !== "string" && !(p instanceof _AST && p.#parent === this)) {
        throw new Error("invalid part: " + p);
      }
      this.#parts.push(p);
    }
  }
  toJSON() {
    const ret = this.type === null ? this.#parts.slice().map((p) => typeof p === "string" ? p : p.toJSON()) : [this.type, ...this.#parts.map((p) => p.toJSON())];
    if (this.isStart() && !this.type)
      ret.unshift([]);
    if (this.isEnd() && (this === this.#root || this.#root.#filledNegs && this.#parent?.type === "!")) {
      ret.push({});
    }
    return ret;
  }
  isStart() {
    if (this.#root === this)
      return true;
    if (!this.#parent?.isStart())
      return false;
    if (this.#parentIndex === 0)
      return true;
    const p = this.#parent;
    for (let i = 0; i < this.#parentIndex; i++) {
      const pp = p.#parts[i];
      if (!(pp instanceof _AST && pp.type === "!")) {
        return false;
      }
    }
    return true;
  }
  isEnd() {
    if (this.#root === this)
      return true;
    if (this.#parent?.type === "!")
      return true;
    if (!this.#parent?.isEnd())
      return false;
    if (!this.type)
      return this.#parent?.isEnd();
    const pl = this.#parent ? this.#parent.#parts.length : 0;
    return this.#parentIndex === pl - 1;
  }
  copyIn(part) {
    if (typeof part === "string")
      this.push(part);
    else
      this.push(part.clone(this));
  }
  clone(parent) {
    const c = new _AST(this.type, parent);
    for (const p of this.#parts) {
      c.copyIn(p);
    }
    return c;
  }
  static #parseAST(str, ast, pos, opt) {
    let escaping = false;
    let inBrace = false;
    let braceStart = -1;
    let braceNeg = false;
    if (ast.type === null) {
      let i2 = pos;
      let acc2 = "";
      while (i2 < str.length) {
        const c = str.charAt(i2++);
        if (escaping || c === "\\") {
          escaping = !escaping;
          acc2 += c;
          continue;
        }
        if (inBrace) {
          if (i2 === braceStart + 1) {
            if (c === "^" || c === "!") {
              braceNeg = true;
            }
          } else if (c === "]" && !(i2 === braceStart + 2 && braceNeg)) {
            inBrace = false;
          }
          acc2 += c;
          continue;
        } else if (c === "[") {
          inBrace = true;
          braceStart = i2;
          braceNeg = false;
          acc2 += c;
          continue;
        }
        if (!opt.noext && isExtglobType(c) && str.charAt(i2) === "(") {
          ast.push(acc2);
          acc2 = "";
          const ext2 = new _AST(c, ast);
          i2 = _AST.#parseAST(str, ext2, i2, opt);
          ast.push(ext2);
          continue;
        }
        acc2 += c;
      }
      ast.push(acc2);
      return i2;
    }
    let i = pos + 1;
    let part = new _AST(null, ast);
    const parts = [];
    let acc = "";
    while (i < str.length) {
      const c = str.charAt(i++);
      if (escaping || c === "\\") {
        escaping = !escaping;
        acc += c;
        continue;
      }
      if (inBrace) {
        if (i === braceStart + 1) {
          if (c === "^" || c === "!") {
            braceNeg = true;
          }
        } else if (c === "]" && !(i === braceStart + 2 && braceNeg)) {
          inBrace = false;
        }
        acc += c;
        continue;
      } else if (c === "[") {
        inBrace = true;
        braceStart = i;
        braceNeg = false;
        acc += c;
        continue;
      }
      if (isExtglobType(c) && str.charAt(i) === "(") {
        part.push(acc);
        acc = "";
        const ext2 = new _AST(c, part);
        part.push(ext2);
        i = _AST.#parseAST(str, ext2, i, opt);
        continue;
      }
      if (c === "|") {
        part.push(acc);
        acc = "";
        parts.push(part);
        part = new _AST(null, ast);
        continue;
      }
      if (c === ")") {
        if (acc === "" && ast.#parts.length === 0) {
          ast.#emptyExt = true;
        }
        part.push(acc);
        acc = "";
        ast.push(...parts, part);
        return i;
      }
      acc += c;
    }
    ast.type = null;
    ast.#hasMagic = void 0;
    ast.#parts = [str.substring(pos - 1)];
    return i;
  }
  static fromGlob(pattern, options3 = {}) {
    const ast = new _AST(null, void 0, options3);
    _AST.#parseAST(pattern, ast, 0, options3);
    return ast;
  }
  // returns the regular expression if there's magic, or the unescaped
  // string if not.
  toMMPattern() {
    if (this !== this.#root)
      return this.#root.toMMPattern();
    const glob2 = this.toString();
    const [re, body, hasMagic2, uflag] = this.toRegExpSource();
    const anyMagic = hasMagic2 || this.#hasMagic || this.#options.nocase && !this.#options.nocaseMagicOnly && glob2.toUpperCase() !== glob2.toLowerCase();
    if (!anyMagic) {
      return body;
    }
    const flags = (this.#options.nocase ? "i" : "") + (uflag ? "u" : "");
    return Object.assign(new RegExp(`^${re}$`, flags), {
      _src: re,
      _glob: glob2
    });
  }
  // returns the string match, the regexp source, whether there's magic
  // in the regexp (so a regular expression is required) and whether or
  // not the uflag is needed for the regular expression (for posix classes)
  // TODO: instead of injecting the start/end at this point, just return
  // the BODY of the regexp, along with the start/end portions suitable
  // for binding the start/end in either a joined full-path makeRe context
  // (where we bind to (^|/), or a standalone matchPart context (where
  // we bind to ^, and not /).  Otherwise slashes get duped!
  //
  // In part-matching mode, the start is:
  // - if not isStart: nothing
  // - if traversal possible, but not allowed: ^(?!\.\.?$)
  // - if dots allowed or not possible: ^
  // - if dots possible and not allowed: ^(?!\.)
  // end is:
  // - if not isEnd(): nothing
  // - else: $
  //
  // In full-path matching mode, we put the slash at the START of the
  // pattern, so start is:
  // - if first pattern: same as part-matching mode
  // - if not isStart(): nothing
  // - if traversal possible, but not allowed: /(?!\.\.?(?:$|/))
  // - if dots allowed or not possible: /
  // - if dots possible and not allowed: /(?!\.)
  // end is:
  // - if last pattern, same as part-matching mode
  // - else nothing
  //
  // Always put the (?:$|/) on negated tails, though, because that has to be
  // there to bind the end of the negated pattern portion, and it's easier to
  // just stick it in now rather than try to inject it later in the middle of
  // the pattern.
  //
  // We can just always return the same end, and leave it up to the caller
  // to know whether it's going to be used joined or in parts.
  // And, if the start is adjusted slightly, can do the same there:
  // - if not isStart: nothing
  // - if traversal possible, but not allowed: (?:/|^)(?!\.\.?$)
  // - if dots allowed or not possible: (?:/|^)
  // - if dots possible and not allowed: (?:/|^)(?!\.)
  //
  // But it's better to have a simpler binding without a conditional, for
  // performance, so probably better to return both start options.
  //
  // Then the caller just ignores the end if it's not the first pattern,
  // and the start always gets applied.
  //
  // But that's always going to be $ if it's the ending pattern, or nothing,
  // so the caller can just attach $ at the end of the pattern when building.
  //
  // So the todo is:
  // - better detect what kind of start is needed
  // - return both flavors of starting pattern
  // - attach $ at the end of the pattern when creating the actual RegExp
  //
  // Ah, but wait, no, that all only applies to the root when the first pattern
  // is not an extglob. If the first pattern IS an extglob, then we need all
  // that dot prevention biz to live in the extglob portions, because eg
  // +(*|.x*) can match .xy but not .yx.
  //
  // So, return the two flavors if it's #root and the first child is not an
  // AST, otherwise leave it to the child AST to handle it, and there,
  // use the (?:^|/) style of start binding.
  //
  // Even simplified further:
  // - Since the start for a join is eg /(?!\.) and the start for a part
  // is ^(?!\.), we can just prepend (?!\.) to the pattern (either root
  // or start or whatever) and prepend ^ or / at the Regexp construction.
  toRegExpSource() {
    if (this.#root === this)
      this.#fillNegs();
    if (!this.type) {
      const noEmpty = this.isStart() && this.isEnd();
      const src = this.#parts.map((p) => {
        const [re, _, hasMagic2, uflag] = typeof p === "string" ? _AST.#parseGlob(p, this.#hasMagic, noEmpty) : p.toRegExpSource();
        this.#hasMagic = this.#hasMagic || hasMagic2;
        this.#uflag = this.#uflag || uflag;
        return re;
      }).join("");
      let start2 = "";
      if (this.isStart()) {
        if (typeof this.#parts[0] === "string") {
          const dotTravAllowed = this.#parts.length === 1 && justDots.has(this.#parts[0]);
          if (!dotTravAllowed) {
            const aps = addPatternStart;
            const needNoTrav = (
              // dots are allowed, and the pattern starts with [ or .
              this.#options.dot && aps.has(src.charAt(0)) || // the pattern starts with \., and then [ or .
              src.startsWith("\\.") && aps.has(src.charAt(2)) || // the pattern starts with \.\., and then [ or .
              src.startsWith("\\.\\.") && aps.has(src.charAt(4))
            );
            const needNoDot = !this.#options.dot && aps.has(src.charAt(0));
            start2 = needNoTrav ? startNoTraversal : needNoDot ? startNoDot : "";
          }
        }
      }
      let end = "";
      if (this.isEnd() && this.#root.#filledNegs && this.#parent?.type === "!") {
        end = "(?:$|\\/)";
      }
      const final2 = start2 + src + end;
      return [
        final2,
        unescape2(src),
        this.#hasMagic = !!this.#hasMagic,
        this.#uflag
      ];
    }
    const start = this.type === "!" ? "(?:(?!(?:" : "(?:";
    const body = this.#parts.map((p) => {
      if (typeof p === "string") {
        throw new Error("string type in extglob ast??");
      }
      const [re, _, _hasMagic, uflag] = p.toRegExpSource();
      this.#uflag = this.#uflag || uflag;
      return re;
    }).filter((p) => !(this.isStart() && this.isEnd()) || !!p).join("|");
    if (this.isStart() && this.isEnd() && !body && this.type !== "!") {
      const s = this.toString();
      this.#parts = [s];
      this.type = null;
      this.#hasMagic = void 0;
      return [s, unescape2(this.toString()), false, false];
    }
    let final = "";
    if (this.type === "!" && this.#emptyExt) {
      final = (this.isStart() && !this.#options.dot ? startNoDot : "") + starNoEmpty;
    } else {
      const close = this.type === "!" ? (
        // !() must match something,but !(x) can match ''
        "))" + (this.isStart() && !this.#options.dot ? startNoDot : "") + star + ")"
      ) : this.type === "@" ? ")" : `)${this.type}`;
      final = start + body + close;
    }
    return [
      final,
      unescape2(body),
      this.#hasMagic = !!this.#hasMagic,
      this.#uflag
    ];
  }
  static #parseGlob(glob2, hasMagic2, noEmpty = false) {
    let escaping = false;
    let re = "";
    let uflag = false;
    for (let i = 0; i < glob2.length; i++) {
      const c = glob2.charAt(i);
      if (escaping) {
        escaping = false;
        re += (reSpecials.has(c) ? "\\" : "") + c;
        continue;
      }
      if (c === "\\") {
        if (i === glob2.length - 1) {
          re += "\\\\";
        } else {
          escaping = true;
        }
        continue;
      }
      if (c === "[") {
        const [src, needUflag, consumed, magic] = parseClass(glob2, i);
        if (consumed) {
          re += src;
          uflag = uflag || needUflag;
          i += consumed - 1;
          hasMagic2 = hasMagic2 || magic;
          continue;
        }
      }
      if (c === "*") {
        if (noEmpty && glob2 === "*")
          re += starNoEmpty;
        else
          re += star;
        hasMagic2 = true;
        continue;
      }
      if (c === "?") {
        re += qmark;
        hasMagic2 = true;
        continue;
      }
      re += regExpEscape(c);
    }
    return [re, unescape2(glob2), !!hasMagic2, uflag];
  }
};

// node_modules/@node-minify/core/node_modules/minimatch/dist/mjs/escape.js
var escape2 = (s, { windowsPathsNoEscape = false } = {}) => {
  return windowsPathsNoEscape ? s.replace(/[?*()[\]]/g, "[$&]") : s.replace(/[?*()[\]\\]/g, "\\$&");
};

// node_modules/@node-minify/core/node_modules/minimatch/dist/mjs/index.js
var minimatch = (p, pattern, options3 = {}) => {
  assertValidPattern(pattern);
  if (!options3.nocomment && pattern.charAt(0) === "#") {
    return false;
  }
  return new Minimatch(pattern, options3).match(p);
};
var starDotExtRE = /^\*+([^+@!?\*\[\(]*)$/;
var starDotExtTest = (ext2) => (f) => !f.startsWith(".") && f.endsWith(ext2);
var starDotExtTestDot = (ext2) => (f) => f.endsWith(ext2);
var starDotExtTestNocase = (ext2) => {
  ext2 = ext2.toLowerCase();
  return (f) => !f.startsWith(".") && f.toLowerCase().endsWith(ext2);
};
var starDotExtTestNocaseDot = (ext2) => {
  ext2 = ext2.toLowerCase();
  return (f) => f.toLowerCase().endsWith(ext2);
};
var starDotStarRE = /^\*+\.\*+$/;
var starDotStarTest = (f) => !f.startsWith(".") && f.includes(".");
var starDotStarTestDot = (f) => f !== "." && f !== ".." && f.includes(".");
var dotStarRE = /^\.\*+$/;
var dotStarTest = (f) => f !== "." && f !== ".." && f.startsWith(".");
var starRE = /^\*+$/;
var starTest = (f) => f.length !== 0 && !f.startsWith(".");
var starTestDot = (f) => f.length !== 0 && f !== "." && f !== "..";
var qmarksRE = /^\?+([^+@!?\*\[\(]*)?$/;
var qmarksTestNocase = ([$0, ext2 = ""]) => {
  const noext = qmarksTestNoExt([$0]);
  if (!ext2)
    return noext;
  ext2 = ext2.toLowerCase();
  return (f) => noext(f) && f.toLowerCase().endsWith(ext2);
};
var qmarksTestNocaseDot = ([$0, ext2 = ""]) => {
  const noext = qmarksTestNoExtDot([$0]);
  if (!ext2)
    return noext;
  ext2 = ext2.toLowerCase();
  return (f) => noext(f) && f.toLowerCase().endsWith(ext2);
};
var qmarksTestDot = ([$0, ext2 = ""]) => {
  const noext = qmarksTestNoExtDot([$0]);
  return !ext2 ? noext : (f) => noext(f) && f.endsWith(ext2);
};
var qmarksTest = ([$0, ext2 = ""]) => {
  const noext = qmarksTestNoExt([$0]);
  return !ext2 ? noext : (f) => noext(f) && f.endsWith(ext2);
};
var qmarksTestNoExt = ([$0]) => {
  const len = $0.length;
  return (f) => f.length === len && !f.startsWith(".");
};
var qmarksTestNoExtDot = ([$0]) => {
  const len = $0.length;
  return (f) => f.length === len && f !== "." && f !== "..";
};
var defaultPlatform = typeof process === "object" && process ? typeof process.env === "object" && process.env && process.env.__MINIMATCH_TESTING_PLATFORM__ || process.platform : "posix";
var path2 = {
  win32: { sep: "\\" },
  posix: { sep: "/" }
};
var sep = defaultPlatform === "win32" ? path2.win32.sep : path2.posix.sep;
minimatch.sep = sep;
var GLOBSTAR = Symbol("globstar **");
minimatch.GLOBSTAR = GLOBSTAR;
var qmark2 = "[^/]";
var star2 = qmark2 + "*?";
var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
var filter = (pattern, options3 = {}) => (p) => minimatch(p, pattern, options3);
minimatch.filter = filter;
var ext = (a, b = {}) => Object.assign({}, a, b);
var defaults = (def) => {
  if (!def || typeof def !== "object" || !Object.keys(def).length) {
    return minimatch;
  }
  const orig = minimatch;
  const m = (p, pattern, options3 = {}) => orig(p, pattern, ext(def, options3));
  return Object.assign(m, {
    Minimatch: class Minimatch extends orig.Minimatch {
      constructor(pattern, options3 = {}) {
        super(pattern, ext(def, options3));
      }
      static defaults(options3) {
        return orig.defaults(ext(def, options3)).Minimatch;
      }
    },
    AST: class AST extends orig.AST {
      /* c8 ignore start */
      constructor(type, parent, options3 = {}) {
        super(type, parent, ext(def, options3));
      }
      /* c8 ignore stop */
      static fromGlob(pattern, options3 = {}) {
        return orig.AST.fromGlob(pattern, ext(def, options3));
      }
    },
    unescape: (s, options3 = {}) => orig.unescape(s, ext(def, options3)),
    escape: (s, options3 = {}) => orig.escape(s, ext(def, options3)),
    filter: (pattern, options3 = {}) => orig.filter(pattern, ext(def, options3)),
    defaults: (options3) => orig.defaults(ext(def, options3)),
    makeRe: (pattern, options3 = {}) => orig.makeRe(pattern, ext(def, options3)),
    braceExpand: (pattern, options3 = {}) => orig.braceExpand(pattern, ext(def, options3)),
    match: (list, pattern, options3 = {}) => orig.match(list, pattern, ext(def, options3)),
    sep: orig.sep,
    GLOBSTAR
  });
};
minimatch.defaults = defaults;
var braceExpand = (pattern, options3 = {}) => {
  assertValidPattern(pattern);
  if (options3.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
    return [pattern];
  }
  return (0, import_brace_expansion.default)(pattern);
};
minimatch.braceExpand = braceExpand;
var makeRe = (pattern, options3 = {}) => new Minimatch(pattern, options3).makeRe();
minimatch.makeRe = makeRe;
var match = (list, pattern, options3 = {}) => {
  const mm = new Minimatch(pattern, options3);
  list = list.filter((f) => mm.match(f));
  if (mm.options.nonull && !list.length) {
    list.push(pattern);
  }
  return list;
};
minimatch.match = match;
var globMagic = /[?*]|[+@!]\(.*?\)|\[|\]/;
var regExpEscape2 = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
var Minimatch = class {
  options;
  set;
  pattern;
  windowsPathsNoEscape;
  nonegate;
  negate;
  comment;
  empty;
  preserveMultipleSlashes;
  partial;
  globSet;
  globParts;
  nocase;
  isWindows;
  platform;
  windowsNoMagicRoot;
  regexp;
  constructor(pattern, options3 = {}) {
    assertValidPattern(pattern);
    options3 = options3 || {};
    this.options = options3;
    this.pattern = pattern;
    this.platform = options3.platform || defaultPlatform;
    this.isWindows = this.platform === "win32";
    this.windowsPathsNoEscape = !!options3.windowsPathsNoEscape || options3.allowWindowsEscape === false;
    if (this.windowsPathsNoEscape) {
      this.pattern = this.pattern.replace(/\\/g, "/");
    }
    this.preserveMultipleSlashes = !!options3.preserveMultipleSlashes;
    this.regexp = null;
    this.negate = false;
    this.nonegate = !!options3.nonegate;
    this.comment = false;
    this.empty = false;
    this.partial = !!options3.partial;
    this.nocase = !!this.options.nocase;
    this.windowsNoMagicRoot = options3.windowsNoMagicRoot !== void 0 ? options3.windowsNoMagicRoot : !!(this.isWindows && this.nocase);
    this.globSet = [];
    this.globParts = [];
    this.set = [];
    this.make();
  }
  hasMagic() {
    if (this.options.magicalBraces && this.set.length > 1) {
      return true;
    }
    for (const pattern of this.set) {
      for (const part of pattern) {
        if (typeof part !== "string")
          return true;
      }
    }
    return false;
  }
  debug(..._) {
  }
  make() {
    const pattern = this.pattern;
    const options3 = this.options;
    if (!options3.nocomment && pattern.charAt(0) === "#") {
      this.comment = true;
      return;
    }
    if (!pattern) {
      this.empty = true;
      return;
    }
    this.parseNegate();
    this.globSet = [...new Set(this.braceExpand())];
    if (options3.debug) {
      this.debug = (...args2) => console.error(...args2);
    }
    this.debug(this.pattern, this.globSet);
    const rawGlobParts = this.globSet.map((s) => this.slashSplit(s));
    this.globParts = this.preprocess(rawGlobParts);
    this.debug(this.pattern, this.globParts);
    let set = this.globParts.map((s, _, __) => {
      if (this.isWindows && this.windowsNoMagicRoot) {
        const isUNC = s[0] === "" && s[1] === "" && (s[2] === "?" || !globMagic.test(s[2])) && !globMagic.test(s[3]);
        const isDrive = /^[a-z]:/i.test(s[0]);
        if (isUNC) {
          return [...s.slice(0, 4), ...s.slice(4).map((ss) => this.parse(ss))];
        } else if (isDrive) {
          return [s[0], ...s.slice(1).map((ss) => this.parse(ss))];
        }
      }
      return s.map((ss) => this.parse(ss));
    });
    this.debug(this.pattern, set);
    this.set = set.filter((s) => s.indexOf(false) === -1);
    if (this.isWindows) {
      for (let i = 0; i < this.set.length; i++) {
        const p = this.set[i];
        if (p[0] === "" && p[1] === "" && this.globParts[i][2] === "?" && typeof p[3] === "string" && /^[a-z]:$/i.test(p[3])) {
          p[2] = "?";
        }
      }
    }
    this.debug(this.pattern, this.set);
  }
  // various transforms to equivalent pattern sets that are
  // faster to process in a filesystem walk.  The goal is to
  // eliminate what we can, and push all ** patterns as far
  // to the right as possible, even if it increases the number
  // of patterns that we have to process.
  preprocess(globParts) {
    if (this.options.noglobstar) {
      for (let i = 0; i < globParts.length; i++) {
        for (let j = 0; j < globParts[i].length; j++) {
          if (globParts[i][j] === "**") {
            globParts[i][j] = "*";
          }
        }
      }
    }
    const { optimizationLevel = 1 } = this.options;
    if (optimizationLevel >= 2) {
      globParts = this.firstPhasePreProcess(globParts);
      globParts = this.secondPhasePreProcess(globParts);
    } else if (optimizationLevel >= 1) {
      globParts = this.levelOneOptimize(globParts);
    } else {
      globParts = this.adjascentGlobstarOptimize(globParts);
    }
    return globParts;
  }
  // just get rid of adjascent ** portions
  adjascentGlobstarOptimize(globParts) {
    return globParts.map((parts) => {
      let gs = -1;
      while (-1 !== (gs = parts.indexOf("**", gs + 1))) {
        let i = gs;
        while (parts[i + 1] === "**") {
          i++;
        }
        if (i !== gs) {
          parts.splice(gs, i - gs);
        }
      }
      return parts;
    });
  }
  // get rid of adjascent ** and resolve .. portions
  levelOneOptimize(globParts) {
    return globParts.map((parts) => {
      parts = parts.reduce((set, part) => {
        const prev = set[set.length - 1];
        if (part === "**" && prev === "**") {
          return set;
        }
        if (part === "..") {
          if (prev && prev !== ".." && prev !== "." && prev !== "**") {
            set.pop();
            return set;
          }
        }
        set.push(part);
        return set;
      }, []);
      return parts.length === 0 ? [""] : parts;
    });
  }
  levelTwoFileOptimize(parts) {
    if (!Array.isArray(parts)) {
      parts = this.slashSplit(parts);
    }
    let didSomething = false;
    do {
      didSomething = false;
      if (!this.preserveMultipleSlashes) {
        for (let i = 1; i < parts.length - 1; i++) {
          const p = parts[i];
          if (i === 1 && p === "" && parts[0] === "")
            continue;
          if (p === "." || p === "") {
            didSomething = true;
            parts.splice(i, 1);
            i--;
          }
        }
        if (parts[0] === "." && parts.length === 2 && (parts[1] === "." || parts[1] === "")) {
          didSomething = true;
          parts.pop();
        }
      }
      let dd = 0;
      while (-1 !== (dd = parts.indexOf("..", dd + 1))) {
        const p = parts[dd - 1];
        if (p && p !== "." && p !== ".." && p !== "**") {
          didSomething = true;
          parts.splice(dd - 1, 2);
          dd -= 2;
        }
      }
    } while (didSomething);
    return parts.length === 0 ? [""] : parts;
  }
  // First phase: single-pattern processing
  // <pre> is 1 or more portions
  // <rest> is 1 or more portions
  // <p> is any portion other than ., .., '', or **
  // <e> is . or ''
  //
  // **/.. is *brutal* for filesystem walking performance, because
  // it effectively resets the recursive walk each time it occurs,
  // and ** cannot be reduced out by a .. pattern part like a regexp
  // or most strings (other than .., ., and '') can be.
  //
  // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
  // <pre>/<e>/<rest> -> <pre>/<rest>
  // <pre>/<p>/../<rest> -> <pre>/<rest>
  // **/**/<rest> -> **/<rest>
  //
  // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow
  // this WOULD be allowed if ** did follow symlinks, or * didn't
  firstPhasePreProcess(globParts) {
    let didSomething = false;
    do {
      didSomething = false;
      for (let parts of globParts) {
        let gs = -1;
        while (-1 !== (gs = parts.indexOf("**", gs + 1))) {
          let gss = gs;
          while (parts[gss + 1] === "**") {
            gss++;
          }
          if (gss > gs) {
            parts.splice(gs + 1, gss - gs);
          }
          let next = parts[gs + 1];
          const p = parts[gs + 2];
          const p2 = parts[gs + 3];
          if (next !== "..")
            continue;
          if (!p || p === "." || p === ".." || !p2 || p2 === "." || p2 === "..") {
            continue;
          }
          didSomething = true;
          parts.splice(gs, 1);
          const other = parts.slice(0);
          other[gs] = "**";
          globParts.push(other);
          gs--;
        }
        if (!this.preserveMultipleSlashes) {
          for (let i = 1; i < parts.length - 1; i++) {
            const p = parts[i];
            if (i === 1 && p === "" && parts[0] === "")
              continue;
            if (p === "." || p === "") {
              didSomething = true;
              parts.splice(i, 1);
              i--;
            }
          }
          if (parts[0] === "." && parts.length === 2 && (parts[1] === "." || parts[1] === "")) {
            didSomething = true;
            parts.pop();
          }
        }
        let dd = 0;
        while (-1 !== (dd = parts.indexOf("..", dd + 1))) {
          const p = parts[dd - 1];
          if (p && p !== "." && p !== ".." && p !== "**") {
            didSomething = true;
            const needDot = dd === 1 && parts[dd + 1] === "**";
            const splin = needDot ? ["."] : [];
            parts.splice(dd - 1, 2, ...splin);
            if (parts.length === 0)
              parts.push("");
            dd -= 2;
          }
        }
      }
    } while (didSomething);
    return globParts;
  }
  // second phase: multi-pattern dedupes
  // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>
  // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>
  // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>
  //
  // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>
  // ^-- not valid because ** doens't follow symlinks
  secondPhasePreProcess(globParts) {
    for (let i = 0; i < globParts.length - 1; i++) {
      for (let j = i + 1; j < globParts.length; j++) {
        const matched = this.partsMatch(globParts[i], globParts[j], !this.preserveMultipleSlashes);
        if (!matched)
          continue;
        globParts[i] = matched;
        globParts[j] = [];
      }
    }
    return globParts.filter((gs) => gs.length);
  }
  partsMatch(a, b, emptyGSMatch = false) {
    let ai = 0;
    let bi = 0;
    let result = [];
    let which = "";
    while (ai < a.length && bi < b.length) {
      if (a[ai] === b[bi]) {
        result.push(which === "b" ? b[bi] : a[ai]);
        ai++;
        bi++;
      } else if (emptyGSMatch && a[ai] === "**" && b[bi] === a[ai + 1]) {
        result.push(a[ai]);
        ai++;
      } else if (emptyGSMatch && b[bi] === "**" && a[ai] === b[bi + 1]) {
        result.push(b[bi]);
        bi++;
      } else if (a[ai] === "*" && b[bi] && (this.options.dot || !b[bi].startsWith(".")) && b[bi] !== "**") {
        if (which === "b")
          return false;
        which = "a";
        result.push(a[ai]);
        ai++;
        bi++;
      } else if (b[bi] === "*" && a[ai] && (this.options.dot || !a[ai].startsWith(".")) && a[ai] !== "**") {
        if (which === "a")
          return false;
        which = "b";
        result.push(b[bi]);
        ai++;
        bi++;
      } else {
        return false;
      }
    }
    return a.length === b.length && result;
  }
  parseNegate() {
    if (this.nonegate)
      return;
    const pattern = this.pattern;
    let negate = false;
    let negateOffset = 0;
    for (let i = 0; i < pattern.length && pattern.charAt(i) === "!"; i++) {
      negate = !negate;
      negateOffset++;
    }
    if (negateOffset)
      this.pattern = pattern.slice(negateOffset);
    this.negate = negate;
  }
  // set partial to true to test if, for example,
  // "/a/b" matches the start of "/*/b/*/d"
  // Partial means, if you run out of file before you run
  // out of pattern, then that's fine, as long as all
  // the parts match.
  matchOne(file, pattern, partial = false) {
    const options3 = this.options;
    if (this.isWindows) {
      const fileUNC = file[0] === "" && file[1] === "" && file[2] === "?" && typeof file[3] === "string" && /^[a-z]:$/i.test(file[3]);
      const patternUNC = pattern[0] === "" && pattern[1] === "" && pattern[2] === "?" && typeof pattern[3] === "string" && /^[a-z]:$/i.test(pattern[3]);
      if (fileUNC && patternUNC) {
        const fd = file[3];
        const pd = pattern[3];
        if (fd.toLowerCase() === pd.toLowerCase()) {
          file[3] = pd;
        }
      } else if (patternUNC && typeof file[0] === "string") {
        const pd = pattern[3];
        const fd = file[0];
        if (pd.toLowerCase() === fd.toLowerCase()) {
          pattern[3] = fd;
          pattern = pattern.slice(3);
        }
      } else if (fileUNC && typeof pattern[0] === "string") {
        const fd = file[3];
        if (fd.toLowerCase() === pattern[0].toLowerCase()) {
          pattern[0] = fd;
          file = file.slice(3);
        }
      }
    }
    const { optimizationLevel = 1 } = this.options;
    if (optimizationLevel >= 2) {
      file = this.levelTwoFileOptimize(file);
    }
    this.debug("matchOne", this, { file, pattern });
    this.debug("matchOne", file.length, pattern.length);
    for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
      this.debug("matchOne loop");
      var p = pattern[pi];
      var f = file[fi];
      this.debug(pattern, p, f);
      if (p === false) {
        return false;
      }
      if (p === GLOBSTAR) {
        this.debug("GLOBSTAR", [pattern, p, f]);
        var fr = fi;
        var pr = pi + 1;
        if (pr === pl) {
          this.debug("** at the end");
          for (; fi < fl; fi++) {
            if (file[fi] === "." || file[fi] === ".." || !options3.dot && file[fi].charAt(0) === ".")
              return false;
          }
          return true;
        }
        while (fr < fl) {
          var swallowee = file[fr];
          this.debug("\nglobstar while", file, fr, pattern, pr, swallowee);
          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
            this.debug("globstar found match!", fr, fl, swallowee);
            return true;
          } else {
            if (swallowee === "." || swallowee === ".." || !options3.dot && swallowee.charAt(0) === ".") {
              this.debug("dot detected!", file, fr, pattern, pr);
              break;
            }
            this.debug("globstar swallow a segment, and continue");
            fr++;
          }
        }
        if (partial) {
          this.debug("\n>>> no match, partial?", file, fr, pattern, pr);
          if (fr === fl) {
            return true;
          }
        }
        return false;
      }
      let hit;
      if (typeof p === "string") {
        hit = f === p;
        this.debug("string match", p, f, hit);
      } else {
        hit = p.test(f);
        this.debug("pattern match", p, f, hit);
      }
      if (!hit)
        return false;
    }
    if (fi === fl && pi === pl) {
      return true;
    } else if (fi === fl) {
      return partial;
    } else if (pi === pl) {
      return fi === fl - 1 && file[fi] === "";
    } else {
      throw new Error("wtf?");
    }
  }
  braceExpand() {
    return braceExpand(this.pattern, this.options);
  }
  parse(pattern) {
    assertValidPattern(pattern);
    const options3 = this.options;
    if (pattern === "**")
      return GLOBSTAR;
    if (pattern === "")
      return "";
    let m;
    let fastTest = null;
    if (m = pattern.match(starRE)) {
      fastTest = options3.dot ? starTestDot : starTest;
    } else if (m = pattern.match(starDotExtRE)) {
      fastTest = (options3.nocase ? options3.dot ? starDotExtTestNocaseDot : starDotExtTestNocase : options3.dot ? starDotExtTestDot : starDotExtTest)(m[1]);
    } else if (m = pattern.match(qmarksRE)) {
      fastTest = (options3.nocase ? options3.dot ? qmarksTestNocaseDot : qmarksTestNocase : options3.dot ? qmarksTestDot : qmarksTest)(m);
    } else if (m = pattern.match(starDotStarRE)) {
      fastTest = options3.dot ? starDotStarTestDot : starDotStarTest;
    } else if (m = pattern.match(dotStarRE)) {
      fastTest = dotStarTest;
    }
    const re = AST.fromGlob(pattern, this.options).toMMPattern();
    return fastTest ? Object.assign(re, { test: fastTest }) : re;
  }
  makeRe() {
    if (this.regexp || this.regexp === false)
      return this.regexp;
    const set = this.set;
    if (!set.length) {
      this.regexp = false;
      return this.regexp;
    }
    const options3 = this.options;
    const twoStar = options3.noglobstar ? star2 : options3.dot ? twoStarDot : twoStarNoDot;
    const flags = new Set(options3.nocase ? ["i"] : []);
    let re = set.map((pattern) => {
      const pp = pattern.map((p) => {
        if (p instanceof RegExp) {
          for (const f of p.flags.split(""))
            flags.add(f);
        }
        return typeof p === "string" ? regExpEscape2(p) : p === GLOBSTAR ? GLOBSTAR : p._src;
      });
      pp.forEach((p, i) => {
        const next = pp[i + 1];
        const prev = pp[i - 1];
        if (p !== GLOBSTAR || prev === GLOBSTAR) {
          return;
        }
        if (prev === void 0) {
          if (next !== void 0 && next !== GLOBSTAR) {
            pp[i + 1] = "(?:\\/|" + twoStar + "\\/)?" + next;
          } else {
            pp[i] = twoStar;
          }
        } else if (next === void 0) {
          pp[i - 1] = prev + "(?:\\/|" + twoStar + ")?";
        } else if (next !== GLOBSTAR) {
          pp[i - 1] = prev + "(?:\\/|\\/" + twoStar + "\\/)" + next;
          pp[i + 1] = GLOBSTAR;
        }
      });
      return pp.filter((p) => p !== GLOBSTAR).join("/");
    }).join("|");
    const [open, close] = set.length > 1 ? ["(?:", ")"] : ["", ""];
    re = "^" + open + re + close + "$";
    if (this.negate)
      re = "^(?!" + re + ").+$";
    try {
      this.regexp = new RegExp(re, [...flags].join(""));
    } catch (ex) {
      this.regexp = false;
    }
    return this.regexp;
  }
  slashSplit(p) {
    if (this.preserveMultipleSlashes) {
      return p.split("/");
    } else if (this.isWindows && /^\/\/[^\/]+/.test(p)) {
      return ["", ...p.split(/\/+/)];
    } else {
      return p.split(/\/+/);
    }
  }
  match(f, partial = this.partial) {
    this.debug("match", f, this.pattern);
    if (this.comment) {
      return false;
    }
    if (this.empty) {
      return f === "";
    }
    if (f === "/" && partial) {
      return true;
    }
    const options3 = this.options;
    if (this.isWindows) {
      f = f.split("\\").join("/");
    }
    const ff = this.slashSplit(f);
    this.debug(this.pattern, "split", ff);
    const set = this.set;
    this.debug(this.pattern, "set", set);
    let filename = ff[ff.length - 1];
    if (!filename) {
      for (let i = ff.length - 2; !filename && i >= 0; i--) {
        filename = ff[i];
      }
    }
    for (let i = 0; i < set.length; i++) {
      const pattern = set[i];
      let file = ff;
      if (options3.matchBase && pattern.length === 1) {
        file = [filename];
      }
      const hit = this.matchOne(file, pattern, partial);
      if (hit) {
        if (options3.flipNegate) {
          return true;
        }
        return !this.negate;
      }
    }
    if (options3.flipNegate) {
      return false;
    }
    return this.negate;
  }
  static defaults(def) {
    return minimatch.defaults(def).Minimatch;
  }
};
minimatch.AST = AST;
minimatch.Minimatch = Minimatch;
minimatch.escape = escape2;
minimatch.unescape = unescape2;

// node_modules/lru-cache/dist/esm/index.js
var perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
var warned = /* @__PURE__ */ new Set();
var PROCESS = typeof process === "object" && !!process ? process : {};
var emitWarning = (msg, type, code, fn) => {
  typeof PROCESS.emitWarning === "function" ? PROCESS.emitWarning(msg, type, code, fn) : console.error(`[${code}] ${type}: ${msg}`);
};
var AC = globalThis.AbortController;
var AS = globalThis.AbortSignal;
if (typeof AC === "undefined") {
  AS = class AbortSignal {
    onabort;
    _onabort = [];
    reason;
    aborted = false;
    addEventListener(_, fn) {
      this._onabort.push(fn);
    }
  };
  AC = class AbortController {
    constructor() {
      warnACPolyfill();
    }
    signal = new AS();
    abort(reason) {
      if (this.signal.aborted)
        return;
      this.signal.reason = reason;
      this.signal.aborted = true;
      for (const fn of this.signal._onabort) {
        fn(reason);
      }
      this.signal.onabort?.(reason);
    }
  };
  let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== "1";
  const warnACPolyfill = () => {
    if (!printACPolyfillWarning)
      return;
    printACPolyfillWarning = false;
    emitWarning("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", warnACPolyfill);
  };
}
var shouldWarn = (code) => !warned.has(code);
var TYPE = Symbol("type");
var isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
var getUintArray = (max) => !isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
var ZeroArray = class extends Array {
  constructor(size) {
    super(size);
    this.fill(0);
  }
};
var Stack = class _Stack {
  heap;
  length;
  // private constructor
  static #constructing = false;
  static create(max) {
    const HeapCls = getUintArray(max);
    if (!HeapCls)
      return [];
    _Stack.#constructing = true;
    const s = new _Stack(max, HeapCls);
    _Stack.#constructing = false;
    return s;
  }
  constructor(max, HeapCls) {
    if (!_Stack.#constructing) {
      throw new TypeError("instantiate Stack using Stack.create(n)");
    }
    this.heap = new HeapCls(max);
    this.length = 0;
  }
  push(n) {
    this.heap[this.length++] = n;
  }
  pop() {
    return this.heap[--this.length];
  }
};
var LRUCache = class _LRUCache {
  // options that cannot be changed without disaster
  #max;
  #maxSize;
  #dispose;
  #disposeAfter;
  #fetchMethod;
  #memoMethod;
  /**
   * {@link LRUCache.OptionsBase.ttl}
   */
  ttl;
  /**
   * {@link LRUCache.OptionsBase.ttlResolution}
   */
  ttlResolution;
  /**
   * {@link LRUCache.OptionsBase.ttlAutopurge}
   */
  ttlAutopurge;
  /**
   * {@link LRUCache.OptionsBase.updateAgeOnGet}
   */
  updateAgeOnGet;
  /**
   * {@link LRUCache.OptionsBase.updateAgeOnHas}
   */
  updateAgeOnHas;
  /**
   * {@link LRUCache.OptionsBase.allowStale}
   */
  allowStale;
  /**
   * {@link LRUCache.OptionsBase.noDisposeOnSet}
   */
  noDisposeOnSet;
  /**
   * {@link LRUCache.OptionsBase.noUpdateTTL}
   */
  noUpdateTTL;
  /**
   * {@link LRUCache.OptionsBase.maxEntrySize}
   */
  maxEntrySize;
  /**
   * {@link LRUCache.OptionsBase.sizeCalculation}
   */
  sizeCalculation;
  /**
   * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
   */
  noDeleteOnFetchRejection;
  /**
   * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
   */
  noDeleteOnStaleGet;
  /**
   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
   */
  allowStaleOnFetchAbort;
  /**
   * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
   */
  allowStaleOnFetchRejection;
  /**
   * {@link LRUCache.OptionsBase.ignoreFetchAbort}
   */
  ignoreFetchAbort;
  // computed properties
  #size;
  #calculatedSize;
  #keyMap;
  #keyList;
  #valList;
  #next;
  #prev;
  #head;
  #tail;
  #free;
  #disposed;
  #sizes;
  #starts;
  #ttls;
  #hasDispose;
  #hasFetchMethod;
  #hasDisposeAfter;
  /**
   * Do not call this method unless you need to inspect the
   * inner workings of the cache.  If anything returned by this
   * object is modified in any way, strange breakage may occur.
   *
   * These fields are private for a reason!
   *
   * @internal
   */
  static unsafeExposeInternals(c) {
    return {
      // properties
      starts: c.#starts,
      ttls: c.#ttls,
      sizes: c.#sizes,
      keyMap: c.#keyMap,
      keyList: c.#keyList,
      valList: c.#valList,
      next: c.#next,
      prev: c.#prev,
      get head() {
        return c.#head;
      },
      get tail() {
        return c.#tail;
      },
      free: c.#free,
      // methods
      isBackgroundFetch: (p) => c.#isBackgroundFetch(p),
      backgroundFetch: (k, index, options3, context) => c.#backgroundFetch(k, index, options3, context),
      moveToTail: (index) => c.#moveToTail(index),
      indexes: (options3) => c.#indexes(options3),
      rindexes: (options3) => c.#rindexes(options3),
      isStale: (index) => c.#isStale(index)
    };
  }
  // Protected read-only members
  /**
   * {@link LRUCache.OptionsBase.max} (read-only)
   */
  get max() {
    return this.#max;
  }
  /**
   * {@link LRUCache.OptionsBase.maxSize} (read-only)
   */
  get maxSize() {
    return this.#maxSize;
  }
  /**
   * The total computed size of items in the cache (read-only)
   */
  get calculatedSize() {
    return this.#calculatedSize;
  }
  /**
   * The number of items stored in the cache (read-only)
   */
  get size() {
    return this.#size;
  }
  /**
   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
   */
  get fetchMethod() {
    return this.#fetchMethod;
  }
  get memoMethod() {
    return this.#memoMethod;
  }
  /**
   * {@link LRUCache.OptionsBase.dispose} (read-only)
   */
  get dispose() {
    return this.#dispose;
  }
  /**
   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
   */
  get disposeAfter() {
    return this.#disposeAfter;
  }
  constructor(options3) {
    const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, memoMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort } = options3;
    if (max !== 0 && !isPosInt(max)) {
      throw new TypeError("max option must be a nonnegative integer");
    }
    const UintArray = max ? getUintArray(max) : Array;
    if (!UintArray) {
      throw new Error("invalid max value: " + max);
    }
    this.#max = max;
    this.#maxSize = maxSize;
    this.maxEntrySize = maxEntrySize || this.#maxSize;
    this.sizeCalculation = sizeCalculation;
    if (this.sizeCalculation) {
      if (!this.#maxSize && !this.maxEntrySize) {
        throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      }
      if (typeof this.sizeCalculation !== "function") {
        throw new TypeError("sizeCalculation set to non-function");
      }
    }
    if (memoMethod !== void 0 && typeof memoMethod !== "function") {
      throw new TypeError("memoMethod must be a function if defined");
    }
    this.#memoMethod = memoMethod;
    if (fetchMethod !== void 0 && typeof fetchMethod !== "function") {
      throw new TypeError("fetchMethod must be a function if specified");
    }
    this.#fetchMethod = fetchMethod;
    this.#hasFetchMethod = !!fetchMethod;
    this.#keyMap = /* @__PURE__ */ new Map();
    this.#keyList = new Array(max).fill(void 0);
    this.#valList = new Array(max).fill(void 0);
    this.#next = new UintArray(max);
    this.#prev = new UintArray(max);
    this.#head = 0;
    this.#tail = 0;
    this.#free = Stack.create(max);
    this.#size = 0;
    this.#calculatedSize = 0;
    if (typeof dispose === "function") {
      this.#dispose = dispose;
    }
    if (typeof disposeAfter === "function") {
      this.#disposeAfter = disposeAfter;
      this.#disposed = [];
    } else {
      this.#disposeAfter = void 0;
      this.#disposed = void 0;
    }
    this.#hasDispose = !!this.#dispose;
    this.#hasDisposeAfter = !!this.#disposeAfter;
    this.noDisposeOnSet = !!noDisposeOnSet;
    this.noUpdateTTL = !!noUpdateTTL;
    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
    this.ignoreFetchAbort = !!ignoreFetchAbort;
    if (this.maxEntrySize !== 0) {
      if (this.#maxSize !== 0) {
        if (!isPosInt(this.#maxSize)) {
          throw new TypeError("maxSize must be a positive integer if specified");
        }
      }
      if (!isPosInt(this.maxEntrySize)) {
        throw new TypeError("maxEntrySize must be a positive integer if specified");
      }
      this.#initializeSizeTracking();
    }
    this.allowStale = !!allowStale;
    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
    this.updateAgeOnGet = !!updateAgeOnGet;
    this.updateAgeOnHas = !!updateAgeOnHas;
    this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
    this.ttlAutopurge = !!ttlAutopurge;
    this.ttl = ttl || 0;
    if (this.ttl) {
      if (!isPosInt(this.ttl)) {
        throw new TypeError("ttl must be a positive integer if specified");
      }
      this.#initializeTTLTracking();
    }
    if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {
      throw new TypeError("At least one of max, maxSize, or ttl is required");
    }
    if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {
      const code = "LRU_CACHE_UNBOUNDED";
      if (shouldWarn(code)) {
        warned.add(code);
        const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
        emitWarning(msg, "UnboundedCacheWarning", code, _LRUCache);
      }
    }
  }
  /**
   * Return the number of ms left in the item's TTL. If item is not in cache,
   * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
   */
  getRemainingTTL(key) {
    return this.#keyMap.has(key) ? Infinity : 0;
  }
  #initializeTTLTracking() {
    const ttls = new ZeroArray(this.#max);
    const starts = new ZeroArray(this.#max);
    this.#ttls = ttls;
    this.#starts = starts;
    this.#setItemTTL = (index, ttl, start = perf.now()) => {
      starts[index] = ttl !== 0 ? start : 0;
      ttls[index] = ttl;
      if (ttl !== 0 && this.ttlAutopurge) {
        const t = setTimeout(() => {
          if (this.#isStale(index)) {
            this.#delete(this.#keyList[index], "expire");
          }
        }, ttl + 1);
        if (t.unref) {
          t.unref();
        }
      }
    };
    this.#updateItemAge = (index) => {
      starts[index] = ttls[index] !== 0 ? perf.now() : 0;
    };
    this.#statusTTL = (status, index) => {
      if (ttls[index]) {
        const ttl = ttls[index];
        const start = starts[index];
        if (!ttl || !start)
          return;
        status.ttl = ttl;
        status.start = start;
        status.now = cachedNow || getNow();
        const age = status.now - start;
        status.remainingTTL = ttl - age;
      }
    };
    let cachedNow = 0;
    const getNow = () => {
      const n = perf.now();
      if (this.ttlResolution > 0) {
        cachedNow = n;
        const t = setTimeout(() => cachedNow = 0, this.ttlResolution);
        if (t.unref) {
          t.unref();
        }
      }
      return n;
    };
    this.getRemainingTTL = (key) => {
      const index = this.#keyMap.get(key);
      if (index === void 0) {
        return 0;
      }
      const ttl = ttls[index];
      const start = starts[index];
      if (!ttl || !start) {
        return Infinity;
      }
      const age = (cachedNow || getNow()) - start;
      return ttl - age;
    };
    this.#isStale = (index) => {
      const s = starts[index];
      const t = ttls[index];
      return !!t && !!s && (cachedNow || getNow()) - s > t;
    };
  }
  // conditionally set private methods related to TTL
  #updateItemAge = () => {
  };
  #statusTTL = () => {
  };
  #setItemTTL = () => {
  };
  /* c8 ignore stop */
  #isStale = () => false;
  #initializeSizeTracking() {
    const sizes = new ZeroArray(this.#max);
    this.#calculatedSize = 0;
    this.#sizes = sizes;
    this.#removeItemSize = (index) => {
      this.#calculatedSize -= sizes[index];
      sizes[index] = 0;
    };
    this.#requireSize = (k, v, size, sizeCalculation) => {
      if (this.#isBackgroundFetch(v)) {
        return 0;
      }
      if (!isPosInt(size)) {
        if (sizeCalculation) {
          if (typeof sizeCalculation !== "function") {
            throw new TypeError("sizeCalculation must be a function");
          }
          size = sizeCalculation(v, k);
          if (!isPosInt(size)) {
            throw new TypeError("sizeCalculation return invalid (expect positive integer)");
          }
        } else {
          throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
        }
      }
      return size;
    };
    this.#addItemSize = (index, size, status) => {
      sizes[index] = size;
      if (this.#maxSize) {
        const maxSize = this.#maxSize - sizes[index];
        while (this.#calculatedSize > maxSize) {
          this.#evict(true);
        }
      }
      this.#calculatedSize += sizes[index];
      if (status) {
        status.entrySize = size;
        status.totalCalculatedSize = this.#calculatedSize;
      }
    };
  }
  #removeItemSize = (_i) => {
  };
  #addItemSize = (_i, _s, _st) => {
  };
  #requireSize = (_k, _v, size, sizeCalculation) => {
    if (size || sizeCalculation) {
      throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
    }
    return 0;
  };
  *#indexes({ allowStale = this.allowStale } = {}) {
    if (this.#size) {
      for (let i = this.#tail; true; ) {
        if (!this.#isValidIndex(i)) {
          break;
        }
        if (allowStale || !this.#isStale(i)) {
          yield i;
        }
        if (i === this.#head) {
          break;
        } else {
          i = this.#prev[i];
        }
      }
    }
  }
  *#rindexes({ allowStale = this.allowStale } = {}) {
    if (this.#size) {
      for (let i = this.#head; true; ) {
        if (!this.#isValidIndex(i)) {
          break;
        }
        if (allowStale || !this.#isStale(i)) {
          yield i;
        }
        if (i === this.#tail) {
          break;
        } else {
          i = this.#next[i];
        }
      }
    }
  }
  #isValidIndex(index) {
    return index !== void 0 && this.#keyMap.get(this.#keyList[index]) === index;
  }
  /**
   * Return a generator yielding `[key, value]` pairs,
   * in order from most recently used to least recently used.
   */
  *entries() {
    for (const i of this.#indexes()) {
      if (this.#valList[i] !== void 0 && this.#keyList[i] !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
        yield [this.#keyList[i], this.#valList[i]];
      }
    }
  }
  /**
   * Inverse order version of {@link LRUCache.entries}
   *
   * Return a generator yielding `[key, value]` pairs,
   * in order from least recently used to most recently used.
   */
  *rentries() {
    for (const i of this.#rindexes()) {
      if (this.#valList[i] !== void 0 && this.#keyList[i] !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
        yield [this.#keyList[i], this.#valList[i]];
      }
    }
  }
  /**
   * Return a generator yielding the keys in the cache,
   * in order from most recently used to least recently used.
   */
  *keys() {
    for (const i of this.#indexes()) {
      const k = this.#keyList[i];
      if (k !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
        yield k;
      }
    }
  }
  /**
   * Inverse order version of {@link LRUCache.keys}
   *
   * Return a generator yielding the keys in the cache,
   * in order from least recently used to most recently used.
   */
  *rkeys() {
    for (const i of this.#rindexes()) {
      const k = this.#keyList[i];
      if (k !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
        yield k;
      }
    }
  }
  /**
   * Return a generator yielding the values in the cache,
   * in order from most recently used to least recently used.
   */
  *values() {
    for (const i of this.#indexes()) {
      const v = this.#valList[i];
      if (v !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
        yield this.#valList[i];
      }
    }
  }
  /**
   * Inverse order version of {@link LRUCache.values}
   *
   * Return a generator yielding the values in the cache,
   * in order from least recently used to most recently used.
   */
  *rvalues() {
    for (const i of this.#rindexes()) {
      const v = this.#valList[i];
      if (v !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
        yield this.#valList[i];
      }
    }
  }
  /**
   * Iterating over the cache itself yields the same results as
   * {@link LRUCache.entries}
   */
  [Symbol.iterator]() {
    return this.entries();
  }
  /**
   * A String value that is used in the creation of the default string
   * description of an object. Called by the built-in method
   * `Object.prototype.toString`.
   */
  [Symbol.toStringTag] = "LRUCache";
  /**
   * Find a value for which the supplied fn method returns a truthy value,
   * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
   */
  find(fn, getOptions = {}) {
    for (const i of this.#indexes()) {
      const v = this.#valList[i];
      const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      if (fn(value, this.#keyList[i], this)) {
        return this.get(this.#keyList[i], getOptions);
      }
    }
  }
  /**
   * Call the supplied function on each item in the cache, in order from most
   * recently used to least recently used.
   *
   * `fn` is called as `fn(value, key, cache)`.
   *
   * If `thisp` is provided, function will be called in the `this`-context of
   * the provided object, or the cache if no `thisp` object is provided.
   *
   * Does not update age or recenty of use, or iterate over stale values.
   */
  forEach(fn, thisp = this) {
    for (const i of this.#indexes()) {
      const v = this.#valList[i];
      const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      fn.call(thisp, value, this.#keyList[i], this);
    }
  }
  /**
   * The same as {@link LRUCache.forEach} but items are iterated over in
   * reverse order.  (ie, less recently used items are iterated over first.)
   */
  rforEach(fn, thisp = this) {
    for (const i of this.#rindexes()) {
      const v = this.#valList[i];
      const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      fn.call(thisp, value, this.#keyList[i], this);
    }
  }
  /**
   * Delete any stale entries. Returns true if anything was removed,
   * false otherwise.
   */
  purgeStale() {
    let deleted = false;
    for (const i of this.#rindexes({ allowStale: true })) {
      if (this.#isStale(i)) {
        this.#delete(this.#keyList[i], "expire");
        deleted = true;
      }
    }
    return deleted;
  }
  /**
   * Get the extended info about a given entry, to get its value, size, and
   * TTL info simultaneously. Returns `undefined` if the key is not present.
   *
   * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
   * serialization, the `start` value is always the current timestamp, and the
   * `ttl` is a calculated remaining time to live (negative if expired).
   *
   * Always returns stale values, if their info is found in the cache, so be
   * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
   * if relevant.
   */
  info(key) {
    const i = this.#keyMap.get(key);
    if (i === void 0)
      return void 0;
    const v = this.#valList[i];
    const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
    if (value === void 0)
      return void 0;
    const entry = { value };
    if (this.#ttls && this.#starts) {
      const ttl = this.#ttls[i];
      const start = this.#starts[i];
      if (ttl && start) {
        const remain = ttl - (perf.now() - start);
        entry.ttl = remain;
        entry.start = Date.now();
      }
    }
    if (this.#sizes) {
      entry.size = this.#sizes[i];
    }
    return entry;
  }
  /**
   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
   * passed to {@link LRLUCache#load}.
   *
   * The `start` fields are calculated relative to a portable `Date.now()`
   * timestamp, even if `performance.now()` is available.
   *
   * Stale entries are always included in the `dump`, even if
   * {@link LRUCache.OptionsBase.allowStale} is false.
   *
   * Note: this returns an actual array, not a generator, so it can be more
   * easily passed around.
   */
  dump() {
    const arr = [];
    for (const i of this.#indexes({ allowStale: true })) {
      const key = this.#keyList[i];
      const v = this.#valList[i];
      const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0 || key === void 0)
        continue;
      const entry = { value };
      if (this.#ttls && this.#starts) {
        entry.ttl = this.#ttls[i];
        const age = perf.now() - this.#starts[i];
        entry.start = Math.floor(Date.now() - age);
      }
      if (this.#sizes) {
        entry.size = this.#sizes[i];
      }
      arr.unshift([key, entry]);
    }
    return arr;
  }
  /**
   * Reset the cache and load in the items in entries in the order listed.
   *
   * The shape of the resulting cache may be different if the same options are
   * not used in both caches.
   *
   * The `start` fields are assumed to be calculated relative to a portable
   * `Date.now()` timestamp, even if `performance.now()` is available.
   */
  load(arr) {
    this.clear();
    for (const [key, entry] of arr) {
      if (entry.start) {
        const age = Date.now() - entry.start;
        entry.start = perf.now() - age;
      }
      this.set(key, entry.value, entry);
    }
  }
  /**
   * Add a value to the cache.
   *
   * Note: if `undefined` is specified as a value, this is an alias for
   * {@link LRUCache#delete}
   *
   * Fields on the {@link LRUCache.SetOptions} options param will override
   * their corresponding values in the constructor options for the scope
   * of this single `set()` operation.
   *
   * If `start` is provided, then that will set the effective start
   * time for the TTL calculation. Note that this must be a previous
   * value of `performance.now()` if supported, or a previous value of
   * `Date.now()` if not.
   *
   * Options object may also include `size`, which will prevent
   * calling the `sizeCalculation` function and just use the specified
   * number if it is a positive integer, and `noDisposeOnSet` which
   * will prevent calling a `dispose` function in the case of
   * overwrites.
   *
   * If the `size` (or return value of `sizeCalculation`) for a given
   * entry is greater than `maxEntrySize`, then the item will not be
   * added to the cache.
   *
   * Will update the recency of the entry.
   *
   * If the value is `undefined`, then this is an alias for
   * `cache.delete(key)`. `undefined` is never stored in the cache.
   */
  set(k, v, setOptions = {}) {
    if (v === void 0) {
      this.delete(k);
      return this;
    }
    const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status } = setOptions;
    let { noUpdateTTL = this.noUpdateTTL } = setOptions;
    const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);
    if (this.maxEntrySize && size > this.maxEntrySize) {
      if (status) {
        status.set = "miss";
        status.maxEntrySizeExceeded = true;
      }
      this.#delete(k, "set");
      return this;
    }
    let index = this.#size === 0 ? void 0 : this.#keyMap.get(k);
    if (index === void 0) {
      index = this.#size === 0 ? this.#tail : this.#free.length !== 0 ? this.#free.pop() : this.#size === this.#max ? this.#evict(false) : this.#size;
      this.#keyList[index] = k;
      this.#valList[index] = v;
      this.#keyMap.set(k, index);
      this.#next[this.#tail] = index;
      this.#prev[index] = this.#tail;
      this.#tail = index;
      this.#size++;
      this.#addItemSize(index, size, status);
      if (status)
        status.set = "add";
      noUpdateTTL = false;
    } else {
      this.#moveToTail(index);
      const oldVal = this.#valList[index];
      if (v !== oldVal) {
        if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {
          oldVal.__abortController.abort(new Error("replaced"));
          const { __staleWhileFetching: s } = oldVal;
          if (s !== void 0 && !noDisposeOnSet) {
            if (this.#hasDispose) {
              this.#dispose?.(s, k, "set");
            }
            if (this.#hasDisposeAfter) {
              this.#disposed?.push([s, k, "set"]);
            }
          }
        } else if (!noDisposeOnSet) {
          if (this.#hasDispose) {
            this.#dispose?.(oldVal, k, "set");
          }
          if (this.#hasDisposeAfter) {
            this.#disposed?.push([oldVal, k, "set"]);
          }
        }
        this.#removeItemSize(index);
        this.#addItemSize(index, size, status);
        this.#valList[index] = v;
        if (status) {
          status.set = "replace";
          const oldValue = oldVal && this.#isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
          if (oldValue !== void 0)
            status.oldValue = oldValue;
        }
      } else if (status) {
        status.set = "update";
      }
    }
    if (ttl !== 0 && !this.#ttls) {
      this.#initializeTTLTracking();
    }
    if (this.#ttls) {
      if (!noUpdateTTL) {
        this.#setItemTTL(index, ttl, start);
      }
      if (status)
        this.#statusTTL(status, index);
    }
    if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {
      const dt = this.#disposed;
      let task;
      while (task = dt?.shift()) {
        this.#disposeAfter?.(...task);
      }
    }
    return this;
  }
  /**
   * Evict the least recently used item, returning its value or
   * `undefined` if cache is empty.
   */
  pop() {
    try {
      while (this.#size) {
        const val = this.#valList[this.#head];
        this.#evict(true);
        if (this.#isBackgroundFetch(val)) {
          if (val.__staleWhileFetching) {
            return val.__staleWhileFetching;
          }
        } else if (val !== void 0) {
          return val;
        }
      }
    } finally {
      if (this.#hasDisposeAfter && this.#disposed) {
        const dt = this.#disposed;
        let task;
        while (task = dt?.shift()) {
          this.#disposeAfter?.(...task);
        }
      }
    }
  }
  #evict(free) {
    const head = this.#head;
    const k = this.#keyList[head];
    const v = this.#valList[head];
    if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {
      v.__abortController.abort(new Error("evicted"));
    } else if (this.#hasDispose || this.#hasDisposeAfter) {
      if (this.#hasDispose) {
        this.#dispose?.(v, k, "evict");
      }
      if (this.#hasDisposeAfter) {
        this.#disposed?.push([v, k, "evict"]);
      }
    }
    this.#removeItemSize(head);
    if (free) {
      this.#keyList[head] = void 0;
      this.#valList[head] = void 0;
      this.#free.push(head);
    }
    if (this.#size === 1) {
      this.#head = this.#tail = 0;
      this.#free.length = 0;
    } else {
      this.#head = this.#next[head];
    }
    this.#keyMap.delete(k);
    this.#size--;
    return head;
  }
  /**
   * Check if a key is in the cache, without updating the recency of use.
   * Will return false if the item is stale, even though it is technically
   * in the cache.
   *
   * Check if a key is in the cache, without updating the recency of
   * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
   * to `true` in either the options or the constructor.
   *
   * Will return `false` if the item is stale, even though it is technically in
   * the cache. The difference can be determined (if it matters) by using a
   * `status` argument, and inspecting the `has` field.
   *
   * Will not update item age unless
   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
   */
  has(k, hasOptions = {}) {
    const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;
    const index = this.#keyMap.get(k);
    if (index !== void 0) {
      const v = this.#valList[index];
      if (this.#isBackgroundFetch(v) && v.__staleWhileFetching === void 0) {
        return false;
      }
      if (!this.#isStale(index)) {
        if (updateAgeOnHas) {
          this.#updateItemAge(index);
        }
        if (status) {
          status.has = "hit";
          this.#statusTTL(status, index);
        }
        return true;
      } else if (status) {
        status.has = "stale";
        this.#statusTTL(status, index);
      }
    } else if (status) {
      status.has = "miss";
    }
    return false;
  }
  /**
   * Like {@link LRUCache#get} but doesn't update recency or delete stale
   * items.
   *
   * Returns `undefined` if the item is stale, unless
   * {@link LRUCache.OptionsBase.allowStale} is set.
   */
  peek(k, peekOptions = {}) {
    const { allowStale = this.allowStale } = peekOptions;
    const index = this.#keyMap.get(k);
    if (index === void 0 || !allowStale && this.#isStale(index)) {
      return;
    }
    const v = this.#valList[index];
    return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
  }
  #backgroundFetch(k, index, options3, context) {
    const v = index === void 0 ? void 0 : this.#valList[index];
    if (this.#isBackgroundFetch(v)) {
      return v;
    }
    const ac = new AC();
    const { signal } = options3;
    signal?.addEventListener("abort", () => ac.abort(signal.reason), {
      signal: ac.signal
    });
    const fetchOpts = {
      signal: ac.signal,
      options: options3,
      context
    };
    const cb = (v2, updateCache = false) => {
      const { aborted } = ac.signal;
      const ignoreAbort = options3.ignoreFetchAbort && v2 !== void 0;
      if (options3.status) {
        if (aborted && !updateCache) {
          options3.status.fetchAborted = true;
          options3.status.fetchError = ac.signal.reason;
          if (ignoreAbort)
            options3.status.fetchAbortIgnored = true;
        } else {
          options3.status.fetchResolved = true;
        }
      }
      if (aborted && !ignoreAbort && !updateCache) {
        return fetchFail(ac.signal.reason);
      }
      const bf2 = p;
      if (this.#valList[index] === p) {
        if (v2 === void 0) {
          if (bf2.__staleWhileFetching) {
            this.#valList[index] = bf2.__staleWhileFetching;
          } else {
            this.#delete(k, "fetch");
          }
        } else {
          if (options3.status)
            options3.status.fetchUpdated = true;
          this.set(k, v2, fetchOpts.options);
        }
      }
      return v2;
    };
    const eb = (er) => {
      if (options3.status) {
        options3.status.fetchRejected = true;
        options3.status.fetchError = er;
      }
      return fetchFail(er);
    };
    const fetchFail = (er) => {
      const { aborted } = ac.signal;
      const allowStaleAborted = aborted && options3.allowStaleOnFetchAbort;
      const allowStale = allowStaleAborted || options3.allowStaleOnFetchRejection;
      const noDelete = allowStale || options3.noDeleteOnFetchRejection;
      const bf2 = p;
      if (this.#valList[index] === p) {
        const del = !noDelete || bf2.__staleWhileFetching === void 0;
        if (del) {
          this.#delete(k, "fetch");
        } else if (!allowStaleAborted) {
          this.#valList[index] = bf2.__staleWhileFetching;
        }
      }
      if (allowStale) {
        if (options3.status && bf2.__staleWhileFetching !== void 0) {
          options3.status.returnedStale = true;
        }
        return bf2.__staleWhileFetching;
      } else if (bf2.__returned === bf2) {
        throw er;
      }
    };
    const pcall = (res, rej) => {
      const fmp = this.#fetchMethod?.(k, v, fetchOpts);
      if (fmp && fmp instanceof Promise) {
        fmp.then((v2) => res(v2 === void 0 ? void 0 : v2), rej);
      }
      ac.signal.addEventListener("abort", () => {
        if (!options3.ignoreFetchAbort || options3.allowStaleOnFetchAbort) {
          res(void 0);
          if (options3.allowStaleOnFetchAbort) {
            res = (v2) => cb(v2, true);
          }
        }
      });
    };
    if (options3.status)
      options3.status.fetchDispatched = true;
    const p = new Promise(pcall).then(cb, eb);
    const bf = Object.assign(p, {
      __abortController: ac,
      __staleWhileFetching: v,
      __returned: void 0
    });
    if (index === void 0) {
      this.set(k, bf, { ...fetchOpts.options, status: void 0 });
      index = this.#keyMap.get(k);
    } else {
      this.#valList[index] = bf;
    }
    return bf;
  }
  #isBackgroundFetch(p) {
    if (!this.#hasFetchMethod)
      return false;
    const b = p;
    return !!b && b instanceof Promise && b.hasOwnProperty("__staleWhileFetching") && b.__abortController instanceof AC;
  }
  async fetch(k, fetchOptions = {}) {
    const {
      // get options
      allowStale = this.allowStale,
      updateAgeOnGet = this.updateAgeOnGet,
      noDeleteOnStaleGet = this.noDeleteOnStaleGet,
      // set options
      ttl = this.ttl,
      noDisposeOnSet = this.noDisposeOnSet,
      size = 0,
      sizeCalculation = this.sizeCalculation,
      noUpdateTTL = this.noUpdateTTL,
      // fetch exclusive options
      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
      ignoreFetchAbort = this.ignoreFetchAbort,
      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
      context,
      forceRefresh = false,
      status,
      signal
    } = fetchOptions;
    if (!this.#hasFetchMethod) {
      if (status)
        status.fetch = "get";
      return this.get(k, {
        allowStale,
        updateAgeOnGet,
        noDeleteOnStaleGet,
        status
      });
    }
    const options3 = {
      allowStale,
      updateAgeOnGet,
      noDeleteOnStaleGet,
      ttl,
      noDisposeOnSet,
      size,
      sizeCalculation,
      noUpdateTTL,
      noDeleteOnFetchRejection,
      allowStaleOnFetchRejection,
      allowStaleOnFetchAbort,
      ignoreFetchAbort,
      status,
      signal
    };
    let index = this.#keyMap.get(k);
    if (index === void 0) {
      if (status)
        status.fetch = "miss";
      const p = this.#backgroundFetch(k, index, options3, context);
      return p.__returned = p;
    } else {
      const v = this.#valList[index];
      if (this.#isBackgroundFetch(v)) {
        const stale = allowStale && v.__staleWhileFetching !== void 0;
        if (status) {
          status.fetch = "inflight";
          if (stale)
            status.returnedStale = true;
        }
        return stale ? v.__staleWhileFetching : v.__returned = v;
      }
      const isStale = this.#isStale(index);
      if (!forceRefresh && !isStale) {
        if (status)
          status.fetch = "hit";
        this.#moveToTail(index);
        if (updateAgeOnGet) {
          this.#updateItemAge(index);
        }
        if (status)
          this.#statusTTL(status, index);
        return v;
      }
      const p = this.#backgroundFetch(k, index, options3, context);
      const hasStale = p.__staleWhileFetching !== void 0;
      const staleVal = hasStale && allowStale;
      if (status) {
        status.fetch = isStale ? "stale" : "refresh";
        if (staleVal && isStale)
          status.returnedStale = true;
      }
      return staleVal ? p.__staleWhileFetching : p.__returned = p;
    }
  }
  async forceFetch(k, fetchOptions = {}) {
    const v = await this.fetch(k, fetchOptions);
    if (v === void 0)
      throw new Error("fetch() returned undefined");
    return v;
  }
  memo(k, memoOptions = {}) {
    const memoMethod = this.#memoMethod;
    if (!memoMethod) {
      throw new Error("no memoMethod provided to constructor");
    }
    const { context, forceRefresh, ...options3 } = memoOptions;
    const v = this.get(k, options3);
    if (!forceRefresh && v !== void 0)
      return v;
    const vv = memoMethod(k, v, {
      options: options3,
      context
    });
    this.set(k, vv, options3);
    return vv;
  }
  /**
   * Return a value from the cache. Will update the recency of the cache
   * entry found.
   *
   * If the key is not found, get() will return `undefined`.
   */
  get(k, getOptions = {}) {
    const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status } = getOptions;
    const index = this.#keyMap.get(k);
    if (index !== void 0) {
      const value = this.#valList[index];
      const fetching = this.#isBackgroundFetch(value);
      if (status)
        this.#statusTTL(status, index);
      if (this.#isStale(index)) {
        if (status)
          status.get = "stale";
        if (!fetching) {
          if (!noDeleteOnStaleGet) {
            this.#delete(k, "expire");
          }
          if (status && allowStale)
            status.returnedStale = true;
          return allowStale ? value : void 0;
        } else {
          if (status && allowStale && value.__staleWhileFetching !== void 0) {
            status.returnedStale = true;
          }
          return allowStale ? value.__staleWhileFetching : void 0;
        }
      } else {
        if (status)
          status.get = "hit";
        if (fetching) {
          return value.__staleWhileFetching;
        }
        this.#moveToTail(index);
        if (updateAgeOnGet) {
          this.#updateItemAge(index);
        }
        return value;
      }
    } else if (status) {
      status.get = "miss";
    }
  }
  #connect(p, n) {
    this.#prev[n] = p;
    this.#next[p] = n;
  }
  #moveToTail(index) {
    if (index !== this.#tail) {
      if (index === this.#head) {
        this.#head = this.#next[index];
      } else {
        this.#connect(this.#prev[index], this.#next[index]);
      }
      this.#connect(this.#tail, index);
      this.#tail = index;
    }
  }
  /**
   * Deletes a key out of the cache.
   *
   * Returns true if the key was deleted, false otherwise.
   */
  delete(k) {
    return this.#delete(k, "delete");
  }
  #delete(k, reason) {
    let deleted = false;
    if (this.#size !== 0) {
      const index = this.#keyMap.get(k);
      if (index !== void 0) {
        deleted = true;
        if (this.#size === 1) {
          this.#clear(reason);
        } else {
          this.#removeItemSize(index);
          const v = this.#valList[index];
          if (this.#isBackgroundFetch(v)) {
            v.__abortController.abort(new Error("deleted"));
          } else if (this.#hasDispose || this.#hasDisposeAfter) {
            if (this.#hasDispose) {
              this.#dispose?.(v, k, reason);
            }
            if (this.#hasDisposeAfter) {
              this.#disposed?.push([v, k, reason]);
            }
          }
          this.#keyMap.delete(k);
          this.#keyList[index] = void 0;
          this.#valList[index] = void 0;
          if (index === this.#tail) {
            this.#tail = this.#prev[index];
          } else if (index === this.#head) {
            this.#head = this.#next[index];
          } else {
            const pi = this.#prev[index];
            this.#next[pi] = this.#next[index];
            const ni = this.#next[index];
            this.#prev[ni] = this.#prev[index];
          }
          this.#size--;
          this.#free.push(index);
        }
      }
    }
    if (this.#hasDisposeAfter && this.#disposed?.length) {
      const dt = this.#disposed;
      let task;
      while (task = dt?.shift()) {
        this.#disposeAfter?.(...task);
      }
    }
    return deleted;
  }
  /**
   * Clear the cache entirely, throwing away all values.
   */
  clear() {
    return this.#clear("delete");
  }
  #clear(reason) {
    for (const index of this.#rindexes({ allowStale: true })) {
      const v = this.#valList[index];
      if (this.#isBackgroundFetch(v)) {
        v.__abortController.abort(new Error("deleted"));
      } else {
        const k = this.#keyList[index];
        if (this.#hasDispose) {
          this.#dispose?.(v, k, reason);
        }
        if (this.#hasDisposeAfter) {
          this.#disposed?.push([v, k, reason]);
        }
      }
    }
    this.#keyMap.clear();
    this.#valList.fill(void 0);
    this.#keyList.fill(void 0);
    if (this.#ttls && this.#starts) {
      this.#ttls.fill(0);
      this.#starts.fill(0);
    }
    if (this.#sizes) {
      this.#sizes.fill(0);
    }
    this.#head = 0;
    this.#tail = 0;
    this.#free.length = 0;
    this.#calculatedSize = 0;
    this.#size = 0;
    if (this.#hasDisposeAfter && this.#disposed) {
      const dt = this.#disposed;
      let task;
      while (task = dt?.shift()) {
        this.#disposeAfter?.(...task);
      }
    }
  }
};

// node_modules/path-scurry/dist/esm/index.js
import { posix, win32 } from "node:path";
import { fileURLToPath } from "node:url";
import { lstatSync, readdir as readdirCB, readdirSync, readlinkSync, realpathSync as rps } from "fs";
import * as actualFS from "node:fs";
import { lstat, readdir, readlink, realpath } from "node:fs/promises";

// node_modules/minipass/dist/esm/index.js
import { EventEmitter } from "node:events";
import Stream from "node:stream";
import { StringDecoder } from "node:string_decoder";
var proc = typeof process === "object" && process ? process : {
  stdout: null,
  stderr: null
};
var isStream = (s) => !!s && typeof s === "object" && (s instanceof Minipass || s instanceof Stream || isReadable(s) || isWritable(s));
var isReadable = (s) => !!s && typeof s === "object" && s instanceof EventEmitter && typeof s.pipe === "function" && // node core Writable streams have a pipe() method, but it throws
s.pipe !== Stream.Writable.prototype.pipe;
var isWritable = (s) => !!s && typeof s === "object" && s instanceof EventEmitter && typeof s.write === "function" && typeof s.end === "function";
var EOF = Symbol("EOF");
var MAYBE_EMIT_END = Symbol("maybeEmitEnd");
var EMITTED_END = Symbol("emittedEnd");
var EMITTING_END = Symbol("emittingEnd");
var EMITTED_ERROR = Symbol("emittedError");
var CLOSED = Symbol("closed");
var READ = Symbol("read");
var FLUSH = Symbol("flush");
var FLUSHCHUNK = Symbol("flushChunk");
var ENCODING = Symbol("encoding");
var DECODER = Symbol("decoder");
var FLOWING = Symbol("flowing");
var PAUSED = Symbol("paused");
var RESUME = Symbol("resume");
var BUFFER = Symbol("buffer");
var PIPES = Symbol("pipes");
var BUFFERLENGTH = Symbol("bufferLength");
var BUFFERPUSH = Symbol("bufferPush");
var BUFFERSHIFT = Symbol("bufferShift");
var OBJECTMODE = Symbol("objectMode");
var DESTROYED = Symbol("destroyed");
var ERROR = Symbol("error");
var EMITDATA = Symbol("emitData");
var EMITEND = Symbol("emitEnd");
var EMITEND2 = Symbol("emitEnd2");
var ASYNC = Symbol("async");
var ABORT = Symbol("abort");
var ABORTED = Symbol("aborted");
var SIGNAL = Symbol("signal");
var DATALISTENERS = Symbol("dataListeners");
var DISCARDED = Symbol("discarded");
var defer = (fn) => Promise.resolve().then(fn);
var nodefer = (fn) => fn();
var isEndish = (ev) => ev === "end" || ev === "finish" || ev === "prefinish";
var isArrayBufferLike = (b) => b instanceof ArrayBuffer || !!b && typeof b === "object" && b.constructor && b.constructor.name === "ArrayBuffer" && b.byteLength >= 0;
var isArrayBufferView = (b) => !Buffer.isBuffer(b) && ArrayBuffer.isView(b);
var Pipe = class {
  src;
  dest;
  opts;
  ondrain;
  constructor(src, dest, opts) {
    this.src = src;
    this.dest = dest;
    this.opts = opts;
    this.ondrain = () => src[RESUME]();
    this.dest.on("drain", this.ondrain);
  }
  unpipe() {
    this.dest.removeListener("drain", this.ondrain);
  }
  // only here for the prototype
  /* c8 ignore start */
  proxyErrors(_er) {
  }
  /* c8 ignore stop */
  end() {
    this.unpipe();
    if (this.opts.end)
      this.dest.end();
  }
};
var PipeProxyErrors = class extends Pipe {
  unpipe() {
    this.src.removeListener("error", this.proxyErrors);
    super.unpipe();
  }
  constructor(src, dest, opts) {
    super(src, dest, opts);
    this.proxyErrors = (er) => dest.emit("error", er);
    src.on("error", this.proxyErrors);
  }
};
var isObjectModeOptions = (o) => !!o.objectMode;
var isEncodingOptions = (o) => !o.objectMode && !!o.encoding && o.encoding !== "buffer";
var Minipass = class extends EventEmitter {
  [FLOWING] = false;
  [PAUSED] = false;
  [PIPES] = [];
  [BUFFER] = [];
  [OBJECTMODE];
  [ENCODING];
  [ASYNC];
  [DECODER];
  [EOF] = false;
  [EMITTED_END] = false;
  [EMITTING_END] = false;
  [CLOSED] = false;
  [EMITTED_ERROR] = null;
  [BUFFERLENGTH] = 0;
  [DESTROYED] = false;
  [SIGNAL];
  [ABORTED] = false;
  [DATALISTENERS] = 0;
  [DISCARDED] = false;
  /**
   * true if the stream can be written
   */
  writable = true;
  /**
   * true if the stream can be read
   */
  readable = true;
  /**
   * If `RType` is Buffer, then options do not need to be provided.
   * Otherwise, an options object must be provided to specify either
   * {@link Minipass.SharedOptions.objectMode} or
   * {@link Minipass.SharedOptions.encoding}, as appropriate.
   */
  constructor(...args2) {
    const options3 = args2[0] || {};
    super();
    if (options3.objectMode && typeof options3.encoding === "string") {
      throw new TypeError("Encoding and objectMode may not be used together");
    }
    if (isObjectModeOptions(options3)) {
      this[OBJECTMODE] = true;
      this[ENCODING] = null;
    } else if (isEncodingOptions(options3)) {
      this[ENCODING] = options3.encoding;
      this[OBJECTMODE] = false;
    } else {
      this[OBJECTMODE] = false;
      this[ENCODING] = null;
    }
    this[ASYNC] = !!options3.async;
    this[DECODER] = this[ENCODING] ? new StringDecoder(this[ENCODING]) : null;
    if (options3 && options3.debugExposeBuffer === true) {
      Object.defineProperty(this, "buffer", { get: () => this[BUFFER] });
    }
    if (options3 && options3.debugExposePipes === true) {
      Object.defineProperty(this, "pipes", { get: () => this[PIPES] });
    }
    const { signal } = options3;
    if (signal) {
      this[SIGNAL] = signal;
      if (signal.aborted) {
        this[ABORT]();
      } else {
        signal.addEventListener("abort", () => this[ABORT]());
      }
    }
  }
  /**
   * The amount of data stored in the buffer waiting to be read.
   *
   * For Buffer strings, this will be the total byte length.
   * For string encoding streams, this will be the string character length,
   * according to JavaScript's `string.length` logic.
   * For objectMode streams, this is a count of the items waiting to be
   * emitted.
   */
  get bufferLength() {
    return this[BUFFERLENGTH];
  }
  /**
   * The `BufferEncoding` currently in use, or `null`
   */
  get encoding() {
    return this[ENCODING];
  }
  /**
   * @deprecated - This is a read only property
   */
  set encoding(_enc) {
    throw new Error("Encoding must be set at instantiation time");
  }
  /**
   * @deprecated - Encoding may only be set at instantiation time
   */
  setEncoding(_enc) {
    throw new Error("Encoding must be set at instantiation time");
  }
  /**
   * True if this is an objectMode stream
   */
  get objectMode() {
    return this[OBJECTMODE];
  }
  /**
   * @deprecated - This is a read-only property
   */
  set objectMode(_om) {
    throw new Error("objectMode must be set at instantiation time");
  }
  /**
   * true if this is an async stream
   */
  get ["async"]() {
    return this[ASYNC];
  }
  /**
   * Set to true to make this stream async.
   *
   * Once set, it cannot be unset, as this would potentially cause incorrect
   * behavior.  Ie, a sync stream can be made async, but an async stream
   * cannot be safely made sync.
   */
  set ["async"](a) {
    this[ASYNC] = this[ASYNC] || !!a;
  }
  // drop everything and get out of the flow completely
  [ABORT]() {
    this[ABORTED] = true;
    this.emit("abort", this[SIGNAL]?.reason);
    this.destroy(this[SIGNAL]?.reason);
  }
  /**
   * True if the stream has been aborted.
   */
  get aborted() {
    return this[ABORTED];
  }
  /**
   * No-op setter. Stream aborted status is set via the AbortSignal provided
   * in the constructor options.
   */
  set aborted(_) {
  }
  write(chunk, encoding, cb) {
    if (this[ABORTED])
      return false;
    if (this[EOF])
      throw new Error("write after end");
    if (this[DESTROYED]) {
      this.emit("error", Object.assign(new Error("Cannot call write after a stream was destroyed"), { code: "ERR_STREAM_DESTROYED" }));
      return true;
    }
    if (typeof encoding === "function") {
      cb = encoding;
      encoding = "utf8";
    }
    if (!encoding)
      encoding = "utf8";
    const fn = this[ASYNC] ? defer : nodefer;
    if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
      if (isArrayBufferView(chunk)) {
        chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
      } else if (isArrayBufferLike(chunk)) {
        chunk = Buffer.from(chunk);
      } else if (typeof chunk !== "string") {
        throw new Error("Non-contiguous data written to non-objectMode stream");
      }
    }
    if (this[OBJECTMODE]) {
      if (this[FLOWING] && this[BUFFERLENGTH] !== 0)
        this[FLUSH](true);
      if (this[FLOWING])
        this.emit("data", chunk);
      else
        this[BUFFERPUSH](chunk);
      if (this[BUFFERLENGTH] !== 0)
        this.emit("readable");
      if (cb)
        fn(cb);
      return this[FLOWING];
    }
    if (!chunk.length) {
      if (this[BUFFERLENGTH] !== 0)
        this.emit("readable");
      if (cb)
        fn(cb);
      return this[FLOWING];
    }
    if (typeof chunk === "string" && // unless it is a string already ready for us to use
    !(encoding === this[ENCODING] && !this[DECODER]?.lastNeed)) {
      chunk = Buffer.from(chunk, encoding);
    }
    if (Buffer.isBuffer(chunk) && this[ENCODING]) {
      chunk = this[DECODER].write(chunk);
    }
    if (this[FLOWING] && this[BUFFERLENGTH] !== 0)
      this[FLUSH](true);
    if (this[FLOWING])
      this.emit("data", chunk);
    else
      this[BUFFERPUSH](chunk);
    if (this[BUFFERLENGTH] !== 0)
      this.emit("readable");
    if (cb)
      fn(cb);
    return this[FLOWING];
  }
  /**
   * Low-level explicit read method.
   *
   * In objectMode, the argument is ignored, and one item is returned if
   * available.
   *
   * `n` is the number of bytes (or in the case of encoding streams,
   * characters) to consume. If `n` is not provided, then the entire buffer
   * is returned, or `null` is returned if no data is available.
   *
   * If `n` is greater that the amount of data in the internal buffer,
   * then `null` is returned.
   */
  read(n) {
    if (this[DESTROYED])
      return null;
    this[DISCARDED] = false;
    if (this[BUFFERLENGTH] === 0 || n === 0 || n && n > this[BUFFERLENGTH]) {
      this[MAYBE_EMIT_END]();
      return null;
    }
    if (this[OBJECTMODE])
      n = null;
    if (this[BUFFER].length > 1 && !this[OBJECTMODE]) {
      this[BUFFER] = [
        this[ENCODING] ? this[BUFFER].join("") : Buffer.concat(this[BUFFER], this[BUFFERLENGTH])
      ];
    }
    const ret = this[READ](n || null, this[BUFFER][0]);
    this[MAYBE_EMIT_END]();
    return ret;
  }
  [READ](n, chunk) {
    if (this[OBJECTMODE])
      this[BUFFERSHIFT]();
    else {
      const c = chunk;
      if (n === c.length || n === null)
        this[BUFFERSHIFT]();
      else if (typeof c === "string") {
        this[BUFFER][0] = c.slice(n);
        chunk = c.slice(0, n);
        this[BUFFERLENGTH] -= n;
      } else {
        this[BUFFER][0] = c.subarray(n);
        chunk = c.subarray(0, n);
        this[BUFFERLENGTH] -= n;
      }
    }
    this.emit("data", chunk);
    if (!this[BUFFER].length && !this[EOF])
      this.emit("drain");
    return chunk;
  }
  end(chunk, encoding, cb) {
    if (typeof chunk === "function") {
      cb = chunk;
      chunk = void 0;
    }
    if (typeof encoding === "function") {
      cb = encoding;
      encoding = "utf8";
    }
    if (chunk !== void 0)
      this.write(chunk, encoding);
    if (cb)
      this.once("end", cb);
    this[EOF] = true;
    this.writable = false;
    if (this[FLOWING] || !this[PAUSED])
      this[MAYBE_EMIT_END]();
    return this;
  }
  // don't let the internal resume be overwritten
  [RESUME]() {
    if (this[DESTROYED])
      return;
    if (!this[DATALISTENERS] && !this[PIPES].length) {
      this[DISCARDED] = true;
    }
    this[PAUSED] = false;
    this[FLOWING] = true;
    this.emit("resume");
    if (this[BUFFER].length)
      this[FLUSH]();
    else if (this[EOF])
      this[MAYBE_EMIT_END]();
    else
      this.emit("drain");
  }
  /**
   * Resume the stream if it is currently in a paused state
   *
   * If called when there are no pipe destinations or `data` event listeners,
   * this will place the stream in a "discarded" state, where all data will
   * be thrown away. The discarded state is removed if a pipe destination or
   * data handler is added, if pause() is called, or if any synchronous or
   * asynchronous iteration is started.
   */
  resume() {
    return this[RESUME]();
  }
  /**
   * Pause the stream
   */
  pause() {
    this[FLOWING] = false;
    this[PAUSED] = true;
    this[DISCARDED] = false;
  }
  /**
   * true if the stream has been forcibly destroyed
   */
  get destroyed() {
    return this[DESTROYED];
  }
  /**
   * true if the stream is currently in a flowing state, meaning that
   * any writes will be immediately emitted.
   */
  get flowing() {
    return this[FLOWING];
  }
  /**
   * true if the stream is currently in a paused state
   */
  get paused() {
    return this[PAUSED];
  }
  [BUFFERPUSH](chunk) {
    if (this[OBJECTMODE])
      this[BUFFERLENGTH] += 1;
    else
      this[BUFFERLENGTH] += chunk.length;
    this[BUFFER].push(chunk);
  }
  [BUFFERSHIFT]() {
    if (this[OBJECTMODE])
      this[BUFFERLENGTH] -= 1;
    else
      this[BUFFERLENGTH] -= this[BUFFER][0].length;
    return this[BUFFER].shift();
  }
  [FLUSH](noDrain = false) {
    do {
    } while (this[FLUSHCHUNK](this[BUFFERSHIFT]()) && this[BUFFER].length);
    if (!noDrain && !this[BUFFER].length && !this[EOF])
      this.emit("drain");
  }
  [FLUSHCHUNK](chunk) {
    this.emit("data", chunk);
    return this[FLOWING];
  }
  /**
   * Pipe all data emitted by this stream into the destination provided.
   *
   * Triggers the flow of data.
   */
  pipe(dest, opts) {
    if (this[DESTROYED])
      return dest;
    this[DISCARDED] = false;
    const ended = this[EMITTED_END];
    opts = opts || {};
    if (dest === proc.stdout || dest === proc.stderr)
      opts.end = false;
    else
      opts.end = opts.end !== false;
    opts.proxyErrors = !!opts.proxyErrors;
    if (ended) {
      if (opts.end)
        dest.end();
    } else {
      this[PIPES].push(!opts.proxyErrors ? new Pipe(this, dest, opts) : new PipeProxyErrors(this, dest, opts));
      if (this[ASYNC])
        defer(() => this[RESUME]());
      else
        this[RESUME]();
    }
    return dest;
  }
  /**
   * Fully unhook a piped destination stream.
   *
   * If the destination stream was the only consumer of this stream (ie,
   * there are no other piped destinations or `'data'` event listeners)
   * then the flow of data will stop until there is another consumer or
   * {@link Minipass#resume} is explicitly called.
   */
  unpipe(dest) {
    const p = this[PIPES].find((p2) => p2.dest === dest);
    if (p) {
      if (this[PIPES].length === 1) {
        if (this[FLOWING] && this[DATALISTENERS] === 0) {
          this[FLOWING] = false;
        }
        this[PIPES] = [];
      } else
        this[PIPES].splice(this[PIPES].indexOf(p), 1);
      p.unpipe();
    }
  }
  /**
   * Alias for {@link Minipass#on}
   */
  addListener(ev, handler) {
    return this.on(ev, handler);
  }
  /**
   * Mostly identical to `EventEmitter.on`, with the following
   * behavior differences to prevent data loss and unnecessary hangs:
   *
   * - Adding a 'data' event handler will trigger the flow of data
   *
   * - Adding a 'readable' event handler when there is data waiting to be read
   *   will cause 'readable' to be emitted immediately.
   *
   * - Adding an 'endish' event handler ('end', 'finish', etc.) which has
   *   already passed will cause the event to be emitted immediately and all
   *   handlers removed.
   *
   * - Adding an 'error' event handler after an error has been emitted will
   *   cause the event to be re-emitted immediately with the error previously
   *   raised.
   */
  on(ev, handler) {
    const ret = super.on(ev, handler);
    if (ev === "data") {
      this[DISCARDED] = false;
      this[DATALISTENERS]++;
      if (!this[PIPES].length && !this[FLOWING]) {
        this[RESUME]();
      }
    } else if (ev === "readable" && this[BUFFERLENGTH] !== 0) {
      super.emit("readable");
    } else if (isEndish(ev) && this[EMITTED_END]) {
      super.emit(ev);
      this.removeAllListeners(ev);
    } else if (ev === "error" && this[EMITTED_ERROR]) {
      const h = handler;
      if (this[ASYNC])
        defer(() => h.call(this, this[EMITTED_ERROR]));
      else
        h.call(this, this[EMITTED_ERROR]);
    }
    return ret;
  }
  /**
   * Alias for {@link Minipass#off}
   */
  removeListener(ev, handler) {
    return this.off(ev, handler);
  }
  /**
   * Mostly identical to `EventEmitter.off`
   *
   * If a 'data' event handler is removed, and it was the last consumer
   * (ie, there are no pipe destinations or other 'data' event listeners),
   * then the flow of data will stop until there is another consumer or
   * {@link Minipass#resume} is explicitly called.
   */
  off(ev, handler) {
    const ret = super.off(ev, handler);
    if (ev === "data") {
      this[DATALISTENERS] = this.listeners("data").length;
      if (this[DATALISTENERS] === 0 && !this[DISCARDED] && !this[PIPES].length) {
        this[FLOWING] = false;
      }
    }
    return ret;
  }
  /**
   * Mostly identical to `EventEmitter.removeAllListeners`
   *
   * If all 'data' event handlers are removed, and they were the last consumer
   * (ie, there are no pipe destinations), then the flow of data will stop
   * until there is another consumer or {@link Minipass#resume} is explicitly
   * called.
   */
  removeAllListeners(ev) {
    const ret = super.removeAllListeners(ev);
    if (ev === "data" || ev === void 0) {
      this[DATALISTENERS] = 0;
      if (!this[DISCARDED] && !this[PIPES].length) {
        this[FLOWING] = false;
      }
    }
    return ret;
  }
  /**
   * true if the 'end' event has been emitted
   */
  get emittedEnd() {
    return this[EMITTED_END];
  }
  [MAYBE_EMIT_END]() {
    if (!this[EMITTING_END] && !this[EMITTED_END] && !this[DESTROYED] && this[BUFFER].length === 0 && this[EOF]) {
      this[EMITTING_END] = true;
      this.emit("end");
      this.emit("prefinish");
      this.emit("finish");
      if (this[CLOSED])
        this.emit("close");
      this[EMITTING_END] = false;
    }
  }
  /**
   * Mostly identical to `EventEmitter.emit`, with the following
   * behavior differences to prevent data loss and unnecessary hangs:
   *
   * If the stream has been destroyed, and the event is something other
   * than 'close' or 'error', then `false` is returned and no handlers
   * are called.
   *
   * If the event is 'end', and has already been emitted, then the event
   * is ignored. If the stream is in a paused or non-flowing state, then
   * the event will be deferred until data flow resumes. If the stream is
   * async, then handlers will be called on the next tick rather than
   * immediately.
   *
   * If the event is 'close', and 'end' has not yet been emitted, then
   * the event will be deferred until after 'end' is emitted.
   *
   * If the event is 'error', and an AbortSignal was provided for the stream,
   * and there are no listeners, then the event is ignored, matching the
   * behavior of node core streams in the presense of an AbortSignal.
   *
   * If the event is 'finish' or 'prefinish', then all listeners will be
   * removed after emitting the event, to prevent double-firing.
   */
  emit(ev, ...args2) {
    const data = args2[0];
    if (ev !== "error" && ev !== "close" && ev !== DESTROYED && this[DESTROYED]) {
      return false;
    } else if (ev === "data") {
      return !this[OBJECTMODE] && !data ? false : this[ASYNC] ? (defer(() => this[EMITDATA](data)), true) : this[EMITDATA](data);
    } else if (ev === "end") {
      return this[EMITEND]();
    } else if (ev === "close") {
      this[CLOSED] = true;
      if (!this[EMITTED_END] && !this[DESTROYED])
        return false;
      const ret2 = super.emit("close");
      this.removeAllListeners("close");
      return ret2;
    } else if (ev === "error") {
      this[EMITTED_ERROR] = data;
      super.emit(ERROR, data);
      const ret2 = !this[SIGNAL] || this.listeners("error").length ? super.emit("error", data) : false;
      this[MAYBE_EMIT_END]();
      return ret2;
    } else if (ev === "resume") {
      const ret2 = super.emit("resume");
      this[MAYBE_EMIT_END]();
      return ret2;
    } else if (ev === "finish" || ev === "prefinish") {
      const ret2 = super.emit(ev);
      this.removeAllListeners(ev);
      return ret2;
    }
    const ret = super.emit(ev, ...args2);
    this[MAYBE_EMIT_END]();
    return ret;
  }
  [EMITDATA](data) {
    for (const p of this[PIPES]) {
      if (p.dest.write(data) === false)
        this.pause();
    }
    const ret = this[DISCARDED] ? false : super.emit("data", data);
    this[MAYBE_EMIT_END]();
    return ret;
  }
  [EMITEND]() {
    if (this[EMITTED_END])
      return false;
    this[EMITTED_END] = true;
    this.readable = false;
    return this[ASYNC] ? (defer(() => this[EMITEND2]()), true) : this[EMITEND2]();
  }
  [EMITEND2]() {
    if (this[DECODER]) {
      const data = this[DECODER].end();
      if (data) {
        for (const p of this[PIPES]) {
          p.dest.write(data);
        }
        if (!this[DISCARDED])
          super.emit("data", data);
      }
    }
    for (const p of this[PIPES]) {
      p.end();
    }
    const ret = super.emit("end");
    this.removeAllListeners("end");
    return ret;
  }
  /**
   * Return a Promise that resolves to an array of all emitted data once
   * the stream ends.
   */
  async collect() {
    const buf = Object.assign([], {
      dataLength: 0
    });
    if (!this[OBJECTMODE])
      buf.dataLength = 0;
    const p = this.promise();
    this.on("data", (c) => {
      buf.push(c);
      if (!this[OBJECTMODE])
        buf.dataLength += c.length;
    });
    await p;
    return buf;
  }
  /**
   * Return a Promise that resolves to the concatenation of all emitted data
   * once the stream ends.
   *
   * Not allowed on objectMode streams.
   */
  async concat() {
    if (this[OBJECTMODE]) {
      throw new Error("cannot concat in objectMode");
    }
    const buf = await this.collect();
    return this[ENCODING] ? buf.join("") : Buffer.concat(buf, buf.dataLength);
  }
  /**
   * Return a void Promise that resolves once the stream ends.
   */
  async promise() {
    return new Promise((resolve2, reject) => {
      this.on(DESTROYED, () => reject(new Error("stream destroyed")));
      this.on("error", (er) => reject(er));
      this.on("end", () => resolve2());
    });
  }
  /**
   * Asynchronous `for await of` iteration.
   *
   * This will continue emitting all chunks until the stream terminates.
   */
  [Symbol.asyncIterator]() {
    this[DISCARDED] = false;
    let stopped = false;
    const stop = async () => {
      this.pause();
      stopped = true;
      return { value: void 0, done: true };
    };
    const next = () => {
      if (stopped)
        return stop();
      const res = this.read();
      if (res !== null)
        return Promise.resolve({ done: false, value: res });
      if (this[EOF])
        return stop();
      let resolve2;
      let reject;
      const onerr = (er) => {
        this.off("data", ondata);
        this.off("end", onend);
        this.off(DESTROYED, ondestroy);
        stop();
        reject(er);
      };
      const ondata = (value) => {
        this.off("error", onerr);
        this.off("end", onend);
        this.off(DESTROYED, ondestroy);
        this.pause();
        resolve2({ value, done: !!this[EOF] });
      };
      const onend = () => {
        this.off("error", onerr);
        this.off("data", ondata);
        this.off(DESTROYED, ondestroy);
        stop();
        resolve2({ done: true, value: void 0 });
      };
      const ondestroy = () => onerr(new Error("stream destroyed"));
      return new Promise((res2, rej) => {
        reject = rej;
        resolve2 = res2;
        this.once(DESTROYED, ondestroy);
        this.once("error", onerr);
        this.once("end", onend);
        this.once("data", ondata);
      });
    };
    return {
      next,
      throw: stop,
      return: stop,
      [Symbol.asyncIterator]() {
        return this;
      }
    };
  }
  /**
   * Synchronous `for of` iteration.
   *
   * The iteration will terminate when the internal buffer runs out, even
   * if the stream has not yet terminated.
   */
  [Symbol.iterator]() {
    this[DISCARDED] = false;
    let stopped = false;
    const stop = () => {
      this.pause();
      this.off(ERROR, stop);
      this.off(DESTROYED, stop);
      this.off("end", stop);
      stopped = true;
      return { done: true, value: void 0 };
    };
    const next = () => {
      if (stopped)
        return stop();
      const value = this.read();
      return value === null ? stop() : { done: false, value };
    };
    this.once("end", stop);
    this.once(ERROR, stop);
    this.once(DESTROYED, stop);
    return {
      next,
      throw: stop,
      return: stop,
      [Symbol.iterator]() {
        return this;
      }
    };
  }
  /**
   * Destroy a stream, preventing it from being used for any further purpose.
   *
   * If the stream has a `close()` method, then it will be called on
   * destruction.
   *
   * After destruction, any attempt to write data, read data, or emit most
   * events will be ignored.
   *
   * If an error argument is provided, then it will be emitted in an
   * 'error' event.
   */
  destroy(er) {
    if (this[DESTROYED]) {
      if (er)
        this.emit("error", er);
      else
        this.emit(DESTROYED);
      return this;
    }
    this[DESTROYED] = true;
    this[DISCARDED] = true;
    this[BUFFER].length = 0;
    this[BUFFERLENGTH] = 0;
    const wc = this;
    if (typeof wc.close === "function" && !this[CLOSED])
      wc.close();
    if (er)
      this.emit("error", er);
    else
      this.emit(DESTROYED);
    return this;
  }
  /**
   * Alias for {@link isStream}
   *
   * Former export location, maintained for backwards compatibility.
   *
   * @deprecated
   */
  static get isStream() {
    return isStream;
  }
};

// node_modules/path-scurry/dist/esm/index.js
var realpathSync = rps.native;
var defaultFS = {
  lstatSync,
  readdir: readdirCB,
  readdirSync,
  readlinkSync,
  realpathSync,
  promises: {
    lstat,
    readdir,
    readlink,
    realpath
  }
};
var fsFromOption = (fsOption) => !fsOption || fsOption === defaultFS || fsOption === actualFS ? defaultFS : {
  ...defaultFS,
  ...fsOption,
  promises: {
    ...defaultFS.promises,
    ...fsOption.promises || {}
  }
};
var uncDriveRegexp = /^\\\\\?\\([a-z]:)\\?$/i;
var uncToDrive = (rootPath) => rootPath.replace(/\//g, "\\").replace(uncDriveRegexp, "$1\\");
var eitherSep = /[\\\/]/;
var UNKNOWN = 0;
var IFIFO = 1;
var IFCHR = 2;
var IFDIR = 4;
var IFBLK = 6;
var IFREG = 8;
var IFLNK = 10;
var IFSOCK = 12;
var IFMT = 15;
var IFMT_UNKNOWN = ~IFMT;
var READDIR_CALLED = 16;
var LSTAT_CALLED = 32;
var ENOTDIR = 64;
var ENOENT = 128;
var ENOREADLINK = 256;
var ENOREALPATH = 512;
var ENOCHILD = ENOTDIR | ENOENT | ENOREALPATH;
var TYPEMASK = 1023;
var entToType = (s) => s.isFile() ? IFREG : s.isDirectory() ? IFDIR : s.isSymbolicLink() ? IFLNK : s.isCharacterDevice() ? IFCHR : s.isBlockDevice() ? IFBLK : s.isSocket() ? IFSOCK : s.isFIFO() ? IFIFO : UNKNOWN;
var normalizeCache = /* @__PURE__ */ new Map();
var normalize = (s) => {
  const c = normalizeCache.get(s);
  if (c)
    return c;
  const n = s.normalize("NFKD");
  normalizeCache.set(s, n);
  return n;
};
var normalizeNocaseCache = /* @__PURE__ */ new Map();
var normalizeNocase = (s) => {
  const c = normalizeNocaseCache.get(s);
  if (c)
    return c;
  const n = normalize(s.toLowerCase());
  normalizeNocaseCache.set(s, n);
  return n;
};
var ResolveCache = class extends LRUCache {
  constructor() {
    super({ max: 256 });
  }
};
var ChildrenCache = class extends LRUCache {
  constructor(maxSize = 16 * 1024) {
    super({
      maxSize,
      // parent + children
      sizeCalculation: (a) => a.length + 1
    });
  }
};
var setAsCwd = Symbol("PathScurry setAsCwd");
var PathBase = class {
  /**
   * the basename of this path
   *
   * **Important**: *always* test the path name against any test string
   * usingthe {@link isNamed} method, and not by directly comparing this
   * string. Otherwise, unicode path strings that the system sees as identical
   * will not be properly treated as the same path, leading to incorrect
   * behavior and possible security issues.
   */
  name;
  /**
   * the Path entry corresponding to the path root.
   *
   * @internal
   */
  root;
  /**
   * All roots found within the current PathScurry family
   *
   * @internal
   */
  roots;
  /**
   * a reference to the parent path, or undefined in the case of root entries
   *
   * @internal
   */
  parent;
  /**
   * boolean indicating whether paths are compared case-insensitively
   * @internal
   */
  nocase;
  /**
   * boolean indicating that this path is the current working directory
   * of the PathScurry collection that contains it.
   */
  isCWD = false;
  // potential default fs override
  #fs;
  // Stats fields
  #dev;
  get dev() {
    return this.#dev;
  }
  #mode;
  get mode() {
    return this.#mode;
  }
  #nlink;
  get nlink() {
    return this.#nlink;
  }
  #uid;
  get uid() {
    return this.#uid;
  }
  #gid;
  get gid() {
    return this.#gid;
  }
  #rdev;
  get rdev() {
    return this.#rdev;
  }
  #blksize;
  get blksize() {
    return this.#blksize;
  }
  #ino;
  get ino() {
    return this.#ino;
  }
  #size;
  get size() {
    return this.#size;
  }
  #blocks;
  get blocks() {
    return this.#blocks;
  }
  #atimeMs;
  get atimeMs() {
    return this.#atimeMs;
  }
  #mtimeMs;
  get mtimeMs() {
    return this.#mtimeMs;
  }
  #ctimeMs;
  get ctimeMs() {
    return this.#ctimeMs;
  }
  #birthtimeMs;
  get birthtimeMs() {
    return this.#birthtimeMs;
  }
  #atime;
  get atime() {
    return this.#atime;
  }
  #mtime;
  get mtime() {
    return this.#mtime;
  }
  #ctime;
  get ctime() {
    return this.#ctime;
  }
  #birthtime;
  get birthtime() {
    return this.#birthtime;
  }
  #matchName;
  #depth;
  #fullpath;
  #fullpathPosix;
  #relative;
  #relativePosix;
  #type;
  #children;
  #linkTarget;
  #realpath;
  /**
   * This property is for compatibility with the Dirent class as of
   * Node v20, where Dirent['parentPath'] refers to the path of the
   * directory that was passed to readdir. For root entries, it's the path
   * to the entry itself.
   */
  get parentPath() {
    return (this.parent || this).fullpath();
  }
  /**
   * Deprecated alias for Dirent['parentPath'] Somewhat counterintuitively,
   * this property refers to the *parent* path, not the path object itself.
   */
  get path() {
    return this.parentPath;
  }
  /**
   * Do not create new Path objects directly.  They should always be accessed
   * via the PathScurry class or other methods on the Path class.
   *
   * @internal
   */
  constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
    this.name = name;
    this.#matchName = nocase ? normalizeNocase(name) : normalize(name);
    this.#type = type & TYPEMASK;
    this.nocase = nocase;
    this.roots = roots;
    this.root = root || this;
    this.#children = children;
    this.#fullpath = opts.fullpath;
    this.#relative = opts.relative;
    this.#relativePosix = opts.relativePosix;
    this.parent = opts.parent;
    if (this.parent) {
      this.#fs = this.parent.#fs;
    } else {
      this.#fs = fsFromOption(opts.fs);
    }
  }
  /**
   * Returns the depth of the Path object from its root.
   *
   * For example, a path at `/foo/bar` would have a depth of 2.
   */
  depth() {
    if (this.#depth !== void 0)
      return this.#depth;
    if (!this.parent)
      return this.#depth = 0;
    return this.#depth = this.parent.depth() + 1;
  }
  /**
   * @internal
   */
  childrenCache() {
    return this.#children;
  }
  /**
   * Get the Path object referenced by the string path, resolved from this Path
   */
  resolve(path14) {
    if (!path14) {
      return this;
    }
    const rootPath = this.getRootString(path14);
    const dir = path14.substring(rootPath.length);
    const dirParts = dir.split(this.splitSep);
    const result = rootPath ? this.getRoot(rootPath).#resolveParts(dirParts) : this.#resolveParts(dirParts);
    return result;
  }
  #resolveParts(dirParts) {
    let p = this;
    for (const part of dirParts) {
      p = p.child(part);
    }
    return p;
  }
  /**
   * Returns the cached children Path objects, if still available.  If they
   * have fallen out of the cache, then returns an empty array, and resets the
   * READDIR_CALLED bit, so that future calls to readdir() will require an fs
   * lookup.
   *
   * @internal
   */
  children() {
    const cached = this.#children.get(this);
    if (cached) {
      return cached;
    }
    const children = Object.assign([], { provisional: 0 });
    this.#children.set(this, children);
    this.#type &= ~READDIR_CALLED;
    return children;
  }
  /**
   * Resolves a path portion and returns or creates the child Path.
   *
   * Returns `this` if pathPart is `''` or `'.'`, or `parent` if pathPart is
   * `'..'`.
   *
   * This should not be called directly.  If `pathPart` contains any path
   * separators, it will lead to unsafe undefined behavior.
   *
   * Use `Path.resolve()` instead.
   *
   * @internal
   */
  child(pathPart, opts) {
    if (pathPart === "" || pathPart === ".") {
      return this;
    }
    if (pathPart === "..") {
      return this.parent || this;
    }
    const children = this.children();
    const name = this.nocase ? normalizeNocase(pathPart) : normalize(pathPart);
    for (const p of children) {
      if (p.#matchName === name) {
        return p;
      }
    }
    const s = this.parent ? this.sep : "";
    const fullpath = this.#fullpath ? this.#fullpath + s + pathPart : void 0;
    const pchild = this.newChild(pathPart, UNKNOWN, {
      ...opts,
      parent: this,
      fullpath
    });
    if (!this.canReaddir()) {
      pchild.#type |= ENOENT;
    }
    children.push(pchild);
    return pchild;
  }
  /**
   * The relative path from the cwd. If it does not share an ancestor with
   * the cwd, then this ends up being equivalent to the fullpath()
   */
  relative() {
    if (this.isCWD)
      return "";
    if (this.#relative !== void 0) {
      return this.#relative;
    }
    const name = this.name;
    const p = this.parent;
    if (!p) {
      return this.#relative = this.name;
    }
    const pv = p.relative();
    return pv + (!pv || !p.parent ? "" : this.sep) + name;
  }
  /**
   * The relative path from the cwd, using / as the path separator.
   * If it does not share an ancestor with
   * the cwd, then this ends up being equivalent to the fullpathPosix()
   * On posix systems, this is identical to relative().
   */
  relativePosix() {
    if (this.sep === "/")
      return this.relative();
    if (this.isCWD)
      return "";
    if (this.#relativePosix !== void 0)
      return this.#relativePosix;
    const name = this.name;
    const p = this.parent;
    if (!p) {
      return this.#relativePosix = this.fullpathPosix();
    }
    const pv = p.relativePosix();
    return pv + (!pv || !p.parent ? "" : "/") + name;
  }
  /**
   * The fully resolved path string for this Path entry
   */
  fullpath() {
    if (this.#fullpath !== void 0) {
      return this.#fullpath;
    }
    const name = this.name;
    const p = this.parent;
    if (!p) {
      return this.#fullpath = this.name;
    }
    const pv = p.fullpath();
    const fp = pv + (!p.parent ? "" : this.sep) + name;
    return this.#fullpath = fp;
  }
  /**
   * On platforms other than windows, this is identical to fullpath.
   *
   * On windows, this is overridden to return the forward-slash form of the
   * full UNC path.
   */
  fullpathPosix() {
    if (this.#fullpathPosix !== void 0)
      return this.#fullpathPosix;
    if (this.sep === "/")
      return this.#fullpathPosix = this.fullpath();
    if (!this.parent) {
      const p2 = this.fullpath().replace(/\\/g, "/");
      if (/^[a-z]:\//i.test(p2)) {
        return this.#fullpathPosix = `//?/${p2}`;
      } else {
        return this.#fullpathPosix = p2;
      }
    }
    const p = this.parent;
    const pfpp = p.fullpathPosix();
    const fpp = pfpp + (!pfpp || !p.parent ? "" : "/") + this.name;
    return this.#fullpathPosix = fpp;
  }
  /**
   * Is the Path of an unknown type?
   *
   * Note that we might know *something* about it if there has been a previous
   * filesystem operation, for example that it does not exist, or is not a
   * link, or whether it has child entries.
   */
  isUnknown() {
    return (this.#type & IFMT) === UNKNOWN;
  }
  isType(type) {
    return this[`is${type}`]();
  }
  getType() {
    return this.isUnknown() ? "Unknown" : this.isDirectory() ? "Directory" : this.isFile() ? "File" : this.isSymbolicLink() ? "SymbolicLink" : this.isFIFO() ? "FIFO" : this.isCharacterDevice() ? "CharacterDevice" : this.isBlockDevice() ? "BlockDevice" : (
      /* c8 ignore start */
      this.isSocket() ? "Socket" : "Unknown"
    );
  }
  /**
   * Is the Path a regular file?
   */
  isFile() {
    return (this.#type & IFMT) === IFREG;
  }
  /**
   * Is the Path a directory?
   */
  isDirectory() {
    return (this.#type & IFMT) === IFDIR;
  }
  /**
   * Is the path a character device?
   */
  isCharacterDevice() {
    return (this.#type & IFMT) === IFCHR;
  }
  /**
   * Is the path a block device?
   */
  isBlockDevice() {
    return (this.#type & IFMT) === IFBLK;
  }
  /**
   * Is the path a FIFO pipe?
   */
  isFIFO() {
    return (this.#type & IFMT) === IFIFO;
  }
  /**
   * Is the path a socket?
   */
  isSocket() {
    return (this.#type & IFMT) === IFSOCK;
  }
  /**
   * Is the path a symbolic link?
   */
  isSymbolicLink() {
    return (this.#type & IFLNK) === IFLNK;
  }
  /**
   * Return the entry if it has been subject of a successful lstat, or
   * undefined otherwise.
   *
   * Does not read the filesystem, so an undefined result *could* simply
   * mean that we haven't called lstat on it.
   */
  lstatCached() {
    return this.#type & LSTAT_CALLED ? this : void 0;
  }
  /**
   * Return the cached link target if the entry has been the subject of a
   * successful readlink, or undefined otherwise.
   *
   * Does not read the filesystem, so an undefined result *could* just mean we
   * don't have any cached data. Only use it if you are very sure that a
   * readlink() has been called at some point.
   */
  readlinkCached() {
    return this.#linkTarget;
  }
  /**
   * Returns the cached realpath target if the entry has been the subject
   * of a successful realpath, or undefined otherwise.
   *
   * Does not read the filesystem, so an undefined result *could* just mean we
   * don't have any cached data. Only use it if you are very sure that a
   * realpath() has been called at some point.
   */
  realpathCached() {
    return this.#realpath;
  }
  /**
   * Returns the cached child Path entries array if the entry has been the
   * subject of a successful readdir(), or [] otherwise.
   *
   * Does not read the filesystem, so an empty array *could* just mean we
   * don't have any cached data. Only use it if you are very sure that a
   * readdir() has been called recently enough to still be valid.
   */
  readdirCached() {
    const children = this.children();
    return children.slice(0, children.provisional);
  }
  /**
   * Return true if it's worth trying to readlink.  Ie, we don't (yet) have
   * any indication that readlink will definitely fail.
   *
   * Returns false if the path is known to not be a symlink, if a previous
   * readlink failed, or if the entry does not exist.
   */
  canReadlink() {
    if (this.#linkTarget)
      return true;
    if (!this.parent)
      return false;
    const ifmt = this.#type & IFMT;
    return !(ifmt !== UNKNOWN && ifmt !== IFLNK || this.#type & ENOREADLINK || this.#type & ENOENT);
  }
  /**
   * Return true if readdir has previously been successfully called on this
   * path, indicating that cachedReaddir() is likely valid.
   */
  calledReaddir() {
    return !!(this.#type & READDIR_CALLED);
  }
  /**
   * Returns true if the path is known to not exist. That is, a previous lstat
   * or readdir failed to verify its existence when that would have been
   * expected, or a parent entry was marked either enoent or enotdir.
   */
  isENOENT() {
    return !!(this.#type & ENOENT);
  }
  /**
   * Return true if the path is a match for the given path name.  This handles
   * case sensitivity and unicode normalization.
   *
   * Note: even on case-sensitive systems, it is **not** safe to test the
   * equality of the `.name` property to determine whether a given pathname
   * matches, due to unicode normalization mismatches.
   *
   * Always use this method instead of testing the `path.name` property
   * directly.
   */
  isNamed(n) {
    return !this.nocase ? this.#matchName === normalize(n) : this.#matchName === normalizeNocase(n);
  }
  /**
   * Return the Path object corresponding to the target of a symbolic link.
   *
   * If the Path is not a symbolic link, or if the readlink call fails for any
   * reason, `undefined` is returned.
   *
   * Result is cached, and thus may be outdated if the filesystem is mutated.
   */
  async readlink() {
    const target = this.#linkTarget;
    if (target) {
      return target;
    }
    if (!this.canReadlink()) {
      return void 0;
    }
    if (!this.parent) {
      return void 0;
    }
    try {
      const read = await this.#fs.promises.readlink(this.fullpath());
      const linkTarget = (await this.parent.realpath())?.resolve(read);
      if (linkTarget) {
        return this.#linkTarget = linkTarget;
      }
    } catch (er) {
      this.#readlinkFail(er.code);
      return void 0;
    }
  }
  /**
   * Synchronous {@link PathBase.readlink}
   */
  readlinkSync() {
    const target = this.#linkTarget;
    if (target) {
      return target;
    }
    if (!this.canReadlink()) {
      return void 0;
    }
    if (!this.parent) {
      return void 0;
    }
    try {
      const read = this.#fs.readlinkSync(this.fullpath());
      const linkTarget = this.parent.realpathSync()?.resolve(read);
      if (linkTarget) {
        return this.#linkTarget = linkTarget;
      }
    } catch (er) {
      this.#readlinkFail(er.code);
      return void 0;
    }
  }
  #readdirSuccess(children) {
    this.#type |= READDIR_CALLED;
    for (let p = children.provisional; p < children.length; p++) {
      const c = children[p];
      if (c)
        c.#markENOENT();
    }
  }
  #markENOENT() {
    if (this.#type & ENOENT)
      return;
    this.#type = (this.#type | ENOENT) & IFMT_UNKNOWN;
    this.#markChildrenENOENT();
  }
  #markChildrenENOENT() {
    const children = this.children();
    children.provisional = 0;
    for (const p of children) {
      p.#markENOENT();
    }
  }
  #markENOREALPATH() {
    this.#type |= ENOREALPATH;
    this.#markENOTDIR();
  }
  // save the information when we know the entry is not a dir
  #markENOTDIR() {
    if (this.#type & ENOTDIR)
      return;
    let t = this.#type;
    if ((t & IFMT) === IFDIR)
      t &= IFMT_UNKNOWN;
    this.#type = t | ENOTDIR;
    this.#markChildrenENOENT();
  }
  #readdirFail(code = "") {
    if (code === "ENOTDIR" || code === "EPERM") {
      this.#markENOTDIR();
    } else if (code === "ENOENT") {
      this.#markENOENT();
    } else {
      this.children().provisional = 0;
    }
  }
  #lstatFail(code = "") {
    if (code === "ENOTDIR") {
      const p = this.parent;
      p.#markENOTDIR();
    } else if (code === "ENOENT") {
      this.#markENOENT();
    }
  }
  #readlinkFail(code = "") {
    let ter = this.#type;
    ter |= ENOREADLINK;
    if (code === "ENOENT")
      ter |= ENOENT;
    if (code === "EINVAL" || code === "UNKNOWN") {
      ter &= IFMT_UNKNOWN;
    }
    this.#type = ter;
    if (code === "ENOTDIR" && this.parent) {
      this.parent.#markENOTDIR();
    }
  }
  #readdirAddChild(e, c) {
    return this.#readdirMaybePromoteChild(e, c) || this.#readdirAddNewChild(e, c);
  }
  #readdirAddNewChild(e, c) {
    const type = entToType(e);
    const child = this.newChild(e.name, type, { parent: this });
    const ifmt = child.#type & IFMT;
    if (ifmt !== IFDIR && ifmt !== IFLNK && ifmt !== UNKNOWN) {
      child.#type |= ENOTDIR;
    }
    c.unshift(child);
    c.provisional++;
    return child;
  }
  #readdirMaybePromoteChild(e, c) {
    for (let p = c.provisional; p < c.length; p++) {
      const pchild = c[p];
      const name = this.nocase ? normalizeNocase(e.name) : normalize(e.name);
      if (name !== pchild.#matchName) {
        continue;
      }
      return this.#readdirPromoteChild(e, pchild, p, c);
    }
  }
  #readdirPromoteChild(e, p, index, c) {
    const v = p.name;
    p.#type = p.#type & IFMT_UNKNOWN | entToType(e);
    if (v !== e.name)
      p.name = e.name;
    if (index !== c.provisional) {
      if (index === c.length - 1)
        c.pop();
      else
        c.splice(index, 1);
      c.unshift(p);
    }
    c.provisional++;
    return p;
  }
  /**
   * Call lstat() on this Path, and update all known information that can be
   * determined.
   *
   * Note that unlike `fs.lstat()`, the returned value does not contain some
   * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
   * information is required, you will need to call `fs.lstat` yourself.
   *
   * If the Path refers to a nonexistent file, or if the lstat call fails for
   * any reason, `undefined` is returned.  Otherwise the updated Path object is
   * returned.
   *
   * Results are cached, and thus may be out of date if the filesystem is
   * mutated.
   */
  async lstat() {
    if ((this.#type & ENOENT) === 0) {
      try {
        this.#applyStat(await this.#fs.promises.lstat(this.fullpath()));
        return this;
      } catch (er) {
        this.#lstatFail(er.code);
      }
    }
  }
  /**
   * synchronous {@link PathBase.lstat}
   */
  lstatSync() {
    if ((this.#type & ENOENT) === 0) {
      try {
        this.#applyStat(this.#fs.lstatSync(this.fullpath()));
        return this;
      } catch (er) {
        this.#lstatFail(er.code);
      }
    }
  }
  #applyStat(st) {
    const { atime, atimeMs, birthtime, birthtimeMs, blksize, blocks, ctime, ctimeMs, dev, gid, ino, mode, mtime, mtimeMs, nlink, rdev, size, uid } = st;
    this.#atime = atime;
    this.#atimeMs = atimeMs;
    this.#birthtime = birthtime;
    this.#birthtimeMs = birthtimeMs;
    this.#blksize = blksize;
    this.#blocks = blocks;
    this.#ctime = ctime;
    this.#ctimeMs = ctimeMs;
    this.#dev = dev;
    this.#gid = gid;
    this.#ino = ino;
    this.#mode = mode;
    this.#mtime = mtime;
    this.#mtimeMs = mtimeMs;
    this.#nlink = nlink;
    this.#rdev = rdev;
    this.#size = size;
    this.#uid = uid;
    const ifmt = entToType(st);
    this.#type = this.#type & IFMT_UNKNOWN | ifmt | LSTAT_CALLED;
    if (ifmt !== UNKNOWN && ifmt !== IFDIR && ifmt !== IFLNK) {
      this.#type |= ENOTDIR;
    }
  }
  #onReaddirCB = [];
  #readdirCBInFlight = false;
  #callOnReaddirCB(children) {
    this.#readdirCBInFlight = false;
    const cbs = this.#onReaddirCB.slice();
    this.#onReaddirCB.length = 0;
    cbs.forEach((cb) => cb(null, children));
  }
  /**
   * Standard node-style callback interface to get list of directory entries.
   *
   * If the Path cannot or does not contain any children, then an empty array
   * is returned.
   *
   * Results are cached, and thus may be out of date if the filesystem is
   * mutated.
   *
   * @param cb The callback called with (er, entries).  Note that the `er`
   * param is somewhat extraneous, as all readdir() errors are handled and
   * simply result in an empty set of entries being returned.
   * @param allowZalgo Boolean indicating that immediately known results should
   * *not* be deferred with `queueMicrotask`. Defaults to `false`. Release
   * zalgo at your peril, the dark pony lord is devious and unforgiving.
   */
  readdirCB(cb, allowZalgo = false) {
    if (!this.canReaddir()) {
      if (allowZalgo)
        cb(null, []);
      else
        queueMicrotask(() => cb(null, []));
      return;
    }
    const children = this.children();
    if (this.calledReaddir()) {
      const c = children.slice(0, children.provisional);
      if (allowZalgo)
        cb(null, c);
      else
        queueMicrotask(() => cb(null, c));
      return;
    }
    this.#onReaddirCB.push(cb);
    if (this.#readdirCBInFlight) {
      return;
    }
    this.#readdirCBInFlight = true;
    const fullpath = this.fullpath();
    this.#fs.readdir(fullpath, { withFileTypes: true }, (er, entries) => {
      if (er) {
        this.#readdirFail(er.code);
        children.provisional = 0;
      } else {
        for (const e of entries) {
          this.#readdirAddChild(e, children);
        }
        this.#readdirSuccess(children);
      }
      this.#callOnReaddirCB(children.slice(0, children.provisional));
      return;
    });
  }
  #asyncReaddirInFlight;
  /**
   * Return an array of known child entries.
   *
   * If the Path cannot or does not contain any children, then an empty array
   * is returned.
   *
   * Results are cached, and thus may be out of date if the filesystem is
   * mutated.
   */
  async readdir() {
    if (!this.canReaddir()) {
      return [];
    }
    const children = this.children();
    if (this.calledReaddir()) {
      return children.slice(0, children.provisional);
    }
    const fullpath = this.fullpath();
    if (this.#asyncReaddirInFlight) {
      await this.#asyncReaddirInFlight;
    } else {
      let resolve2 = () => {
      };
      this.#asyncReaddirInFlight = new Promise((res) => resolve2 = res);
      try {
        for (const e of await this.#fs.promises.readdir(fullpath, {
          withFileTypes: true
        })) {
          this.#readdirAddChild(e, children);
        }
        this.#readdirSuccess(children);
      } catch (er) {
        this.#readdirFail(er.code);
        children.provisional = 0;
      }
      this.#asyncReaddirInFlight = void 0;
      resolve2();
    }
    return children.slice(0, children.provisional);
  }
  /**
   * synchronous {@link PathBase.readdir}
   */
  readdirSync() {
    if (!this.canReaddir()) {
      return [];
    }
    const children = this.children();
    if (this.calledReaddir()) {
      return children.slice(0, children.provisional);
    }
    const fullpath = this.fullpath();
    try {
      for (const e of this.#fs.readdirSync(fullpath, {
        withFileTypes: true
      })) {
        this.#readdirAddChild(e, children);
      }
      this.#readdirSuccess(children);
    } catch (er) {
      this.#readdirFail(er.code);
      children.provisional = 0;
    }
    return children.slice(0, children.provisional);
  }
  canReaddir() {
    if (this.#type & ENOCHILD)
      return false;
    const ifmt = IFMT & this.#type;
    if (!(ifmt === UNKNOWN || ifmt === IFDIR || ifmt === IFLNK)) {
      return false;
    }
    return true;
  }
  shouldWalk(dirs, walkFilter) {
    return (this.#type & IFDIR) === IFDIR && !(this.#type & ENOCHILD) && !dirs.has(this) && (!walkFilter || walkFilter(this));
  }
  /**
   * Return the Path object corresponding to path as resolved
   * by realpath(3).
   *
   * If the realpath call fails for any reason, `undefined` is returned.
   *
   * Result is cached, and thus may be outdated if the filesystem is mutated.
   * On success, returns a Path object.
   */
  async realpath() {
    if (this.#realpath)
      return this.#realpath;
    if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type)
      return void 0;
    try {
      const rp = await this.#fs.promises.realpath(this.fullpath());
      return this.#realpath = this.resolve(rp);
    } catch (_) {
      this.#markENOREALPATH();
    }
  }
  /**
   * Synchronous {@link realpath}
   */
  realpathSync() {
    if (this.#realpath)
      return this.#realpath;
    if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type)
      return void 0;
    try {
      const rp = this.#fs.realpathSync(this.fullpath());
      return this.#realpath = this.resolve(rp);
    } catch (_) {
      this.#markENOREALPATH();
    }
  }
  /**
   * Internal method to mark this Path object as the scurry cwd,
   * called by {@link PathScurry#chdir}
   *
   * @internal
   */
  [setAsCwd](oldCwd) {
    if (oldCwd === this)
      return;
    oldCwd.isCWD = false;
    this.isCWD = true;
    const changed = /* @__PURE__ */ new Set([]);
    let rp = [];
    let p = this;
    while (p && p.parent) {
      changed.add(p);
      p.#relative = rp.join(this.sep);
      p.#relativePosix = rp.join("/");
      p = p.parent;
      rp.push("..");
    }
    p = oldCwd;
    while (p && p.parent && !changed.has(p)) {
      p.#relative = void 0;
      p.#relativePosix = void 0;
      p = p.parent;
    }
  }
};
var PathWin32 = class _PathWin32 extends PathBase {
  /**
   * Separator for generating path strings.
   */
  sep = "\\";
  /**
   * Separator for parsing path strings.
   */
  splitSep = eitherSep;
  /**
   * Do not create new Path objects directly.  They should always be accessed
   * via the PathScurry class or other methods on the Path class.
   *
   * @internal
   */
  constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
    super(name, type, root, roots, nocase, children, opts);
  }
  /**
   * @internal
   */
  newChild(name, type = UNKNOWN, opts = {}) {
    return new _PathWin32(name, type, this.root, this.roots, this.nocase, this.childrenCache(), opts);
  }
  /**
   * @internal
   */
  getRootString(path14) {
    return win32.parse(path14).root;
  }
  /**
   * @internal
   */
  getRoot(rootPath) {
    rootPath = uncToDrive(rootPath.toUpperCase());
    if (rootPath === this.root.name) {
      return this.root;
    }
    for (const [compare, root] of Object.entries(this.roots)) {
      if (this.sameRoot(rootPath, compare)) {
        return this.roots[rootPath] = root;
      }
    }
    return this.roots[rootPath] = new PathScurryWin32(rootPath, this).root;
  }
  /**
   * @internal
   */
  sameRoot(rootPath, compare = this.root.name) {
    rootPath = rootPath.toUpperCase().replace(/\//g, "\\").replace(uncDriveRegexp, "$1\\");
    return rootPath === compare;
  }
};
var PathPosix = class _PathPosix extends PathBase {
  /**
   * separator for parsing path strings
   */
  splitSep = "/";
  /**
   * separator for generating path strings
   */
  sep = "/";
  /**
   * Do not create new Path objects directly.  They should always be accessed
   * via the PathScurry class or other methods on the Path class.
   *
   * @internal
   */
  constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
    super(name, type, root, roots, nocase, children, opts);
  }
  /**
   * @internal
   */
  getRootString(path14) {
    return path14.startsWith("/") ? "/" : "";
  }
  /**
   * @internal
   */
  getRoot(_rootPath) {
    return this.root;
  }
  /**
   * @internal
   */
  newChild(name, type = UNKNOWN, opts = {}) {
    return new _PathPosix(name, type, this.root, this.roots, this.nocase, this.childrenCache(), opts);
  }
};
var PathScurryBase = class {
  /**
   * The root Path entry for the current working directory of this Scurry
   */
  root;
  /**
   * The string path for the root of this Scurry's current working directory
   */
  rootPath;
  /**
   * A collection of all roots encountered, referenced by rootPath
   */
  roots;
  /**
   * The Path entry corresponding to this PathScurry's current working directory.
   */
  cwd;
  #resolveCache;
  #resolvePosixCache;
  #children;
  /**
   * Perform path comparisons case-insensitively.
   *
   * Defaults true on Darwin and Windows systems, false elsewhere.
   */
  nocase;
  #fs;
  /**
   * This class should not be instantiated directly.
   *
   * Use PathScurryWin32, PathScurryDarwin, PathScurryPosix, or PathScurry
   *
   * @internal
   */
  constructor(cwd = process.cwd(), pathImpl, sep2, { nocase, childrenCacheSize = 16 * 1024, fs: fs10 = defaultFS } = {}) {
    this.#fs = fsFromOption(fs10);
    if (cwd instanceof URL || cwd.startsWith("file://")) {
      cwd = fileURLToPath(cwd);
    }
    const cwdPath = pathImpl.resolve(cwd);
    this.roots = /* @__PURE__ */ Object.create(null);
    this.rootPath = this.parseRootPath(cwdPath);
    this.#resolveCache = new ResolveCache();
    this.#resolvePosixCache = new ResolveCache();
    this.#children = new ChildrenCache(childrenCacheSize);
    const split = cwdPath.substring(this.rootPath.length).split(sep2);
    if (split.length === 1 && !split[0]) {
      split.pop();
    }
    if (nocase === void 0) {
      throw new TypeError("must provide nocase setting to PathScurryBase ctor");
    }
    this.nocase = nocase;
    this.root = this.newRoot(this.#fs);
    this.roots[this.rootPath] = this.root;
    let prev = this.root;
    let len = split.length - 1;
    const joinSep = pathImpl.sep;
    let abs = this.rootPath;
    let sawFirst = false;
    for (const part of split) {
      const l = len--;
      prev = prev.child(part, {
        relative: new Array(l).fill("..").join(joinSep),
        relativePosix: new Array(l).fill("..").join("/"),
        fullpath: abs += (sawFirst ? "" : joinSep) + part
      });
      sawFirst = true;
    }
    this.cwd = prev;
  }
  /**
   * Get the depth of a provided path, string, or the cwd
   */
  depth(path14 = this.cwd) {
    if (typeof path14 === "string") {
      path14 = this.cwd.resolve(path14);
    }
    return path14.depth();
  }
  /**
   * Return the cache of child entries.  Exposed so subclasses can create
   * child Path objects in a platform-specific way.
   *
   * @internal
   */
  childrenCache() {
    return this.#children;
  }
  /**
   * Resolve one or more path strings to a resolved string
   *
   * Same interface as require('path').resolve.
   *
   * Much faster than path.resolve() when called multiple times for the same
   * path, because the resolved Path objects are cached.  Much slower
   * otherwise.
   */
  resolve(...paths) {
    let r = "";
    for (let i = paths.length - 1; i >= 0; i--) {
      const p = paths[i];
      if (!p || p === ".")
        continue;
      r = r ? `${p}/${r}` : p;
      if (this.isAbsolute(p)) {
        break;
      }
    }
    const cached = this.#resolveCache.get(r);
    if (cached !== void 0) {
      return cached;
    }
    const result = this.cwd.resolve(r).fullpath();
    this.#resolveCache.set(r, result);
    return result;
  }
  /**
   * Resolve one or more path strings to a resolved string, returning
   * the posix path.  Identical to .resolve() on posix systems, but on
   * windows will return a forward-slash separated UNC path.
   *
   * Same interface as require('path').resolve.
   *
   * Much faster than path.resolve() when called multiple times for the same
   * path, because the resolved Path objects are cached.  Much slower
   * otherwise.
   */
  resolvePosix(...paths) {
    let r = "";
    for (let i = paths.length - 1; i >= 0; i--) {
      const p = paths[i];
      if (!p || p === ".")
        continue;
      r = r ? `${p}/${r}` : p;
      if (this.isAbsolute(p)) {
        break;
      }
    }
    const cached = this.#resolvePosixCache.get(r);
    if (cached !== void 0) {
      return cached;
    }
    const result = this.cwd.resolve(r).fullpathPosix();
    this.#resolvePosixCache.set(r, result);
    return result;
  }
  /**
   * find the relative path from the cwd to the supplied path string or entry
   */
  relative(entry = this.cwd) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    }
    return entry.relative();
  }
  /**
   * find the relative path from the cwd to the supplied path string or
   * entry, using / as the path delimiter, even on Windows.
   */
  relativePosix(entry = this.cwd) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    }
    return entry.relativePosix();
  }
  /**
   * Return the basename for the provided string or Path object
   */
  basename(entry = this.cwd) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    }
    return entry.name;
  }
  /**
   * Return the dirname for the provided string or Path object
   */
  dirname(entry = this.cwd) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    }
    return (entry.parent || entry).fullpath();
  }
  async readdir(entry = this.cwd, opts = {
    withFileTypes: true
  }) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes } = opts;
    if (!entry.canReaddir()) {
      return [];
    } else {
      const p = await entry.readdir();
      return withFileTypes ? p : p.map((e) => e.name);
    }
  }
  readdirSync(entry = this.cwd, opts = {
    withFileTypes: true
  }) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes = true } = opts;
    if (!entry.canReaddir()) {
      return [];
    } else if (withFileTypes) {
      return entry.readdirSync();
    } else {
      return entry.readdirSync().map((e) => e.name);
    }
  }
  /**
   * Call lstat() on the string or Path object, and update all known
   * information that can be determined.
   *
   * Note that unlike `fs.lstat()`, the returned value does not contain some
   * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
   * information is required, you will need to call `fs.lstat` yourself.
   *
   * If the Path refers to a nonexistent file, or if the lstat call fails for
   * any reason, `undefined` is returned.  Otherwise the updated Path object is
   * returned.
   *
   * Results are cached, and thus may be out of date if the filesystem is
   * mutated.
   */
  async lstat(entry = this.cwd) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    }
    return entry.lstat();
  }
  /**
   * synchronous {@link PathScurryBase.lstat}
   */
  lstatSync(entry = this.cwd) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    }
    return entry.lstatSync();
  }
  async readlink(entry = this.cwd, { withFileTypes } = {
    withFileTypes: false
  }) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      withFileTypes = entry.withFileTypes;
      entry = this.cwd;
    }
    const e = await entry.readlink();
    return withFileTypes ? e : e?.fullpath();
  }
  readlinkSync(entry = this.cwd, { withFileTypes } = {
    withFileTypes: false
  }) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      withFileTypes = entry.withFileTypes;
      entry = this.cwd;
    }
    const e = entry.readlinkSync();
    return withFileTypes ? e : e?.fullpath();
  }
  async realpath(entry = this.cwd, { withFileTypes } = {
    withFileTypes: false
  }) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      withFileTypes = entry.withFileTypes;
      entry = this.cwd;
    }
    const e = await entry.realpath();
    return withFileTypes ? e : e?.fullpath();
  }
  realpathSync(entry = this.cwd, { withFileTypes } = {
    withFileTypes: false
  }) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      withFileTypes = entry.withFileTypes;
      entry = this.cwd;
    }
    const e = entry.realpathSync();
    return withFileTypes ? e : e?.fullpath();
  }
  async walk(entry = this.cwd, opts = {}) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes = true, follow = false, filter: filter2, walkFilter } = opts;
    const results = [];
    if (!filter2 || filter2(entry)) {
      results.push(withFileTypes ? entry : entry.fullpath());
    }
    const dirs = /* @__PURE__ */ new Set();
    const walk3 = (dir, cb) => {
      dirs.add(dir);
      dir.readdirCB((er, entries) => {
        if (er) {
          return cb(er);
        }
        let len = entries.length;
        if (!len)
          return cb();
        const next = () => {
          if (--len === 0) {
            cb();
          }
        };
        for (const e of entries) {
          if (!filter2 || filter2(e)) {
            results.push(withFileTypes ? e : e.fullpath());
          }
          if (follow && e.isSymbolicLink()) {
            e.realpath().then((r) => r?.isUnknown() ? r.lstat() : r).then((r) => r?.shouldWalk(dirs, walkFilter) ? walk3(r, next) : next());
          } else {
            if (e.shouldWalk(dirs, walkFilter)) {
              walk3(e, next);
            } else {
              next();
            }
          }
        }
      }, true);
    };
    const start = entry;
    return new Promise((res, rej) => {
      walk3(start, (er) => {
        if (er)
          return rej(er);
        res(results);
      });
    });
  }
  walkSync(entry = this.cwd, opts = {}) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes = true, follow = false, filter: filter2, walkFilter } = opts;
    const results = [];
    if (!filter2 || filter2(entry)) {
      results.push(withFileTypes ? entry : entry.fullpath());
    }
    const dirs = /* @__PURE__ */ new Set([entry]);
    for (const dir of dirs) {
      const entries = dir.readdirSync();
      for (const e of entries) {
        if (!filter2 || filter2(e)) {
          results.push(withFileTypes ? e : e.fullpath());
        }
        let r = e;
        if (e.isSymbolicLink()) {
          if (!(follow && (r = e.realpathSync())))
            continue;
          if (r.isUnknown())
            r.lstatSync();
        }
        if (r.shouldWalk(dirs, walkFilter)) {
          dirs.add(r);
        }
      }
    }
    return results;
  }
  /**
   * Support for `for await`
   *
   * Alias for {@link PathScurryBase.iterate}
   *
   * Note: As of Node 19, this is very slow, compared to other methods of
   * walking.  Consider using {@link PathScurryBase.stream} if memory overhead
   * and backpressure are concerns, or {@link PathScurryBase.walk} if not.
   */
  [Symbol.asyncIterator]() {
    return this.iterate();
  }
  iterate(entry = this.cwd, options3 = {}) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      options3 = entry;
      entry = this.cwd;
    }
    return this.stream(entry, options3)[Symbol.asyncIterator]();
  }
  /**
   * Iterating over a PathScurry performs a synchronous walk.
   *
   * Alias for {@link PathScurryBase.iterateSync}
   */
  [Symbol.iterator]() {
    return this.iterateSync();
  }
  *iterateSync(entry = this.cwd, opts = {}) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes = true, follow = false, filter: filter2, walkFilter } = opts;
    if (!filter2 || filter2(entry)) {
      yield withFileTypes ? entry : entry.fullpath();
    }
    const dirs = /* @__PURE__ */ new Set([entry]);
    for (const dir of dirs) {
      const entries = dir.readdirSync();
      for (const e of entries) {
        if (!filter2 || filter2(e)) {
          yield withFileTypes ? e : e.fullpath();
        }
        let r = e;
        if (e.isSymbolicLink()) {
          if (!(follow && (r = e.realpathSync())))
            continue;
          if (r.isUnknown())
            r.lstatSync();
        }
        if (r.shouldWalk(dirs, walkFilter)) {
          dirs.add(r);
        }
      }
    }
  }
  stream(entry = this.cwd, opts = {}) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes = true, follow = false, filter: filter2, walkFilter } = opts;
    const results = new Minipass({ objectMode: true });
    if (!filter2 || filter2(entry)) {
      results.write(withFileTypes ? entry : entry.fullpath());
    }
    const dirs = /* @__PURE__ */ new Set();
    const queue = [entry];
    let processing = 0;
    const process3 = () => {
      let paused = false;
      while (!paused) {
        const dir = queue.shift();
        if (!dir) {
          if (processing === 0)
            results.end();
          return;
        }
        processing++;
        dirs.add(dir);
        const onReaddir = (er, entries, didRealpaths = false) => {
          if (er)
            return results.emit("error", er);
          if (follow && !didRealpaths) {
            const promises = [];
            for (const e of entries) {
              if (e.isSymbolicLink()) {
                promises.push(e.realpath().then((r) => r?.isUnknown() ? r.lstat() : r));
              }
            }
            if (promises.length) {
              Promise.all(promises).then(() => onReaddir(null, entries, true));
              return;
            }
          }
          for (const e of entries) {
            if (e && (!filter2 || filter2(e))) {
              if (!results.write(withFileTypes ? e : e.fullpath())) {
                paused = true;
              }
            }
          }
          processing--;
          for (const e of entries) {
            const r = e.realpathCached() || e;
            if (r.shouldWalk(dirs, walkFilter)) {
              queue.push(r);
            }
          }
          if (paused && !results.flowing) {
            results.once("drain", process3);
          } else if (!sync2) {
            process3();
          }
        };
        let sync2 = true;
        dir.readdirCB(onReaddir, true);
        sync2 = false;
      }
    };
    process3();
    return results;
  }
  streamSync(entry = this.cwd, opts = {}) {
    if (typeof entry === "string") {
      entry = this.cwd.resolve(entry);
    } else if (!(entry instanceof PathBase)) {
      opts = entry;
      entry = this.cwd;
    }
    const { withFileTypes = true, follow = false, filter: filter2, walkFilter } = opts;
    const results = new Minipass({ objectMode: true });
    const dirs = /* @__PURE__ */ new Set();
    if (!filter2 || filter2(entry)) {
      results.write(withFileTypes ? entry : entry.fullpath());
    }
    const queue = [entry];
    let processing = 0;
    const process3 = () => {
      let paused = false;
      while (!paused) {
        const dir = queue.shift();
        if (!dir) {
          if (processing === 0)
            results.end();
          return;
        }
        processing++;
        dirs.add(dir);
        const entries = dir.readdirSync();
        for (const e of entries) {
          if (!filter2 || filter2(e)) {
            if (!results.write(withFileTypes ? e : e.fullpath())) {
              paused = true;
            }
          }
        }
        processing--;
        for (const e of entries) {
          let r = e;
          if (e.isSymbolicLink()) {
            if (!(follow && (r = e.realpathSync())))
              continue;
            if (r.isUnknown())
              r.lstatSync();
          }
          if (r.shouldWalk(dirs, walkFilter)) {
            queue.push(r);
          }
        }
      }
      if (paused && !results.flowing)
        results.once("drain", process3);
    };
    process3();
    return results;
  }
  chdir(path14 = this.cwd) {
    const oldCwd = this.cwd;
    this.cwd = typeof path14 === "string" ? this.cwd.resolve(path14) : path14;
    this.cwd[setAsCwd](oldCwd);
  }
};
var PathScurryWin32 = class extends PathScurryBase {
  /**
   * separator for generating path strings
   */
  sep = "\\";
  constructor(cwd = process.cwd(), opts = {}) {
    const { nocase = true } = opts;
    super(cwd, win32, "\\", { ...opts, nocase });
    this.nocase = nocase;
    for (let p = this.cwd; p; p = p.parent) {
      p.nocase = this.nocase;
    }
  }
  /**
   * @internal
   */
  parseRootPath(dir) {
    return win32.parse(dir).root.toUpperCase();
  }
  /**
   * @internal
   */
  newRoot(fs10) {
    return new PathWin32(this.rootPath, IFDIR, void 0, this.roots, this.nocase, this.childrenCache(), { fs: fs10 });
  }
  /**
   * Return true if the provided path string is an absolute path
   */
  isAbsolute(p) {
    return p.startsWith("/") || p.startsWith("\\") || /^[a-z]:(\/|\\)/i.test(p);
  }
};
var PathScurryPosix = class extends PathScurryBase {
  /**
   * separator for generating path strings
   */
  sep = "/";
  constructor(cwd = process.cwd(), opts = {}) {
    const { nocase = false } = opts;
    super(cwd, posix, "/", { ...opts, nocase });
    this.nocase = nocase;
  }
  /**
   * @internal
   */
  parseRootPath(_dir) {
    return "/";
  }
  /**
   * @internal
   */
  newRoot(fs10) {
    return new PathPosix(this.rootPath, IFDIR, void 0, this.roots, this.nocase, this.childrenCache(), { fs: fs10 });
  }
  /**
   * Return true if the provided path string is an absolute path
   */
  isAbsolute(p) {
    return p.startsWith("/");
  }
};
var PathScurryDarwin = class extends PathScurryPosix {
  constructor(cwd = process.cwd(), opts = {}) {
    const { nocase = true } = opts;
    super(cwd, { ...opts, nocase });
  }
};
var Path = process.platform === "win32" ? PathWin32 : PathPosix;
var PathScurry = process.platform === "win32" ? PathScurryWin32 : process.platform === "darwin" ? PathScurryDarwin : PathScurryPosix;

// node_modules/@node-minify/core/node_modules/glob/dist/mjs/glob.js
import { fileURLToPath as fileURLToPath2 } from "url";

// node_modules/@node-minify/core/node_modules/glob/dist/mjs/pattern.js
var isPatternList = (pl) => pl.length >= 1;
var isGlobList = (gl) => gl.length >= 1;
var Pattern = class _Pattern {
  #patternList;
  #globList;
  #index;
  length;
  #platform;
  #rest;
  #globString;
  #isDrive;
  #isUNC;
  #isAbsolute;
  #followGlobstar = true;
  constructor(patternList, globList, index, platform) {
    if (!isPatternList(patternList)) {
      throw new TypeError("empty pattern list");
    }
    if (!isGlobList(globList)) {
      throw new TypeError("empty glob list");
    }
    if (globList.length !== patternList.length) {
      throw new TypeError("mismatched pattern list and glob list lengths");
    }
    this.length = patternList.length;
    if (index < 0 || index >= this.length) {
      throw new TypeError("index out of range");
    }
    this.#patternList = patternList;
    this.#globList = globList;
    this.#index = index;
    this.#platform = platform;
    if (this.#index === 0) {
      if (this.isUNC()) {
        const [p0, p1, p2, p3, ...prest] = this.#patternList;
        const [g0, g1, g2, g3, ...grest] = this.#globList;
        if (prest[0] === "") {
          prest.shift();
          grest.shift();
        }
        const p = [p0, p1, p2, p3, ""].join("/");
        const g = [g0, g1, g2, g3, ""].join("/");
        this.#patternList = [p, ...prest];
        this.#globList = [g, ...grest];
        this.length = this.#patternList.length;
      } else if (this.isDrive() || this.isAbsolute()) {
        const [p1, ...prest] = this.#patternList;
        const [g1, ...grest] = this.#globList;
        if (prest[0] === "") {
          prest.shift();
          grest.shift();
        }
        const p = p1 + "/";
        const g = g1 + "/";
        this.#patternList = [p, ...prest];
        this.#globList = [g, ...grest];
        this.length = this.#patternList.length;
      }
    }
  }
  /**
   * The first entry in the parsed list of patterns
   */
  pattern() {
    return this.#patternList[this.#index];
  }
  /**
   * true of if pattern() returns a string
   */
  isString() {
    return typeof this.#patternList[this.#index] === "string";
  }
  /**
   * true of if pattern() returns GLOBSTAR
   */
  isGlobstar() {
    return this.#patternList[this.#index] === GLOBSTAR;
  }
  /**
   * true if pattern() returns a regexp
   */
  isRegExp() {
    return this.#patternList[this.#index] instanceof RegExp;
  }
  /**
   * The /-joined set of glob parts that make up this pattern
   */
  globString() {
    return this.#globString = this.#globString || (this.#index === 0 ? this.isAbsolute() ? this.#globList[0] + this.#globList.slice(1).join("/") : this.#globList.join("/") : this.#globList.slice(this.#index).join("/"));
  }
  /**
   * true if there are more pattern parts after this one
   */
  hasMore() {
    return this.length > this.#index + 1;
  }
  /**
   * The rest of the pattern after this part, or null if this is the end
   */
  rest() {
    if (this.#rest !== void 0)
      return this.#rest;
    if (!this.hasMore())
      return this.#rest = null;
    this.#rest = new _Pattern(this.#patternList, this.#globList, this.#index + 1, this.#platform);
    this.#rest.#isAbsolute = this.#isAbsolute;
    this.#rest.#isUNC = this.#isUNC;
    this.#rest.#isDrive = this.#isDrive;
    return this.#rest;
  }
  /**
   * true if the pattern represents a //unc/path/ on windows
   */
  isUNC() {
    const pl = this.#patternList;
    return this.#isUNC !== void 0 ? this.#isUNC : this.#isUNC = this.#platform === "win32" && this.#index === 0 && pl[0] === "" && pl[1] === "" && typeof pl[2] === "string" && !!pl[2] && typeof pl[3] === "string" && !!pl[3];
  }
  // pattern like C:/...
  // split = ['C:', ...]
  // XXX: would be nice to handle patterns like `c:*` to test the cwd
  // in c: for *, but I don't know of a way to even figure out what that
  // cwd is without actually chdir'ing into it?
  /**
   * True if the pattern starts with a drive letter on Windows
   */
  isDrive() {
    const pl = this.#patternList;
    return this.#isDrive !== void 0 ? this.#isDrive : this.#isDrive = this.#platform === "win32" && this.#index === 0 && this.length > 1 && typeof pl[0] === "string" && /^[a-z]:$/i.test(pl[0]);
  }
  // pattern = '/' or '/...' or '/x/...'
  // split = ['', ''] or ['', ...] or ['', 'x', ...]
  // Drive and UNC both considered absolute on windows
  /**
   * True if the pattern is rooted on an absolute path
   */
  isAbsolute() {
    const pl = this.#patternList;
    return this.#isAbsolute !== void 0 ? this.#isAbsolute : this.#isAbsolute = pl[0] === "" && pl.length > 1 || this.isDrive() || this.isUNC();
  }
  /**
   * consume the root of the pattern, and return it
   */
  root() {
    const p = this.#patternList[0];
    return typeof p === "string" && this.isAbsolute() && this.#index === 0 ? p : "";
  }
  /**
   * Check to see if the current globstar pattern is allowed to follow
   * a symbolic link.
   */
  checkFollowGlobstar() {
    return !(this.#index === 0 || !this.isGlobstar() || !this.#followGlobstar);
  }
  /**
   * Mark that the current globstar pattern is following a symbolic link
   */
  markFollowGlobstar() {
    if (this.#index === 0 || !this.isGlobstar() || !this.#followGlobstar)
      return false;
    this.#followGlobstar = false;
    return true;
  }
};

// node_modules/@node-minify/core/node_modules/minipass/index.mjs
import EE from "events";
import Stream2 from "stream";
import stringdecoder from "string_decoder";
var proc2 = typeof process === "object" && process ? process : {
  stdout: null,
  stderr: null
};
var SD = stringdecoder.StringDecoder;
var EOF2 = Symbol("EOF");
var MAYBE_EMIT_END2 = Symbol("maybeEmitEnd");
var EMITTED_END2 = Symbol("emittedEnd");
var EMITTING_END2 = Symbol("emittingEnd");
var EMITTED_ERROR2 = Symbol("emittedError");
var CLOSED2 = Symbol("closed");
var READ2 = Symbol("read");
var FLUSH2 = Symbol("flush");
var FLUSHCHUNK2 = Symbol("flushChunk");
var ENCODING2 = Symbol("encoding");
var DECODER2 = Symbol("decoder");
var FLOWING2 = Symbol("flowing");
var PAUSED2 = Symbol("paused");
var RESUME2 = Symbol("resume");
var BUFFER2 = Symbol("buffer");
var PIPES2 = Symbol("pipes");
var BUFFERLENGTH2 = Symbol("bufferLength");
var BUFFERPUSH2 = Symbol("bufferPush");
var BUFFERSHIFT2 = Symbol("bufferShift");
var OBJECTMODE2 = Symbol("objectMode");
var DESTROYED2 = Symbol("destroyed");
var ERROR2 = Symbol("error");
var EMITDATA2 = Symbol("emitData");
var EMITEND3 = Symbol("emitEnd");
var EMITEND22 = Symbol("emitEnd2");
var ASYNC2 = Symbol("async");
var ABORT2 = Symbol("abort");
var ABORTED2 = Symbol("aborted");
var SIGNAL2 = Symbol("signal");
var defer2 = (fn) => Promise.resolve().then(fn);
var doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== "1";
var ASYNCITERATOR = doIter && Symbol.asyncIterator || Symbol("asyncIterator not implemented");
var ITERATOR = doIter && Symbol.iterator || Symbol("iterator not implemented");
var isEndish2 = (ev) => ev === "end" || ev === "finish" || ev === "prefinish";
var isArrayBuffer = (b) => b instanceof ArrayBuffer || typeof b === "object" && b.constructor && b.constructor.name === "ArrayBuffer" && b.byteLength >= 0;
var isArrayBufferView2 = (b) => !Buffer.isBuffer(b) && ArrayBuffer.isView(b);
var Pipe2 = class {
  constructor(src, dest, opts) {
    this.src = src;
    this.dest = dest;
    this.opts = opts;
    this.ondrain = () => src[RESUME2]();
    dest.on("drain", this.ondrain);
  }
  unpipe() {
    this.dest.removeListener("drain", this.ondrain);
  }
  // istanbul ignore next - only here for the prototype
  proxyErrors() {
  }
  end() {
    this.unpipe();
    if (this.opts.end)
      this.dest.end();
  }
};
var PipeProxyErrors2 = class extends Pipe2 {
  unpipe() {
    this.src.removeListener("error", this.proxyErrors);
    super.unpipe();
  }
  constructor(src, dest, opts) {
    super(src, dest, opts);
    this.proxyErrors = (er) => dest.emit("error", er);
    src.on("error", this.proxyErrors);
  }
};
var Minipass2 = class _Minipass extends Stream2 {
  constructor(options3) {
    super();
    this[FLOWING2] = false;
    this[PAUSED2] = false;
    this[PIPES2] = [];
    this[BUFFER2] = [];
    this[OBJECTMODE2] = options3 && options3.objectMode || false;
    if (this[OBJECTMODE2])
      this[ENCODING2] = null;
    else
      this[ENCODING2] = options3 && options3.encoding || null;
    if (this[ENCODING2] === "buffer")
      this[ENCODING2] = null;
    this[ASYNC2] = options3 && !!options3.async || false;
    this[DECODER2] = this[ENCODING2] ? new SD(this[ENCODING2]) : null;
    this[EOF2] = false;
    this[EMITTED_END2] = false;
    this[EMITTING_END2] = false;
    this[CLOSED2] = false;
    this[EMITTED_ERROR2] = null;
    this.writable = true;
    this.readable = true;
    this[BUFFERLENGTH2] = 0;
    this[DESTROYED2] = false;
    if (options3 && options3.debugExposeBuffer === true) {
      Object.defineProperty(this, "buffer", { get: () => this[BUFFER2] });
    }
    if (options3 && options3.debugExposePipes === true) {
      Object.defineProperty(this, "pipes", { get: () => this[PIPES2] });
    }
    this[SIGNAL2] = options3 && options3.signal;
    this[ABORTED2] = false;
    if (this[SIGNAL2]) {
      this[SIGNAL2].addEventListener("abort", () => this[ABORT2]());
      if (this[SIGNAL2].aborted) {
        this[ABORT2]();
      }
    }
  }
  get bufferLength() {
    return this[BUFFERLENGTH2];
  }
  get encoding() {
    return this[ENCODING2];
  }
  set encoding(enc) {
    if (this[OBJECTMODE2])
      throw new Error("cannot set encoding in objectMode");
    if (this[ENCODING2] && enc !== this[ENCODING2] && (this[DECODER2] && this[DECODER2].lastNeed || this[BUFFERLENGTH2]))
      throw new Error("cannot change encoding");
    if (this[ENCODING2] !== enc) {
      this[DECODER2] = enc ? new SD(enc) : null;
      if (this[BUFFER2].length)
        this[BUFFER2] = this[BUFFER2].map((chunk) => this[DECODER2].write(chunk));
    }
    this[ENCODING2] = enc;
  }
  setEncoding(enc) {
    this.encoding = enc;
  }
  get objectMode() {
    return this[OBJECTMODE2];
  }
  set objectMode(om) {
    this[OBJECTMODE2] = this[OBJECTMODE2] || !!om;
  }
  get ["async"]() {
    return this[ASYNC2];
  }
  set ["async"](a) {
    this[ASYNC2] = this[ASYNC2] || !!a;
  }
  // drop everything and get out of the flow completely
  [ABORT2]() {
    this[ABORTED2] = true;
    this.emit("abort", this[SIGNAL2].reason);
    this.destroy(this[SIGNAL2].reason);
  }
  get aborted() {
    return this[ABORTED2];
  }
  set aborted(_) {
  }
  write(chunk, encoding, cb) {
    if (this[ABORTED2])
      return false;
    if (this[EOF2])
      throw new Error("write after end");
    if (this[DESTROYED2]) {
      this.emit(
        "error",
        Object.assign(
          new Error("Cannot call write after a stream was destroyed"),
          { code: "ERR_STREAM_DESTROYED" }
        )
      );
      return true;
    }
    if (typeof encoding === "function")
      cb = encoding, encoding = "utf8";
    if (!encoding)
      encoding = "utf8";
    const fn = this[ASYNC2] ? defer2 : (f) => f();
    if (!this[OBJECTMODE2] && !Buffer.isBuffer(chunk)) {
      if (isArrayBufferView2(chunk))
        chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
      else if (isArrayBuffer(chunk))
        chunk = Buffer.from(chunk);
      else if (typeof chunk !== "string")
        this.objectMode = true;
    }
    if (this[OBJECTMODE2]) {
      if (this.flowing && this[BUFFERLENGTH2] !== 0)
        this[FLUSH2](true);
      if (this.flowing)
        this.emit("data", chunk);
      else
        this[BUFFERPUSH2](chunk);
      if (this[BUFFERLENGTH2] !== 0)
        this.emit("readable");
      if (cb)
        fn(cb);
      return this.flowing;
    }
    if (!chunk.length) {
      if (this[BUFFERLENGTH2] !== 0)
        this.emit("readable");
      if (cb)
        fn(cb);
      return this.flowing;
    }
    if (typeof chunk === "string" && // unless it is a string already ready for us to use
    !(encoding === this[ENCODING2] && !this[DECODER2].lastNeed)) {
      chunk = Buffer.from(chunk, encoding);
    }
    if (Buffer.isBuffer(chunk) && this[ENCODING2])
      chunk = this[DECODER2].write(chunk);
    if (this.flowing && this[BUFFERLENGTH2] !== 0)
      this[FLUSH2](true);
    if (this.flowing)
      this.emit("data", chunk);
    else
      this[BUFFERPUSH2](chunk);
    if (this[BUFFERLENGTH2] !== 0)
      this.emit("readable");
    if (cb)
      fn(cb);
    return this.flowing;
  }
  read(n) {
    if (this[DESTROYED2])
      return null;
    if (this[BUFFERLENGTH2] === 0 || n === 0 || n > this[BUFFERLENGTH2]) {
      this[MAYBE_EMIT_END2]();
      return null;
    }
    if (this[OBJECTMODE2])
      n = null;
    if (this[BUFFER2].length > 1 && !this[OBJECTMODE2]) {
      if (this.encoding)
        this[BUFFER2] = [this[BUFFER2].join("")];
      else
        this[BUFFER2] = [Buffer.concat(this[BUFFER2], this[BUFFERLENGTH2])];
    }
    const ret = this[READ2](n || null, this[BUFFER2][0]);
    this[MAYBE_EMIT_END2]();
    return ret;
  }
  [READ2](n, chunk) {
    if (n === chunk.length || n === null)
      this[BUFFERSHIFT2]();
    else {
      this[BUFFER2][0] = chunk.slice(n);
      chunk = chunk.slice(0, n);
      this[BUFFERLENGTH2] -= n;
    }
    this.emit("data", chunk);
    if (!this[BUFFER2].length && !this[EOF2])
      this.emit("drain");
    return chunk;
  }
  end(chunk, encoding, cb) {
    if (typeof chunk === "function")
      cb = chunk, chunk = null;
    if (typeof encoding === "function")
      cb = encoding, encoding = "utf8";
    if (chunk)
      this.write(chunk, encoding);
    if (cb)
      this.once("end", cb);
    this[EOF2] = true;
    this.writable = false;
    if (this.flowing || !this[PAUSED2])
      this[MAYBE_EMIT_END2]();
    return this;
  }
  // don't let the internal resume be overwritten
  [RESUME2]() {
    if (this[DESTROYED2])
      return;
    this[PAUSED2] = false;
    this[FLOWING2] = true;
    this.emit("resume");
    if (this[BUFFER2].length)
      this[FLUSH2]();
    else if (this[EOF2])
      this[MAYBE_EMIT_END2]();
    else
      this.emit("drain");
  }
  resume() {
    return this[RESUME2]();
  }
  pause() {
    this[FLOWING2] = false;
    this[PAUSED2] = true;
  }
  get destroyed() {
    return this[DESTROYED2];
  }
  get flowing() {
    return this[FLOWING2];
  }
  get paused() {
    return this[PAUSED2];
  }
  [BUFFERPUSH2](chunk) {
    if (this[OBJECTMODE2])
      this[BUFFERLENGTH2] += 1;
    else
      this[BUFFERLENGTH2] += chunk.length;
    this[BUFFER2].push(chunk);
  }
  [BUFFERSHIFT2]() {
    if (this[OBJECTMODE2])
      this[BUFFERLENGTH2] -= 1;
    else
      this[BUFFERLENGTH2] -= this[BUFFER2][0].length;
    return this[BUFFER2].shift();
  }
  [FLUSH2](noDrain) {
    do {
    } while (this[FLUSHCHUNK2](this[BUFFERSHIFT2]()) && this[BUFFER2].length);
    if (!noDrain && !this[BUFFER2].length && !this[EOF2])
      this.emit("drain");
  }
  [FLUSHCHUNK2](chunk) {
    this.emit("data", chunk);
    return this.flowing;
  }
  pipe(dest, opts) {
    if (this[DESTROYED2])
      return;
    const ended = this[EMITTED_END2];
    opts = opts || {};
    if (dest === proc2.stdout || dest === proc2.stderr)
      opts.end = false;
    else
      opts.end = opts.end !== false;
    opts.proxyErrors = !!opts.proxyErrors;
    if (ended) {
      if (opts.end)
        dest.end();
    } else {
      this[PIPES2].push(
        !opts.proxyErrors ? new Pipe2(this, dest, opts) : new PipeProxyErrors2(this, dest, opts)
      );
      if (this[ASYNC2])
        defer2(() => this[RESUME2]());
      else
        this[RESUME2]();
    }
    return dest;
  }
  unpipe(dest) {
    const p = this[PIPES2].find((p2) => p2.dest === dest);
    if (p) {
      this[PIPES2].splice(this[PIPES2].indexOf(p), 1);
      p.unpipe();
    }
  }
  addListener(ev, fn) {
    return this.on(ev, fn);
  }
  on(ev, fn) {
    const ret = super.on(ev, fn);
    if (ev === "data" && !this[PIPES2].length && !this.flowing)
      this[RESUME2]();
    else if (ev === "readable" && this[BUFFERLENGTH2] !== 0)
      super.emit("readable");
    else if (isEndish2(ev) && this[EMITTED_END2]) {
      super.emit(ev);
      this.removeAllListeners(ev);
    } else if (ev === "error" && this[EMITTED_ERROR2]) {
      if (this[ASYNC2])
        defer2(() => fn.call(this, this[EMITTED_ERROR2]));
      else
        fn.call(this, this[EMITTED_ERROR2]);
    }
    return ret;
  }
  get emittedEnd() {
    return this[EMITTED_END2];
  }
  [MAYBE_EMIT_END2]() {
    if (!this[EMITTING_END2] && !this[EMITTED_END2] && !this[DESTROYED2] && this[BUFFER2].length === 0 && this[EOF2]) {
      this[EMITTING_END2] = true;
      this.emit("end");
      this.emit("prefinish");
      this.emit("finish");
      if (this[CLOSED2])
        this.emit("close");
      this[EMITTING_END2] = false;
    }
  }
  emit(ev, data, ...extra) {
    if (ev !== "error" && ev !== "close" && ev !== DESTROYED2 && this[DESTROYED2])
      return;
    else if (ev === "data") {
      return !this[OBJECTMODE2] && !data ? false : this[ASYNC2] ? defer2(() => this[EMITDATA2](data)) : this[EMITDATA2](data);
    } else if (ev === "end") {
      return this[EMITEND3]();
    } else if (ev === "close") {
      this[CLOSED2] = true;
      if (!this[EMITTED_END2] && !this[DESTROYED2])
        return;
      const ret2 = super.emit("close");
      this.removeAllListeners("close");
      return ret2;
    } else if (ev === "error") {
      this[EMITTED_ERROR2] = data;
      super.emit(ERROR2, data);
      const ret2 = !this[SIGNAL2] || this.listeners("error").length ? super.emit("error", data) : false;
      this[MAYBE_EMIT_END2]();
      return ret2;
    } else if (ev === "resume") {
      const ret2 = super.emit("resume");
      this[MAYBE_EMIT_END2]();
      return ret2;
    } else if (ev === "finish" || ev === "prefinish") {
      const ret2 = super.emit(ev);
      this.removeAllListeners(ev);
      return ret2;
    }
    const ret = super.emit(ev, data, ...extra);
    this[MAYBE_EMIT_END2]();
    return ret;
  }
  [EMITDATA2](data) {
    for (const p of this[PIPES2]) {
      if (p.dest.write(data) === false)
        this.pause();
    }
    const ret = super.emit("data", data);
    this[MAYBE_EMIT_END2]();
    return ret;
  }
  [EMITEND3]() {
    if (this[EMITTED_END2])
      return;
    this[EMITTED_END2] = true;
    this.readable = false;
    if (this[ASYNC2])
      defer2(() => this[EMITEND22]());
    else
      this[EMITEND22]();
  }
  [EMITEND22]() {
    if (this[DECODER2]) {
      const data = this[DECODER2].end();
      if (data) {
        for (const p of this[PIPES2]) {
          p.dest.write(data);
        }
        super.emit("data", data);
      }
    }
    for (const p of this[PIPES2]) {
      p.end();
    }
    const ret = super.emit("end");
    this.removeAllListeners("end");
    return ret;
  }
  // const all = await stream.collect()
  collect() {
    const buf = [];
    if (!this[OBJECTMODE2])
      buf.dataLength = 0;
    const p = this.promise();
    this.on("data", (c) => {
      buf.push(c);
      if (!this[OBJECTMODE2])
        buf.dataLength += c.length;
    });
    return p.then(() => buf);
  }
  // const data = await stream.concat()
  concat() {
    return this[OBJECTMODE2] ? Promise.reject(new Error("cannot concat in objectMode")) : this.collect().then(
      (buf) => this[OBJECTMODE2] ? Promise.reject(new Error("cannot concat in objectMode")) : this[ENCODING2] ? buf.join("") : Buffer.concat(buf, buf.dataLength)
    );
  }
  // stream.promise().then(() => done, er => emitted error)
  promise() {
    return new Promise((resolve2, reject) => {
      this.on(DESTROYED2, () => reject(new Error("stream destroyed")));
      this.on("error", (er) => reject(er));
      this.on("end", () => resolve2());
    });
  }
  // for await (let chunk of stream)
  [ASYNCITERATOR]() {
    let stopped = false;
    const stop = () => {
      this.pause();
      stopped = true;
      return Promise.resolve({ done: true });
    };
    const next = () => {
      if (stopped)
        return stop();
      const res = this.read();
      if (res !== null)
        return Promise.resolve({ done: false, value: res });
      if (this[EOF2])
        return stop();
      let resolve2 = null;
      let reject = null;
      const onerr = (er) => {
        this.removeListener("data", ondata);
        this.removeListener("end", onend);
        this.removeListener(DESTROYED2, ondestroy);
        stop();
        reject(er);
      };
      const ondata = (value) => {
        this.removeListener("error", onerr);
        this.removeListener("end", onend);
        this.removeListener(DESTROYED2, ondestroy);
        this.pause();
        resolve2({ value, done: !!this[EOF2] });
      };
      const onend = () => {
        this.removeListener("error", onerr);
        this.removeListener("data", ondata);
        this.removeListener(DESTROYED2, ondestroy);
        stop();
        resolve2({ done: true });
      };
      const ondestroy = () => onerr(new Error("stream destroyed"));
      return new Promise((res2, rej) => {
        reject = rej;
        resolve2 = res2;
        this.once(DESTROYED2, ondestroy);
        this.once("error", onerr);
        this.once("end", onend);
        this.once("data", ondata);
      });
    };
    return {
      next,
      throw: stop,
      return: stop,
      [ASYNCITERATOR]() {
        return this;
      }
    };
  }
  // for (let chunk of stream)
  [ITERATOR]() {
    let stopped = false;
    const stop = () => {
      this.pause();
      this.removeListener(ERROR2, stop);
      this.removeListener(DESTROYED2, stop);
      this.removeListener("end", stop);
      stopped = true;
      return { done: true };
    };
    const next = () => {
      if (stopped)
        return stop();
      const value = this.read();
      return value === null ? stop() : { value };
    };
    this.once("end", stop);
    this.once(ERROR2, stop);
    this.once(DESTROYED2, stop);
    return {
      next,
      throw: stop,
      return: stop,
      [ITERATOR]() {
        return this;
      }
    };
  }
  destroy(er) {
    if (this[DESTROYED2]) {
      if (er)
        this.emit("error", er);
      else
        this.emit(DESTROYED2);
      return this;
    }
    this[DESTROYED2] = true;
    this[BUFFER2].length = 0;
    this[BUFFERLENGTH2] = 0;
    if (typeof this.close === "function" && !this[CLOSED2])
      this.close();
    if (er)
      this.emit("error", er);
    else
      this.emit(DESTROYED2);
    return this;
  }
  static isStream(s) {
    return !!s && (s instanceof _Minipass || s instanceof Stream2 || s instanceof EE && // readable
    (typeof s.pipe === "function" || // writable
    typeof s.write === "function" && typeof s.end === "function"));
  }
};
var minipass_default = Minipass2;

// node_modules/@node-minify/core/node_modules/glob/dist/mjs/ignore.js
var defaultPlatform2 = typeof process === "object" && process && typeof process.platform === "string" ? process.platform : "linux";
var Ignore = class {
  relative;
  relativeChildren;
  absolute;
  absoluteChildren;
  constructor(ignored, { nobrace, nocase, noext, noglobstar, platform = defaultPlatform2 }) {
    this.relative = [];
    this.absolute = [];
    this.relativeChildren = [];
    this.absoluteChildren = [];
    const mmopts = {
      dot: true,
      nobrace,
      nocase,
      noext,
      noglobstar,
      optimizationLevel: 2,
      platform,
      nocomment: true,
      nonegate: true
    };
    for (const ign of ignored) {
      const mm = new Minimatch(ign, mmopts);
      for (let i = 0; i < mm.set.length; i++) {
        const parsed = mm.set[i];
        const globParts = mm.globParts[i];
        const p = new Pattern(parsed, globParts, 0, platform);
        const m = new Minimatch(p.globString(), mmopts);
        const children = globParts[globParts.length - 1] === "**";
        const absolute = p.isAbsolute();
        if (absolute)
          this.absolute.push(m);
        else
          this.relative.push(m);
        if (children) {
          if (absolute)
            this.absoluteChildren.push(m);
          else
            this.relativeChildren.push(m);
        }
      }
    }
  }
  ignored(p) {
    const fullpath = p.fullpath();
    const fullpaths = `${fullpath}/`;
    const relative = p.relative() || ".";
    const relatives = `${relative}/`;
    for (const m of this.relative) {
      if (m.match(relative) || m.match(relatives))
        return true;
    }
    for (const m of this.absolute) {
      if (m.match(fullpath) || m.match(fullpaths))
        return true;
    }
    return false;
  }
  childrenIgnored(p) {
    const fullpath = p.fullpath() + "/";
    const relative = (p.relative() || ".") + "/";
    for (const m of this.relativeChildren) {
      if (m.match(relative))
        return true;
    }
    for (const m of this.absoluteChildren) {
      if (m.match(fullpath))
        true;
    }
    return false;
  }
};

// node_modules/@node-minify/core/node_modules/glob/dist/mjs/processor.js
var HasWalkedCache = class _HasWalkedCache {
  store;
  constructor(store = /* @__PURE__ */ new Map()) {
    this.store = store;
  }
  copy() {
    return new _HasWalkedCache(new Map(this.store));
  }
  hasWalked(target, pattern) {
    return this.store.get(target.fullpath())?.has(pattern.globString());
  }
  storeWalked(target, pattern) {
    const fullpath = target.fullpath();
    const cached = this.store.get(fullpath);
    if (cached)
      cached.add(pattern.globString());
    else
      this.store.set(fullpath, /* @__PURE__ */ new Set([pattern.globString()]));
  }
};
var MatchRecord = class {
  store = /* @__PURE__ */ new Map();
  add(target, absolute, ifDir) {
    const n = (absolute ? 2 : 0) | (ifDir ? 1 : 0);
    const current = this.store.get(target);
    this.store.set(target, current === void 0 ? n : n & current);
  }
  // match, absolute, ifdir
  entries() {
    return [...this.store.entries()].map(([path14, n]) => [
      path14,
      !!(n & 2),
      !!(n & 1)
    ]);
  }
};
var SubWalks = class {
  store = /* @__PURE__ */ new Map();
  add(target, pattern) {
    if (!target.canReaddir()) {
      return;
    }
    const subs = this.store.get(target);
    if (subs) {
      if (!subs.find((p) => p.globString() === pattern.globString())) {
        subs.push(pattern);
      }
    } else
      this.store.set(target, [pattern]);
  }
  get(target) {
    const subs = this.store.get(target);
    if (!subs) {
      throw new Error("attempting to walk unknown path");
    }
    return subs;
  }
  entries() {
    return this.keys().map((k) => [k, this.store.get(k)]);
  }
  keys() {
    return [...this.store.keys()].filter((t) => t.canReaddir());
  }
};
var Processor = class _Processor {
  hasWalkedCache;
  matches = new MatchRecord();
  subwalks = new SubWalks();
  patterns;
  follow;
  dot;
  opts;
  constructor(opts, hasWalkedCache) {
    this.opts = opts;
    this.follow = !!opts.follow;
    this.dot = !!opts.dot;
    this.hasWalkedCache = hasWalkedCache ? hasWalkedCache.copy() : new HasWalkedCache();
  }
  processPatterns(target, patterns) {
    this.patterns = patterns;
    const processingSet = patterns.map((p) => [target, p]);
    for (let [t, pattern] of processingSet) {
      this.hasWalkedCache.storeWalked(t, pattern);
      const root = pattern.root();
      const absolute = pattern.isAbsolute() && this.opts.absolute !== false;
      if (root) {
        t = t.resolve(root === "/" && this.opts.root !== void 0 ? this.opts.root : root);
        const rest2 = pattern.rest();
        if (!rest2) {
          this.matches.add(t, true, false);
          continue;
        } else {
          pattern = rest2;
        }
      }
      if (t.isENOENT())
        continue;
      let p;
      let rest;
      let changed = false;
      while (typeof (p = pattern.pattern()) === "string" && (rest = pattern.rest())) {
        const c = t.resolve(p);
        if (c.isUnknown() && p !== "..")
          break;
        t = c;
        pattern = rest;
        changed = true;
      }
      p = pattern.pattern();
      rest = pattern.rest();
      if (changed) {
        if (this.hasWalkedCache.hasWalked(t, pattern))
          continue;
        this.hasWalkedCache.storeWalked(t, pattern);
      }
      if (typeof p === "string") {
        if (!rest) {
          const ifDir = p === ".." || p === "" || p === ".";
          this.matches.add(t.resolve(p), absolute, ifDir);
        } else {
          this.subwalks.add(t, pattern);
        }
        continue;
      } else if (p === GLOBSTAR) {
        if (!t.isSymbolicLink() || this.follow || pattern.checkFollowGlobstar()) {
          this.subwalks.add(t, pattern);
        }
        const rp = rest?.pattern();
        const rrest = rest?.rest();
        if (!rest || (rp === "" || rp === ".") && !rrest) {
          this.matches.add(t, absolute, rp === "" || rp === ".");
        } else {
          if (rp === "..") {
            const tp = t.parent || t;
            if (!rrest)
              this.matches.add(tp, absolute, true);
            else if (!this.hasWalkedCache.hasWalked(tp, rrest)) {
              this.subwalks.add(tp, rrest);
            }
          }
        }
      } else if (p instanceof RegExp) {
        this.subwalks.add(t, pattern);
      }
    }
    return this;
  }
  subwalkTargets() {
    return this.subwalks.keys();
  }
  child() {
    return new _Processor(this.opts, this.hasWalkedCache);
  }
  // return a new Processor containing the subwalks for each
  // child entry, and a set of matches, and
  // a hasWalkedCache that's a copy of this one
  // then we're going to call
  filterEntries(parent, entries) {
    const patterns = this.subwalks.get(parent);
    const results = this.child();
    for (const e of entries) {
      for (const pattern of patterns) {
        const absolute = pattern.isAbsolute();
        const p = pattern.pattern();
        const rest = pattern.rest();
        if (p === GLOBSTAR) {
          results.testGlobstar(e, pattern, rest, absolute);
        } else if (p instanceof RegExp) {
          results.testRegExp(e, p, rest, absolute);
        } else {
          results.testString(e, p, rest, absolute);
        }
      }
    }
    return results;
  }
  testGlobstar(e, pattern, rest, absolute) {
    if (this.dot || !e.name.startsWith(".")) {
      if (!pattern.hasMore()) {
        this.matches.add(e, absolute, false);
      }
      if (e.canReaddir()) {
        if (this.follow || !e.isSymbolicLink()) {
          this.subwalks.add(e, pattern);
        } else if (e.isSymbolicLink()) {
          if (rest && pattern.checkFollowGlobstar()) {
            this.subwalks.add(e, rest);
          } else if (pattern.markFollowGlobstar()) {
            this.subwalks.add(e, pattern);
          }
        }
      }
    }
    if (rest) {
      const rp = rest.pattern();
      if (typeof rp === "string" && // dots and empty were handled already
      rp !== ".." && rp !== "" && rp !== ".") {
        this.testString(e, rp, rest.rest(), absolute);
      } else if (rp === "..") {
        const ep = e.parent || e;
        this.subwalks.add(ep, rest);
      } else if (rp instanceof RegExp) {
        this.testRegExp(e, rp, rest.rest(), absolute);
      }
    }
  }
  testRegExp(e, p, rest, absolute) {
    if (!p.test(e.name))
      return;
    if (!rest) {
      this.matches.add(e, absolute, false);
    } else {
      this.subwalks.add(e, rest);
    }
  }
  testString(e, p, rest, absolute) {
    if (!e.isNamed(p))
      return;
    if (!rest) {
      this.matches.add(e, absolute, false);
    } else {
      this.subwalks.add(e, rest);
    }
  }
};

// node_modules/@node-minify/core/node_modules/glob/dist/mjs/walker.js
var makeIgnore = (ignore, opts) => typeof ignore === "string" ? new Ignore([ignore], opts) : Array.isArray(ignore) ? new Ignore(ignore, opts) : ignore;
var GlobUtil = class {
  path;
  patterns;
  opts;
  seen = /* @__PURE__ */ new Set();
  paused = false;
  aborted = false;
  #onResume = [];
  #ignore;
  #sep;
  signal;
  maxDepth;
  constructor(patterns, path14, opts) {
    this.patterns = patterns;
    this.path = path14;
    this.opts = opts;
    this.#sep = opts.platform === "win32" ? "\\" : "/";
    if (opts.ignore) {
      this.#ignore = makeIgnore(opts.ignore, opts);
    }
    this.maxDepth = opts.maxDepth || Infinity;
    if (opts.signal) {
      this.signal = opts.signal;
      this.signal.addEventListener("abort", () => {
        this.#onResume.length = 0;
      });
    }
  }
  #ignored(path14) {
    return this.seen.has(path14) || !!this.#ignore?.ignored?.(path14);
  }
  #childrenIgnored(path14) {
    return !!this.#ignore?.childrenIgnored?.(path14);
  }
  // backpressure mechanism
  pause() {
    this.paused = true;
  }
  resume() {
    if (this.signal?.aborted)
      return;
    this.paused = false;
    let fn = void 0;
    while (!this.paused && (fn = this.#onResume.shift())) {
      fn();
    }
  }
  onResume(fn) {
    if (this.signal?.aborted)
      return;
    if (!this.paused) {
      fn();
    } else {
      this.#onResume.push(fn);
    }
  }
  // do the requisite realpath/stat checking, and return the path
  // to add or undefined to filter it out.
  async matchCheck(e, ifDir) {
    if (ifDir && this.opts.nodir)
      return void 0;
    let rpc;
    if (this.opts.realpath) {
      rpc = e.realpathCached() || await e.realpath();
      if (!rpc)
        return void 0;
      e = rpc;
    }
    const needStat = e.isUnknown() || this.opts.stat;
    return this.matchCheckTest(needStat ? await e.lstat() : e, ifDir);
  }
  matchCheckTest(e, ifDir) {
    return e && (this.maxDepth === Infinity || e.depth() <= this.maxDepth) && (!ifDir || e.canReaddir()) && (!this.opts.nodir || !e.isDirectory()) && !this.#ignored(e) ? e : void 0;
  }
  matchCheckSync(e, ifDir) {
    if (ifDir && this.opts.nodir)
      return void 0;
    let rpc;
    if (this.opts.realpath) {
      rpc = e.realpathCached() || e.realpathSync();
      if (!rpc)
        return void 0;
      e = rpc;
    }
    const needStat = e.isUnknown() || this.opts.stat;
    return this.matchCheckTest(needStat ? e.lstatSync() : e, ifDir);
  }
  matchFinish(e, absolute) {
    if (this.#ignored(e))
      return;
    const abs = this.opts.absolute === void 0 ? absolute : this.opts.absolute;
    this.seen.add(e);
    const mark2 = this.opts.mark && e.isDirectory() ? this.#sep : "";
    if (this.opts.withFileTypes) {
      this.matchEmit(e);
    } else if (abs) {
      this.matchEmit(e.fullpath() + mark2);
    } else {
      const rel = e.relative();
      const pre = this.opts.dotRelative && !rel.startsWith(".." + this.#sep) ? "." + this.#sep : "";
      this.matchEmit(!rel && mark2 ? "." + mark2 : pre + rel + mark2);
    }
  }
  async match(e, absolute, ifDir) {
    const p = await this.matchCheck(e, ifDir);
    if (p)
      this.matchFinish(p, absolute);
  }
  matchSync(e, absolute, ifDir) {
    const p = this.matchCheckSync(e, ifDir);
    if (p)
      this.matchFinish(p, absolute);
  }
  walkCB(target, patterns, cb) {
    if (this.signal?.aborted)
      cb();
    this.walkCB2(target, patterns, new Processor(this.opts), cb);
  }
  walkCB2(target, patterns, processor, cb) {
    if (this.#childrenIgnored(target))
      return cb();
    if (this.signal?.aborted)
      cb();
    if (this.paused) {
      this.onResume(() => this.walkCB2(target, patterns, processor, cb));
      return;
    }
    processor.processPatterns(target, patterns);
    let tasks = 1;
    const next = () => {
      if (--tasks === 0)
        cb();
    };
    for (const [m, absolute, ifDir] of processor.matches.entries()) {
      if (this.#ignored(m))
        continue;
      tasks++;
      this.match(m, absolute, ifDir).then(() => next());
    }
    for (const t of processor.subwalkTargets()) {
      if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {
        continue;
      }
      tasks++;
      const childrenCached = t.readdirCached();
      if (t.calledReaddir())
        this.walkCB3(t, childrenCached, processor, next);
      else {
        t.readdirCB((_, entries) => this.walkCB3(t, entries, processor, next), true);
      }
    }
    next();
  }
  walkCB3(target, entries, processor, cb) {
    processor = processor.filterEntries(target, entries);
    let tasks = 1;
    const next = () => {
      if (--tasks === 0)
        cb();
    };
    for (const [m, absolute, ifDir] of processor.matches.entries()) {
      if (this.#ignored(m))
        continue;
      tasks++;
      this.match(m, absolute, ifDir).then(() => next());
    }
    for (const [target2, patterns] of processor.subwalks.entries()) {
      tasks++;
      this.walkCB2(target2, patterns, processor.child(), next);
    }
    next();
  }
  walkCBSync(target, patterns, cb) {
    if (this.signal?.aborted)
      cb();
    this.walkCB2Sync(target, patterns, new Processor(this.opts), cb);
  }
  walkCB2Sync(target, patterns, processor, cb) {
    if (this.#childrenIgnored(target))
      return cb();
    if (this.signal?.aborted)
      cb();
    if (this.paused) {
      this.onResume(() => this.walkCB2Sync(target, patterns, processor, cb));
      return;
    }
    processor.processPatterns(target, patterns);
    let tasks = 1;
    const next = () => {
      if (--tasks === 0)
        cb();
    };
    for (const [m, absolute, ifDir] of processor.matches.entries()) {
      if (this.#ignored(m))
        continue;
      this.matchSync(m, absolute, ifDir);
    }
    for (const t of processor.subwalkTargets()) {
      if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {
        continue;
      }
      tasks++;
      const children = t.readdirSync();
      this.walkCB3Sync(t, children, processor, next);
    }
    next();
  }
  walkCB3Sync(target, entries, processor, cb) {
    processor = processor.filterEntries(target, entries);
    let tasks = 1;
    const next = () => {
      if (--tasks === 0)
        cb();
    };
    for (const [m, absolute, ifDir] of processor.matches.entries()) {
      if (this.#ignored(m))
        continue;
      this.matchSync(m, absolute, ifDir);
    }
    for (const [target2, patterns] of processor.subwalks.entries()) {
      tasks++;
      this.walkCB2Sync(target2, patterns, processor.child(), next);
    }
    next();
  }
};
var GlobWalker = class extends GlobUtil {
  matches;
  constructor(patterns, path14, opts) {
    super(patterns, path14, opts);
    this.matches = /* @__PURE__ */ new Set();
  }
  matchEmit(e) {
    this.matches.add(e);
  }
  async walk() {
    if (this.signal?.aborted)
      throw this.signal.reason;
    if (this.path.isUnknown()) {
      await this.path.lstat();
    }
    await new Promise((res, rej) => {
      this.walkCB(this.path, this.patterns, () => {
        if (this.signal?.aborted) {
          rej(this.signal.reason);
        } else {
          res(this.matches);
        }
      });
    });
    return this.matches;
  }
  walkSync() {
    if (this.signal?.aborted)
      throw this.signal.reason;
    if (this.path.isUnknown()) {
      this.path.lstatSync();
    }
    this.walkCBSync(this.path, this.patterns, () => {
      if (this.signal?.aborted)
        throw this.signal.reason;
    });
    return this.matches;
  }
};
var GlobStream = class extends GlobUtil {
  results;
  constructor(patterns, path14, opts) {
    super(patterns, path14, opts);
    this.results = new minipass_default({
      signal: this.signal,
      objectMode: true
    });
    this.results.on("drain", () => this.resume());
    this.results.on("resume", () => this.resume());
  }
  matchEmit(e) {
    this.results.write(e);
    if (!this.results.flowing)
      this.pause();
  }
  stream() {
    const target = this.path;
    if (target.isUnknown()) {
      target.lstat().then(() => {
        this.walkCB(target, this.patterns, () => this.results.end());
      });
    } else {
      this.walkCB(target, this.patterns, () => this.results.end());
    }
    return this.results;
  }
  streamSync() {
    if (this.path.isUnknown()) {
      this.path.lstatSync();
    }
    this.walkCBSync(this.path, this.patterns, () => this.results.end());
    return this.results;
  }
};

// node_modules/@node-minify/core/node_modules/glob/dist/mjs/glob.js
var defaultPlatform3 = typeof process === "object" && process && typeof process.platform === "string" ? process.platform : "linux";
var Glob = class {
  absolute;
  cwd;
  root;
  dot;
  dotRelative;
  follow;
  ignore;
  magicalBraces;
  mark;
  matchBase;
  maxDepth;
  nobrace;
  nocase;
  nodir;
  noext;
  noglobstar;
  pattern;
  platform;
  realpath;
  scurry;
  stat;
  signal;
  windowsPathsNoEscape;
  withFileTypes;
  /**
   * The options provided to the constructor.
   */
  opts;
  /**
   * An array of parsed immutable {@link Pattern} objects.
   */
  patterns;
  /**
   * All options are stored as properties on the `Glob` object.
   *
   * See {@link GlobOptions} for full options descriptions.
   *
   * Note that a previous `Glob` object can be passed as the
   * `GlobOptions` to another `Glob` instantiation to re-use settings
   * and caches with a new pattern.
   *
   * Traversal functions can be called multiple times to run the walk
   * again.
   */
  constructor(pattern, opts) {
    this.withFileTypes = !!opts.withFileTypes;
    this.signal = opts.signal;
    this.follow = !!opts.follow;
    this.dot = !!opts.dot;
    this.dotRelative = !!opts.dotRelative;
    this.nodir = !!opts.nodir;
    this.mark = !!opts.mark;
    if (!opts.cwd) {
      this.cwd = "";
    } else if (opts.cwd instanceof URL || opts.cwd.startsWith("file://")) {
      opts.cwd = fileURLToPath2(opts.cwd);
    }
    this.cwd = opts.cwd || "";
    this.root = opts.root;
    this.magicalBraces = !!opts.magicalBraces;
    this.nobrace = !!opts.nobrace;
    this.noext = !!opts.noext;
    this.realpath = !!opts.realpath;
    this.absolute = opts.absolute;
    this.noglobstar = !!opts.noglobstar;
    this.matchBase = !!opts.matchBase;
    this.maxDepth = typeof opts.maxDepth === "number" ? opts.maxDepth : Infinity;
    this.stat = !!opts.stat;
    this.ignore = opts.ignore;
    if (this.withFileTypes && this.absolute !== void 0) {
      throw new Error("cannot set absolute and withFileTypes:true");
    }
    if (typeof pattern === "string") {
      pattern = [pattern];
    }
    this.windowsPathsNoEscape = !!opts.windowsPathsNoEscape || opts.allowWindowsEscape === false;
    if (this.windowsPathsNoEscape) {
      pattern = pattern.map((p) => p.replace(/\\/g, "/"));
    }
    if (this.matchBase) {
      if (opts.noglobstar) {
        throw new TypeError("base matching requires globstar");
      }
      pattern = pattern.map((p) => p.includes("/") ? p : `./**/${p}`);
    }
    this.pattern = pattern;
    this.platform = opts.platform || defaultPlatform3;
    this.opts = { ...opts, platform: this.platform };
    if (opts.scurry) {
      this.scurry = opts.scurry;
      if (opts.nocase !== void 0 && opts.nocase !== opts.scurry.nocase) {
        throw new Error("nocase option contradicts provided scurry option");
      }
    } else {
      const Scurry = opts.platform === "win32" ? PathScurryWin32 : opts.platform === "darwin" ? PathScurryDarwin : opts.platform ? PathScurryPosix : PathScurry;
      this.scurry = new Scurry(this.cwd, {
        nocase: opts.nocase,
        fs: opts.fs
      });
    }
    this.nocase = this.scurry.nocase;
    const mmo = {
      // default nocase based on platform
      ...opts,
      dot: this.dot,
      matchBase: this.matchBase,
      nobrace: this.nobrace,
      nocase: this.nocase,
      nocaseMagicOnly: true,
      nocomment: true,
      noext: this.noext,
      nonegate: true,
      optimizationLevel: 2,
      platform: this.platform,
      windowsPathsNoEscape: this.windowsPathsNoEscape,
      debug: !!this.opts.debug
    };
    const mms = this.pattern.map((p) => new Minimatch(p, mmo));
    const [matchSet, globParts] = mms.reduce((set, m) => {
      set[0].push(...m.set);
      set[1].push(...m.globParts);
      return set;
    }, [[], []]);
    this.patterns = matchSet.map((set, i) => {
      return new Pattern(set, globParts[i], 0, this.platform);
    });
  }
  async walk() {
    return [
      ...await new GlobWalker(this.patterns, this.scurry.cwd, {
        ...this.opts,
        maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
        platform: this.platform,
        nocase: this.nocase
      }).walk()
    ];
  }
  walkSync() {
    return [
      ...new GlobWalker(this.patterns, this.scurry.cwd, {
        ...this.opts,
        maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
        platform: this.platform,
        nocase: this.nocase
      }).walkSync()
    ];
  }
  stream() {
    return new GlobStream(this.patterns, this.scurry.cwd, {
      ...this.opts,
      maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
      platform: this.platform,
      nocase: this.nocase
    }).stream();
  }
  streamSync() {
    return new GlobStream(this.patterns, this.scurry.cwd, {
      ...this.opts,
      maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
      platform: this.platform,
      nocase: this.nocase
    }).streamSync();
  }
  /**
   * Default sync iteration function. Returns a Generator that
   * iterates over the results.
   */
  iterateSync() {
    return this.streamSync()[Symbol.iterator]();
  }
  [Symbol.iterator]() {
    return this.iterateSync();
  }
  /**
   * Default async iteration function. Returns an AsyncGenerator that
   * iterates over the results.
   */
  iterate() {
    return this.stream()[Symbol.asyncIterator]();
  }
  [Symbol.asyncIterator]() {
    return this.iterate();
  }
};

// node_modules/@node-minify/core/node_modules/glob/dist/mjs/has-magic.js
var hasMagic = (pattern, options3 = {}) => {
  if (!Array.isArray(pattern)) {
    pattern = [pattern];
  }
  for (const p of pattern) {
    if (new Minimatch(p, options3).hasMagic())
      return true;
  }
  return false;
};

// node_modules/@node-minify/core/node_modules/glob/dist/mjs/index.js
function globStreamSync(pattern, options3 = {}) {
  return new Glob(pattern, options3).streamSync();
}
function globStream(pattern, options3 = {}) {
  return new Glob(pattern, options3).stream();
}
function globSync(pattern, options3 = {}) {
  return new Glob(pattern, options3).walkSync();
}
async function glob(pattern, options3 = {}) {
  return new Glob(pattern, options3).walk();
}
function globIterateSync(pattern, options3 = {}) {
  return new Glob(pattern, options3).iterateSync();
}
function globIterate(pattern, options3 = {}) {
  return new Glob(pattern, options3).iterate();
}
var streamSync = globStreamSync;
var stream = Object.assign(globStream, { sync: globStreamSync });
var iterateSync = globIterateSync;
var iterate = Object.assign(globIterate, {
  sync: globIterateSync
});
var sync = Object.assign(globSync, {
  stream: globStreamSync,
  iterate: globIterateSync
});
var mjs_default = Object.assign(glob, {
  glob,
  globSync,
  sync,
  globStream,
  stream,
  globStreamSync,
  streamSync,
  globIterate,
  iterate,
  globIterateSync,
  iterateSync,
  Glob,
  hasMagic,
  escape: escape2,
  unescape: unescape2
});

// node_modules/@node-minify/utils/dist/index.mjs
var import_gzip_size = __toESM(require_gzip_size(), 1);
import { readFileSync, lstatSync as lstatSync2, statSync, existsSync, writeFileSync, unlinkSync, createReadStream } from "fs";
var utils = {};
utils.readFile = (file) => readFileSync(file, "utf8");
utils.writeFile = ({ file, content, index }) => {
  const _file = index !== void 0 ? file[index] : file;
  if (!existsSync(_file) || existsSync(_file) && !lstatSync2(_file).isDirectory()) {
    writeFileSync(_file, content, "utf8");
  }
  return content;
};
utils.deleteFile = (file) => unlinkSync(file);
utils.buildArgs = (options3) => {
  const args2 = [];
  Object.keys(options3).forEach((key) => {
    if (options3[key] && options3[key] !== false) {
      args2.push("--" + key);
    }
    if (options3[key] && options3[key] !== true) {
      args2.push(options3[key]);
    }
  });
  return args2;
};
utils.clone = (obj) => JSON.parse(JSON.stringify(obj));
utils.getFilesizeInBytes = (file) => {
  const stats = statSync(file);
  const fileSizeInBytes = stats.size;
  return utils.prettyBytes(fileSizeInBytes);
};
utils.getFilesizeGzippedInBytes = (file) => {
  return new Promise((resolve2) => {
    const source = createReadStream(file);
    source.pipe(import_gzip_size.default.stream()).on("gzip-size", (size) => {
      resolve2(utils.prettyBytes(size));
    });
  });
};
utils.prettyBytes = (num) => {
  const UNITS = ["B", "kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
  if (!Number.isFinite(num)) {
    throw new TypeError(`Expected a finite number, got ${typeof num}: ${num}`);
  }
  const neg = num < 0;
  if (neg) {
    num = -num;
  }
  if (num < 1) {
    return (neg ? "-" : "") + num + " B";
  }
  const exponent = Math.min(Math.floor(Math.log(num) / Math.log(1e3)), UNITS.length - 1);
  const numStr = Number((num / Math.pow(1e3, exponent)).toPrecision(3));
  const unit = UNITS[exponent];
  return (neg ? "-" : "") + numStr + " " + unit;
};
utils.setFileNameMin = (file, output, publicFolder, replaceInPlace) => {
  const filePath = file.substr(0, file.lastIndexOf("/") + 1);
  const fileWithoutPath = file.substr(file.lastIndexOf("/") + 1);
  let fileWithoutExtension = fileWithoutPath.substr(0, fileWithoutPath.lastIndexOf("."));
  if (publicFolder) {
    fileWithoutExtension = publicFolder + fileWithoutExtension;
  }
  if (replaceInPlace) {
    fileWithoutExtension = filePath + fileWithoutExtension;
  }
  return output.replace("$1", fileWithoutExtension);
};
utils.compressSingleFile = (settings) => {
  const content = settings.content ? settings.content : settings.input ? utils.getContentFromFiles(settings.input) : "";
  return settings.sync ? utils.runSync({ settings, content }) : utils.runAsync({ settings, content });
};
utils.getContentFromFiles = (input) => {
  if (!Array.isArray(input)) {
    return readFileSync(input, "utf8");
  }
  return input.map(
    (path14) => !existsSync(path14) || existsSync(path14) && !lstatSync2(path14).isDirectory() ? readFileSync(path14, "utf8") : ""
  ).join("\n");
};
utils.runSync = ({ settings, content, index }) => settings && typeof settings.compressor !== "string" ? typeof settings.compressor === "function" ? settings.compressor({ settings, content, callback: null, index }) : "" : "";
utils.runAsync = ({ settings, content, index }) => {
  return new Promise((resolve2, reject) => {
    settings && settings.compressor && typeof settings.compressor !== "string" ? settings.compressor({
      settings,
      content,
      callback: (err, result) => {
        if (err) {
          return reject(err);
        }
        resolve2(result || "");
      },
      index
    }) : null;
  });
};

// node_modules/@node-minify/core/dist/index.mjs
var import_mkdirp = __toESM(require_mkdirp(), 1);
import fs2 from "fs";
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;
};
var __commonJS2 = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var defaultSettings;
var setup;
var checkOutput;
var wildcards;
var wildcardsString;
var wildcardsArray;
var getFilesFromWildcards;
var setPublicFolder;
var checkMandatories;
var checkMandatoriesMemoryContent;
var mandatory;
var init_setup = __esm({
  "src/setup.ts"() {
    "use strict";
    defaultSettings = {
      sync: false,
      options: {},
      buffer: 1e3 * 1024,
      callback: false
    };
    setup = (inputSettings) => {
      let settings = Object.assign(utils.clone(defaultSettings), inputSettings);
      if (settings.content) {
        checkMandatoriesMemoryContent(inputSettings);
        return settings;
      }
      checkMandatories(inputSettings);
      if (settings.input) {
        settings = Object.assign(settings, wildcards(settings.input, settings.publicFolder));
      }
      if (settings.input && settings.output) {
        settings = Object.assign(
          settings,
          checkOutput(settings.input, settings.output, settings.publicFolder, settings.replaceInPlace)
        );
      }
      if (settings.input && settings.publicFolder) {
        settings = Object.assign(settings, setPublicFolder(settings.input, settings.publicFolder));
      }
      return settings;
    };
    checkOutput = (input, output, publicFolder, replaceInPlace) => {
      const reg = new RegExp("\\$1");
      if (reg.test(output)) {
        if (Array.isArray(input)) {
          const outputMin = input.map(
            (file) => utils.setFileNameMin(file, output, replaceInPlace ? void 0 : publicFolder, replaceInPlace)
          );
          return { output: outputMin };
        } else {
          return { output: utils.setFileNameMin(input, output, replaceInPlace ? void 0 : publicFolder, replaceInPlace) };
        }
      }
    };
    wildcards = (input, publicFolder) => {
      if (!Array.isArray(input)) {
        return wildcardsString(input, publicFolder);
      }
      return wildcardsArray(input, publicFolder);
    };
    wildcardsString = (input, publicFolder) => {
      const output = {};
      if (input.indexOf("*") > -1) {
        output.input = getFilesFromWildcards(input, publicFolder);
      }
      return output;
    };
    wildcardsArray = (input, publicFolder) => {
      const output = {};
      let isWildcardsPresent = false;
      output.input = input;
      const inputWithPublicFolder = input.map((item) => {
        if (item.indexOf("*") > -1) {
          isWildcardsPresent = true;
        }
        return (publicFolder || "") + item;
      });
      if (isWildcardsPresent) {
        output.input = globSync(inputWithPublicFolder);
      }
      for (let i = 0; i < output.input.length; i++) {
        if (output.input[i].indexOf("*") > -1) {
          output.input.splice(i, 1);
          i--;
        }
      }
      return output;
    };
    getFilesFromWildcards = (input, publicFolder) => {
      let output = [];
      if (input.indexOf("*") > -1) {
        output = globSync((publicFolder || "") + input);
      }
      return output;
    };
    setPublicFolder = (input, publicFolder) => {
      const output = {};
      if (typeof publicFolder !== "string") {
        return output;
      }
      publicFolder = path3.normalize(publicFolder);
      if (Array.isArray(input)) {
        output.input = input.map((item) => {
          if (path3.normalize(item).indexOf(publicFolder) > -1) {
            return item;
          }
          return path3.normalize(publicFolder + item);
        });
        return output;
      }
      input = path3.normalize(input);
      if (input.indexOf(publicFolder) > -1) {
        output.input = input;
        return output;
      }
      output.input = path3.normalize(publicFolder + input);
      return output;
    };
    checkMandatories = (settings) => {
      ["compressor", "input", "output"].forEach((item) => mandatory(item, settings));
    };
    checkMandatoriesMemoryContent = (settings) => {
      ["compressor", "content"].forEach((item) => mandatory(item, settings));
    };
    mandatory = (setting, settings) => {
      if (!settings[setting]) {
        throw new Error(setting + " is mandatory.");
      }
    };
  }
});
var compress;
var compressArrayOfFilesSync;
var compressArrayOfFilesAsync;
var createDirectory;
var init_compress = __esm({
  "src/compress.ts"() {
    "use strict";
    compress = (settings) => {
      if (typeof settings.compressor !== "function") {
        throw new Error(`compressor should be a function, maybe you forgot to install the compressor`);
      }
      if (settings.output) {
        createDirectory(settings.output);
      }
      if (Array.isArray(settings.output)) {
        return settings.sync ? compressArrayOfFilesSync(settings) : compressArrayOfFilesAsync(settings);
      } else {
        return utils.compressSingleFile(settings);
      }
    };
    compressArrayOfFilesSync = (settings) => {
      return Array.isArray(settings.input) && settings.input.forEach((input, index) => {
        const content = utils.getContentFromFiles(input);
        return utils.runSync({ settings, content, index });
      });
    };
    compressArrayOfFilesAsync = (settings) => {
      let sequence = Promise.resolve();
      Array.isArray(settings.input) && settings.input.forEach((input, index) => {
        const content = utils.getContentFromFiles(input);
        sequence = sequence.then(() => utils.runAsync({ settings, content, index }));
      });
      return sequence;
    };
    createDirectory = (file) => {
      if (Array.isArray(file)) {
        file = file[0];
      }
      const dir = file && file.substr(0, file.lastIndexOf("/"));
      if (!dir) {
        return;
      }
      if (!fs2.statSync(dir).isDirectory()) {
        import_mkdirp.default.sync(dir);
      }
    };
  }
});
var compressInMemory;
var init_compressInMemory = __esm({
  "src/compressInMemory.ts"() {
    "use strict";
    compressInMemory = (settings) => {
      if (typeof settings.compressor !== "function") {
        throw new Error(`compressor should be a function, maybe you forgot to install the compressor`);
      }
      return utils.compressSingleFile(settings);
    };
  }
});
var require_src = __commonJS2({
  "src/index.ts"(exports, module) {
    init_setup();
    init_compress();
    init_compressInMemory();
    var minify2 = (settings) => {
      return new Promise((resolve2, reject) => {
        const method = settings.content ? compressInMemory : compress;
        settings = setup(settings);
        if (!settings.sync) {
          method(settings).then((minified) => {
            if (settings.callback) {
              settings.callback(null, minified);
            }
            resolve2(minified);
          }).catch((err) => {
            if (settings.callback) {
              settings.callback(err);
            }
            reject(err);
          });
        } else {
          const minified = method(settings);
          if (settings.callback) {
            settings.callback(null, minified);
          }
          resolve2(minified);
        }
      });
    };
    minify2.default = minify2;
    module.exports = minify2;
  }
});
var dist_default = require_src();

// node_modules/terser/lib/utils/index.js
function characters(str) {
  return str.split("");
}
function member(name, array) {
  return array.includes(name);
}
var DefaultsError = class extends Error {
  constructor(msg, defs) {
    super();
    this.name = "DefaultsError";
    this.message = msg;
    this.defs = defs;
  }
};
function defaults2(args2, defs, croak) {
  if (args2 === true) {
    args2 = {};
  } else if (args2 != null && typeof args2 === "object") {
    args2 = { ...args2 };
  }
  const ret = args2 || {};
  if (croak) {
    for (const i in ret)
      if (HOP(ret, i) && !HOP(defs, i)) {
        throw new DefaultsError("`" + i + "` is not a supported option", defs);
      }
  }
  for (const i in defs)
    if (HOP(defs, i)) {
      if (!args2 || !HOP(args2, i)) {
        ret[i] = defs[i];
      } else if (i === "ecma") {
        let ecma = args2[i] | 0;
        if (ecma > 5 && ecma < 2015)
          ecma += 2009;
        ret[i] = ecma;
      } else {
        ret[i] = args2 && HOP(args2, i) ? args2[i] : defs[i];
      }
    }
  return ret;
}
function noop() {
}
function return_false() {
  return false;
}
function return_true() {
  return true;
}
function return_this() {
  return this;
}
function return_null() {
  return null;
}
var MAP = function() {
  function MAP2(a, tw, allow_splicing = true) {
    const new_a = [];
    for (let i = 0; i < a.length; ++i) {
      let item = a[i];
      let ret = item.transform(tw, allow_splicing);
      if (ret instanceof AST_Node) {
        new_a.push(ret);
      } else if (ret instanceof Splice) {
        new_a.push(...ret.v);
      }
    }
    return new_a;
  }
  MAP2.splice = function(val) {
    return new Splice(val);
  };
  MAP2.skip = {};
  function Splice(val) {
    this.v = val;
  }
  return MAP2;
}();
function make_node(ctor, orig, props) {
  if (!props)
    props = {};
  if (orig) {
    if (!props.start)
      props.start = orig.start;
    if (!props.end)
      props.end = orig.end;
  }
  return new ctor(props);
}
function push_uniq(array, el) {
  if (!array.includes(el))
    array.push(el);
}
function string_template(text, props) {
  return text.replace(/{(.+?)}/g, function(str, p) {
    return props && props[p];
  });
}
function remove(array, el) {
  for (var i = array.length; --i >= 0; ) {
    if (array[i] === el)
      array.splice(i, 1);
  }
}
function mergeSort(array, cmp) {
  if (array.length < 2)
    return array.slice();
  function merge(a, b) {
    var r = [], ai = 0, bi = 0, i = 0;
    while (ai < a.length && bi < b.length) {
      cmp(a[ai], b[bi]) <= 0 ? r[i++] = a[ai++] : r[i++] = b[bi++];
    }
    if (ai < a.length)
      r.push.apply(r, a.slice(ai));
    if (bi < b.length)
      r.push.apply(r, b.slice(bi));
    return r;
  }
  function _ms(a) {
    if (a.length <= 1)
      return a;
    var m = Math.floor(a.length / 2), left = a.slice(0, m), right = a.slice(m);
    left = _ms(left);
    right = _ms(right);
    return merge(left, right);
  }
  return _ms(array);
}
function makePredicate(words) {
  if (!Array.isArray(words))
    words = words.split(" ");
  return new Set(words.sort());
}
function map_add(map, key, value) {
  if (map.has(key)) {
    map.get(key).push(value);
  } else {
    map.set(key, [value]);
  }
}
function map_from_object(obj) {
  var map = /* @__PURE__ */ new Map();
  for (var key in obj) {
    if (HOP(obj, key) && key.charAt(0) === "$") {
      map.set(key.substr(1), obj[key]);
    }
  }
  return map;
}
function map_to_object(map) {
  var obj = /* @__PURE__ */ Object.create(null);
  map.forEach(function(value, key) {
    obj["$" + key] = value;
  });
  return obj;
}
function HOP(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
function keep_name(keep_setting, name) {
  return keep_setting === true || keep_setting instanceof RegExp && keep_setting.test(name);
}
var lineTerminatorEscape = {
  "\0": "0",
  "\n": "n",
  "\r": "r",
  "\u2028": "u2028",
  "\u2029": "u2029"
};
function regexp_source_fix(source) {
  return source.replace(/[\0\n\r\u2028\u2029]/g, function(match2, offset) {
    var escaped = source[offset - 1] == "\\" && (source[offset - 2] != "\\" || /(?:^|[^\\])(?:\\{2})*$/.test(source.slice(0, offset - 1)));
    return (escaped ? "" : "\\") + lineTerminatorEscape[match2];
  });
}
var re_safe_regexp = /^[\\/|\0\s\w^$.[\]()]*$/;
var regexp_is_safe = (source) => re_safe_regexp.test(source);
var all_flags = "dgimsuy";
function sort_regexp_flags(flags) {
  const existing_flags = new Set(flags.split(""));
  let out = "";
  for (const flag of all_flags) {
    if (existing_flags.has(flag)) {
      out += flag;
      existing_flags.delete(flag);
    }
  }
  if (existing_flags.size) {
    existing_flags.forEach((flag) => {
      out += flag;
    });
  }
  return out;
}
function has_annotation(node, annotation) {
  return node._annotations & annotation;
}
function set_annotation(node, annotation) {
  node._annotations |= annotation;
}

// node_modules/terser/lib/parse.js
var LATEST_RAW = "";
var TEMPLATE_RAWS = /* @__PURE__ */ new Map();
var KEYWORDS = "break case catch class const continue debugger default delete do else export extends finally for function if in instanceof let new return switch throw try typeof var void while with";
var KEYWORDS_ATOM = "false null true";
var RESERVED_WORDS = "enum import super this " + KEYWORDS_ATOM + " " + KEYWORDS;
var ALL_RESERVED_WORDS = "implements interface package private protected public static " + RESERVED_WORDS;
var KEYWORDS_BEFORE_EXPRESSION = "return new delete throw else case yield await";
KEYWORDS = makePredicate(KEYWORDS);
RESERVED_WORDS = makePredicate(RESERVED_WORDS);
KEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);
KEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);
ALL_RESERVED_WORDS = makePredicate(ALL_RESERVED_WORDS);
var OPERATOR_CHARS = makePredicate(characters("+-*&%=<>!?|~^"));
var RE_NUM_LITERAL = /[0-9a-f]/i;
var RE_HEX_NUMBER = /^0x[0-9a-f]+$/i;
var RE_OCT_NUMBER = /^0[0-7]+$/;
var RE_ES6_OCT_NUMBER = /^0o[0-7]+$/i;
var RE_BIN_NUMBER = /^0b[01]+$/i;
var RE_DEC_NUMBER = /^\d*\.?\d*(?:e[+-]?\d*(?:\d\.?|\.?\d)\d*)?$/i;
var RE_BIG_INT = /^(0[xob])?[0-9a-f]+n$/i;
var OPERATORS = makePredicate([
  "in",
  "instanceof",
  "typeof",
  "new",
  "void",
  "delete",
  "++",
  "--",
  "+",
  "-",
  "!",
  "~",
  "&",
  "|",
  "^",
  "*",
  "**",
  "/",
  "%",
  ">>",
  "<<",
  ">>>",
  "<",
  ">",
  "<=",
  ">=",
  "==",
  "===",
  "!=",
  "!==",
  "?",
  "=",
  "+=",
  "-=",
  "||=",
  "&&=",
  "??=",
  "/=",
  "*=",
  "**=",
  "%=",
  ">>=",
  "<<=",
  ">>>=",
  "|=",
  "^=",
  "&=",
  "&&",
  "??",
  "||"
]);
var WHITESPACE_CHARS = makePredicate(characters(" \xA0\n\r	\f\v\u200B\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF"));
var NEWLINE_CHARS = makePredicate(characters("\n\r\u2028\u2029"));
var PUNC_AFTER_EXPRESSION = makePredicate(characters(";]),:"));
var PUNC_BEFORE_EXPRESSION = makePredicate(characters("[{(,;:"));
var PUNC_CHARS = makePredicate(characters("[]{}(),;:"));
var UNICODE = {
  ID_Start: /[$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
  ID_Continue: /(?:[$0-9A-Z_a-z\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF])+/
};
try {
  UNICODE = {
    // https://262.ecma-international.org/13.0/#prod-IdentifierStartChar
    // $, _, ID_Start
    ID_Start: new RegExp("[_$\\p{ID_Start}]", "u"),
    // https://262.ecma-international.org/13.0/#prod-IdentifierPartChar
    // $, zero-width-joiner, zero-width-non-joiner, ID_Continue
    ID_Continue: new RegExp("[$\\u200C\\u200D\\p{ID_Continue}]+", "u")
  };
} catch (e) {
}
function get_full_char(str, pos) {
  if (is_surrogate_pair_head(str.charCodeAt(pos))) {
    if (is_surrogate_pair_tail(str.charCodeAt(pos + 1))) {
      return str.charAt(pos) + str.charAt(pos + 1);
    }
  } else if (is_surrogate_pair_tail(str.charCodeAt(pos))) {
    if (is_surrogate_pair_head(str.charCodeAt(pos - 1))) {
      return str.charAt(pos - 1) + str.charAt(pos);
    }
  }
  return str.charAt(pos);
}
function get_full_char_code(str, pos) {
  if (is_surrogate_pair_head(str.charCodeAt(pos))) {
    return 65536 + (str.charCodeAt(pos) - 55296 << 10) + str.charCodeAt(pos + 1) - 56320;
  }
  return str.charCodeAt(pos);
}
function get_full_char_length(str) {
  var surrogates = 0;
  for (var i = 0; i < str.length; i++) {
    if (is_surrogate_pair_head(str.charCodeAt(i)) && is_surrogate_pair_tail(str.charCodeAt(i + 1))) {
      surrogates++;
      i++;
    }
  }
  return str.length - surrogates;
}
function from_char_code(code) {
  if (code > 65535) {
    code -= 65536;
    return String.fromCharCode((code >> 10) + 55296) + String.fromCharCode(code % 1024 + 56320);
  }
  return String.fromCharCode(code);
}
function is_surrogate_pair_head(code) {
  return code >= 55296 && code <= 56319;
}
function is_surrogate_pair_tail(code) {
  return code >= 56320 && code <= 57343;
}
function is_digit(code) {
  return code >= 48 && code <= 57;
}
function is_identifier_start(ch) {
  return UNICODE.ID_Start.test(ch);
}
function is_identifier_char(ch) {
  return UNICODE.ID_Continue.test(ch);
}
var BASIC_IDENT = /^[a-z_$][a-z0-9_$]*$/i;
function is_basic_identifier_string(str) {
  return BASIC_IDENT.test(str);
}
function is_identifier_string(str, allow_surrogates) {
  if (BASIC_IDENT.test(str)) {
    return true;
  }
  if (!allow_surrogates && /[\ud800-\udfff]/.test(str)) {
    return false;
  }
  var match2 = UNICODE.ID_Start.exec(str);
  if (!match2 || match2.index !== 0) {
    return false;
  }
  str = str.slice(match2[0].length);
  if (!str) {
    return true;
  }
  match2 = UNICODE.ID_Continue.exec(str);
  return !!match2 && match2[0].length === str.length;
}
function parse_js_number(num, allow_e = true) {
  if (!allow_e && num.includes("e")) {
    return NaN;
  }
  if (RE_HEX_NUMBER.test(num)) {
    return parseInt(num.substr(2), 16);
  } else if (RE_OCT_NUMBER.test(num)) {
    return parseInt(num.substr(1), 8);
  } else if (RE_ES6_OCT_NUMBER.test(num)) {
    return parseInt(num.substr(2), 8);
  } else if (RE_BIN_NUMBER.test(num)) {
    return parseInt(num.substr(2), 2);
  } else if (RE_DEC_NUMBER.test(num)) {
    return parseFloat(num);
  } else {
    var val = parseFloat(num);
    if (val == num)
      return val;
  }
}
var JS_Parse_Error = class extends Error {
  constructor(message, filename, line, col, pos) {
    super();
    this.name = "SyntaxError";
    this.message = message;
    this.filename = filename;
    this.line = line;
    this.col = col;
    this.pos = pos;
  }
};
function js_error(message, filename, line, col, pos) {
  throw new JS_Parse_Error(message, filename, line, col, pos);
}
function is_token(token, type, val) {
  return token.type == type && (val == null || token.value == val);
}
var EX_EOF = {};
function tokenizer($TEXT, filename, html5_comments, shebang) {
  var S = {
    text: $TEXT,
    filename,
    pos: 0,
    tokpos: 0,
    line: 1,
    tokline: 0,
    col: 0,
    tokcol: 0,
    newline_before: false,
    regex_allowed: false,
    brace_counter: 0,
    template_braces: [],
    comments_before: [],
    directives: {},
    directive_stack: []
  };
  function peek() {
    return get_full_char(S.text, S.pos);
  }
  function is_option_chain_op() {
    const must_be_dot = S.text.charCodeAt(S.pos + 1) === 46;
    if (!must_be_dot)
      return false;
    const cannot_be_digit = S.text.charCodeAt(S.pos + 2);
    return cannot_be_digit < 48 || cannot_be_digit > 57;
  }
  function next(signal_eof, in_string) {
    var ch = get_full_char(S.text, S.pos++);
    if (signal_eof && !ch)
      throw EX_EOF;
    if (NEWLINE_CHARS.has(ch)) {
      S.newline_before = S.newline_before || !in_string;
      ++S.line;
      S.col = 0;
      if (ch == "\r" && peek() == "\n") {
        ++S.pos;
        ch = "\n";
      }
    } else {
      if (ch.length > 1) {
        ++S.pos;
        ++S.col;
      }
      ++S.col;
    }
    return ch;
  }
  function forward(i) {
    while (i--)
      next();
  }
  function looking_at(str) {
    return S.text.substr(S.pos, str.length) == str;
  }
  function find_eol() {
    var text = S.text;
    for (var i = S.pos, n = S.text.length; i < n; ++i) {
      var ch = text[i];
      if (NEWLINE_CHARS.has(ch))
        return i;
    }
    return -1;
  }
  function find(what, signal_eof) {
    var pos = S.text.indexOf(what, S.pos);
    if (signal_eof && pos == -1)
      throw EX_EOF;
    return pos;
  }
  function start_token() {
    S.tokline = S.line;
    S.tokcol = S.col;
    S.tokpos = S.pos;
  }
  var prev_was_dot = false;
  var previous_token = null;
  function token(type, value, is_comment) {
    S.regex_allowed = type == "operator" && !UNARY_POSTFIX.has(value) || type == "keyword" && KEYWORDS_BEFORE_EXPRESSION.has(value) || type == "punc" && PUNC_BEFORE_EXPRESSION.has(value) || type == "arrow";
    if (type == "punc" && (value == "." || value == "?.")) {
      prev_was_dot = true;
    } else if (!is_comment) {
      prev_was_dot = false;
    }
    const line = S.tokline;
    const col = S.tokcol;
    const pos = S.tokpos;
    const nlb = S.newline_before;
    const file = filename;
    let comments_before = [];
    let comments_after = [];
    if (!is_comment) {
      comments_before = S.comments_before;
      comments_after = S.comments_before = [];
    }
    S.newline_before = false;
    const tok = new AST_Token(type, value, line, col, pos, nlb, comments_before, comments_after, file);
    if (!is_comment)
      previous_token = tok;
    return tok;
  }
  function skip_whitespace() {
    while (WHITESPACE_CHARS.has(peek()))
      next();
  }
  function read_while(pred) {
    var ret = "", ch, i = 0;
    while ((ch = peek()) && pred(ch, i++))
      ret += next();
    return ret;
  }
  function parse_error(err) {
    js_error(err, filename, S.tokline, S.tokcol, S.tokpos);
  }
  function read_num(prefix) {
    var has_e = false, after_e = false, has_x = false, has_dot = prefix == ".", is_big_int = false, numeric_separator = false;
    var num = read_while(function(ch, i) {
      if (is_big_int)
        return false;
      var code = ch.charCodeAt(0);
      switch (code) {
        case 95:
          return numeric_separator = true;
        case 98:
        case 66:
          return has_x = true;
        case 111:
        case 79:
        case 120:
        case 88:
          return has_x ? false : has_x = true;
        case 101:
        case 69:
          return has_x ? true : has_e ? false : has_e = after_e = true;
        case 45:
          return after_e || i == 0 && !prefix;
        case 43:
          return after_e;
        case (after_e = false, 46):
          return !has_dot && !has_x && !has_e ? has_dot = true : false;
      }
      if (ch === "n") {
        is_big_int = true;
        return true;
      }
      return RE_NUM_LITERAL.test(ch);
    });
    if (prefix)
      num = prefix + num;
    LATEST_RAW = num;
    if (RE_OCT_NUMBER.test(num) && next_token.has_directive("use strict")) {
      parse_error("Legacy octal literals are not allowed in strict mode");
    }
    if (numeric_separator) {
      if (num.endsWith("_")) {
        parse_error("Numeric separators are not allowed at the end of numeric literals");
      } else if (num.includes("__")) {
        parse_error("Only one underscore is allowed as numeric separator");
      }
      num = num.replace(/_/g, "");
    }
    if (num.endsWith("n")) {
      const without_n = num.slice(0, -1);
      const allow_e = RE_HEX_NUMBER.test(without_n);
      const valid2 = parse_js_number(without_n, allow_e);
      if (!has_dot && RE_BIG_INT.test(num) && !isNaN(valid2))
        return token("big_int", without_n);
      parse_error("Invalid or unexpected token");
    }
    var valid = parse_js_number(num);
    if (!isNaN(valid)) {
      return token("num", valid);
    } else {
      parse_error("Invalid syntax: " + num);
    }
  }
  function is_octal(ch) {
    return ch >= "0" && ch <= "7";
  }
  function read_escaped_char(in_string, strict_hex, template_string) {
    var ch = next(true, in_string);
    switch (ch.charCodeAt(0)) {
      case 110:
        return "\n";
      case 114:
        return "\r";
      case 116:
        return "	";
      case 98:
        return "\b";
      case 118:
        return "\v";
      case 102:
        return "\f";
      case 120:
        return String.fromCharCode(hex_bytes(2, strict_hex));
      case 117:
        if (peek() == "{") {
          next(true);
          if (peek() === "}")
            parse_error("Expecting hex-character between {}");
          while (peek() == "0")
            next(true);
          var result, length = find("}", true) - S.pos;
          if (length > 6 || (result = hex_bytes(length, strict_hex)) > 1114111) {
            parse_error("Unicode reference out of bounds");
          }
          next(true);
          return from_char_code(result);
        }
        return String.fromCharCode(hex_bytes(4, strict_hex));
      case 10:
        return "";
      case 13:
        if (peek() == "\n") {
          next(true, in_string);
          return "";
        }
    }
    if (is_octal(ch)) {
      if (template_string && strict_hex) {
        const represents_null_character = ch === "0" && !is_octal(peek());
        if (!represents_null_character) {
          parse_error("Octal escape sequences are not allowed in template strings");
        }
      }
      return read_octal_escape_sequence(ch, strict_hex);
    }
    return ch;
  }
  function read_octal_escape_sequence(ch, strict_octal) {
    var p = peek();
    if (p >= "0" && p <= "7") {
      ch += next(true);
      if (ch[0] <= "3" && (p = peek()) >= "0" && p <= "7")
        ch += next(true);
    }
    if (ch === "0")
      return "\0";
    if (ch.length > 0 && next_token.has_directive("use strict") && strict_octal)
      parse_error("Legacy octal escape sequences are not allowed in strict mode");
    return String.fromCharCode(parseInt(ch, 8));
  }
  function hex_bytes(n, strict_hex) {
    var num = 0;
    for (; n > 0; --n) {
      if (!strict_hex && isNaN(parseInt(peek(), 16))) {
        return parseInt(num, 16) || "";
      }
      var digit = next(true);
      if (isNaN(parseInt(digit, 16)))
        parse_error("Invalid hex-character pattern in string");
      num += digit;
    }
    return parseInt(num, 16);
  }
  var read_string = with_eof_error("Unterminated string constant", function() {
    const start_pos = S.pos;
    var quote = next(), ret = [];
    for (; ; ) {
      var ch = next(true, true);
      if (ch == "\\")
        ch = read_escaped_char(true, true);
      else if (ch == "\r" || ch == "\n")
        parse_error("Unterminated string constant");
      else if (ch == quote)
        break;
      ret.push(ch);
    }
    var tok = token("string", ret.join(""));
    LATEST_RAW = S.text.slice(start_pos, S.pos);
    tok.quote = quote;
    return tok;
  });
  var read_template_characters = with_eof_error("Unterminated template", function(begin) {
    if (begin) {
      S.template_braces.push(S.brace_counter);
    }
    var content = "", raw = "", ch, tok;
    next(true, true);
    while ((ch = next(true, true)) != "`") {
      if (ch == "\r") {
        if (peek() == "\n")
          ++S.pos;
        ch = "\n";
      } else if (ch == "$" && peek() == "{") {
        next(true, true);
        S.brace_counter++;
        tok = token(begin ? "template_head" : "template_substitution", content);
        TEMPLATE_RAWS.set(tok, raw);
        tok.template_end = false;
        return tok;
      }
      raw += ch;
      if (ch == "\\") {
        var tmp = S.pos;
        var prev_is_tag = previous_token && (previous_token.type === "name" || previous_token.type === "punc" && (previous_token.value === ")" || previous_token.value === "]"));
        ch = read_escaped_char(true, !prev_is_tag, true);
        raw += S.text.substr(tmp, S.pos - tmp);
      }
      content += ch;
    }
    S.template_braces.pop();
    tok = token(begin ? "template_head" : "template_substitution", content);
    TEMPLATE_RAWS.set(tok, raw);
    tok.template_end = true;
    return tok;
  });
  function skip_line_comment(type) {
    var regex_allowed = S.regex_allowed;
    var i = find_eol(), ret;
    if (i == -1) {
      ret = S.text.substr(S.pos);
      S.pos = S.text.length;
    } else {
      ret = S.text.substring(S.pos, i);
      S.pos = i;
    }
    S.col = S.tokcol + (S.pos - S.tokpos);
    S.comments_before.push(token(type, ret, true));
    S.regex_allowed = regex_allowed;
    return next_token;
  }
  var skip_multiline_comment = with_eof_error("Unterminated multiline comment", function() {
    var regex_allowed = S.regex_allowed;
    var i = find("*/", true);
    var text = S.text.substring(S.pos, i).replace(/\r\n|\r|\u2028|\u2029/g, "\n");
    forward(get_full_char_length(text) + 2);
    S.comments_before.push(token("comment2", text, true));
    S.newline_before = S.newline_before || text.includes("\n");
    S.regex_allowed = regex_allowed;
    return next_token;
  });
  var read_name = with_eof_error("Unterminated identifier name", function() {
    var name = [], ch, escaped = false;
    var read_escaped_identifier_char = function() {
      escaped = true;
      next();
      if (peek() !== "u") {
        parse_error("Expecting UnicodeEscapeSequence -- uXXXX or u{XXXX}");
      }
      return read_escaped_char(false, true);
    };
    if ((ch = peek()) === "\\") {
      ch = read_escaped_identifier_char();
      if (!is_identifier_start(ch)) {
        parse_error("First identifier char is an invalid identifier char");
      }
    } else if (is_identifier_start(ch)) {
      next();
    } else {
      return "";
    }
    name.push(ch);
    while ((ch = peek()) != null) {
      if ((ch = peek()) === "\\") {
        ch = read_escaped_identifier_char();
        if (!is_identifier_char(ch)) {
          parse_error("Invalid escaped identifier char");
        }
      } else {
        if (!is_identifier_char(ch)) {
          break;
        }
        next();
      }
      name.push(ch);
    }
    const name_str = name.join("");
    if (RESERVED_WORDS.has(name_str) && escaped) {
      parse_error("Escaped characters are not allowed in keywords");
    }
    return name_str;
  });
  var read_regexp = with_eof_error("Unterminated regular expression", function(source) {
    var prev_backslash = false, ch, in_class = false;
    while (ch = next(true))
      if (NEWLINE_CHARS.has(ch)) {
        parse_error("Unexpected line terminator");
      } else if (prev_backslash) {
        source += "\\" + ch;
        prev_backslash = false;
      } else if (ch == "[") {
        in_class = true;
        source += ch;
      } else if (ch == "]" && in_class) {
        in_class = false;
        source += ch;
      } else if (ch == "/" && !in_class) {
        break;
      } else if (ch == "\\") {
        prev_backslash = true;
      } else {
        source += ch;
      }
    const flags = read_name();
    return token("regexp", "/" + source + "/" + flags);
  });
  function read_operator(prefix) {
    function grow(op) {
      if (!peek())
        return op;
      var bigger = op + peek();
      if (OPERATORS.has(bigger)) {
        next();
        return grow(bigger);
      } else {
        return op;
      }
    }
    return token("operator", grow(prefix || next()));
  }
  function handle_slash() {
    next();
    switch (peek()) {
      case "/":
        next();
        return skip_line_comment("comment1");
      case "*":
        next();
        return skip_multiline_comment();
    }
    return S.regex_allowed ? read_regexp("") : read_operator("/");
  }
  function handle_eq_sign() {
    next();
    if (peek() === ">") {
      next();
      return token("arrow", "=>");
    } else {
      return read_operator("=");
    }
  }
  function handle_dot() {
    next();
    if (is_digit(peek().charCodeAt(0))) {
      return read_num(".");
    }
    if (peek() === ".") {
      next();
      next();
      return token("expand", "...");
    }
    return token("punc", ".");
  }
  function read_word() {
    var word = read_name();
    if (prev_was_dot)
      return token("name", word);
    return KEYWORDS_ATOM.has(word) ? token("atom", word) : !KEYWORDS.has(word) ? token("name", word) : OPERATORS.has(word) ? token("operator", word) : token("keyword", word);
  }
  function read_private_word() {
    next();
    return token("privatename", read_name());
  }
  function with_eof_error(eof_error, cont) {
    return function(x) {
      try {
        return cont(x);
      } catch (ex) {
        if (ex === EX_EOF)
          parse_error(eof_error);
        else
          throw ex;
      }
    };
  }
  function next_token(force_regexp) {
    if (force_regexp != null)
      return read_regexp(force_regexp);
    if (shebang && S.pos == 0 && looking_at("#!")) {
      start_token();
      forward(2);
      skip_line_comment("comment5");
    }
    for (; ; ) {
      skip_whitespace();
      start_token();
      if (html5_comments) {
        if (looking_at("<!--")) {
          forward(4);
          skip_line_comment("comment3");
          continue;
        }
        if (looking_at("-->") && S.newline_before) {
          forward(3);
          skip_line_comment("comment4");
          continue;
        }
      }
      var ch = peek();
      if (!ch)
        return token("eof");
      var code = ch.charCodeAt(0);
      switch (code) {
        case 34:
        case 39:
          return read_string();
        case 46:
          return handle_dot();
        case 47: {
          var tok = handle_slash();
          if (tok === next_token)
            continue;
          return tok;
        }
        case 61:
          return handle_eq_sign();
        case 63: {
          if (!is_option_chain_op())
            break;
          next();
          next();
          return token("punc", "?.");
        }
        case 96:
          return read_template_characters(true);
        case 123:
          S.brace_counter++;
          break;
        case 125:
          S.brace_counter--;
          if (S.template_braces.length > 0 && S.template_braces[S.template_braces.length - 1] === S.brace_counter)
            return read_template_characters(false);
          break;
      }
      if (is_digit(code))
        return read_num();
      if (PUNC_CHARS.has(ch))
        return token("punc", next());
      if (OPERATOR_CHARS.has(ch))
        return read_operator();
      if (code == 92 || is_identifier_start(ch))
        return read_word();
      if (code == 35)
        return read_private_word();
      break;
    }
    parse_error("Unexpected character '" + ch + "'");
  }
  next_token.next = next;
  next_token.peek = peek;
  next_token.context = function(nc) {
    if (nc)
      S = nc;
    return S;
  };
  next_token.add_directive = function(directive) {
    S.directive_stack[S.directive_stack.length - 1].push(directive);
    if (S.directives[directive] === void 0) {
      S.directives[directive] = 1;
    } else {
      S.directives[directive]++;
    }
  };
  next_token.push_directives_stack = function() {
    S.directive_stack.push([]);
  };
  next_token.pop_directives_stack = function() {
    var directives2 = S.directive_stack[S.directive_stack.length - 1];
    for (var i = 0; i < directives2.length; i++) {
      S.directives[directives2[i]]--;
    }
    S.directive_stack.pop();
  };
  next_token.has_directive = function(directive) {
    return S.directives[directive] > 0;
  };
  return next_token;
}
var UNARY_PREFIX = makePredicate([
  "typeof",
  "void",
  "delete",
  "--",
  "++",
  "!",
  "~",
  "-",
  "+"
]);
var UNARY_POSTFIX = makePredicate(["--", "++"]);
var ASSIGNMENT = makePredicate(["=", "+=", "-=", "??=", "&&=", "||=", "/=", "*=", "**=", "%=", ">>=", "<<=", ">>>=", "|=", "^=", "&="]);
var LOGICAL_ASSIGNMENT = makePredicate(["??=", "&&=", "||="]);
var PRECEDENCE = function(a, ret) {
  for (var i = 0; i < a.length; ++i) {
    var b = a[i];
    for (var j = 0; j < b.length; ++j) {
      ret[b[j]] = i + 1;
    }
  }
  return ret;
}(
  [
    ["||"],
    ["??"],
    ["&&"],
    ["|"],
    ["^"],
    ["&"],
    ["==", "===", "!=", "!=="],
    ["<", ">", "<=", ">=", "in", "instanceof"],
    [">>", "<<", ">>>"],
    ["+", "-"],
    ["*", "/", "%"],
    ["**"]
  ],
  {}
);
var ATOMIC_START_TOKEN = makePredicate(["atom", "num", "big_int", "string", "regexp", "name"]);
function parse($TEXT, options3) {
  const outer_comments_before_counts = /* @__PURE__ */ new WeakMap();
  options3 = defaults2(options3, {
    bare_returns: false,
    ecma: null,
    // Legacy
    expression: false,
    filename: null,
    html5_comments: true,
    module: false,
    shebang: true,
    strict: false,
    toplevel: null
  }, true);
  var S = {
    input: typeof $TEXT == "string" ? tokenizer(
      $TEXT,
      options3.filename,
      options3.html5_comments,
      options3.shebang
    ) : $TEXT,
    token: null,
    prev: null,
    peeked: null,
    in_function: 0,
    in_async: -1,
    in_generator: -1,
    in_directives: true,
    in_loop: 0,
    labels: []
  };
  S.token = next();
  function is(type, value) {
    return is_token(S.token, type, value);
  }
  function peek() {
    return S.peeked || (S.peeked = S.input());
  }
  function next() {
    S.prev = S.token;
    if (!S.peeked)
      peek();
    S.token = S.peeked;
    S.peeked = null;
    S.in_directives = S.in_directives && (S.token.type == "string" || is("punc", ";"));
    return S.token;
  }
  function prev() {
    return S.prev;
  }
  function croak(msg, line, col, pos) {
    var ctx = S.input.context();
    js_error(
      msg,
      ctx.filename,
      line != null ? line : ctx.tokline,
      col != null ? col : ctx.tokcol,
      pos != null ? pos : ctx.tokpos
    );
  }
  function token_error(token, msg) {
    croak(msg, token.line, token.col);
  }
  function unexpected(token) {
    if (token == null)
      token = S.token;
    token_error(token, "Unexpected token: " + token.type + " (" + token.value + ")");
  }
  function expect_token(type, val) {
    if (is(type, val)) {
      return next();
    }
    token_error(S.token, "Unexpected token " + S.token.type + " \xAB" + S.token.value + "\xBB, expected " + type + " \xAB" + val + "\xBB");
  }
  function expect(punc) {
    return expect_token("punc", punc);
  }
  function has_newline_before(token) {
    return token.nlb || !token.comments_before.every((comment) => !comment.nlb);
  }
  function can_insert_semicolon() {
    return !options3.strict && (is("eof") || is("punc", "}") || has_newline_before(S.token));
  }
  function is_in_generator() {
    return S.in_generator === S.in_function;
  }
  function is_in_async() {
    return S.in_async === S.in_function;
  }
  function can_await() {
    return S.in_async === S.in_function || S.in_function === 0 && S.input.has_directive("use strict");
  }
  function semicolon2(optional) {
    if (is("punc", ";"))
      next();
    else if (!optional && !can_insert_semicolon())
      unexpected();
  }
  function parenthesised() {
    expect("(");
    var exp = expression(true);
    expect(")");
    return exp;
  }
  function embed_tokens(parser) {
    return function _embed_tokens_wrapper(...args2) {
      const start = S.token;
      const expr = parser(...args2);
      expr.start = start;
      expr.end = prev();
      return expr;
    };
  }
  function handle_regexp() {
    if (is("operator", "/") || is("operator", "/=")) {
      S.peeked = null;
      S.token = S.input(S.token.value.substr(1));
    }
  }
  var statement = embed_tokens(function statement2(is_export_default, is_for_body, is_if_body) {
    handle_regexp();
    switch (S.token.type) {
      case "string":
        if (S.in_directives) {
          var token = peek();
          if (!LATEST_RAW.includes("\\") && (is_token(token, "punc", ";") || is_token(token, "punc", "}") || has_newline_before(token) || is_token(token, "eof"))) {
            S.input.add_directive(S.token.value);
          } else {
            S.in_directives = false;
          }
        }
        var dir = S.in_directives, stat = simple_statement();
        return dir && stat.body instanceof AST_String ? new AST_Directive(stat.body) : stat;
      case "template_head":
      case "num":
      case "big_int":
      case "regexp":
      case "operator":
      case "atom":
        return simple_statement();
      case "name":
      case "privatename":
        if (is("privatename") && !S.in_class)
          croak("Private field must be used in an enclosing class");
        if (S.token.value == "async" && is_token(peek(), "keyword", "function")) {
          next();
          next();
          if (is_for_body) {
            croak("functions are not allowed as the body of a loop");
          }
          return function_(AST_Defun, false, true, is_export_default);
        }
        if (S.token.value == "import" && !is_token(peek(), "punc", "(") && !is_token(peek(), "punc", ".")) {
          next();
          var node = import_statement();
          semicolon2();
          return node;
        }
        return is_token(peek(), "punc", ":") ? labeled_statement() : simple_statement();
      case "punc":
        switch (S.token.value) {
          case "{":
            return new AST_BlockStatement({
              start: S.token,
              body: block_(),
              end: prev()
            });
          case "[":
          case "(":
            return simple_statement();
          case ";":
            S.in_directives = false;
            next();
            return new AST_EmptyStatement();
          default:
            unexpected();
        }
      case "keyword":
        switch (S.token.value) {
          case "break":
            next();
            return break_cont(AST_Break);
          case "continue":
            next();
            return break_cont(AST_Continue);
          case "debugger":
            next();
            semicolon2();
            return new AST_Debugger();
          case "do":
            next();
            var body = in_loop(statement2);
            expect_token("keyword", "while");
            var condition = parenthesised();
            semicolon2(true);
            return new AST_Do({
              body,
              condition
            });
          case "while":
            next();
            return new AST_While({
              condition: parenthesised(),
              body: in_loop(function() {
                return statement2(false, true);
              })
            });
          case "for":
            next();
            return for_();
          case "class":
            next();
            if (is_for_body) {
              croak("classes are not allowed as the body of a loop");
            }
            if (is_if_body) {
              croak("classes are not allowed as the body of an if");
            }
            return class_(AST_DefClass, is_export_default);
          case "function":
            next();
            if (is_for_body) {
              croak("functions are not allowed as the body of a loop");
            }
            return function_(AST_Defun, false, false, is_export_default);
          case "if":
            next();
            return if_();
          case "return":
            if (S.in_function == 0 && !options3.bare_returns)
              croak("'return' outside of function");
            next();
            var value = null;
            if (is("punc", ";")) {
              next();
            } else if (!can_insert_semicolon()) {
              value = expression(true);
              semicolon2();
            }
            return new AST_Return({
              value
            });
          case "switch":
            next();
            return new AST_Switch({
              expression: parenthesised(),
              body: in_loop(switch_body_)
            });
          case "throw":
            next();
            if (has_newline_before(S.token))
              croak("Illegal newline after 'throw'");
            var value = expression(true);
            semicolon2();
            return new AST_Throw({
              value
            });
          case "try":
            next();
            return try_();
          case "var":
            next();
            var node = var_();
            semicolon2();
            return node;
          case "let":
            next();
            var node = let_();
            semicolon2();
            return node;
          case "const":
            next();
            var node = const_();
            semicolon2();
            return node;
          case "with":
            if (S.input.has_directive("use strict")) {
              croak("Strict mode may not include a with statement");
            }
            next();
            return new AST_With({
              expression: parenthesised(),
              body: statement2()
            });
          case "export":
            if (!is_token(peek(), "punc", "(")) {
              next();
              var node = export_statement();
              if (is("punc", ";"))
                semicolon2();
              return node;
            }
        }
    }
    unexpected();
  });
  function labeled_statement() {
    var label = as_symbol(AST_Label);
    if (label.name === "await" && is_in_async()) {
      token_error(S.prev, "await cannot be used as label inside async function");
    }
    if (S.labels.some((l) => l.name === label.name)) {
      croak("Label " + label.name + " defined twice");
    }
    expect(":");
    S.labels.push(label);
    var stat = statement();
    S.labels.pop();
    if (!(stat instanceof AST_IterationStatement)) {
      label.references.forEach(function(ref) {
        if (ref instanceof AST_Continue) {
          ref = ref.label.start;
          croak(
            "Continue label `" + label.name + "` refers to non-IterationStatement.",
            ref.line,
            ref.col,
            ref.pos
          );
        }
      });
    }
    return new AST_LabeledStatement({ body: stat, label });
  }
  function simple_statement(tmp) {
    return new AST_SimpleStatement({ body: (tmp = expression(true), semicolon2(), tmp) });
  }
  function break_cont(type) {
    var label = null, ldef;
    if (!can_insert_semicolon()) {
      label = as_symbol(AST_LabelRef, true);
    }
    if (label != null) {
      ldef = S.labels.find((l) => l.name === label.name);
      if (!ldef)
        croak("Undefined label " + label.name);
      label.thedef = ldef;
    } else if (S.in_loop == 0)
      croak(type.TYPE + " not inside a loop or switch");
    semicolon2();
    var stat = new type({ label });
    if (ldef)
      ldef.references.push(stat);
    return stat;
  }
  function for_() {
    var for_await_error = "`for await` invalid in this context";
    var await_tok = S.token;
    if (await_tok.type == "name" && await_tok.value == "await") {
      if (!can_await()) {
        token_error(await_tok, for_await_error);
      }
      next();
    } else {
      await_tok = false;
    }
    expect("(");
    var init = null;
    if (!is("punc", ";")) {
      init = is("keyword", "var") ? (next(), var_(true)) : is("keyword", "let") ? (next(), let_(true)) : is("keyword", "const") ? (next(), const_(true)) : expression(true, true);
      var is_in = is("operator", "in");
      var is_of = is("name", "of");
      if (await_tok && !is_of) {
        token_error(await_tok, for_await_error);
      }
      if (is_in || is_of) {
        if (init instanceof AST_Definitions) {
          if (init.definitions.length > 1)
            token_error(init.start, "Only one variable declaration allowed in for..in loop");
        } else if (!(is_assignable(init) || (init = to_destructuring(init)) instanceof AST_Destructuring)) {
          token_error(init.start, "Invalid left-hand side in for..in loop");
        }
        next();
        if (is_in) {
          return for_in(init);
        } else {
          return for_of(init, !!await_tok);
        }
      }
    } else if (await_tok) {
      token_error(await_tok, for_await_error);
    }
    return regular_for(init);
  }
  function regular_for(init) {
    expect(";");
    var test = is("punc", ";") ? null : expression(true);
    expect(";");
    var step = is("punc", ")") ? null : expression(true);
    expect(")");
    return new AST_For({
      init,
      condition: test,
      step,
      body: in_loop(function() {
        return statement(false, true);
      })
    });
  }
  function for_of(init, is_await) {
    var lhs = init instanceof AST_Definitions ? init.definitions[0].name : null;
    var obj = expression(true);
    expect(")");
    return new AST_ForOf({
      await: is_await,
      init,
      name: lhs,
      object: obj,
      body: in_loop(function() {
        return statement(false, true);
      })
    });
  }
  function for_in(init) {
    var obj = expression(true);
    expect(")");
    return new AST_ForIn({
      init,
      object: obj,
      body: in_loop(function() {
        return statement(false, true);
      })
    });
  }
  var arrow_function = function(start, argnames, is_async) {
    if (has_newline_before(S.token)) {
      croak("Unexpected newline before arrow (=>)");
    }
    expect_token("arrow", "=>");
    var body = _function_body(is("punc", "{"), false, is_async);
    var end = body instanceof Array && body.length ? body[body.length - 1].end : body instanceof Array ? start : body.end;
    return new AST_Arrow({
      start,
      end,
      async: is_async,
      argnames,
      body
    });
  };
  var function_ = function(ctor, is_generator_property, is_async, is_export_default) {
    var in_statement = ctor === AST_Defun;
    var is_generator = is("operator", "*");
    if (is_generator) {
      next();
    }
    var name = is("name") ? as_symbol(in_statement ? AST_SymbolDefun : AST_SymbolLambda) : null;
    if (in_statement && !name) {
      if (is_export_default) {
        ctor = AST_Function;
      } else {
        unexpected();
      }
    }
    if (name && ctor !== AST_Accessor && !(name instanceof AST_SymbolDeclaration))
      unexpected(prev());
    var args2 = [];
    var body = _function_body(true, is_generator || is_generator_property, is_async, name, args2);
    return new ctor({
      start: args2.start,
      end: body.end,
      is_generator,
      async: is_async,
      name,
      argnames: args2,
      body
    });
  };
  class UsedParametersTracker {
    constructor(is_parameter, strict, duplicates_ok = false) {
      this.is_parameter = is_parameter;
      this.duplicates_ok = duplicates_ok;
      this.parameters = /* @__PURE__ */ new Set();
      this.duplicate = null;
      this.default_assignment = false;
      this.spread = false;
      this.strict_mode = !!strict;
    }
    add_parameter(token) {
      if (this.parameters.has(token.value)) {
        if (this.duplicate === null) {
          this.duplicate = token;
        }
        this.check_strict();
      } else {
        this.parameters.add(token.value);
        if (this.is_parameter) {
          switch (token.value) {
            case "arguments":
            case "eval":
            case "yield":
              if (this.strict_mode) {
                token_error(token, "Unexpected " + token.value + " identifier as parameter inside strict mode");
              }
              break;
            default:
              if (RESERVED_WORDS.has(token.value)) {
                unexpected();
              }
          }
        }
      }
    }
    mark_default_assignment(token) {
      if (this.default_assignment === false) {
        this.default_assignment = token;
      }
    }
    mark_spread(token) {
      if (this.spread === false) {
        this.spread = token;
      }
    }
    mark_strict_mode() {
      this.strict_mode = true;
    }
    is_strict() {
      return this.default_assignment !== false || this.spread !== false || this.strict_mode;
    }
    check_strict() {
      if (this.is_strict() && this.duplicate !== null && !this.duplicates_ok) {
        token_error(this.duplicate, "Parameter " + this.duplicate.value + " was used already");
      }
    }
  }
  function parameters(params) {
    var used_parameters = new UsedParametersTracker(true, S.input.has_directive("use strict"));
    expect("(");
    while (!is("punc", ")")) {
      var param = parameter(used_parameters);
      params.push(param);
      if (!is("punc", ")")) {
        expect(",");
      }
      if (param instanceof AST_Expansion) {
        break;
      }
    }
    next();
  }
  function parameter(used_parameters, symbol_type) {
    var param;
    var expand2 = false;
    if (used_parameters === void 0) {
      used_parameters = new UsedParametersTracker(true, S.input.has_directive("use strict"));
    }
    if (is("expand", "...")) {
      expand2 = S.token;
      used_parameters.mark_spread(S.token);
      next();
    }
    param = binding_element(used_parameters, symbol_type);
    if (is("operator", "=") && expand2 === false) {
      used_parameters.mark_default_assignment(S.token);
      next();
      param = new AST_DefaultAssign({
        start: param.start,
        left: param,
        operator: "=",
        right: expression(false),
        end: S.token
      });
    }
    if (expand2 !== false) {
      if (!is("punc", ")")) {
        unexpected();
      }
      param = new AST_Expansion({
        start: expand2,
        expression: param,
        end: expand2
      });
    }
    used_parameters.check_strict();
    return param;
  }
  function binding_element(used_parameters, symbol_type) {
    var elements = [];
    var first = true;
    var is_expand = false;
    var expand_token;
    var first_token = S.token;
    if (used_parameters === void 0) {
      const strict = S.input.has_directive("use strict");
      const duplicates_ok = symbol_type === AST_SymbolVar;
      used_parameters = new UsedParametersTracker(false, strict, duplicates_ok);
    }
    symbol_type = symbol_type === void 0 ? AST_SymbolFunarg : symbol_type;
    if (is("punc", "[")) {
      next();
      while (!is("punc", "]")) {
        if (first) {
          first = false;
        } else {
          expect(",");
        }
        if (is("expand", "...")) {
          is_expand = true;
          expand_token = S.token;
          used_parameters.mark_spread(S.token);
          next();
        }
        if (is("punc")) {
          switch (S.token.value) {
            case ",":
              elements.push(new AST_Hole({
                start: S.token,
                end: S.token
              }));
              continue;
            case "]":
              break;
            case "[":
            case "{":
              elements.push(binding_element(used_parameters, symbol_type));
              break;
            default:
              unexpected();
          }
        } else if (is("name")) {
          used_parameters.add_parameter(S.token);
          elements.push(as_symbol(symbol_type));
        } else {
          croak("Invalid function parameter");
        }
        if (is("operator", "=") && is_expand === false) {
          used_parameters.mark_default_assignment(S.token);
          next();
          elements[elements.length - 1] = new AST_DefaultAssign({
            start: elements[elements.length - 1].start,
            left: elements[elements.length - 1],
            operator: "=",
            right: expression(false),
            end: S.token
          });
        }
        if (is_expand) {
          if (!is("punc", "]")) {
            croak("Rest element must be last element");
          }
          elements[elements.length - 1] = new AST_Expansion({
            start: expand_token,
            expression: elements[elements.length - 1],
            end: expand_token
          });
        }
      }
      expect("]");
      used_parameters.check_strict();
      return new AST_Destructuring({
        start: first_token,
        names: elements,
        is_array: true,
        end: prev()
      });
    } else if (is("punc", "{")) {
      next();
      while (!is("punc", "}")) {
        if (first) {
          first = false;
        } else {
          expect(",");
        }
        if (is("expand", "...")) {
          is_expand = true;
          expand_token = S.token;
          used_parameters.mark_spread(S.token);
          next();
        }
        if (is("name") && (is_token(peek(), "punc") || is_token(peek(), "operator")) && [",", "}", "="].includes(peek().value)) {
          used_parameters.add_parameter(S.token);
          var start = prev();
          var value = as_symbol(symbol_type);
          if (is_expand) {
            elements.push(new AST_Expansion({
              start: expand_token,
              expression: value,
              end: value.end
            }));
          } else {
            elements.push(new AST_ObjectKeyVal({
              start,
              key: value.name,
              value,
              end: value.end
            }));
          }
        } else if (is("punc", "}")) {
          continue;
        } else {
          var property_token = S.token;
          var property = as_property_name();
          if (property === null) {
            unexpected(prev());
          } else if (prev().type === "name" && !is("punc", ":")) {
            elements.push(new AST_ObjectKeyVal({
              start: prev(),
              key: property,
              value: new symbol_type({
                start: prev(),
                name: property,
                end: prev()
              }),
              end: prev()
            }));
          } else {
            expect(":");
            elements.push(new AST_ObjectKeyVal({
              start: property_token,
              quote: property_token.quote,
              key: property,
              value: binding_element(used_parameters, symbol_type),
              end: prev()
            }));
          }
        }
        if (is_expand) {
          if (!is("punc", "}")) {
            croak("Rest element must be last element");
          }
        } else if (is("operator", "=")) {
          used_parameters.mark_default_assignment(S.token);
          next();
          elements[elements.length - 1].value = new AST_DefaultAssign({
            start: elements[elements.length - 1].value.start,
            left: elements[elements.length - 1].value,
            operator: "=",
            right: expression(false),
            end: S.token
          });
        }
      }
      expect("}");
      used_parameters.check_strict();
      return new AST_Destructuring({
        start: first_token,
        names: elements,
        is_array: false,
        end: prev()
      });
    } else if (is("name")) {
      used_parameters.add_parameter(S.token);
      return as_symbol(symbol_type);
    } else {
      croak("Invalid function parameter");
    }
  }
  function params_or_seq_(allow_arrows, maybe_sequence) {
    var spread_token;
    var invalid_sequence;
    var trailing_comma;
    var a = [];
    expect("(");
    while (!is("punc", ")")) {
      if (spread_token)
        unexpected(spread_token);
      if (is("expand", "...")) {
        spread_token = S.token;
        if (maybe_sequence)
          invalid_sequence = S.token;
        next();
        a.push(new AST_Expansion({
          start: prev(),
          expression: expression(),
          end: S.token
        }));
      } else {
        a.push(expression());
      }
      if (!is("punc", ")")) {
        expect(",");
        if (is("punc", ")")) {
          trailing_comma = prev();
          if (maybe_sequence)
            invalid_sequence = trailing_comma;
        }
      }
    }
    expect(")");
    if (allow_arrows && is("arrow", "=>")) {
      if (spread_token && trailing_comma)
        unexpected(trailing_comma);
    } else if (invalid_sequence) {
      unexpected(invalid_sequence);
    }
    return a;
  }
  function _function_body(block, generator, is_async, name, args2) {
    var loop = S.in_loop;
    var labels = S.labels;
    var current_generator = S.in_generator;
    var current_async = S.in_async;
    ++S.in_function;
    if (generator)
      S.in_generator = S.in_function;
    if (is_async)
      S.in_async = S.in_function;
    if (args2)
      parameters(args2);
    if (block)
      S.in_directives = true;
    S.in_loop = 0;
    S.labels = [];
    if (block) {
      S.input.push_directives_stack();
      var a = block_();
      if (name)
        _verify_symbol(name);
      if (args2)
        args2.forEach(_verify_symbol);
      S.input.pop_directives_stack();
    } else {
      var a = [new AST_Return({
        start: S.token,
        value: expression(false),
        end: S.token
      })];
    }
    --S.in_function;
    S.in_loop = loop;
    S.labels = labels;
    S.in_generator = current_generator;
    S.in_async = current_async;
    return a;
  }
  function _await_expression() {
    if (!can_await()) {
      croak(
        "Unexpected await expression outside async function",
        S.prev.line,
        S.prev.col,
        S.prev.pos
      );
    }
    return new AST_Await({
      start: prev(),
      end: S.token,
      expression: maybe_unary(true)
    });
  }
  function _yield_expression() {
    if (!is_in_generator()) {
      croak(
        "Unexpected yield expression outside generator function",
        S.prev.line,
        S.prev.col,
        S.prev.pos
      );
    }
    var start = S.token;
    var star3 = false;
    var has_expression = true;
    if (can_insert_semicolon() || is("punc") && PUNC_AFTER_EXPRESSION.has(S.token.value)) {
      has_expression = false;
    } else if (is("operator", "*")) {
      star3 = true;
      next();
    }
    return new AST_Yield({
      start,
      is_star: star3,
      expression: has_expression ? expression() : null,
      end: prev()
    });
  }
  function if_() {
    var cond = parenthesised(), body = statement(false, false, true), belse = null;
    if (is("keyword", "else")) {
      next();
      belse = statement(false, false, true);
    }
    return new AST_If({
      condition: cond,
      body,
      alternative: belse
    });
  }
  function block_() {
    expect("{");
    var a = [];
    while (!is("punc", "}")) {
      if (is("eof"))
        unexpected();
      a.push(statement());
    }
    next();
    return a;
  }
  function switch_body_() {
    expect("{");
    var a = [], cur = null, branch = null, tmp;
    while (!is("punc", "}")) {
      if (is("eof"))
        unexpected();
      if (is("keyword", "case")) {
        if (branch)
          branch.end = prev();
        cur = [];
        branch = new AST_Case({
          start: (tmp = S.token, next(), tmp),
          expression: expression(true),
          body: cur
        });
        a.push(branch);
        expect(":");
      } else if (is("keyword", "default")) {
        if (branch)
          branch.end = prev();
        cur = [];
        branch = new AST_Default({
          start: (tmp = S.token, next(), expect(":"), tmp),
          body: cur
        });
        a.push(branch);
      } else {
        if (!cur)
          unexpected();
        cur.push(statement());
      }
    }
    if (branch)
      branch.end = prev();
    next();
    return a;
  }
  function try_() {
    var body, bcatch = null, bfinally = null;
    body = new AST_TryBlock({
      start: S.token,
      body: block_(),
      end: prev()
    });
    if (is("keyword", "catch")) {
      var start = S.token;
      next();
      if (is("punc", "{")) {
        var name = null;
      } else {
        expect("(");
        var name = parameter(void 0, AST_SymbolCatch);
        expect(")");
      }
      bcatch = new AST_Catch({
        start,
        argname: name,
        body: block_(),
        end: prev()
      });
    }
    if (is("keyword", "finally")) {
      var start = S.token;
      next();
      bfinally = new AST_Finally({
        start,
        body: block_(),
        end: prev()
      });
    }
    if (!bcatch && !bfinally)
      croak("Missing catch/finally blocks");
    return new AST_Try({
      body,
      bcatch,
      bfinally
    });
  }
  function vardefs(no_in, kind) {
    var var_defs = [];
    var def;
    for (; ; ) {
      var sym_type = kind === "var" ? AST_SymbolVar : kind === "const" ? AST_SymbolConst : kind === "let" ? AST_SymbolLet : null;
      if (is("punc", "{") || is("punc", "[")) {
        def = new AST_VarDef({
          start: S.token,
          name: binding_element(void 0, sym_type),
          value: is("operator", "=") ? (expect_token("operator", "="), expression(false, no_in)) : null,
          end: prev()
        });
      } else {
        def = new AST_VarDef({
          start: S.token,
          name: as_symbol(sym_type),
          value: is("operator", "=") ? (next(), expression(false, no_in)) : !no_in && kind === "const" ? croak("Missing initializer in const declaration") : null,
          end: prev()
        });
        if (def.name.name == "import")
          croak("Unexpected token: import");
      }
      var_defs.push(def);
      if (!is("punc", ","))
        break;
      next();
    }
    return var_defs;
  }
  var var_ = function(no_in) {
    return new AST_Var({
      start: prev(),
      definitions: vardefs(no_in, "var"),
      end: prev()
    });
  };
  var let_ = function(no_in) {
    return new AST_Let({
      start: prev(),
      definitions: vardefs(no_in, "let"),
      end: prev()
    });
  };
  var const_ = function(no_in) {
    return new AST_Const({
      start: prev(),
      definitions: vardefs(no_in, "const"),
      end: prev()
    });
  };
  var new_ = function(allow_calls) {
    var start = S.token;
    expect_token("operator", "new");
    if (is("punc", ".")) {
      next();
      expect_token("name", "target");
      return subscripts(new AST_NewTarget({
        start,
        end: prev()
      }), allow_calls);
    }
    var newexp = expr_atom(false), args2;
    if (is("punc", "(")) {
      next();
      args2 = expr_list(")", true);
    } else {
      args2 = [];
    }
    var call = new AST_New({
      start,
      expression: newexp,
      args: args2,
      end: prev()
    });
    annotate(call);
    return subscripts(call, allow_calls);
  };
  function as_atom_node() {
    var tok = S.token, ret;
    switch (tok.type) {
      case "name":
        ret = _make_symbol(AST_SymbolRef);
        break;
      case "num":
        ret = new AST_Number({
          start: tok,
          end: tok,
          value: tok.value,
          raw: LATEST_RAW
        });
        break;
      case "big_int":
        ret = new AST_BigInt({ start: tok, end: tok, value: tok.value });
        break;
      case "string":
        ret = new AST_String({
          start: tok,
          end: tok,
          value: tok.value,
          quote: tok.quote
        });
        break;
      case "regexp":
        const [_, source, flags] = tok.value.match(/^\/(.*)\/(\w*)$/);
        ret = new AST_RegExp({ start: tok, end: tok, value: { source, flags } });
        break;
      case "atom":
        switch (tok.value) {
          case "false":
            ret = new AST_False({ start: tok, end: tok });
            break;
          case "true":
            ret = new AST_True({ start: tok, end: tok });
            break;
          case "null":
            ret = new AST_Null({ start: tok, end: tok });
            break;
        }
        break;
    }
    next();
    return ret;
  }
  function to_fun_args(ex, default_seen_above) {
    var insert_default = function(ex2, default_value) {
      if (default_value) {
        return new AST_DefaultAssign({
          start: ex2.start,
          left: ex2,
          operator: "=",
          right: default_value,
          end: default_value.end
        });
      }
      return ex2;
    };
    if (ex instanceof AST_Object) {
      return insert_default(new AST_Destructuring({
        start: ex.start,
        end: ex.end,
        is_array: false,
        names: ex.properties.map((prop) => to_fun_args(prop))
      }), default_seen_above);
    } else if (ex instanceof AST_ObjectKeyVal) {
      ex.value = to_fun_args(ex.value);
      return insert_default(ex, default_seen_above);
    } else if (ex instanceof AST_Hole) {
      return ex;
    } else if (ex instanceof AST_Destructuring) {
      ex.names = ex.names.map((name) => to_fun_args(name));
      return insert_default(ex, default_seen_above);
    } else if (ex instanceof AST_SymbolRef) {
      return insert_default(new AST_SymbolFunarg({
        name: ex.name,
        start: ex.start,
        end: ex.end
      }), default_seen_above);
    } else if (ex instanceof AST_Expansion) {
      ex.expression = to_fun_args(ex.expression);
      return insert_default(ex, default_seen_above);
    } else if (ex instanceof AST_Array) {
      return insert_default(new AST_Destructuring({
        start: ex.start,
        end: ex.end,
        is_array: true,
        names: ex.elements.map((elm) => to_fun_args(elm))
      }), default_seen_above);
    } else if (ex instanceof AST_Assign) {
      return insert_default(to_fun_args(ex.left, ex.right), default_seen_above);
    } else if (ex instanceof AST_DefaultAssign) {
      ex.left = to_fun_args(ex.left);
      return ex;
    } else {
      croak("Invalid function parameter", ex.start.line, ex.start.col);
    }
  }
  var expr_atom = function(allow_calls, allow_arrows) {
    if (is("operator", "new")) {
      return new_(allow_calls);
    }
    if (is("name", "import") && is_token(peek(), "punc", ".")) {
      return import_meta(allow_calls);
    }
    var start = S.token;
    var peeked;
    var async = is("name", "async") && (peeked = peek()).value != "[" && peeked.type != "arrow" && as_atom_node();
    if (is("punc")) {
      switch (S.token.value) {
        case "(":
          if (async && !allow_calls)
            break;
          var exprs = params_or_seq_(allow_arrows, !async);
          if (allow_arrows && is("arrow", "=>")) {
            return arrow_function(start, exprs.map((e) => to_fun_args(e)), !!async);
          }
          var ex = async ? new AST_Call({
            expression: async,
            args: exprs
          }) : exprs.length == 1 ? exprs[0] : new AST_Sequence({
            expressions: exprs
          });
          if (ex.start) {
            const outer_comments_before = start.comments_before.length;
            outer_comments_before_counts.set(start, outer_comments_before);
            ex.start.comments_before.unshift(...start.comments_before);
            start.comments_before = ex.start.comments_before;
            if (outer_comments_before == 0 && start.comments_before.length > 0) {
              var comment = start.comments_before[0];
              if (!comment.nlb) {
                comment.nlb = start.nlb;
                start.nlb = false;
              }
            }
            start.comments_after = ex.start.comments_after;
          }
          ex.start = start;
          var end = prev();
          if (ex.end) {
            end.comments_before = ex.end.comments_before;
            ex.end.comments_after.push(...end.comments_after);
            end.comments_after = ex.end.comments_after;
          }
          ex.end = end;
          if (ex instanceof AST_Call)
            annotate(ex);
          return subscripts(ex, allow_calls);
        case "[":
          return subscripts(array_(), allow_calls);
        case "{":
          return subscripts(object_or_destructuring_(), allow_calls);
      }
      if (!async)
        unexpected();
    }
    if (allow_arrows && is("name") && is_token(peek(), "arrow")) {
      var param = new AST_SymbolFunarg({
        name: S.token.value,
        start,
        end: start
      });
      next();
      return arrow_function(start, [param], !!async);
    }
    if (is("keyword", "function")) {
      next();
      var func = function_(AST_Function, false, !!async);
      func.start = start;
      func.end = prev();
      return subscripts(func, allow_calls);
    }
    if (async)
      return subscripts(async, allow_calls);
    if (is("keyword", "class")) {
      next();
      var cls = class_(AST_ClassExpression);
      cls.start = start;
      cls.end = prev();
      return subscripts(cls, allow_calls);
    }
    if (is("template_head")) {
      return subscripts(template_string(), allow_calls);
    }
    if (is("privatename")) {
      if (!S.in_class) {
        croak("Private field must be used in an enclosing class");
      }
      const start2 = S.token;
      const key = new AST_SymbolPrivateProperty({
        start: start2,
        name: start2.value,
        end: start2
      });
      next();
      expect_token("operator", "in");
      const private_in = new AST_PrivateIn({
        start: start2,
        key,
        value: subscripts(as_atom_node(), allow_calls),
        end: prev()
      });
      return subscripts(private_in, allow_calls);
    }
    if (ATOMIC_START_TOKEN.has(S.token.type)) {
      return subscripts(as_atom_node(), allow_calls);
    }
    unexpected();
  };
  function template_string() {
    var segments = [], start = S.token;
    segments.push(new AST_TemplateSegment({
      start: S.token,
      raw: TEMPLATE_RAWS.get(S.token),
      value: S.token.value,
      end: S.token
    }));
    while (!S.token.template_end) {
      next();
      handle_regexp();
      segments.push(expression(true));
      segments.push(new AST_TemplateSegment({
        start: S.token,
        raw: TEMPLATE_RAWS.get(S.token),
        value: S.token.value,
        end: S.token
      }));
    }
    next();
    return new AST_TemplateString({
      start,
      segments,
      end: S.token
    });
  }
  function expr_list(closing, allow_trailing_comma, allow_empty) {
    var first = true, a = [];
    while (!is("punc", closing)) {
      if (first)
        first = false;
      else
        expect(",");
      if (allow_trailing_comma && is("punc", closing))
        break;
      if (is("punc", ",") && allow_empty) {
        a.push(new AST_Hole({ start: S.token, end: S.token }));
      } else if (is("expand", "...")) {
        next();
        a.push(new AST_Expansion({ start: prev(), expression: expression(), end: S.token }));
      } else {
        a.push(expression(false));
      }
    }
    next();
    return a;
  }
  var array_ = embed_tokens(function() {
    expect("[");
    return new AST_Array({
      elements: expr_list("]", !options3.strict, true)
    });
  });
  var create_accessor = embed_tokens((is_generator, is_async) => {
    return function_(AST_Accessor, is_generator, is_async);
  });
  var object_or_destructuring_ = embed_tokens(function object_or_destructuring_2() {
    var start = S.token, first = true, a = [];
    expect("{");
    while (!is("punc", "}")) {
      if (first)
        first = false;
      else
        expect(",");
      if (!options3.strict && is("punc", "}"))
        break;
      start = S.token;
      if (start.type == "expand") {
        next();
        a.push(new AST_Expansion({
          start,
          expression: expression(false),
          end: prev()
        }));
        continue;
      }
      if (is("privatename")) {
        croak("private fields are not allowed in an object");
      }
      var name = as_property_name();
      var value;
      if (!is("punc", ":")) {
        var concise = concise_method_or_getset(name, start);
        if (concise) {
          a.push(concise);
          continue;
        }
        value = new AST_SymbolRef({
          start: prev(),
          name,
          end: prev()
        });
      } else if (name === null) {
        unexpected(prev());
      } else {
        next();
        value = expression(false);
      }
      if (is("operator", "=")) {
        next();
        value = new AST_Assign({
          start,
          left: value,
          operator: "=",
          right: expression(false),
          logical: false,
          end: prev()
        });
      }
      a.push(new AST_ObjectKeyVal({
        start,
        quote: start.quote,
        key: name instanceof AST_Node ? name : "" + name,
        value,
        end: prev()
      }));
    }
    next();
    return new AST_Object({ properties: a });
  });
  function class_(KindOfClass, is_export_default) {
    var start, method, class_name, extends_, a = [];
    S.input.push_directives_stack();
    S.input.add_directive("use strict");
    if (S.token.type == "name" && S.token.value != "extends") {
      class_name = as_symbol(KindOfClass === AST_DefClass ? AST_SymbolDefClass : AST_SymbolClass);
    }
    if (KindOfClass === AST_DefClass && !class_name) {
      if (is_export_default) {
        KindOfClass = AST_ClassExpression;
      } else {
        unexpected();
      }
    }
    if (S.token.value == "extends") {
      next();
      extends_ = expression(true);
    }
    expect("{");
    const save_in_class = S.in_class;
    S.in_class = true;
    while (is("punc", ";")) {
      next();
    }
    while (!is("punc", "}")) {
      start = S.token;
      method = concise_method_or_getset(as_property_name(), start, true);
      if (!method) {
        unexpected();
      }
      a.push(method);
      while (is("punc", ";")) {
        next();
      }
    }
    S.in_class = save_in_class;
    S.input.pop_directives_stack();
    next();
    return new KindOfClass({
      start,
      name: class_name,
      extends: extends_,
      properties: a,
      end: prev()
    });
  }
  function concise_method_or_getset(name, start, is_class) {
    const get_symbol_ast = (name2, SymbolClass = AST_SymbolMethod) => {
      if (typeof name2 === "string" || typeof name2 === "number") {
        return new SymbolClass({
          start,
          name: "" + name2,
          end: prev()
        });
      } else if (name2 === null) {
        unexpected();
      }
      return name2;
    };
    const is_not_method_start = () => !is("punc", "(") && !is("punc", ",") && !is("punc", "}") && !is("punc", ";") && !is("operator", "=");
    var is_async = false;
    var is_static = false;
    var is_generator = false;
    var is_private = false;
    var accessor_type = null;
    if (is_class && name === "static" && is_not_method_start()) {
      const static_block = class_static_block();
      if (static_block != null) {
        return static_block;
      }
      is_static = true;
      name = as_property_name();
    }
    if (name === "async" && is_not_method_start()) {
      is_async = true;
      name = as_property_name();
    }
    if (prev().type === "operator" && prev().value === "*") {
      is_generator = true;
      name = as_property_name();
    }
    if ((name === "get" || name === "set") && is_not_method_start()) {
      accessor_type = name;
      name = as_property_name();
    }
    if (prev().type === "privatename") {
      is_private = true;
    }
    const property_token = prev();
    if (accessor_type != null) {
      if (!is_private) {
        const AccessorClass = accessor_type === "get" ? AST_ObjectGetter : AST_ObjectSetter;
        name = get_symbol_ast(name);
        return new AccessorClass({
          start,
          static: is_static,
          key: name,
          quote: name instanceof AST_SymbolMethod ? property_token.quote : void 0,
          value: create_accessor(),
          end: prev()
        });
      } else {
        const AccessorClass = accessor_type === "get" ? AST_PrivateGetter : AST_PrivateSetter;
        return new AccessorClass({
          start,
          static: is_static,
          key: get_symbol_ast(name),
          value: create_accessor(),
          end: prev()
        });
      }
    }
    if (is("punc", "(")) {
      name = get_symbol_ast(name);
      const AST_MethodVariant = is_private ? AST_PrivateMethod : AST_ConciseMethod;
      var node = new AST_MethodVariant({
        start,
        static: is_static,
        is_generator,
        async: is_async,
        key: name,
        quote: name instanceof AST_SymbolMethod ? property_token.quote : void 0,
        value: create_accessor(is_generator, is_async),
        end: prev()
      });
      return node;
    }
    if (is_class) {
      const key = get_symbol_ast(name, AST_SymbolClassProperty);
      const quote = key instanceof AST_SymbolClassProperty ? property_token.quote : void 0;
      const AST_ClassPropertyVariant = is_private ? AST_ClassPrivateProperty : AST_ClassProperty;
      if (is("operator", "=")) {
        next();
        return new AST_ClassPropertyVariant({
          start,
          static: is_static,
          quote,
          key,
          value: expression(false),
          end: prev()
        });
      } else if (is("name") || is("privatename") || is("operator", "*") || is("punc", ";") || is("punc", "}")) {
        return new AST_ClassPropertyVariant({
          start,
          static: is_static,
          quote,
          key,
          end: prev()
        });
      }
    }
  }
  function class_static_block() {
    if (!is("punc", "{")) {
      return null;
    }
    const start = S.token;
    const body = [];
    next();
    while (!is("punc", "}")) {
      body.push(statement());
    }
    next();
    return new AST_ClassStaticBlock({ start, body, end: prev() });
  }
  function maybe_import_assertion() {
    if (is("name", "assert") && !has_newline_before(S.token)) {
      next();
      return object_or_destructuring_();
    }
    return null;
  }
  function import_statement() {
    var start = prev();
    var imported_name;
    var imported_names;
    if (is("name")) {
      imported_name = as_symbol(AST_SymbolImport);
    }
    if (is("punc", ",")) {
      next();
    }
    imported_names = map_names(true);
    if (imported_names || imported_name) {
      expect_token("name", "from");
    }
    var mod_str = S.token;
    if (mod_str.type !== "string") {
      unexpected();
    }
    next();
    const assert_clause = maybe_import_assertion();
    return new AST_Import({
      start,
      imported_name,
      imported_names,
      module_name: new AST_String({
        start: mod_str,
        value: mod_str.value,
        quote: mod_str.quote,
        end: mod_str
      }),
      assert_clause,
      end: S.token
    });
  }
  function import_meta(allow_calls) {
    var start = S.token;
    expect_token("name", "import");
    expect_token("punc", ".");
    expect_token("name", "meta");
    return subscripts(new AST_ImportMeta({
      start,
      end: prev()
    }), allow_calls);
  }
  function map_name(is_import) {
    function make_symbol(type2, quote) {
      return new type2({
        name: as_property_name(),
        quote: quote || void 0,
        start: prev(),
        end: prev()
      });
    }
    var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;
    var type = is_import ? AST_SymbolImport : AST_SymbolExport;
    var start = S.token;
    var foreign_name;
    var name;
    if (is_import) {
      foreign_name = make_symbol(foreign_type, start.quote);
    } else {
      name = make_symbol(type, start.quote);
    }
    if (is("name", "as")) {
      next();
      if (is_import) {
        name = make_symbol(type);
      } else {
        foreign_name = make_symbol(foreign_type, S.token.quote);
      }
    } else if (is_import) {
      name = new type(foreign_name);
    } else {
      foreign_name = new foreign_type(name);
    }
    return new AST_NameMapping({
      start,
      foreign_name,
      name,
      end: prev()
    });
  }
  function map_nameAsterisk(is_import, import_or_export_foreign_name) {
    var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;
    var type = is_import ? AST_SymbolImport : AST_SymbolExport;
    var start = S.token;
    var name, foreign_name;
    var end = prev();
    if (is_import) {
      name = import_or_export_foreign_name;
    } else {
      foreign_name = import_or_export_foreign_name;
    }
    name = name || new type({
      start,
      name: "*",
      end
    });
    foreign_name = foreign_name || new foreign_type({
      start,
      name: "*",
      end
    });
    return new AST_NameMapping({
      start,
      foreign_name,
      name,
      end
    });
  }
  function map_names(is_import) {
    var names;
    if (is("punc", "{")) {
      next();
      names = [];
      while (!is("punc", "}")) {
        names.push(map_name(is_import));
        if (is("punc", ",")) {
          next();
        }
      }
      next();
    } else if (is("operator", "*")) {
      var name;
      next();
      if (is("name", "as")) {
        next();
        name = is_import ? as_symbol(AST_SymbolImport) : as_symbol_or_string(AST_SymbolExportForeign);
      }
      names = [map_nameAsterisk(is_import, name)];
    }
    return names;
  }
  function export_statement() {
    var start = S.token;
    var is_default;
    var exported_names;
    if (is("keyword", "default")) {
      is_default = true;
      next();
    } else if (exported_names = map_names(false)) {
      if (is("name", "from")) {
        next();
        var mod_str = S.token;
        if (mod_str.type !== "string") {
          unexpected();
        }
        next();
        const assert_clause = maybe_import_assertion();
        return new AST_Export({
          start,
          is_default,
          exported_names,
          module_name: new AST_String({
            start: mod_str,
            value: mod_str.value,
            quote: mod_str.quote,
            end: mod_str
          }),
          end: prev(),
          assert_clause
        });
      } else {
        return new AST_Export({
          start,
          is_default,
          exported_names,
          end: prev()
        });
      }
    }
    var node;
    var exported_value;
    var exported_definition;
    if (is("punc", "{") || is_default && (is("keyword", "class") || is("keyword", "function")) && is_token(peek(), "punc")) {
      exported_value = expression(false);
      semicolon2();
    } else if ((node = statement(is_default)) instanceof AST_Definitions && is_default) {
      unexpected(node.start);
    } else if (node instanceof AST_Definitions || node instanceof AST_Defun || node instanceof AST_DefClass) {
      exported_definition = node;
    } else if (node instanceof AST_ClassExpression || node instanceof AST_Function) {
      exported_value = node;
    } else if (node instanceof AST_SimpleStatement) {
      exported_value = node.body;
    } else {
      unexpected(node.start);
    }
    return new AST_Export({
      start,
      is_default,
      exported_value,
      exported_definition,
      end: prev(),
      assert_clause: null
    });
  }
  function as_property_name() {
    var tmp = S.token;
    switch (tmp.type) {
      case "punc":
        if (tmp.value === "[") {
          next();
          var ex = expression(false);
          expect("]");
          return ex;
        } else
          unexpected(tmp);
      case "operator":
        if (tmp.value === "*") {
          next();
          return null;
        }
        if (!["delete", "in", "instanceof", "new", "typeof", "void"].includes(tmp.value)) {
          unexpected(tmp);
        }
      case "name":
      case "privatename":
      case "string":
      case "num":
      case "big_int":
      case "keyword":
      case "atom":
        next();
        return tmp.value;
      default:
        unexpected(tmp);
    }
  }
  function as_name() {
    var tmp = S.token;
    if (tmp.type != "name" && tmp.type != "privatename")
      unexpected();
    next();
    return tmp.value;
  }
  function _make_symbol(type) {
    var name = S.token.value;
    return new (name == "this" ? AST_This : name == "super" ? AST_Super : type)({
      name: String(name),
      start: S.token,
      end: S.token
    });
  }
  function _verify_symbol(sym) {
    var name = sym.name;
    if (is_in_generator() && name == "yield") {
      token_error(sym.start, "Yield cannot be used as identifier inside generators");
    }
    if (S.input.has_directive("use strict")) {
      if (name == "yield") {
        token_error(sym.start, "Unexpected yield identifier inside strict mode");
      }
      if (sym instanceof AST_SymbolDeclaration && (name == "arguments" || name == "eval")) {
        token_error(sym.start, "Unexpected " + name + " in strict mode");
      }
    }
  }
  function as_symbol(type, noerror) {
    if (!is("name")) {
      if (!noerror)
        croak("Name expected");
      return null;
    }
    var sym = _make_symbol(type);
    _verify_symbol(sym);
    next();
    return sym;
  }
  function as_symbol_or_string(type) {
    if (!is("name")) {
      if (!is("string")) {
        croak("Name or string expected");
      }
      var tok = S.token;
      var ret = new type({
        start: tok,
        end: tok,
        name: tok.value,
        quote: tok.quote
      });
      next();
      return ret;
    }
    var sym = _make_symbol(type);
    _verify_symbol(sym);
    next();
    return sym;
  }
  function annotate(node) {
    var start = node.start;
    var comments = start.comments_before;
    const comments_outside_parens = outer_comments_before_counts.get(start);
    var i = comments_outside_parens != null ? comments_outside_parens : comments.length;
    while (--i >= 0) {
      var comment = comments[i];
      if (/[@#]__/.test(comment.value)) {
        if (/[@#]__PURE__/.test(comment.value)) {
          set_annotation(node, _PURE);
          break;
        }
        if (/[@#]__INLINE__/.test(comment.value)) {
          set_annotation(node, _INLINE);
          break;
        }
        if (/[@#]__NOINLINE__/.test(comment.value)) {
          set_annotation(node, _NOINLINE);
          break;
        }
      }
    }
  }
  var subscripts = function(expr, allow_calls, is_chain) {
    var start = expr.start;
    if (is("punc", ".")) {
      next();
      if (is("privatename") && !S.in_class)
        croak("Private field must be used in an enclosing class");
      const AST_DotVariant = is("privatename") ? AST_DotHash : AST_Dot;
      return subscripts(new AST_DotVariant({
        start,
        expression: expr,
        optional: false,
        property: as_name(),
        end: prev()
      }), allow_calls, is_chain);
    }
    if (is("punc", "[")) {
      next();
      var prop = expression(true);
      expect("]");
      return subscripts(new AST_Sub({
        start,
        expression: expr,
        optional: false,
        property: prop,
        end: prev()
      }), allow_calls, is_chain);
    }
    if (allow_calls && is("punc", "(")) {
      next();
      var call = new AST_Call({
        start,
        expression: expr,
        optional: false,
        args: call_args(),
        end: prev()
      });
      annotate(call);
      return subscripts(call, true, is_chain);
    }
    if (is("punc", "?.")) {
      next();
      let chain_contents;
      if (allow_calls && is("punc", "(")) {
        next();
        const call2 = new AST_Call({
          start,
          optional: true,
          expression: expr,
          args: call_args(),
          end: prev()
        });
        annotate(call2);
        chain_contents = subscripts(call2, true, true);
      } else if (is("name") || is("privatename")) {
        if (is("privatename") && !S.in_class)
          croak("Private field must be used in an enclosing class");
        const AST_DotVariant = is("privatename") ? AST_DotHash : AST_Dot;
        chain_contents = subscripts(new AST_DotVariant({
          start,
          expression: expr,
          optional: true,
          property: as_name(),
          end: prev()
        }), allow_calls, true);
      } else if (is("punc", "[")) {
        next();
        const property = expression(true);
        expect("]");
        chain_contents = subscripts(new AST_Sub({
          start,
          expression: expr,
          optional: true,
          property,
          end: prev()
        }), allow_calls, true);
      }
      if (!chain_contents)
        unexpected();
      if (chain_contents instanceof AST_Chain)
        return chain_contents;
      return new AST_Chain({
        start,
        expression: chain_contents,
        end: prev()
      });
    }
    if (is("template_head")) {
      if (is_chain) {
        unexpected();
      }
      return subscripts(new AST_PrefixedTemplateString({
        start,
        prefix: expr,
        template_string: template_string(),
        end: prev()
      }), allow_calls);
    }
    return expr;
  };
  function call_args() {
    var args2 = [];
    while (!is("punc", ")")) {
      if (is("expand", "...")) {
        next();
        args2.push(new AST_Expansion({
          start: prev(),
          expression: expression(false),
          end: prev()
        }));
      } else {
        args2.push(expression(false));
      }
      if (!is("punc", ")")) {
        expect(",");
      }
    }
    next();
    return args2;
  }
  var maybe_unary = function(allow_calls, allow_arrows) {
    var start = S.token;
    if (start.type == "name" && start.value == "await" && can_await()) {
      next();
      return _await_expression();
    }
    if (is("operator") && UNARY_PREFIX.has(start.value)) {
      next();
      handle_regexp();
      var ex = make_unary(AST_UnaryPrefix, start, maybe_unary(allow_calls));
      ex.start = start;
      ex.end = prev();
      return ex;
    }
    var val = expr_atom(allow_calls, allow_arrows);
    while (is("operator") && UNARY_POSTFIX.has(S.token.value) && !has_newline_before(S.token)) {
      if (val instanceof AST_Arrow)
        unexpected();
      val = make_unary(AST_UnaryPostfix, S.token, val);
      val.start = start;
      val.end = S.token;
      next();
    }
    return val;
  };
  function make_unary(ctor, token, expr) {
    var op = token.value;
    switch (op) {
      case "++":
      case "--":
        if (!is_assignable(expr))
          croak("Invalid use of " + op + " operator", token.line, token.col, token.pos);
        break;
      case "delete":
        if (expr instanceof AST_SymbolRef && S.input.has_directive("use strict"))
          croak("Calling delete on expression not allowed in strict mode", expr.start.line, expr.start.col, expr.start.pos);
        break;
    }
    return new ctor({ operator: op, expression: expr });
  }
  var expr_op = function(left, min_prec, no_in) {
    var op = is("operator") ? S.token.value : null;
    if (op == "in" && no_in)
      op = null;
    if (op == "**" && left instanceof AST_UnaryPrefix && !is_token(left.start, "punc", "(") && left.operator !== "--" && left.operator !== "++")
      unexpected(left.start);
    var prec = op != null ? PRECEDENCE[op] : null;
    if (prec != null && (prec > min_prec || op === "**" && min_prec === prec)) {
      next();
      var right = expr_op(maybe_unary(true), prec, no_in);
      return expr_op(new AST_Binary({
        start: left.start,
        left,
        operator: op,
        right,
        end: right.end
      }), min_prec, no_in);
    }
    return left;
  };
  function expr_ops(no_in) {
    return expr_op(maybe_unary(true, true), 0, no_in);
  }
  var maybe_conditional = function(no_in) {
    var start = S.token;
    var expr = expr_ops(no_in);
    if (is("operator", "?")) {
      next();
      var yes = expression(false);
      expect(":");
      return new AST_Conditional({
        start,
        condition: expr,
        consequent: yes,
        alternative: expression(false, no_in),
        end: prev()
      });
    }
    return expr;
  };
  function is_assignable(expr) {
    return expr instanceof AST_PropAccess || expr instanceof AST_SymbolRef;
  }
  function to_destructuring(node) {
    if (node instanceof AST_Object) {
      node = new AST_Destructuring({
        start: node.start,
        names: node.properties.map(to_destructuring),
        is_array: false,
        end: node.end
      });
    } else if (node instanceof AST_Array) {
      var names = [];
      for (var i = 0; i < node.elements.length; i++) {
        if (node.elements[i] instanceof AST_Expansion) {
          if (i + 1 !== node.elements.length) {
            token_error(node.elements[i].start, "Spread must the be last element in destructuring array");
          }
          node.elements[i].expression = to_destructuring(node.elements[i].expression);
        }
        names.push(to_destructuring(node.elements[i]));
      }
      node = new AST_Destructuring({
        start: node.start,
        names,
        is_array: true,
        end: node.end
      });
    } else if (node instanceof AST_ObjectProperty) {
      node.value = to_destructuring(node.value);
    } else if (node instanceof AST_Assign) {
      node = new AST_DefaultAssign({
        start: node.start,
        left: node.left,
        operator: "=",
        right: node.right,
        end: node.end
      });
    }
    return node;
  }
  var maybe_assign = function(no_in) {
    handle_regexp();
    var start = S.token;
    if (start.type == "name" && start.value == "yield") {
      if (is_in_generator()) {
        next();
        return _yield_expression();
      } else if (S.input.has_directive("use strict")) {
        token_error(S.token, "Unexpected yield identifier inside strict mode");
      }
    }
    var left = maybe_conditional(no_in);
    var val = S.token.value;
    if (is("operator") && ASSIGNMENT.has(val)) {
      if (is_assignable(left) || (left = to_destructuring(left)) instanceof AST_Destructuring) {
        next();
        return new AST_Assign({
          start,
          left,
          operator: val,
          right: maybe_assign(no_in),
          logical: LOGICAL_ASSIGNMENT.has(val),
          end: prev()
        });
      }
      croak("Invalid assignment");
    }
    return left;
  };
  var expression = function(commas, no_in) {
    var start = S.token;
    var exprs = [];
    while (true) {
      exprs.push(maybe_assign(no_in));
      if (!commas || !is("punc", ","))
        break;
      next();
      commas = true;
    }
    return exprs.length == 1 ? exprs[0] : new AST_Sequence({
      start,
      expressions: exprs,
      end: peek()
    });
  };
  function in_loop(cont) {
    ++S.in_loop;
    var ret = cont();
    --S.in_loop;
    return ret;
  }
  if (options3.expression) {
    return expression(true);
  }
  return function parse_toplevel() {
    var start = S.token;
    var body = [];
    S.input.push_directives_stack();
    if (options3.module)
      S.input.add_directive("use strict");
    while (!is("eof")) {
      body.push(statement());
    }
    S.input.pop_directives_stack();
    var end = prev();
    var toplevel = options3.toplevel;
    if (toplevel) {
      toplevel.body = toplevel.body.concat(body);
      toplevel.end = end;
    } else {
      toplevel = new AST_Toplevel({ start, body, end });
    }
    TEMPLATE_RAWS = /* @__PURE__ */ new Map();
    return toplevel;
  }();
}

// node_modules/terser/lib/ast.js
function DEFNODE(type, props, ctor, methods, base = AST_Node) {
  if (!props)
    props = [];
  else
    props = props.split(/\s+/);
  var self_props = props;
  if (base && base.PROPS)
    props = props.concat(base.PROPS);
  const proto2 = base && Object.create(base.prototype);
  if (proto2) {
    ctor.prototype = proto2;
    ctor.BASE = base;
  }
  if (base)
    base.SUBCLASSES.push(ctor);
  ctor.prototype.CTOR = ctor;
  ctor.prototype.constructor = ctor;
  ctor.PROPS = props || null;
  ctor.SELF_PROPS = self_props;
  ctor.SUBCLASSES = [];
  if (type) {
    ctor.prototype.TYPE = ctor.TYPE = type;
  }
  if (methods) {
    for (let i in methods)
      if (HOP(methods, i)) {
        if (i[0] === "$") {
          ctor[i.substr(1)] = methods[i];
        } else {
          ctor.prototype[i] = methods[i];
        }
      }
  }
  ctor.DEFMETHOD = function(name, method) {
    this.prototype[name] = method;
  };
  return ctor;
}
var has_tok_flag = (tok, flag) => Boolean(tok.flags & flag);
var set_tok_flag = (tok, flag, truth) => {
  if (truth) {
    tok.flags |= flag;
  } else {
    tok.flags &= ~flag;
  }
};
var TOK_FLAG_NLB = 1;
var TOK_FLAG_QUOTE_SINGLE = 2;
var TOK_FLAG_QUOTE_EXISTS = 4;
var TOK_FLAG_TEMPLATE_END = 8;
var AST_Token = class {
  constructor(type, value, line, col, pos, nlb, comments_before, comments_after, file) {
    this.flags = nlb ? 1 : 0;
    this.type = type;
    this.value = value;
    this.line = line;
    this.col = col;
    this.pos = pos;
    this.comments_before = comments_before;
    this.comments_after = comments_after;
    this.file = file;
    Object.seal(this);
  }
  // Return a string summary of the token for node.js console.log
  [Symbol.for("nodejs.util.inspect.custom")](_depth, options3) {
    const special = (str) => options3.stylize(str, "special");
    const quote = typeof this.value === "string" && this.value.includes("`") ? "'" : "`";
    const value = `${quote}${this.value}${quote}`;
    return `${special("[AST_Token")} ${value} at ${this.line}:${this.col}${special("]")}`;
  }
  get nlb() {
    return has_tok_flag(this, TOK_FLAG_NLB);
  }
  set nlb(new_nlb) {
    set_tok_flag(this, TOK_FLAG_NLB, new_nlb);
  }
  get quote() {
    return !has_tok_flag(this, TOK_FLAG_QUOTE_EXISTS) ? "" : has_tok_flag(this, TOK_FLAG_QUOTE_SINGLE) ? "'" : '"';
  }
  set quote(quote_type) {
    set_tok_flag(this, TOK_FLAG_QUOTE_SINGLE, quote_type === "'");
    set_tok_flag(this, TOK_FLAG_QUOTE_EXISTS, !!quote_type);
  }
  get template_end() {
    return has_tok_flag(this, TOK_FLAG_TEMPLATE_END);
  }
  set template_end(new_template_end) {
    set_tok_flag(this, TOK_FLAG_TEMPLATE_END, new_template_end);
  }
};
var AST_Node = DEFNODE("Node", "start end", function AST_Node2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  _clone: function(deep) {
    if (deep) {
      var self2 = this.clone();
      return self2.transform(new TreeTransformer(function(node) {
        if (node !== self2) {
          return node.clone(true);
        }
      }));
    }
    return new this.CTOR(this);
  },
  clone: function(deep) {
    return this._clone(deep);
  },
  $documentation: "Base class of all AST nodes",
  $propdoc: {
    start: "[AST_Token] The first token of this node",
    end: "[AST_Token] The last token of this node"
  },
  _walk: function(visitor) {
    return visitor._visit(this);
  },
  walk: function(visitor) {
    return this._walk(visitor);
  },
  _children_backwards: () => {
  }
}, null);
var AST_Statement = DEFNODE("Statement", null, function AST_Statement2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Base class of all statements"
});
var AST_Debugger = DEFNODE("Debugger", null, function AST_Debugger2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Represents a debugger statement"
}, AST_Statement);
var AST_Directive = DEFNODE("Directive", "value quote", function AST_Directive2(props) {
  if (props) {
    this.value = props.value;
    this.quote = props.quote;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: 'Represents a directive, like "use strict";',
  $propdoc: {
    value: "[string] The value of this directive as a plain string (it's not an AST_String!)",
    quote: "[string] the original quote character"
  }
}, AST_Statement);
var AST_SimpleStatement = DEFNODE("SimpleStatement", "body", function AST_SimpleStatement2(props) {
  if (props) {
    this.body = props.body;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A statement consisting of an expression, i.e. a = 1 + 2",
  $propdoc: {
    body: "[AST_Node] an expression node (should not be instanceof AST_Statement)"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.body._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.body);
  }
}, AST_Statement);
function walk_body(node, visitor) {
  const body = node.body;
  for (var i = 0, len = body.length; i < len; i++) {
    body[i]._walk(visitor);
  }
}
function clone_block_scope(deep) {
  var clone2 = this._clone(deep);
  if (this.block_scope) {
    clone2.block_scope = this.block_scope.clone();
  }
  return clone2;
}
var AST_Block = DEFNODE("Block", "body block_scope", function AST_Block2(props) {
  if (props) {
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A body of statements (usually braced)",
  $propdoc: {
    body: "[AST_Statement*] an array of statements",
    block_scope: "[AST_Scope] the block scope"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      walk_body(this, visitor);
    });
  },
  _children_backwards(push2) {
    let i = this.body.length;
    while (i--)
      push2(this.body[i]);
  },
  clone: clone_block_scope
}, AST_Statement);
var AST_BlockStatement = DEFNODE("BlockStatement", null, function AST_BlockStatement2(props) {
  if (props) {
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A block statement"
}, AST_Block);
var AST_EmptyStatement = DEFNODE("EmptyStatement", null, function AST_EmptyStatement2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "The empty statement (empty block or simply a semicolon)"
}, AST_Statement);
var AST_StatementWithBody = DEFNODE("StatementWithBody", "body", function AST_StatementWithBody2(props) {
  if (props) {
    this.body = props.body;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`",
  $propdoc: {
    body: "[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement"
  }
}, AST_Statement);
var AST_LabeledStatement = DEFNODE("LabeledStatement", "label", function AST_LabeledStatement2(props) {
  if (props) {
    this.label = props.label;
    this.body = props.body;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Statement with a label",
  $propdoc: {
    label: "[AST_Label] a label definition"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.label._walk(visitor);
      this.body._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.body);
    push2(this.label);
  },
  clone: function(deep) {
    var node = this._clone(deep);
    if (deep) {
      var label = node.label;
      var def = this.label;
      node.walk(new TreeWalker(function(node2) {
        if (node2 instanceof AST_LoopControl && node2.label && node2.label.thedef === def) {
          node2.label.thedef = label;
          label.references.push(node2);
        }
      }));
    }
    return node;
  }
}, AST_StatementWithBody);
var AST_IterationStatement = DEFNODE(
  "IterationStatement",
  "block_scope",
  function AST_IterationStatement2(props) {
    if (props) {
      this.block_scope = props.block_scope;
      this.body = props.body;
      this.start = props.start;
      this.end = props.end;
    }
    this.flags = 0;
  },
  {
    $documentation: "Internal class.  All loops inherit from it.",
    $propdoc: {
      block_scope: "[AST_Scope] the block scope for this iteration statement."
    },
    clone: clone_block_scope
  },
  AST_StatementWithBody
);
var AST_DWLoop = DEFNODE("DWLoop", "condition", function AST_DWLoop2(props) {
  if (props) {
    this.condition = props.condition;
    this.block_scope = props.block_scope;
    this.body = props.body;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Base class for do/while statements",
  $propdoc: {
    condition: "[AST_Node] the loop condition.  Should not be instanceof AST_Statement"
  }
}, AST_IterationStatement);
var AST_Do = DEFNODE("Do", null, function AST_Do2(props) {
  if (props) {
    this.condition = props.condition;
    this.block_scope = props.block_scope;
    this.body = props.body;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `do` statement",
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.body._walk(visitor);
      this.condition._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.condition);
    push2(this.body);
  }
}, AST_DWLoop);
var AST_While = DEFNODE("While", null, function AST_While2(props) {
  if (props) {
    this.condition = props.condition;
    this.block_scope = props.block_scope;
    this.body = props.body;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `while` statement",
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.condition._walk(visitor);
      this.body._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.body);
    push2(this.condition);
  }
}, AST_DWLoop);
var AST_For = DEFNODE("For", "init condition step", function AST_For2(props) {
  if (props) {
    this.init = props.init;
    this.condition = props.condition;
    this.step = props.step;
    this.block_scope = props.block_scope;
    this.body = props.body;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `for` statement",
  $propdoc: {
    init: "[AST_Node?] the `for` initialization code, or null if empty",
    condition: "[AST_Node?] the `for` termination clause, or null if empty",
    step: "[AST_Node?] the `for` update clause, or null if empty"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      if (this.init)
        this.init._walk(visitor);
      if (this.condition)
        this.condition._walk(visitor);
      if (this.step)
        this.step._walk(visitor);
      this.body._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.body);
    if (this.step)
      push2(this.step);
    if (this.condition)
      push2(this.condition);
    if (this.init)
      push2(this.init);
  }
}, AST_IterationStatement);
var AST_ForIn = DEFNODE("ForIn", "init object", function AST_ForIn2(props) {
  if (props) {
    this.init = props.init;
    this.object = props.object;
    this.block_scope = props.block_scope;
    this.body = props.body;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `for ... in` statement",
  $propdoc: {
    init: "[AST_Node] the `for/in` initialization code",
    object: "[AST_Node] the object that we're looping through"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.init._walk(visitor);
      this.object._walk(visitor);
      this.body._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.body);
    if (this.object)
      push2(this.object);
    if (this.init)
      push2(this.init);
  }
}, AST_IterationStatement);
var AST_ForOf = DEFNODE("ForOf", "await", function AST_ForOf2(props) {
  if (props) {
    this.await = props.await;
    this.init = props.init;
    this.object = props.object;
    this.block_scope = props.block_scope;
    this.body = props.body;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `for ... of` statement"
}, AST_ForIn);
var AST_With = DEFNODE("With", "expression", function AST_With2(props) {
  if (props) {
    this.expression = props.expression;
    this.body = props.body;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `with` statement",
  $propdoc: {
    expression: "[AST_Node] the `with` expression"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.expression._walk(visitor);
      this.body._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.body);
    push2(this.expression);
  }
}, AST_StatementWithBody);
var AST_Scope = DEFNODE(
  "Scope",
  "variables uses_with uses_eval parent_scope enclosed cname",
  function AST_Scope2(props) {
    if (props) {
      this.variables = props.variables;
      this.uses_with = props.uses_with;
      this.uses_eval = props.uses_eval;
      this.parent_scope = props.parent_scope;
      this.enclosed = props.enclosed;
      this.cname = props.cname;
      this.body = props.body;
      this.block_scope = props.block_scope;
      this.start = props.start;
      this.end = props.end;
    }
    this.flags = 0;
  },
  {
    $documentation: "Base class for all statements introducing a lexical scope",
    $propdoc: {
      variables: "[Map/S] a map of name -> SymbolDef for all variables/functions defined in this scope",
      uses_with: "[boolean/S] tells whether this scope uses the `with` statement",
      uses_eval: "[boolean/S] tells whether this scope contains a direct call to the global `eval`",
      parent_scope: "[AST_Scope?/S] link to the parent scope",
      enclosed: "[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes",
      cname: "[integer/S] current index for mangling variables (used internally by the mangler)"
    },
    get_defun_scope: function() {
      var self2 = this;
      while (self2.is_block_scope()) {
        self2 = self2.parent_scope;
      }
      return self2;
    },
    clone: function(deep, toplevel) {
      var node = this._clone(deep);
      if (deep && this.variables && toplevel && !this._block_scope) {
        node.figure_out_scope({}, {
          toplevel,
          parent_scope: this.parent_scope
        });
      } else {
        if (this.variables)
          node.variables = new Map(this.variables);
        if (this.enclosed)
          node.enclosed = this.enclosed.slice();
        if (this._block_scope)
          node._block_scope = this._block_scope;
      }
      return node;
    },
    pinned: function() {
      return this.uses_eval || this.uses_with;
    }
  },
  AST_Block
);
var AST_Toplevel = DEFNODE("Toplevel", "globals", function AST_Toplevel2(props) {
  if (props) {
    this.globals = props.globals;
    this.variables = props.variables;
    this.uses_with = props.uses_with;
    this.uses_eval = props.uses_eval;
    this.parent_scope = props.parent_scope;
    this.enclosed = props.enclosed;
    this.cname = props.cname;
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "The toplevel scope",
  $propdoc: {
    globals: "[Map/S] a map of name -> SymbolDef for all undeclared names"
  },
  wrap_commonjs: function(name) {
    var body = this.body;
    var wrapped_tl = "(function(exports){'$ORIG';})(typeof " + name + "=='undefined'?(" + name + "={}):" + name + ");";
    wrapped_tl = parse(wrapped_tl);
    wrapped_tl = wrapped_tl.transform(new TreeTransformer(function(node) {
      if (node instanceof AST_Directive && node.value == "$ORIG") {
        return MAP.splice(body);
      }
    }));
    return wrapped_tl;
  },
  wrap_enclose: function(args_values) {
    if (typeof args_values != "string")
      args_values = "";
    var index = args_values.indexOf(":");
    if (index < 0)
      index = args_values.length;
    var body = this.body;
    return parse([
      "(function(",
      args_values.slice(0, index),
      '){"$ORIG"})(',
      args_values.slice(index + 1),
      ")"
    ].join("")).transform(new TreeTransformer(function(node) {
      if (node instanceof AST_Directive && node.value == "$ORIG") {
        return MAP.splice(body);
      }
    }));
  }
}, AST_Scope);
var AST_Expansion = DEFNODE("Expansion", "expression", function AST_Expansion2(props) {
  if (props) {
    this.expression = props.expression;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "An expandible argument, such as ...rest, a splat, such as [1,2,...all], or an expansion in a variable declaration, such as var [first, ...rest] = list",
  $propdoc: {
    expression: "[AST_Node] the thing to be expanded"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.expression.walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.expression);
  }
});
var AST_Lambda = DEFNODE(
  "Lambda",
  "name argnames uses_arguments is_generator async",
  function AST_Lambda2(props) {
    if (props) {
      this.name = props.name;
      this.argnames = props.argnames;
      this.uses_arguments = props.uses_arguments;
      this.is_generator = props.is_generator;
      this.async = props.async;
      this.variables = props.variables;
      this.uses_with = props.uses_with;
      this.uses_eval = props.uses_eval;
      this.parent_scope = props.parent_scope;
      this.enclosed = props.enclosed;
      this.cname = props.cname;
      this.body = props.body;
      this.block_scope = props.block_scope;
      this.start = props.start;
      this.end = props.end;
    }
    this.flags = 0;
  },
  {
    $documentation: "Base class for functions",
    $propdoc: {
      name: "[AST_SymbolDeclaration?] the name of this function",
      argnames: "[AST_SymbolFunarg|AST_Destructuring|AST_Expansion|AST_DefaultAssign*] array of function arguments, destructurings, or expanding arguments",
      uses_arguments: "[boolean/S] tells whether this function accesses the arguments array",
      is_generator: "[boolean] is this a generator method",
      async: "[boolean] is this method async"
    },
    args_as_names: function() {
      var out = [];
      for (var i = 0; i < this.argnames.length; i++) {
        if (this.argnames[i] instanceof AST_Destructuring) {
          out.push(...this.argnames[i].all_symbols());
        } else {
          out.push(this.argnames[i]);
        }
      }
      return out;
    },
    _walk: function(visitor) {
      return visitor._visit(this, function() {
        if (this.name)
          this.name._walk(visitor);
        var argnames = this.argnames;
        for (var i = 0, len = argnames.length; i < len; i++) {
          argnames[i]._walk(visitor);
        }
        walk_body(this, visitor);
      });
    },
    _children_backwards(push2) {
      let i = this.body.length;
      while (i--)
        push2(this.body[i]);
      i = this.argnames.length;
      while (i--)
        push2(this.argnames[i]);
      if (this.name)
        push2(this.name);
    },
    is_braceless() {
      return this.body[0] instanceof AST_Return && this.body[0].value;
    },
    // Default args and expansion don't count, so .argnames.length doesn't cut it
    length_property() {
      let length = 0;
      for (const arg of this.argnames) {
        if (arg instanceof AST_SymbolFunarg || arg instanceof AST_Destructuring) {
          length++;
        }
      }
      return length;
    }
  },
  AST_Scope
);
var AST_Accessor = DEFNODE("Accessor", null, function AST_Accessor2(props) {
  if (props) {
    this.name = props.name;
    this.argnames = props.argnames;
    this.uses_arguments = props.uses_arguments;
    this.is_generator = props.is_generator;
    this.async = props.async;
    this.variables = props.variables;
    this.uses_with = props.uses_with;
    this.uses_eval = props.uses_eval;
    this.parent_scope = props.parent_scope;
    this.enclosed = props.enclosed;
    this.cname = props.cname;
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A setter/getter function.  The `name` property is always null."
}, AST_Lambda);
var AST_Function = DEFNODE("Function", null, function AST_Function2(props) {
  if (props) {
    this.name = props.name;
    this.argnames = props.argnames;
    this.uses_arguments = props.uses_arguments;
    this.is_generator = props.is_generator;
    this.async = props.async;
    this.variables = props.variables;
    this.uses_with = props.uses_with;
    this.uses_eval = props.uses_eval;
    this.parent_scope = props.parent_scope;
    this.enclosed = props.enclosed;
    this.cname = props.cname;
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A function expression"
}, AST_Lambda);
var AST_Arrow = DEFNODE("Arrow", null, function AST_Arrow2(props) {
  if (props) {
    this.name = props.name;
    this.argnames = props.argnames;
    this.uses_arguments = props.uses_arguments;
    this.is_generator = props.is_generator;
    this.async = props.async;
    this.variables = props.variables;
    this.uses_with = props.uses_with;
    this.uses_eval = props.uses_eval;
    this.parent_scope = props.parent_scope;
    this.enclosed = props.enclosed;
    this.cname = props.cname;
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "An ES6 Arrow function ((a) => b)"
}, AST_Lambda);
var AST_Defun = DEFNODE("Defun", null, function AST_Defun2(props) {
  if (props) {
    this.name = props.name;
    this.argnames = props.argnames;
    this.uses_arguments = props.uses_arguments;
    this.is_generator = props.is_generator;
    this.async = props.async;
    this.variables = props.variables;
    this.uses_with = props.uses_with;
    this.uses_eval = props.uses_eval;
    this.parent_scope = props.parent_scope;
    this.enclosed = props.enclosed;
    this.cname = props.cname;
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A function definition"
}, AST_Lambda);
var AST_Destructuring = DEFNODE("Destructuring", "names is_array", function AST_Destructuring2(props) {
  if (props) {
    this.names = props.names;
    this.is_array = props.is_array;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A destructuring of several names. Used in destructuring assignment and with destructuring function argument names",
  $propdoc: {
    "names": "[AST_Node*] Array of properties or elements",
    "is_array": "[Boolean] Whether the destructuring represents an object or array"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.names.forEach(function(name) {
        name._walk(visitor);
      });
    });
  },
  _children_backwards(push2) {
    let i = this.names.length;
    while (i--)
      push2(this.names[i]);
  },
  all_symbols: function() {
    var out = [];
    this.walk(new TreeWalker(function(node) {
      if (node instanceof AST_Symbol) {
        out.push(node);
      }
    }));
    return out;
  }
});
var AST_PrefixedTemplateString = DEFNODE(
  "PrefixedTemplateString",
  "template_string prefix",
  function AST_PrefixedTemplateString2(props) {
    if (props) {
      this.template_string = props.template_string;
      this.prefix = props.prefix;
      this.start = props.start;
      this.end = props.end;
    }
    this.flags = 0;
  },
  {
    $documentation: "A templatestring with a prefix, such as String.raw`foobarbaz`",
    $propdoc: {
      template_string: "[AST_TemplateString] The template string",
      prefix: "[AST_Node] The prefix, which will get called."
    },
    _walk: function(visitor) {
      return visitor._visit(this, function() {
        this.prefix._walk(visitor);
        this.template_string._walk(visitor);
      });
    },
    _children_backwards(push2) {
      push2(this.template_string);
      push2(this.prefix);
    }
  }
);
var AST_TemplateString = DEFNODE("TemplateString", "segments", function AST_TemplateString2(props) {
  if (props) {
    this.segments = props.segments;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A template string literal",
  $propdoc: {
    segments: "[AST_Node*] One or more segments, starting with AST_TemplateSegment. AST_Node may follow AST_TemplateSegment, but each AST_Node must be followed by AST_TemplateSegment."
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.segments.forEach(function(seg) {
        seg._walk(visitor);
      });
    });
  },
  _children_backwards(push2) {
    let i = this.segments.length;
    while (i--)
      push2(this.segments[i]);
  }
});
var AST_TemplateSegment = DEFNODE("TemplateSegment", "value raw", function AST_TemplateSegment2(props) {
  if (props) {
    this.value = props.value;
    this.raw = props.raw;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A segment of a template string literal",
  $propdoc: {
    value: "Content of the segment",
    raw: "Raw source of the segment"
  }
});
var AST_Jump = DEFNODE("Jump", null, function AST_Jump2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Base class for \u201Cjumps\u201D (for now that's `return`, `throw`, `break` and `continue`)"
}, AST_Statement);
var AST_Exit = DEFNODE("Exit", "value", function AST_Exit2(props) {
  if (props) {
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Base class for \u201Cexits\u201D (`return` and `throw`)",
  $propdoc: {
    value: "[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return"
  },
  _walk: function(visitor) {
    return visitor._visit(this, this.value && function() {
      this.value._walk(visitor);
    });
  },
  _children_backwards(push2) {
    if (this.value)
      push2(this.value);
  }
}, AST_Jump);
var AST_Return = DEFNODE("Return", null, function AST_Return2(props) {
  if (props) {
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `return` statement"
}, AST_Exit);
var AST_Throw = DEFNODE("Throw", null, function AST_Throw2(props) {
  if (props) {
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `throw` statement"
}, AST_Exit);
var AST_LoopControl = DEFNODE("LoopControl", "label", function AST_LoopControl2(props) {
  if (props) {
    this.label = props.label;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Base class for loop control statements (`break` and `continue`)",
  $propdoc: {
    label: "[AST_LabelRef?] the label, or null if none"
  },
  _walk: function(visitor) {
    return visitor._visit(this, this.label && function() {
      this.label._walk(visitor);
    });
  },
  _children_backwards(push2) {
    if (this.label)
      push2(this.label);
  }
}, AST_Jump);
var AST_Break = DEFNODE("Break", null, function AST_Break2(props) {
  if (props) {
    this.label = props.label;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `break` statement"
}, AST_LoopControl);
var AST_Continue = DEFNODE("Continue", null, function AST_Continue2(props) {
  if (props) {
    this.label = props.label;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `continue` statement"
}, AST_LoopControl);
var AST_Await = DEFNODE("Await", "expression", function AST_Await2(props) {
  if (props) {
    this.expression = props.expression;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "An `await` statement",
  $propdoc: {
    expression: "[AST_Node] the mandatory expression being awaited"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.expression._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.expression);
  }
});
var AST_Yield = DEFNODE("Yield", "expression is_star", function AST_Yield2(props) {
  if (props) {
    this.expression = props.expression;
    this.is_star = props.is_star;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `yield` statement",
  $propdoc: {
    expression: "[AST_Node?] the value returned or thrown by this statement; could be null (representing undefined) but only when is_star is set to false",
    is_star: "[Boolean] Whether this is a yield or yield* statement"
  },
  _walk: function(visitor) {
    return visitor._visit(this, this.expression && function() {
      this.expression._walk(visitor);
    });
  },
  _children_backwards(push2) {
    if (this.expression)
      push2(this.expression);
  }
});
var AST_If = DEFNODE("If", "condition alternative", function AST_If2(props) {
  if (props) {
    this.condition = props.condition;
    this.alternative = props.alternative;
    this.body = props.body;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `if` statement",
  $propdoc: {
    condition: "[AST_Node] the `if` condition",
    alternative: "[AST_Statement?] the `else` part, or null if not present"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.condition._walk(visitor);
      this.body._walk(visitor);
      if (this.alternative)
        this.alternative._walk(visitor);
    });
  },
  _children_backwards(push2) {
    if (this.alternative) {
      push2(this.alternative);
    }
    push2(this.body);
    push2(this.condition);
  }
}, AST_StatementWithBody);
var AST_Switch = DEFNODE("Switch", "expression", function AST_Switch2(props) {
  if (props) {
    this.expression = props.expression;
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `switch` statement",
  $propdoc: {
    expression: "[AST_Node] the `switch` \u201Cdiscriminant\u201D"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.expression._walk(visitor);
      walk_body(this, visitor);
    });
  },
  _children_backwards(push2) {
    let i = this.body.length;
    while (i--)
      push2(this.body[i]);
    push2(this.expression);
  }
}, AST_Block);
var AST_SwitchBranch = DEFNODE("SwitchBranch", null, function AST_SwitchBranch2(props) {
  if (props) {
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Base class for `switch` branches"
}, AST_Block);
var AST_Default = DEFNODE("Default", null, function AST_Default2(props) {
  if (props) {
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `default` switch branch"
}, AST_SwitchBranch);
var AST_Case = DEFNODE("Case", "expression", function AST_Case2(props) {
  if (props) {
    this.expression = props.expression;
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `case` switch branch",
  $propdoc: {
    expression: "[AST_Node] the `case` expression"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.expression._walk(visitor);
      walk_body(this, visitor);
    });
  },
  _children_backwards(push2) {
    let i = this.body.length;
    while (i--)
      push2(this.body[i]);
    push2(this.expression);
  }
}, AST_SwitchBranch);
var AST_Try = DEFNODE("Try", "body bcatch bfinally", function AST_Try2(props) {
  if (props) {
    this.body = props.body;
    this.bcatch = props.bcatch;
    this.bfinally = props.bfinally;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `try` statement",
  $propdoc: {
    body: "[AST_TryBlock] the try block",
    bcatch: "[AST_Catch?] the catch block, or null if not present",
    bfinally: "[AST_Finally?] the finally block, or null if not present"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.body._walk(visitor);
      if (this.bcatch)
        this.bcatch._walk(visitor);
      if (this.bfinally)
        this.bfinally._walk(visitor);
    });
  },
  _children_backwards(push2) {
    if (this.bfinally)
      push2(this.bfinally);
    if (this.bcatch)
      push2(this.bcatch);
    push2(this.body);
  }
}, AST_Statement);
var AST_TryBlock = DEFNODE("TryBlock", null, function AST_TryBlock2(props) {
  if (props) {
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "The `try` block of a try statement"
}, AST_Block);
var AST_Catch = DEFNODE("Catch", "argname", function AST_Catch2(props) {
  if (props) {
    this.argname = props.argname;
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `catch` node; only makes sense as part of a `try` statement",
  $propdoc: {
    argname: "[AST_SymbolCatch|AST_Destructuring|AST_Expansion|AST_DefaultAssign] symbol for the exception"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      if (this.argname)
        this.argname._walk(visitor);
      walk_body(this, visitor);
    });
  },
  _children_backwards(push2) {
    let i = this.body.length;
    while (i--)
      push2(this.body[i]);
    if (this.argname)
      push2(this.argname);
  }
}, AST_Block);
var AST_Finally = DEFNODE("Finally", null, function AST_Finally2(props) {
  if (props) {
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `finally` node; only makes sense as part of a `try` statement"
}, AST_Block);
var AST_Definitions = DEFNODE("Definitions", "definitions", function AST_Definitions2(props) {
  if (props) {
    this.definitions = props.definitions;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Base class for `var` or `const` nodes (variable declarations/initializations)",
  $propdoc: {
    definitions: "[AST_VarDef*] array of variable definitions"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      var definitions = this.definitions;
      for (var i = 0, len = definitions.length; i < len; i++) {
        definitions[i]._walk(visitor);
      }
    });
  },
  _children_backwards(push2) {
    let i = this.definitions.length;
    while (i--)
      push2(this.definitions[i]);
  }
}, AST_Statement);
var AST_Var = DEFNODE("Var", null, function AST_Var2(props) {
  if (props) {
    this.definitions = props.definitions;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `var` statement"
}, AST_Definitions);
var AST_Let = DEFNODE("Let", null, function AST_Let2(props) {
  if (props) {
    this.definitions = props.definitions;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `let` statement"
}, AST_Definitions);
var AST_Const = DEFNODE("Const", null, function AST_Const2(props) {
  if (props) {
    this.definitions = props.definitions;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A `const` statement"
}, AST_Definitions);
var AST_VarDef = DEFNODE("VarDef", "name value", function AST_VarDef2(props) {
  if (props) {
    this.name = props.name;
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A variable declaration; only appears in a AST_Definitions node",
  $propdoc: {
    name: "[AST_Destructuring|AST_SymbolConst|AST_SymbolLet|AST_SymbolVar] name of the variable",
    value: "[AST_Node?] initializer, or null of there's no initializer"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.name._walk(visitor);
      if (this.value)
        this.value._walk(visitor);
    });
  },
  _children_backwards(push2) {
    if (this.value)
      push2(this.value);
    push2(this.name);
  }
});
var AST_NameMapping = DEFNODE("NameMapping", "foreign_name name", function AST_NameMapping2(props) {
  if (props) {
    this.foreign_name = props.foreign_name;
    this.name = props.name;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "The part of the export/import statement that declare names from a module.",
  $propdoc: {
    foreign_name: "[AST_SymbolExportForeign|AST_SymbolImportForeign] The name being exported/imported (as specified in the module)",
    name: "[AST_SymbolExport|AST_SymbolImport] The name as it is visible to this module."
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.foreign_name._walk(visitor);
      this.name._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.name);
    push2(this.foreign_name);
  }
});
var AST_Import = DEFNODE(
  "Import",
  "imported_name imported_names module_name assert_clause",
  function AST_Import2(props) {
    if (props) {
      this.imported_name = props.imported_name;
      this.imported_names = props.imported_names;
      this.module_name = props.module_name;
      this.assert_clause = props.assert_clause;
      this.start = props.start;
      this.end = props.end;
    }
    this.flags = 0;
  },
  {
    $documentation: "An `import` statement",
    $propdoc: {
      imported_name: "[AST_SymbolImport] The name of the variable holding the module's default export.",
      imported_names: "[AST_NameMapping*] The names of non-default imported variables",
      module_name: "[AST_String] String literal describing where this module came from",
      assert_clause: "[AST_Object?] The import assertion"
    },
    _walk: function(visitor) {
      return visitor._visit(this, function() {
        if (this.imported_name) {
          this.imported_name._walk(visitor);
        }
        if (this.imported_names) {
          this.imported_names.forEach(function(name_import) {
            name_import._walk(visitor);
          });
        }
        this.module_name._walk(visitor);
      });
    },
    _children_backwards(push2) {
      push2(this.module_name);
      if (this.imported_names) {
        let i = this.imported_names.length;
        while (i--)
          push2(this.imported_names[i]);
      }
      if (this.imported_name)
        push2(this.imported_name);
    }
  }
);
var AST_ImportMeta = DEFNODE("ImportMeta", null, function AST_ImportMeta2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A reference to import.meta"
});
var AST_Export = DEFNODE(
  "Export",
  "exported_definition exported_value is_default exported_names module_name assert_clause",
  function AST_Export2(props) {
    if (props) {
      this.exported_definition = props.exported_definition;
      this.exported_value = props.exported_value;
      this.is_default = props.is_default;
      this.exported_names = props.exported_names;
      this.module_name = props.module_name;
      this.assert_clause = props.assert_clause;
      this.start = props.start;
      this.end = props.end;
    }
    this.flags = 0;
  },
  {
    $documentation: "An `export` statement",
    $propdoc: {
      exported_definition: "[AST_Defun|AST_Definitions|AST_DefClass?] An exported definition",
      exported_value: "[AST_Node?] An exported value",
      exported_names: "[AST_NameMapping*?] List of exported names",
      module_name: "[AST_String?] Name of the file to load exports from",
      is_default: "[Boolean] Whether this is the default exported value of this module",
      assert_clause: "[AST_Object?] The import assertion"
    },
    _walk: function(visitor) {
      return visitor._visit(this, function() {
        if (this.exported_definition) {
          this.exported_definition._walk(visitor);
        }
        if (this.exported_value) {
          this.exported_value._walk(visitor);
        }
        if (this.exported_names) {
          this.exported_names.forEach(function(name_export) {
            name_export._walk(visitor);
          });
        }
        if (this.module_name) {
          this.module_name._walk(visitor);
        }
      });
    },
    _children_backwards(push2) {
      if (this.module_name)
        push2(this.module_name);
      if (this.exported_names) {
        let i = this.exported_names.length;
        while (i--)
          push2(this.exported_names[i]);
      }
      if (this.exported_value)
        push2(this.exported_value);
      if (this.exported_definition)
        push2(this.exported_definition);
    }
  },
  AST_Statement
);
var AST_Call = DEFNODE(
  "Call",
  "expression args optional _annotations",
  function AST_Call2(props) {
    if (props) {
      this.expression = props.expression;
      this.args = props.args;
      this.optional = props.optional;
      this._annotations = props._annotations;
      this.start = props.start;
      this.end = props.end;
      this.initialize();
    }
    this.flags = 0;
  },
  {
    $documentation: "A function call expression",
    $propdoc: {
      expression: "[AST_Node] expression to invoke as function",
      args: "[AST_Node*] array of arguments",
      optional: "[boolean] whether this is an optional call (IE ?.() )",
      _annotations: "[number] bitfield containing information about the call"
    },
    initialize() {
      if (this._annotations == null)
        this._annotations = 0;
    },
    _walk(visitor) {
      return visitor._visit(this, function() {
        var args2 = this.args;
        for (var i = 0, len = args2.length; i < len; i++) {
          args2[i]._walk(visitor);
        }
        this.expression._walk(visitor);
      });
    },
    _children_backwards(push2) {
      let i = this.args.length;
      while (i--)
        push2(this.args[i]);
      push2(this.expression);
    }
  }
);
var AST_New = DEFNODE("New", null, function AST_New2(props) {
  if (props) {
    this.expression = props.expression;
    this.args = props.args;
    this.optional = props.optional;
    this._annotations = props._annotations;
    this.start = props.start;
    this.end = props.end;
    this.initialize();
  }
  this.flags = 0;
}, {
  $documentation: "An object instantiation.  Derives from a function call since it has exactly the same properties"
}, AST_Call);
var AST_Sequence = DEFNODE("Sequence", "expressions", function AST_Sequence2(props) {
  if (props) {
    this.expressions = props.expressions;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A sequence expression (comma-separated expressions)",
  $propdoc: {
    expressions: "[AST_Node*] array of expressions (at least two)"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.expressions.forEach(function(node) {
        node._walk(visitor);
      });
    });
  },
  _children_backwards(push2) {
    let i = this.expressions.length;
    while (i--)
      push2(this.expressions[i]);
  }
});
var AST_PropAccess = DEFNODE(
  "PropAccess",
  "expression property optional",
  function AST_PropAccess2(props) {
    if (props) {
      this.expression = props.expression;
      this.property = props.property;
      this.optional = props.optional;
      this.start = props.start;
      this.end = props.end;
    }
    this.flags = 0;
  },
  {
    $documentation: 'Base class for property access expressions, i.e. `a.foo` or `a["foo"]`',
    $propdoc: {
      expression: "[AST_Node] the \u201Ccontainer\u201D expression",
      property: "[AST_Node|string] the property to access.  For AST_Dot & AST_DotHash this is always a plain string, while for AST_Sub it's an arbitrary AST_Node",
      optional: "[boolean] whether this is an optional property access (IE ?.)"
    }
  }
);
var AST_Dot = DEFNODE("Dot", "quote", function AST_Dot2(props) {
  if (props) {
    this.quote = props.quote;
    this.expression = props.expression;
    this.property = props.property;
    this.optional = props.optional;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A dotted property access expression",
  $propdoc: {
    quote: "[string] the original quote character when transformed from AST_Sub"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.expression._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.expression);
  }
}, AST_PropAccess);
var AST_DotHash = DEFNODE("DotHash", "", function AST_DotHash2(props) {
  if (props) {
    this.expression = props.expression;
    this.property = props.property;
    this.optional = props.optional;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A dotted property access to a private property",
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.expression._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.expression);
  }
}, AST_PropAccess);
var AST_Sub = DEFNODE("Sub", null, function AST_Sub2(props) {
  if (props) {
    this.expression = props.expression;
    this.property = props.property;
    this.optional = props.optional;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: 'Index-style property access, i.e. `a["foo"]`',
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.expression._walk(visitor);
      this.property._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.property);
    push2(this.expression);
  }
}, AST_PropAccess);
var AST_Chain = DEFNODE("Chain", "expression", function AST_Chain2(props) {
  if (props) {
    this.expression = props.expression;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A chain expression like a?.b?.(c)?.[d]",
  $propdoc: {
    expression: "[AST_Call|AST_Dot|AST_DotHash|AST_Sub] chain element."
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.expression._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.expression);
  }
});
var AST_Unary = DEFNODE("Unary", "operator expression", function AST_Unary2(props) {
  if (props) {
    this.operator = props.operator;
    this.expression = props.expression;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Base class for unary expressions",
  $propdoc: {
    operator: "[string] the operator",
    expression: "[AST_Node] expression that this unary operator applies to"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.expression._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.expression);
  }
});
var AST_UnaryPrefix = DEFNODE("UnaryPrefix", null, function AST_UnaryPrefix2(props) {
  if (props) {
    this.operator = props.operator;
    this.expression = props.expression;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Unary prefix expression, i.e. `typeof i` or `++i`"
}, AST_Unary);
var AST_UnaryPostfix = DEFNODE("UnaryPostfix", null, function AST_UnaryPostfix2(props) {
  if (props) {
    this.operator = props.operator;
    this.expression = props.expression;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Unary postfix expression, i.e. `i++`"
}, AST_Unary);
var AST_Binary = DEFNODE("Binary", "operator left right", function AST_Binary2(props) {
  if (props) {
    this.operator = props.operator;
    this.left = props.left;
    this.right = props.right;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Binary expression, i.e. `a + b`",
  $propdoc: {
    left: "[AST_Node] left-hand side expression",
    operator: "[string] the operator",
    right: "[AST_Node] right-hand side expression"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.left._walk(visitor);
      this.right._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.right);
    push2(this.left);
  }
});
var AST_Conditional = DEFNODE(
  "Conditional",
  "condition consequent alternative",
  function AST_Conditional2(props) {
    if (props) {
      this.condition = props.condition;
      this.consequent = props.consequent;
      this.alternative = props.alternative;
      this.start = props.start;
      this.end = props.end;
    }
    this.flags = 0;
  },
  {
    $documentation: "Conditional expression using the ternary operator, i.e. `a ? b : c`",
    $propdoc: {
      condition: "[AST_Node]",
      consequent: "[AST_Node]",
      alternative: "[AST_Node]"
    },
    _walk: function(visitor) {
      return visitor._visit(this, function() {
        this.condition._walk(visitor);
        this.consequent._walk(visitor);
        this.alternative._walk(visitor);
      });
    },
    _children_backwards(push2) {
      push2(this.alternative);
      push2(this.consequent);
      push2(this.condition);
    }
  }
);
var AST_Assign = DEFNODE("Assign", "logical", function AST_Assign2(props) {
  if (props) {
    this.logical = props.logical;
    this.operator = props.operator;
    this.left = props.left;
    this.right = props.right;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "An assignment expression \u2014 `a = b + 5`",
  $propdoc: {
    logical: "Whether it's a logical assignment"
  }
}, AST_Binary);
var AST_DefaultAssign = DEFNODE("DefaultAssign", null, function AST_DefaultAssign2(props) {
  if (props) {
    this.operator = props.operator;
    this.left = props.left;
    this.right = props.right;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A default assignment expression like in `(a = 3) => a`"
}, AST_Binary);
var AST_Array = DEFNODE("Array", "elements", function AST_Array2(props) {
  if (props) {
    this.elements = props.elements;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "An array literal",
  $propdoc: {
    elements: "[AST_Node*] array of elements"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      var elements = this.elements;
      for (var i = 0, len = elements.length; i < len; i++) {
        elements[i]._walk(visitor);
      }
    });
  },
  _children_backwards(push2) {
    let i = this.elements.length;
    while (i--)
      push2(this.elements[i]);
  }
});
var AST_Object = DEFNODE("Object", "properties", function AST_Object2(props) {
  if (props) {
    this.properties = props.properties;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "An object literal",
  $propdoc: {
    properties: "[AST_ObjectProperty*] array of properties"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      var properties = this.properties;
      for (var i = 0, len = properties.length; i < len; i++) {
        properties[i]._walk(visitor);
      }
    });
  },
  _children_backwards(push2) {
    let i = this.properties.length;
    while (i--)
      push2(this.properties[i]);
  }
});
var AST_ObjectProperty = DEFNODE("ObjectProperty", "key value", function AST_ObjectProperty2(props) {
  if (props) {
    this.key = props.key;
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Base class for literal object properties",
  $propdoc: {
    key: "[string|AST_Node] property name. For ObjectKeyVal this is a string. For getters, setters and computed property this is an AST_Node.",
    value: "[AST_Node] property value.  For getters and setters this is an AST_Accessor."
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      if (this.key instanceof AST_Node)
        this.key._walk(visitor);
      this.value._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.value);
    if (this.key instanceof AST_Node)
      push2(this.key);
  }
});
var AST_ObjectKeyVal = DEFNODE("ObjectKeyVal", "quote", function AST_ObjectKeyVal2(props) {
  if (props) {
    this.quote = props.quote;
    this.key = props.key;
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A key: value object property",
  $propdoc: {
    quote: "[string] the original quote character"
  },
  computed_key() {
    return this.key instanceof AST_Node;
  }
}, AST_ObjectProperty);
var AST_PrivateSetter = DEFNODE("PrivateSetter", "static", function AST_PrivateSetter2(props) {
  if (props) {
    this.static = props.static;
    this.key = props.key;
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $propdoc: {
    static: "[boolean] whether this is a static private setter"
  },
  $documentation: "A private setter property",
  computed_key() {
    return false;
  }
}, AST_ObjectProperty);
var AST_PrivateGetter = DEFNODE("PrivateGetter", "static", function AST_PrivateGetter2(props) {
  if (props) {
    this.static = props.static;
    this.key = props.key;
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $propdoc: {
    static: "[boolean] whether this is a static private getter"
  },
  $documentation: "A private getter property",
  computed_key() {
    return false;
  }
}, AST_ObjectProperty);
var AST_ObjectSetter = DEFNODE("ObjectSetter", "quote static", function AST_ObjectSetter2(props) {
  if (props) {
    this.quote = props.quote;
    this.static = props.static;
    this.key = props.key;
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $propdoc: {
    quote: "[string|undefined] the original quote character, if any",
    static: "[boolean] whether this is a static setter (classes only)"
  },
  $documentation: "An object setter property",
  computed_key() {
    return !(this.key instanceof AST_SymbolMethod);
  }
}, AST_ObjectProperty);
var AST_ObjectGetter = DEFNODE("ObjectGetter", "quote static", function AST_ObjectGetter2(props) {
  if (props) {
    this.quote = props.quote;
    this.static = props.static;
    this.key = props.key;
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $propdoc: {
    quote: "[string|undefined] the original quote character, if any",
    static: "[boolean] whether this is a static getter (classes only)"
  },
  $documentation: "An object getter property",
  computed_key() {
    return !(this.key instanceof AST_SymbolMethod);
  }
}, AST_ObjectProperty);
var AST_ConciseMethod = DEFNODE(
  "ConciseMethod",
  "quote static is_generator async",
  function AST_ConciseMethod2(props) {
    if (props) {
      this.quote = props.quote;
      this.static = props.static;
      this.is_generator = props.is_generator;
      this.async = props.async;
      this.key = props.key;
      this.value = props.value;
      this.start = props.start;
      this.end = props.end;
    }
    this.flags = 0;
  },
  {
    $propdoc: {
      quote: "[string|undefined] the original quote character, if any",
      static: "[boolean] is this method static (classes only)",
      is_generator: "[boolean] is this a generator method",
      async: "[boolean] is this method async"
    },
    $documentation: "An ES6 concise method inside an object or class",
    computed_key() {
      return !(this.key instanceof AST_SymbolMethod);
    }
  },
  AST_ObjectProperty
);
var AST_PrivateMethod = DEFNODE("PrivateMethod", "", function AST_PrivateMethod2(props) {
  if (props) {
    this.quote = props.quote;
    this.static = props.static;
    this.is_generator = props.is_generator;
    this.async = props.async;
    this.key = props.key;
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A private class method inside a class"
}, AST_ConciseMethod);
var AST_Class = DEFNODE(
  "Class",
  "name extends properties",
  function AST_Class2(props) {
    if (props) {
      this.name = props.name;
      this.extends = props.extends;
      this.properties = props.properties;
      this.variables = props.variables;
      this.uses_with = props.uses_with;
      this.uses_eval = props.uses_eval;
      this.parent_scope = props.parent_scope;
      this.enclosed = props.enclosed;
      this.cname = props.cname;
      this.body = props.body;
      this.block_scope = props.block_scope;
      this.start = props.start;
      this.end = props.end;
    }
    this.flags = 0;
  },
  {
    $propdoc: {
      name: "[AST_SymbolClass|AST_SymbolDefClass?] optional class name.",
      extends: "[AST_Node]? optional parent class",
      properties: "[AST_ObjectProperty*] array of properties"
    },
    $documentation: "An ES6 class",
    _walk: function(visitor) {
      return visitor._visit(this, function() {
        if (this.name) {
          this.name._walk(visitor);
        }
        if (this.extends) {
          this.extends._walk(visitor);
        }
        this.properties.forEach((prop) => prop._walk(visitor));
      });
    },
    _children_backwards(push2) {
      let i = this.properties.length;
      while (i--)
        push2(this.properties[i]);
      if (this.extends)
        push2(this.extends);
      if (this.name)
        push2(this.name);
    }
  },
  AST_Scope
  /* TODO a class might have a scope but it's not a scope */
);
var AST_ClassProperty = DEFNODE("ClassProperty", "static quote", function AST_ClassProperty2(props) {
  if (props) {
    this.static = props.static;
    this.quote = props.quote;
    this.key = props.key;
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A class property",
  $propdoc: {
    static: "[boolean] whether this is a static key",
    quote: "[string] which quote is being used"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      if (this.key instanceof AST_Node)
        this.key._walk(visitor);
      if (this.value instanceof AST_Node)
        this.value._walk(visitor);
    });
  },
  _children_backwards(push2) {
    if (this.value instanceof AST_Node)
      push2(this.value);
    if (this.key instanceof AST_Node)
      push2(this.key);
  },
  computed_key() {
    return !(this.key instanceof AST_SymbolClassProperty);
  }
}, AST_ObjectProperty);
var AST_ClassPrivateProperty = DEFNODE("ClassPrivateProperty", "", function AST_ClassPrivateProperty2(props) {
  if (props) {
    this.static = props.static;
    this.quote = props.quote;
    this.key = props.key;
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A class property for a private property"
}, AST_ClassProperty);
var AST_PrivateIn = DEFNODE("PrivateIn", "key value", function AST_PrivateIn2(props) {
  if (props) {
    this.key = props.key;
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "An `in` binop when the key is private, eg #x in this",
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      this.key._walk(visitor);
      this.value._walk(visitor);
    });
  },
  _children_backwards(push2) {
    push2(this.value);
    push2(this.key);
  }
});
var AST_DefClass = DEFNODE("DefClass", null, function AST_DefClass2(props) {
  if (props) {
    this.name = props.name;
    this.extends = props.extends;
    this.properties = props.properties;
    this.variables = props.variables;
    this.uses_with = props.uses_with;
    this.uses_eval = props.uses_eval;
    this.parent_scope = props.parent_scope;
    this.enclosed = props.enclosed;
    this.cname = props.cname;
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A class definition"
}, AST_Class);
var AST_ClassStaticBlock = DEFNODE("ClassStaticBlock", "body block_scope", function AST_ClassStaticBlock2(props) {
  this.body = props.body;
  this.block_scope = props.block_scope;
  this.start = props.start;
  this.end = props.end;
}, {
  $documentation: "A block containing statements to be executed in the context of the class",
  $propdoc: {
    body: "[AST_Statement*] an array of statements"
  },
  _walk: function(visitor) {
    return visitor._visit(this, function() {
      walk_body(this, visitor);
    });
  },
  _children_backwards(push2) {
    let i = this.body.length;
    while (i--)
      push2(this.body[i]);
  },
  clone: clone_block_scope
}, AST_Scope);
var AST_ClassExpression = DEFNODE("ClassExpression", null, function AST_ClassExpression2(props) {
  if (props) {
    this.name = props.name;
    this.extends = props.extends;
    this.properties = props.properties;
    this.variables = props.variables;
    this.uses_with = props.uses_with;
    this.uses_eval = props.uses_eval;
    this.parent_scope = props.parent_scope;
    this.enclosed = props.enclosed;
    this.cname = props.cname;
    this.body = props.body;
    this.block_scope = props.block_scope;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A class expression."
}, AST_Class);
var AST_Symbol = DEFNODE("Symbol", "scope name thedef", function AST_Symbol2(props) {
  if (props) {
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $propdoc: {
    name: "[string] name of this symbol",
    scope: "[AST_Scope/S] the current scope (not necessarily the definition scope)",
    thedef: "[SymbolDef/S] the definition of this symbol"
  },
  $documentation: "Base class for all symbols"
});
var AST_NewTarget = DEFNODE("NewTarget", null, function AST_NewTarget2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A reference to new.target"
});
var AST_SymbolDeclaration = DEFNODE("SymbolDeclaration", "init", function AST_SymbolDeclaration2(props) {
  if (props) {
    this.init = props.init;
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A declaration symbol (symbol in var/const, function name or argument, symbol in catch)"
}, AST_Symbol);
var AST_SymbolVar = DEFNODE("SymbolVar", null, function AST_SymbolVar2(props) {
  if (props) {
    this.init = props.init;
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Symbol defining a variable"
}, AST_SymbolDeclaration);
var AST_SymbolBlockDeclaration = DEFNODE(
  "SymbolBlockDeclaration",
  null,
  function AST_SymbolBlockDeclaration2(props) {
    if (props) {
      this.init = props.init;
      this.scope = props.scope;
      this.name = props.name;
      this.thedef = props.thedef;
      this.start = props.start;
      this.end = props.end;
    }
    this.flags = 0;
  },
  {
    $documentation: "Base class for block-scoped declaration symbols"
  },
  AST_SymbolDeclaration
);
var AST_SymbolConst = DEFNODE("SymbolConst", null, function AST_SymbolConst2(props) {
  if (props) {
    this.init = props.init;
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A constant declaration"
}, AST_SymbolBlockDeclaration);
var AST_SymbolLet = DEFNODE("SymbolLet", null, function AST_SymbolLet2(props) {
  if (props) {
    this.init = props.init;
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A block-scoped `let` declaration"
}, AST_SymbolBlockDeclaration);
var AST_SymbolFunarg = DEFNODE("SymbolFunarg", null, function AST_SymbolFunarg2(props) {
  if (props) {
    this.init = props.init;
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Symbol naming a function argument"
}, AST_SymbolVar);
var AST_SymbolDefun = DEFNODE("SymbolDefun", null, function AST_SymbolDefun2(props) {
  if (props) {
    this.init = props.init;
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Symbol defining a function"
}, AST_SymbolDeclaration);
var AST_SymbolMethod = DEFNODE("SymbolMethod", null, function AST_SymbolMethod2(props) {
  if (props) {
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Symbol in an object defining a method"
}, AST_Symbol);
var AST_SymbolClassProperty = DEFNODE("SymbolClassProperty", null, function AST_SymbolClassProperty2(props) {
  if (props) {
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Symbol for a class property"
}, AST_Symbol);
var AST_SymbolLambda = DEFNODE("SymbolLambda", null, function AST_SymbolLambda2(props) {
  if (props) {
    this.init = props.init;
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Symbol naming a function expression"
}, AST_SymbolDeclaration);
var AST_SymbolDefClass = DEFNODE("SymbolDefClass", null, function AST_SymbolDefClass2(props) {
  if (props) {
    this.init = props.init;
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Symbol naming a class's name in a class declaration. Lexically scoped to its containing scope, and accessible within the class."
}, AST_SymbolBlockDeclaration);
var AST_SymbolClass = DEFNODE("SymbolClass", null, function AST_SymbolClass2(props) {
  if (props) {
    this.init = props.init;
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Symbol naming a class's name. Lexically scoped to the class."
}, AST_SymbolDeclaration);
var AST_SymbolCatch = DEFNODE("SymbolCatch", null, function AST_SymbolCatch2(props) {
  if (props) {
    this.init = props.init;
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Symbol naming the exception in catch"
}, AST_SymbolBlockDeclaration);
var AST_SymbolImport = DEFNODE("SymbolImport", null, function AST_SymbolImport2(props) {
  if (props) {
    this.init = props.init;
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Symbol referring to an imported name"
}, AST_SymbolBlockDeclaration);
var AST_SymbolImportForeign = DEFNODE("SymbolImportForeign", null, function AST_SymbolImportForeign2(props) {
  if (props) {
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.quote = props.quote;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A symbol imported from a module, but it is defined in the other module, and its real name is irrelevant for this module's purposes"
}, AST_Symbol);
var AST_Label = DEFNODE("Label", "references", function AST_Label2(props) {
  if (props) {
    this.references = props.references;
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
    this.initialize();
  }
  this.flags = 0;
}, {
  $documentation: "Symbol naming a label (declaration)",
  $propdoc: {
    references: "[AST_LoopControl*] a list of nodes referring to this label"
  },
  initialize: function() {
    this.references = [];
    this.thedef = this;
  }
}, AST_Symbol);
var AST_SymbolRef = DEFNODE("SymbolRef", null, function AST_SymbolRef2(props) {
  if (props) {
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Reference to some symbol (not definition/declaration)"
}, AST_Symbol);
var AST_SymbolExport = DEFNODE("SymbolExport", null, function AST_SymbolExport2(props) {
  if (props) {
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.quote = props.quote;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Symbol referring to a name to export"
}, AST_SymbolRef);
var AST_SymbolExportForeign = DEFNODE("SymbolExportForeign", null, function AST_SymbolExportForeign2(props) {
  if (props) {
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.quote = props.quote;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A symbol exported from this module, but it is used in the other module, and its real name is irrelevant for this module's purposes"
}, AST_Symbol);
var AST_LabelRef = DEFNODE("LabelRef", null, function AST_LabelRef2(props) {
  if (props) {
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Reference to a label symbol"
}, AST_Symbol);
var AST_SymbolPrivateProperty = DEFNODE("SymbolPrivateProperty", null, function AST_SymbolPrivateProperty2(props) {
  if (props) {
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A symbol that refers to a private property"
}, AST_Symbol);
var AST_This = DEFNODE("This", null, function AST_This2(props) {
  if (props) {
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "The `this` symbol"
}, AST_Symbol);
var AST_Super = DEFNODE("Super", null, function AST_Super2(props) {
  if (props) {
    this.scope = props.scope;
    this.name = props.name;
    this.thedef = props.thedef;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "The `super` symbol"
}, AST_This);
var AST_Constant = DEFNODE("Constant", null, function AST_Constant2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Base class for all constants",
  getValue: function() {
    return this.value;
  }
});
var AST_String = DEFNODE("String", "value quote", function AST_String2(props) {
  if (props) {
    this.value = props.value;
    this.quote = props.quote;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A string literal",
  $propdoc: {
    value: "[string] the contents of this string",
    quote: "[string] the original quote character"
  }
}, AST_Constant);
var AST_Number = DEFNODE("Number", "value raw", function AST_Number2(props) {
  if (props) {
    this.value = props.value;
    this.raw = props.raw;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A number literal",
  $propdoc: {
    value: "[number] the numeric value",
    raw: "[string] numeric value as string"
  }
}, AST_Constant);
var AST_BigInt = DEFNODE("BigInt", "value", function AST_BigInt2(props) {
  if (props) {
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A big int literal",
  $propdoc: {
    value: "[string] big int value"
  }
}, AST_Constant);
var AST_RegExp = DEFNODE("RegExp", "value", function AST_RegExp2(props) {
  if (props) {
    this.value = props.value;
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A regexp literal",
  $propdoc: {
    value: "[RegExp] the actual regexp"
  }
}, AST_Constant);
var AST_Atom = DEFNODE("Atom", null, function AST_Atom2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Base class for atoms"
}, AST_Constant);
var AST_Null = DEFNODE("Null", null, function AST_Null2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "The `null` atom",
  value: null
}, AST_Atom);
var AST_NaN = DEFNODE("NaN", null, function AST_NaN2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "The impossible value",
  value: 0 / 0
}, AST_Atom);
var AST_Undefined = DEFNODE("Undefined", null, function AST_Undefined2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "The `undefined` value",
  value: /* @__PURE__ */ function() {
  }()
}, AST_Atom);
var AST_Hole = DEFNODE("Hole", null, function AST_Hole2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "A hole in an array",
  value: /* @__PURE__ */ function() {
  }()
}, AST_Atom);
var AST_Infinity = DEFNODE("Infinity", null, function AST_Infinity2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "The `Infinity` value",
  value: 1 / 0
}, AST_Atom);
var AST_Boolean = DEFNODE("Boolean", null, function AST_Boolean2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "Base class for booleans"
}, AST_Atom);
var AST_False = DEFNODE("False", null, function AST_False2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "The `false` atom",
  value: false
}, AST_Boolean);
var AST_True = DEFNODE("True", null, function AST_True2(props) {
  if (props) {
    this.start = props.start;
    this.end = props.end;
  }
  this.flags = 0;
}, {
  $documentation: "The `true` atom",
  value: true
}, AST_Boolean);
function walk(node, cb, to_visit = [node]) {
  const push2 = to_visit.push.bind(to_visit);
  while (to_visit.length) {
    const node2 = to_visit.pop();
    const ret = cb(node2, to_visit);
    if (ret) {
      if (ret === walk_abort)
        return true;
      continue;
    }
    node2._children_backwards(push2);
  }
  return false;
}
function walk_parent(node, cb, initial_stack) {
  const to_visit = [node];
  const push2 = to_visit.push.bind(to_visit);
  const stack = initial_stack ? initial_stack.slice() : [];
  const parent_pop_indices = [];
  let current;
  const info = {
    parent: (n = 0) => {
      if (n === -1) {
        return current;
      }
      if (initial_stack && n >= stack.length) {
        n -= stack.length;
        return initial_stack[initial_stack.length - (n + 1)];
      }
      return stack[stack.length - (1 + n)];
    }
  };
  while (to_visit.length) {
    current = to_visit.pop();
    while (parent_pop_indices.length && to_visit.length == parent_pop_indices[parent_pop_indices.length - 1]) {
      stack.pop();
      parent_pop_indices.pop();
    }
    const ret = cb(current, info);
    if (ret) {
      if (ret === walk_abort)
        return true;
      continue;
    }
    const visit_length = to_visit.length;
    current._children_backwards(push2);
    if (to_visit.length > visit_length) {
      stack.push(current);
      parent_pop_indices.push(visit_length - 1);
    }
  }
  return false;
}
var walk_abort = Symbol("abort walk");
var TreeWalker = class {
  constructor(callback) {
    this.visit = callback;
    this.stack = [];
    this.directives = /* @__PURE__ */ Object.create(null);
  }
  _visit(node, descend) {
    this.push(node);
    var ret = this.visit(node, descend ? function() {
      descend.call(node);
    } : noop);
    if (!ret && descend) {
      descend.call(node);
    }
    this.pop();
    return ret;
  }
  parent(n) {
    return this.stack[this.stack.length - 2 - (n || 0)];
  }
  push(node) {
    if (node instanceof AST_Lambda) {
      this.directives = Object.create(this.directives);
    } else if (node instanceof AST_Directive && !this.directives[node.value]) {
      this.directives[node.value] = node;
    } else if (node instanceof AST_Class) {
      this.directives = Object.create(this.directives);
      if (!this.directives["use strict"]) {
        this.directives["use strict"] = node;
      }
    }
    this.stack.push(node);
  }
  pop() {
    var node = this.stack.pop();
    if (node instanceof AST_Lambda || node instanceof AST_Class) {
      this.directives = Object.getPrototypeOf(this.directives);
    }
  }
  self() {
    return this.stack[this.stack.length - 1];
  }
  find_parent(type) {
    var stack = this.stack;
    for (var i = stack.length; --i >= 0; ) {
      var x = stack[i];
      if (x instanceof type)
        return x;
    }
  }
  find_scope() {
    var stack = this.stack;
    for (var i = stack.length; --i >= 0; ) {
      const p = stack[i];
      if (p instanceof AST_Toplevel)
        return p;
      if (p instanceof AST_Lambda)
        return p;
      if (p.block_scope)
        return p.block_scope;
    }
  }
  has_directive(type) {
    var dir = this.directives[type];
    if (dir)
      return dir;
    var node = this.stack[this.stack.length - 1];
    if (node instanceof AST_Scope && node.body) {
      for (var i = 0; i < node.body.length; ++i) {
        var st = node.body[i];
        if (!(st instanceof AST_Directive))
          break;
        if (st.value == type)
          return st;
      }
    }
  }
  loopcontrol_target(node) {
    var stack = this.stack;
    if (node.label)
      for (var i = stack.length; --i >= 0; ) {
        var x = stack[i];
        if (x instanceof AST_LabeledStatement && x.label.name == node.label.name)
          return x.body;
      }
    else
      for (var i = stack.length; --i >= 0; ) {
        var x = stack[i];
        if (x instanceof AST_IterationStatement || node instanceof AST_Break && x instanceof AST_Switch)
          return x;
      }
  }
};
var TreeTransformer = class extends TreeWalker {
  constructor(before, after) {
    super();
    this.before = before;
    this.after = after;
  }
};
var _PURE = 1;
var _INLINE = 2;
var _NOINLINE = 4;

// node_modules/terser/lib/transform.js
function def_transform(node, descend) {
  node.DEFMETHOD("transform", function(tw, in_list) {
    let transformed = void 0;
    tw.push(this);
    if (tw.before)
      transformed = tw.before(this, descend, in_list);
    if (transformed === void 0) {
      transformed = this;
      descend(transformed, tw);
      if (tw.after) {
        const after_ret = tw.after(transformed, in_list);
        if (after_ret !== void 0)
          transformed = after_ret;
      }
    }
    tw.pop();
    return transformed;
  });
}
def_transform(AST_Node, noop);
def_transform(AST_LabeledStatement, function(self2, tw) {
  self2.label = self2.label.transform(tw);
  self2.body = self2.body.transform(tw);
});
def_transform(AST_SimpleStatement, function(self2, tw) {
  self2.body = self2.body.transform(tw);
});
def_transform(AST_Block, function(self2, tw) {
  self2.body = MAP(self2.body, tw);
});
def_transform(AST_Do, function(self2, tw) {
  self2.body = self2.body.transform(tw);
  self2.condition = self2.condition.transform(tw);
});
def_transform(AST_While, function(self2, tw) {
  self2.condition = self2.condition.transform(tw);
  self2.body = self2.body.transform(tw);
});
def_transform(AST_For, function(self2, tw) {
  if (self2.init)
    self2.init = self2.init.transform(tw);
  if (self2.condition)
    self2.condition = self2.condition.transform(tw);
  if (self2.step)
    self2.step = self2.step.transform(tw);
  self2.body = self2.body.transform(tw);
});
def_transform(AST_ForIn, function(self2, tw) {
  self2.init = self2.init.transform(tw);
  self2.object = self2.object.transform(tw);
  self2.body = self2.body.transform(tw);
});
def_transform(AST_With, function(self2, tw) {
  self2.expression = self2.expression.transform(tw);
  self2.body = self2.body.transform(tw);
});
def_transform(AST_Exit, function(self2, tw) {
  if (self2.value)
    self2.value = self2.value.transform(tw);
});
def_transform(AST_LoopControl, function(self2, tw) {
  if (self2.label)
    self2.label = self2.label.transform(tw);
});
def_transform(AST_If, function(self2, tw) {
  self2.condition = self2.condition.transform(tw);
  self2.body = self2.body.transform(tw);
  if (self2.alternative)
    self2.alternative = self2.alternative.transform(tw);
});
def_transform(AST_Switch, function(self2, tw) {
  self2.expression = self2.expression.transform(tw);
  self2.body = MAP(self2.body, tw);
});
def_transform(AST_Case, function(self2, tw) {
  self2.expression = self2.expression.transform(tw);
  self2.body = MAP(self2.body, tw);
});
def_transform(AST_Try, function(self2, tw) {
  self2.body = self2.body.transform(tw);
  if (self2.bcatch)
    self2.bcatch = self2.bcatch.transform(tw);
  if (self2.bfinally)
    self2.bfinally = self2.bfinally.transform(tw);
});
def_transform(AST_Catch, function(self2, tw) {
  if (self2.argname)
    self2.argname = self2.argname.transform(tw);
  self2.body = MAP(self2.body, tw);
});
def_transform(AST_Definitions, function(self2, tw) {
  self2.definitions = MAP(self2.definitions, tw);
});
def_transform(AST_VarDef, function(self2, tw) {
  self2.name = self2.name.transform(tw);
  if (self2.value)
    self2.value = self2.value.transform(tw);
});
def_transform(AST_Destructuring, function(self2, tw) {
  self2.names = MAP(self2.names, tw);
});
def_transform(AST_Lambda, function(self2, tw) {
  if (self2.name)
    self2.name = self2.name.transform(tw);
  self2.argnames = MAP(
    self2.argnames,
    tw,
    /* allow_splicing */
    false
  );
  if (self2.body instanceof AST_Node) {
    self2.body = self2.body.transform(tw);
  } else {
    self2.body = MAP(self2.body, tw);
  }
});
def_transform(AST_Call, function(self2, tw) {
  self2.expression = self2.expression.transform(tw);
  self2.args = MAP(
    self2.args,
    tw,
    /* allow_splicing */
    false
  );
});
def_transform(AST_Sequence, function(self2, tw) {
  const result = MAP(self2.expressions, tw);
  self2.expressions = result.length ? result : [new AST_Number({ value: 0 })];
});
def_transform(AST_PropAccess, function(self2, tw) {
  self2.expression = self2.expression.transform(tw);
});
def_transform(AST_Sub, function(self2, tw) {
  self2.expression = self2.expression.transform(tw);
  self2.property = self2.property.transform(tw);
});
def_transform(AST_Chain, function(self2, tw) {
  self2.expression = self2.expression.transform(tw);
});
def_transform(AST_Yield, function(self2, tw) {
  if (self2.expression)
    self2.expression = self2.expression.transform(tw);
});
def_transform(AST_Await, function(self2, tw) {
  self2.expression = self2.expression.transform(tw);
});
def_transform(AST_Unary, function(self2, tw) {
  self2.expression = self2.expression.transform(tw);
});
def_transform(AST_Binary, function(self2, tw) {
  self2.left = self2.left.transform(tw);
  self2.right = self2.right.transform(tw);
});
def_transform(AST_PrivateIn, function(self2, tw) {
  self2.key = self2.key.transform(tw);
  self2.value = self2.value.transform(tw);
});
def_transform(AST_Conditional, function(self2, tw) {
  self2.condition = self2.condition.transform(tw);
  self2.consequent = self2.consequent.transform(tw);
  self2.alternative = self2.alternative.transform(tw);
});
def_transform(AST_Array, function(self2, tw) {
  self2.elements = MAP(self2.elements, tw);
});
def_transform(AST_Object, function(self2, tw) {
  self2.properties = MAP(self2.properties, tw);
});
def_transform(AST_ObjectProperty, function(self2, tw) {
  if (self2.key instanceof AST_Node) {
    self2.key = self2.key.transform(tw);
  }
  if (self2.value)
    self2.value = self2.value.transform(tw);
});
def_transform(AST_Class, function(self2, tw) {
  if (self2.name)
    self2.name = self2.name.transform(tw);
  if (self2.extends)
    self2.extends = self2.extends.transform(tw);
  self2.properties = MAP(self2.properties, tw);
});
def_transform(AST_ClassStaticBlock, function(self2, tw) {
  self2.body = MAP(self2.body, tw);
});
def_transform(AST_Expansion, function(self2, tw) {
  self2.expression = self2.expression.transform(tw);
});
def_transform(AST_NameMapping, function(self2, tw) {
  self2.foreign_name = self2.foreign_name.transform(tw);
  self2.name = self2.name.transform(tw);
});
def_transform(AST_Import, function(self2, tw) {
  if (self2.imported_name)
    self2.imported_name = self2.imported_name.transform(tw);
  if (self2.imported_names)
    MAP(self2.imported_names, tw);
  self2.module_name = self2.module_name.transform(tw);
});
def_transform(AST_Export, function(self2, tw) {
  if (self2.exported_definition)
    self2.exported_definition = self2.exported_definition.transform(tw);
  if (self2.exported_value)
    self2.exported_value = self2.exported_value.transform(tw);
  if (self2.exported_names)
    MAP(self2.exported_names, tw);
  if (self2.module_name)
    self2.module_name = self2.module_name.transform(tw);
});
def_transform(AST_TemplateString, function(self2, tw) {
  self2.segments = MAP(self2.segments, tw);
});
def_transform(AST_PrefixedTemplateString, function(self2, tw) {
  self2.prefix = self2.prefix.transform(tw);
  self2.template_string = self2.template_string.transform(tw);
});

// node_modules/terser/lib/mozilla-ast.js
(function() {
  var normalize_directives = function(body) {
    var in_directive = true;
    for (var i = 0; i < body.length; i++) {
      if (in_directive && body[i] instanceof AST_Statement && body[i].body instanceof AST_String) {
        body[i] = new AST_Directive({
          start: body[i].start,
          end: body[i].end,
          value: body[i].body.value
        });
      } else if (in_directive && !(body[i] instanceof AST_Statement && body[i].body instanceof AST_String)) {
        in_directive = false;
      }
    }
    return body;
  };
  const assert_clause_from_moz = (assertions) => {
    if (assertions && assertions.length > 0) {
      return new AST_Object({
        start: my_start_token(assertions),
        end: my_end_token(assertions),
        properties: assertions.map(
          (assertion_kv) => new AST_ObjectKeyVal({
            start: my_start_token(assertion_kv),
            end: my_end_token(assertion_kv),
            key: assertion_kv.key.name || assertion_kv.key.value,
            value: from_moz(assertion_kv.value)
          })
        )
      });
    }
    return null;
  };
  var MOZ_TO_ME = {
    Program: function(M) {
      return new AST_Toplevel({
        start: my_start_token(M),
        end: my_end_token(M),
        body: normalize_directives(M.body.map(from_moz))
      });
    },
    ArrayPattern: function(M) {
      return new AST_Destructuring({
        start: my_start_token(M),
        end: my_end_token(M),
        names: M.elements.map(function(elm) {
          if (elm === null) {
            return new AST_Hole();
          }
          return from_moz(elm);
        }),
        is_array: true
      });
    },
    ObjectPattern: function(M) {
      return new AST_Destructuring({
        start: my_start_token(M),
        end: my_end_token(M),
        names: M.properties.map(from_moz),
        is_array: false
      });
    },
    AssignmentPattern: function(M) {
      return new AST_DefaultAssign({
        start: my_start_token(M),
        end: my_end_token(M),
        left: from_moz(M.left),
        operator: "=",
        right: from_moz(M.right)
      });
    },
    SpreadElement: function(M) {
      return new AST_Expansion({
        start: my_start_token(M),
        end: my_end_token(M),
        expression: from_moz(M.argument)
      });
    },
    RestElement: function(M) {
      return new AST_Expansion({
        start: my_start_token(M),
        end: my_end_token(M),
        expression: from_moz(M.argument)
      });
    },
    TemplateElement: function(M) {
      return new AST_TemplateSegment({
        start: my_start_token(M),
        end: my_end_token(M),
        value: M.value.cooked,
        raw: M.value.raw
      });
    },
    TemplateLiteral: function(M) {
      var segments = [];
      for (var i = 0; i < M.quasis.length; i++) {
        segments.push(from_moz(M.quasis[i]));
        if (M.expressions[i]) {
          segments.push(from_moz(M.expressions[i]));
        }
      }
      return new AST_TemplateString({
        start: my_start_token(M),
        end: my_end_token(M),
        segments
      });
    },
    TaggedTemplateExpression: function(M) {
      return new AST_PrefixedTemplateString({
        start: my_start_token(M),
        end: my_end_token(M),
        template_string: from_moz(M.quasi),
        prefix: from_moz(M.tag)
      });
    },
    FunctionDeclaration: function(M) {
      return new AST_Defun({
        start: my_start_token(M),
        end: my_end_token(M),
        name: from_moz(M.id),
        argnames: M.params.map(from_moz),
        is_generator: M.generator,
        async: M.async,
        body: normalize_directives(from_moz(M.body).body)
      });
    },
    FunctionExpression: function(M) {
      return new AST_Function({
        start: my_start_token(M),
        end: my_end_token(M),
        name: from_moz(M.id),
        argnames: M.params.map(from_moz),
        is_generator: M.generator,
        async: M.async,
        body: normalize_directives(from_moz(M.body).body)
      });
    },
    ArrowFunctionExpression: function(M) {
      const body = M.body.type === "BlockStatement" ? from_moz(M.body).body : [make_node(AST_Return, {}, { value: from_moz(M.body) })];
      return new AST_Arrow({
        start: my_start_token(M),
        end: my_end_token(M),
        argnames: M.params.map(from_moz),
        body,
        async: M.async
      });
    },
    ExpressionStatement: function(M) {
      return new AST_SimpleStatement({
        start: my_start_token(M),
        end: my_end_token(M),
        body: from_moz(M.expression)
      });
    },
    TryStatement: function(M) {
      var handlers = M.handlers || [M.handler];
      if (handlers.length > 1 || M.guardedHandlers && M.guardedHandlers.length) {
        throw new Error("Multiple catch clauses are not supported.");
      }
      return new AST_Try({
        start: my_start_token(M),
        end: my_end_token(M),
        body: new AST_TryBlock(from_moz(M.block)),
        bcatch: from_moz(handlers[0]),
        bfinally: M.finalizer ? new AST_Finally(from_moz(M.finalizer)) : null
      });
    },
    Property: function(M) {
      var key = M.key;
      var args2 = {
        start: my_start_token(key || M.value),
        end: my_end_token(M.value),
        key: key.type == "Identifier" ? key.name : key.value,
        value: from_moz(M.value)
      };
      if (M.computed) {
        args2.key = from_moz(M.key);
      }
      if (M.method) {
        args2.is_generator = M.value.generator;
        args2.async = M.value.async;
        if (!M.computed) {
          args2.key = new AST_SymbolMethod({ name: args2.key });
        } else {
          args2.key = from_moz(M.key);
        }
        return new AST_ConciseMethod(args2);
      }
      if (M.kind == "init") {
        if (key.type != "Identifier" && key.type != "Literal") {
          args2.key = from_moz(key);
        }
        return new AST_ObjectKeyVal(args2);
      }
      if (typeof args2.key === "string" || typeof args2.key === "number") {
        args2.key = new AST_SymbolMethod({
          name: args2.key
        });
      }
      args2.value = new AST_Accessor(args2.value);
      if (M.kind == "get")
        return new AST_ObjectGetter(args2);
      if (M.kind == "set")
        return new AST_ObjectSetter(args2);
      if (M.kind == "method") {
        args2.async = M.value.async;
        args2.is_generator = M.value.generator;
        args2.quote = M.computed ? '"' : null;
        return new AST_ConciseMethod(args2);
      }
    },
    MethodDefinition: function(M) {
      var args2 = {
        start: my_start_token(M),
        end: my_end_token(M),
        key: M.computed ? from_moz(M.key) : new AST_SymbolMethod({ name: M.key.name || M.key.value }),
        value: from_moz(M.value),
        static: M.static
      };
      if (M.kind == "get") {
        return new AST_ObjectGetter(args2);
      }
      if (M.kind == "set") {
        return new AST_ObjectSetter(args2);
      }
      args2.is_generator = M.value.generator;
      args2.async = M.value.async;
      return new AST_ConciseMethod(args2);
    },
    FieldDefinition: function(M) {
      let key;
      if (M.computed) {
        key = from_moz(M.key);
      } else {
        if (M.key.type !== "Identifier")
          throw new Error("Non-Identifier key in FieldDefinition");
        key = from_moz(M.key);
      }
      return new AST_ClassProperty({
        start: my_start_token(M),
        end: my_end_token(M),
        key,
        value: from_moz(M.value),
        static: M.static
      });
    },
    PropertyDefinition: function(M) {
      let key;
      if (M.computed) {
        key = from_moz(M.key);
      } else {
        if (M.key.type !== "Identifier" && M.key.type !== "PrivateIdentifier") {
          throw new Error("Non-Identifier key in PropertyDefinition");
        }
        key = from_moz(M.key);
      }
      return new AST_ClassProperty({
        start: my_start_token(M),
        end: my_end_token(M),
        key,
        value: from_moz(M.value),
        static: M.static
      });
    },
    StaticBlock: function(M) {
      return new AST_ClassStaticBlock({
        start: my_start_token(M),
        end: my_end_token(M),
        body: M.body.map(from_moz)
      });
    },
    ArrayExpression: function(M) {
      return new AST_Array({
        start: my_start_token(M),
        end: my_end_token(M),
        elements: M.elements.map(function(elem) {
          return elem === null ? new AST_Hole() : from_moz(elem);
        })
      });
    },
    ObjectExpression: function(M) {
      return new AST_Object({
        start: my_start_token(M),
        end: my_end_token(M),
        properties: M.properties.map(function(prop) {
          if (prop.type === "SpreadElement") {
            return from_moz(prop);
          }
          prop.type = "Property";
          return from_moz(prop);
        })
      });
    },
    SequenceExpression: function(M) {
      return new AST_Sequence({
        start: my_start_token(M),
        end: my_end_token(M),
        expressions: M.expressions.map(from_moz)
      });
    },
    MemberExpression: function(M) {
      return new (M.computed ? AST_Sub : AST_Dot)({
        start: my_start_token(M),
        end: my_end_token(M),
        property: M.computed ? from_moz(M.property) : M.property.name,
        expression: from_moz(M.object),
        optional: M.optional || false
      });
    },
    ChainExpression: function(M) {
      return new AST_Chain({
        start: my_start_token(M),
        end: my_end_token(M),
        expression: from_moz(M.expression)
      });
    },
    SwitchCase: function(M) {
      return new (M.test ? AST_Case : AST_Default)({
        start: my_start_token(M),
        end: my_end_token(M),
        expression: from_moz(M.test),
        body: M.consequent.map(from_moz)
      });
    },
    VariableDeclaration: function(M) {
      return new (M.kind === "const" ? AST_Const : M.kind === "let" ? AST_Let : AST_Var)({
        start: my_start_token(M),
        end: my_end_token(M),
        definitions: M.declarations.map(from_moz)
      });
    },
    ImportDeclaration: function(M) {
      var imported_name = null;
      var imported_names = null;
      M.specifiers.forEach(function(specifier) {
        if (specifier.type === "ImportSpecifier" || specifier.type === "ImportNamespaceSpecifier") {
          if (!imported_names) {
            imported_names = [];
          }
          imported_names.push(from_moz(specifier));
        } else if (specifier.type === "ImportDefaultSpecifier") {
          imported_name = from_moz(specifier);
        }
      });
      return new AST_Import({
        start: my_start_token(M),
        end: my_end_token(M),
        imported_name,
        imported_names,
        module_name: from_moz(M.source),
        assert_clause: assert_clause_from_moz(M.assertions)
      });
    },
    ImportSpecifier: function(M) {
      return new AST_NameMapping({
        start: my_start_token(M),
        end: my_end_token(M),
        foreign_name: from_moz(M.imported),
        name: from_moz(M.local)
      });
    },
    ImportDefaultSpecifier: function(M) {
      return from_moz(M.local);
    },
    ImportNamespaceSpecifier: function(M) {
      return new AST_NameMapping({
        start: my_start_token(M),
        end: my_end_token(M),
        foreign_name: new AST_SymbolImportForeign({ name: "*" }),
        name: from_moz(M.local)
      });
    },
    ExportAllDeclaration: function(M) {
      var foreign_name = M.exported == null ? new AST_SymbolExportForeign({ name: "*" }) : from_moz(M.exported);
      return new AST_Export({
        start: my_start_token(M),
        end: my_end_token(M),
        exported_names: [
          new AST_NameMapping({
            name: new AST_SymbolExportForeign({ name: "*" }),
            foreign_name
          })
        ],
        module_name: from_moz(M.source),
        assert_clause: assert_clause_from_moz(M.assertions)
      });
    },
    ExportNamedDeclaration: function(M) {
      return new AST_Export({
        start: my_start_token(M),
        end: my_end_token(M),
        exported_definition: from_moz(M.declaration),
        exported_names: M.specifiers && M.specifiers.length ? M.specifiers.map(function(specifier) {
          return from_moz(specifier);
        }) : null,
        module_name: from_moz(M.source),
        assert_clause: assert_clause_from_moz(M.assertions)
      });
    },
    ExportDefaultDeclaration: function(M) {
      return new AST_Export({
        start: my_start_token(M),
        end: my_end_token(M),
        exported_value: from_moz(M.declaration),
        is_default: true
      });
    },
    ExportSpecifier: function(M) {
      return new AST_NameMapping({
        foreign_name: from_moz(M.exported),
        name: from_moz(M.local)
      });
    },
    Literal: function(M) {
      var val = M.value, args2 = {
        start: my_start_token(M),
        end: my_end_token(M)
      };
      var rx = M.regex;
      if (rx && rx.pattern) {
        args2.value = {
          source: rx.pattern,
          flags: rx.flags
        };
        return new AST_RegExp(args2);
      } else if (rx) {
        const rx_source = M.raw || val;
        const match2 = rx_source.match(/^\/(.*)\/(\w*)$/);
        if (!match2)
          throw new Error("Invalid regex source " + rx_source);
        const [_, source, flags] = match2;
        args2.value = { source, flags };
        return new AST_RegExp(args2);
      }
      if (val === null)
        return new AST_Null(args2);
      switch (typeof val) {
        case "string":
          args2.quote = '"';
          var p = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];
          if (p.type == "ImportSpecifier") {
            args2.name = val;
            return new AST_SymbolImportForeign(args2);
          } else if (p.type == "ExportSpecifier") {
            args2.name = val;
            if (M == p.exported) {
              return new AST_SymbolExportForeign(args2);
            } else {
              return new AST_SymbolExport(args2);
            }
          } else if (p.type == "ExportAllDeclaration" && M == p.exported) {
            args2.name = val;
            return new AST_SymbolExportForeign(args2);
          }
          args2.value = val;
          return new AST_String(args2);
        case "number":
          args2.value = val;
          args2.raw = M.raw || val.toString();
          return new AST_Number(args2);
        case "boolean":
          return new (val ? AST_True : AST_False)(args2);
      }
    },
    MetaProperty: function(M) {
      if (M.meta.name === "new" && M.property.name === "target") {
        return new AST_NewTarget({
          start: my_start_token(M),
          end: my_end_token(M)
        });
      } else if (M.meta.name === "import" && M.property.name === "meta") {
        return new AST_ImportMeta({
          start: my_start_token(M),
          end: my_end_token(M)
        });
      }
    },
    Identifier: function(M) {
      var p = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];
      return new (p.type == "LabeledStatement" ? AST_Label : p.type == "VariableDeclarator" && p.id === M ? p.kind == "const" ? AST_SymbolConst : p.kind == "let" ? AST_SymbolLet : AST_SymbolVar : /Import.*Specifier/.test(p.type) ? p.local === M ? AST_SymbolImport : AST_SymbolImportForeign : p.type == "ExportSpecifier" ? p.local === M ? AST_SymbolExport : AST_SymbolExportForeign : p.type == "FunctionExpression" ? p.id === M ? AST_SymbolLambda : AST_SymbolFunarg : p.type == "FunctionDeclaration" ? p.id === M ? AST_SymbolDefun : AST_SymbolFunarg : p.type == "ArrowFunctionExpression" ? p.params.includes(M) ? AST_SymbolFunarg : AST_SymbolRef : p.type == "ClassExpression" ? p.id === M ? AST_SymbolClass : AST_SymbolRef : p.type == "Property" ? p.key === M && p.computed || p.value === M ? AST_SymbolRef : AST_SymbolMethod : p.type == "PropertyDefinition" || p.type === "FieldDefinition" ? p.key === M && p.computed || p.value === M ? AST_SymbolRef : AST_SymbolClassProperty : p.type == "ClassDeclaration" ? p.id === M ? AST_SymbolDefClass : AST_SymbolRef : p.type == "MethodDefinition" ? p.computed ? AST_SymbolRef : AST_SymbolMethod : p.type == "CatchClause" ? AST_SymbolCatch : p.type == "BreakStatement" || p.type == "ContinueStatement" ? AST_LabelRef : AST_SymbolRef)({
        start: my_start_token(M),
        end: my_end_token(M),
        name: M.name
      });
    },
    BigIntLiteral(M) {
      return new AST_BigInt({
        start: my_start_token(M),
        end: my_end_token(M),
        value: M.value
      });
    },
    EmptyStatement: function(M) {
      return new AST_EmptyStatement({
        start: my_start_token(M),
        end: my_end_token(M)
      });
    },
    BlockStatement: function(M) {
      return new AST_BlockStatement({
        start: my_start_token(M),
        end: my_end_token(M),
        body: M.body.map(from_moz)
      });
    },
    IfStatement: function(M) {
      return new AST_If({
        start: my_start_token(M),
        end: my_end_token(M),
        condition: from_moz(M.test),
        body: from_moz(M.consequent),
        alternative: from_moz(M.alternate)
      });
    },
    LabeledStatement: function(M) {
      return new AST_LabeledStatement({
        start: my_start_token(M),
        end: my_end_token(M),
        label: from_moz(M.label),
        body: from_moz(M.body)
      });
    },
    BreakStatement: function(M) {
      return new AST_Break({
        start: my_start_token(M),
        end: my_end_token(M),
        label: from_moz(M.label)
      });
    },
    ContinueStatement: function(M) {
      return new AST_Continue({
        start: my_start_token(M),
        end: my_end_token(M),
        label: from_moz(M.label)
      });
    },
    WithStatement: function(M) {
      return new AST_With({
        start: my_start_token(M),
        end: my_end_token(M),
        expression: from_moz(M.object),
        body: from_moz(M.body)
      });
    },
    SwitchStatement: function(M) {
      return new AST_Switch({
        start: my_start_token(M),
        end: my_end_token(M),
        expression: from_moz(M.discriminant),
        body: M.cases.map(from_moz)
      });
    },
    ReturnStatement: function(M) {
      return new AST_Return({
        start: my_start_token(M),
        end: my_end_token(M),
        value: from_moz(M.argument)
      });
    },
    ThrowStatement: function(M) {
      return new AST_Throw({
        start: my_start_token(M),
        end: my_end_token(M),
        value: from_moz(M.argument)
      });
    },
    WhileStatement: function(M) {
      return new AST_While({
        start: my_start_token(M),
        end: my_end_token(M),
        condition: from_moz(M.test),
        body: from_moz(M.body)
      });
    },
    DoWhileStatement: function(M) {
      return new AST_Do({
        start: my_start_token(M),
        end: my_end_token(M),
        condition: from_moz(M.test),
        body: from_moz(M.body)
      });
    },
    ForStatement: function(M) {
      return new AST_For({
        start: my_start_token(M),
        end: my_end_token(M),
        init: from_moz(M.init),
        condition: from_moz(M.test),
        step: from_moz(M.update),
        body: from_moz(M.body)
      });
    },
    ForInStatement: function(M) {
      return new AST_ForIn({
        start: my_start_token(M),
        end: my_end_token(M),
        init: from_moz(M.left),
        object: from_moz(M.right),
        body: from_moz(M.body)
      });
    },
    ForOfStatement: function(M) {
      return new AST_ForOf({
        start: my_start_token(M),
        end: my_end_token(M),
        init: from_moz(M.left),
        object: from_moz(M.right),
        body: from_moz(M.body),
        await: M.await
      });
    },
    AwaitExpression: function(M) {
      return new AST_Await({
        start: my_start_token(M),
        end: my_end_token(M),
        expression: from_moz(M.argument)
      });
    },
    YieldExpression: function(M) {
      return new AST_Yield({
        start: my_start_token(M),
        end: my_end_token(M),
        expression: from_moz(M.argument),
        is_star: M.delegate
      });
    },
    DebuggerStatement: function(M) {
      return new AST_Debugger({
        start: my_start_token(M),
        end: my_end_token(M)
      });
    },
    VariableDeclarator: function(M) {
      return new AST_VarDef({
        start: my_start_token(M),
        end: my_end_token(M),
        name: from_moz(M.id),
        value: from_moz(M.init)
      });
    },
    CatchClause: function(M) {
      return new AST_Catch({
        start: my_start_token(M),
        end: my_end_token(M),
        argname: from_moz(M.param),
        body: from_moz(M.body).body
      });
    },
    ThisExpression: function(M) {
      return new AST_This({
        start: my_start_token(M),
        end: my_end_token(M)
      });
    },
    Super: function(M) {
      return new AST_Super({
        start: my_start_token(M),
        end: my_end_token(M)
      });
    },
    BinaryExpression: function(M) {
      if (M.left.type === "PrivateIdentifier") {
        return new AST_PrivateIn({
          start: my_start_token(M),
          end: my_end_token(M),
          key: new AST_SymbolPrivateProperty({
            start: my_start_token(M.left),
            end: my_end_token(M.left),
            name: M.left.name
          }),
          value: from_moz(M.right)
        });
      }
      return new AST_Binary({
        start: my_start_token(M),
        end: my_end_token(M),
        operator: M.operator,
        left: from_moz(M.left),
        right: from_moz(M.right)
      });
    },
    LogicalExpression: function(M) {
      return new AST_Binary({
        start: my_start_token(M),
        end: my_end_token(M),
        operator: M.operator,
        left: from_moz(M.left),
        right: from_moz(M.right)
      });
    },
    AssignmentExpression: function(M) {
      return new AST_Assign({
        start: my_start_token(M),
        end: my_end_token(M),
        operator: M.operator,
        left: from_moz(M.left),
        right: from_moz(M.right)
      });
    },
    ConditionalExpression: function(M) {
      return new AST_Conditional({
        start: my_start_token(M),
        end: my_end_token(M),
        condition: from_moz(M.test),
        consequent: from_moz(M.consequent),
        alternative: from_moz(M.alternate)
      });
    },
    NewExpression: function(M) {
      return new AST_New({
        start: my_start_token(M),
        end: my_end_token(M),
        expression: from_moz(M.callee),
        args: M.arguments.map(from_moz)
      });
    },
    CallExpression: function(M) {
      return new AST_Call({
        start: my_start_token(M),
        end: my_end_token(M),
        expression: from_moz(M.callee),
        optional: M.optional,
        args: M.arguments.map(from_moz)
      });
    }
  };
  MOZ_TO_ME.UpdateExpression = MOZ_TO_ME.UnaryExpression = function To_Moz_Unary(M) {
    var prefix = "prefix" in M ? M.prefix : M.type == "UnaryExpression" ? true : false;
    return new (prefix ? AST_UnaryPrefix : AST_UnaryPostfix)({
      start: my_start_token(M),
      end: my_end_token(M),
      operator: M.operator,
      expression: from_moz(M.argument)
    });
  };
  MOZ_TO_ME.ClassDeclaration = MOZ_TO_ME.ClassExpression = function From_Moz_Class(M) {
    return new (M.type === "ClassDeclaration" ? AST_DefClass : AST_ClassExpression)({
      start: my_start_token(M),
      end: my_end_token(M),
      name: from_moz(M.id),
      extends: from_moz(M.superClass),
      properties: M.body.body.map(from_moz)
    });
  };
  def_to_moz(AST_EmptyStatement, function To_Moz_EmptyStatement() {
    return {
      type: "EmptyStatement"
    };
  });
  def_to_moz(AST_BlockStatement, function To_Moz_BlockStatement(M) {
    return {
      type: "BlockStatement",
      body: M.body.map(to_moz)
    };
  });
  def_to_moz(AST_If, function To_Moz_IfStatement(M) {
    return {
      type: "IfStatement",
      test: to_moz(M.condition),
      consequent: to_moz(M.body),
      alternate: to_moz(M.alternative)
    };
  });
  def_to_moz(AST_LabeledStatement, function To_Moz_LabeledStatement(M) {
    return {
      type: "LabeledStatement",
      label: to_moz(M.label),
      body: to_moz(M.body)
    };
  });
  def_to_moz(AST_Break, function To_Moz_BreakStatement(M) {
    return {
      type: "BreakStatement",
      label: to_moz(M.label)
    };
  });
  def_to_moz(AST_Continue, function To_Moz_ContinueStatement(M) {
    return {
      type: "ContinueStatement",
      label: to_moz(M.label)
    };
  });
  def_to_moz(AST_With, function To_Moz_WithStatement(M) {
    return {
      type: "WithStatement",
      object: to_moz(M.expression),
      body: to_moz(M.body)
    };
  });
  def_to_moz(AST_Switch, function To_Moz_SwitchStatement(M) {
    return {
      type: "SwitchStatement",
      discriminant: to_moz(M.expression),
      cases: M.body.map(to_moz)
    };
  });
  def_to_moz(AST_Return, function To_Moz_ReturnStatement(M) {
    return {
      type: "ReturnStatement",
      argument: to_moz(M.value)
    };
  });
  def_to_moz(AST_Throw, function To_Moz_ThrowStatement(M) {
    return {
      type: "ThrowStatement",
      argument: to_moz(M.value)
    };
  });
  def_to_moz(AST_While, function To_Moz_WhileStatement(M) {
    return {
      type: "WhileStatement",
      test: to_moz(M.condition),
      body: to_moz(M.body)
    };
  });
  def_to_moz(AST_Do, function To_Moz_DoWhileStatement(M) {
    return {
      type: "DoWhileStatement",
      test: to_moz(M.condition),
      body: to_moz(M.body)
    };
  });
  def_to_moz(AST_For, function To_Moz_ForStatement(M) {
    return {
      type: "ForStatement",
      init: to_moz(M.init),
      test: to_moz(M.condition),
      update: to_moz(M.step),
      body: to_moz(M.body)
    };
  });
  def_to_moz(AST_ForIn, function To_Moz_ForInStatement(M) {
    return {
      type: "ForInStatement",
      left: to_moz(M.init),
      right: to_moz(M.object),
      body: to_moz(M.body)
    };
  });
  def_to_moz(AST_ForOf, function To_Moz_ForOfStatement(M) {
    return {
      type: "ForOfStatement",
      left: to_moz(M.init),
      right: to_moz(M.object),
      body: to_moz(M.body),
      await: M.await
    };
  });
  def_to_moz(AST_Await, function To_Moz_AwaitExpression(M) {
    return {
      type: "AwaitExpression",
      argument: to_moz(M.expression)
    };
  });
  def_to_moz(AST_Yield, function To_Moz_YieldExpression(M) {
    return {
      type: "YieldExpression",
      argument: to_moz(M.expression),
      delegate: M.is_star
    };
  });
  def_to_moz(AST_Debugger, function To_Moz_DebuggerStatement() {
    return {
      type: "DebuggerStatement"
    };
  });
  def_to_moz(AST_VarDef, function To_Moz_VariableDeclarator(M) {
    return {
      type: "VariableDeclarator",
      id: to_moz(M.name),
      init: to_moz(M.value)
    };
  });
  def_to_moz(AST_Catch, function To_Moz_CatchClause(M) {
    return {
      type: "CatchClause",
      param: to_moz(M.argname),
      body: to_moz_block(M)
    };
  });
  def_to_moz(AST_This, function To_Moz_ThisExpression() {
    return {
      type: "ThisExpression"
    };
  });
  def_to_moz(AST_Super, function To_Moz_Super() {
    return {
      type: "Super"
    };
  });
  def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M) {
    return {
      type: "BinaryExpression",
      operator: M.operator,
      left: to_moz(M.left),
      right: to_moz(M.right)
    };
  });
  def_to_moz(AST_Binary, function To_Moz_LogicalExpression(M) {
    return {
      type: "LogicalExpression",
      operator: M.operator,
      left: to_moz(M.left),
      right: to_moz(M.right)
    };
  });
  def_to_moz(AST_Assign, function To_Moz_AssignmentExpression(M) {
    return {
      type: "AssignmentExpression",
      operator: M.operator,
      left: to_moz(M.left),
      right: to_moz(M.right)
    };
  });
  def_to_moz(AST_Conditional, function To_Moz_ConditionalExpression(M) {
    return {
      type: "ConditionalExpression",
      test: to_moz(M.condition),
      consequent: to_moz(M.consequent),
      alternate: to_moz(M.alternative)
    };
  });
  def_to_moz(AST_New, function To_Moz_NewExpression(M) {
    return {
      type: "NewExpression",
      callee: to_moz(M.expression),
      arguments: M.args.map(to_moz)
    };
  });
  def_to_moz(AST_Call, function To_Moz_CallExpression(M) {
    return {
      type: "CallExpression",
      callee: to_moz(M.expression),
      optional: M.optional,
      arguments: M.args.map(to_moz)
    };
  });
  def_to_moz(AST_Toplevel, function To_Moz_Program(M) {
    return to_moz_scope("Program", M);
  });
  def_to_moz(AST_Expansion, function To_Moz_Spread(M) {
    return {
      type: to_moz_in_destructuring() ? "RestElement" : "SpreadElement",
      argument: to_moz(M.expression)
    };
  });
  def_to_moz(AST_PrefixedTemplateString, function To_Moz_TaggedTemplateExpression(M) {
    return {
      type: "TaggedTemplateExpression",
      tag: to_moz(M.prefix),
      quasi: to_moz(M.template_string)
    };
  });
  def_to_moz(AST_TemplateString, function To_Moz_TemplateLiteral(M) {
    var quasis = [];
    var expressions = [];
    for (var i = 0; i < M.segments.length; i++) {
      if (i % 2 !== 0) {
        expressions.push(to_moz(M.segments[i]));
      } else {
        quasis.push({
          type: "TemplateElement",
          value: {
            raw: M.segments[i].raw,
            cooked: M.segments[i].value
          },
          tail: i === M.segments.length - 1
        });
      }
    }
    return {
      type: "TemplateLiteral",
      quasis,
      expressions
    };
  });
  def_to_moz(AST_Defun, function To_Moz_FunctionDeclaration(M) {
    return {
      type: "FunctionDeclaration",
      id: to_moz(M.name),
      params: M.argnames.map(to_moz),
      generator: M.is_generator,
      async: M.async,
      body: to_moz_scope("BlockStatement", M)
    };
  });
  def_to_moz(AST_Function, function To_Moz_FunctionExpression(M, parent) {
    var is_generator = parent.is_generator !== void 0 ? parent.is_generator : M.is_generator;
    return {
      type: "FunctionExpression",
      id: to_moz(M.name),
      params: M.argnames.map(to_moz),
      generator: is_generator,
      async: M.async,
      body: to_moz_scope("BlockStatement", M)
    };
  });
  def_to_moz(AST_Arrow, function To_Moz_ArrowFunctionExpression(M) {
    var body = {
      type: "BlockStatement",
      body: M.body.map(to_moz)
    };
    return {
      type: "ArrowFunctionExpression",
      params: M.argnames.map(to_moz),
      async: M.async,
      body
    };
  });
  def_to_moz(AST_Destructuring, function To_Moz_ObjectPattern(M) {
    if (M.is_array) {
      return {
        type: "ArrayPattern",
        elements: M.names.map(to_moz)
      };
    }
    return {
      type: "ObjectPattern",
      properties: M.names.map(to_moz)
    };
  });
  def_to_moz(AST_Directive, function To_Moz_Directive(M) {
    return {
      type: "ExpressionStatement",
      expression: {
        type: "Literal",
        value: M.value,
        raw: M.print_to_string()
      },
      directive: M.value
    };
  });
  def_to_moz(AST_SimpleStatement, function To_Moz_ExpressionStatement(M) {
    return {
      type: "ExpressionStatement",
      expression: to_moz(M.body)
    };
  });
  def_to_moz(AST_SwitchBranch, function To_Moz_SwitchCase(M) {
    return {
      type: "SwitchCase",
      test: to_moz(M.expression),
      consequent: M.body.map(to_moz)
    };
  });
  def_to_moz(AST_Try, function To_Moz_TryStatement(M) {
    return {
      type: "TryStatement",
      block: to_moz_block(M.body),
      handler: to_moz(M.bcatch),
      guardedHandlers: [],
      finalizer: to_moz(M.bfinally)
    };
  });
  def_to_moz(AST_Catch, function To_Moz_CatchClause(M) {
    return {
      type: "CatchClause",
      param: to_moz(M.argname),
      guard: null,
      body: to_moz_block(M)
    };
  });
  def_to_moz(AST_Definitions, function To_Moz_VariableDeclaration(M) {
    return {
      type: "VariableDeclaration",
      kind: M instanceof AST_Const ? "const" : M instanceof AST_Let ? "let" : "var",
      declarations: M.definitions.map(to_moz)
    };
  });
  const assert_clause_to_moz = (assert_clause) => {
    const assertions = [];
    if (assert_clause) {
      for (const { key, value } of assert_clause.properties) {
        const key_moz = is_basic_identifier_string(key) ? { type: "Identifier", name: key } : { type: "Literal", value: key, raw: JSON.stringify(key) };
        assertions.push({
          type: "ImportAttribute",
          key: key_moz,
          value: to_moz(value)
        });
      }
    }
    return assertions;
  };
  def_to_moz(AST_Export, function To_Moz_ExportDeclaration(M) {
    if (M.exported_names) {
      var first_exported = M.exported_names[0];
      var first_exported_name = first_exported.name;
      if (first_exported_name.name === "*" && !first_exported_name.quote) {
        var foreign_name = first_exported.foreign_name;
        var exported = foreign_name.name === "*" && !foreign_name.quote ? null : to_moz(foreign_name);
        return {
          type: "ExportAllDeclaration",
          source: to_moz(M.module_name),
          exported,
          assertions: assert_clause_to_moz(M.assert_clause)
        };
      }
      return {
        type: "ExportNamedDeclaration",
        specifiers: M.exported_names.map(function(name_mapping) {
          return {
            type: "ExportSpecifier",
            exported: to_moz(name_mapping.foreign_name),
            local: to_moz(name_mapping.name)
          };
        }),
        declaration: to_moz(M.exported_definition),
        source: to_moz(M.module_name),
        assertions: assert_clause_to_moz(M.assert_clause)
      };
    }
    return {
      type: M.is_default ? "ExportDefaultDeclaration" : "ExportNamedDeclaration",
      declaration: to_moz(M.exported_value || M.exported_definition)
    };
  });
  def_to_moz(AST_Import, function To_Moz_ImportDeclaration(M) {
    var specifiers = [];
    if (M.imported_name) {
      specifiers.push({
        type: "ImportDefaultSpecifier",
        local: to_moz(M.imported_name)
      });
    }
    if (M.imported_names) {
      var first_imported_foreign_name = M.imported_names[0].foreign_name;
      if (first_imported_foreign_name.name === "*" && !first_imported_foreign_name.quote) {
        specifiers.push({
          type: "ImportNamespaceSpecifier",
          local: to_moz(M.imported_names[0].name)
        });
      } else {
        M.imported_names.forEach(function(name_mapping) {
          specifiers.push({
            type: "ImportSpecifier",
            local: to_moz(name_mapping.name),
            imported: to_moz(name_mapping.foreign_name)
          });
        });
      }
    }
    return {
      type: "ImportDeclaration",
      specifiers,
      source: to_moz(M.module_name),
      assertions: assert_clause_to_moz(M.assert_clause)
    };
  });
  def_to_moz(AST_ImportMeta, function To_Moz_MetaProperty() {
    return {
      type: "MetaProperty",
      meta: {
        type: "Identifier",
        name: "import"
      },
      property: {
        type: "Identifier",
        name: "meta"
      }
    };
  });
  def_to_moz(AST_Sequence, function To_Moz_SequenceExpression(M) {
    return {
      type: "SequenceExpression",
      expressions: M.expressions.map(to_moz)
    };
  });
  def_to_moz(AST_DotHash, function To_Moz_PrivateMemberExpression(M) {
    return {
      type: "MemberExpression",
      object: to_moz(M.expression),
      computed: false,
      property: {
        type: "PrivateIdentifier",
        name: M.property
      },
      optional: M.optional
    };
  });
  def_to_moz(AST_PropAccess, function To_Moz_MemberExpression(M) {
    var isComputed = M instanceof AST_Sub;
    return {
      type: "MemberExpression",
      object: to_moz(M.expression),
      computed: isComputed,
      property: isComputed ? to_moz(M.property) : { type: "Identifier", name: M.property },
      optional: M.optional
    };
  });
  def_to_moz(AST_Chain, function To_Moz_ChainExpression(M) {
    return {
      type: "ChainExpression",
      expression: to_moz(M.expression)
    };
  });
  def_to_moz(AST_Unary, function To_Moz_Unary(M) {
    return {
      type: M.operator == "++" || M.operator == "--" ? "UpdateExpression" : "UnaryExpression",
      operator: M.operator,
      prefix: M instanceof AST_UnaryPrefix,
      argument: to_moz(M.expression)
    };
  });
  def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M) {
    if (M.operator == "=" && to_moz_in_destructuring()) {
      return {
        type: "AssignmentPattern",
        left: to_moz(M.left),
        right: to_moz(M.right)
      };
    }
    const type = M.operator == "&&" || M.operator == "||" || M.operator === "??" ? "LogicalExpression" : "BinaryExpression";
    return {
      type,
      left: to_moz(M.left),
      operator: M.operator,
      right: to_moz(M.right)
    };
  });
  def_to_moz(AST_PrivateIn, function To_Moz_BinaryExpression_PrivateIn(M) {
    return {
      type: "BinaryExpression",
      left: { type: "PrivateIdentifier", name: M.key.name },
      operator: "in",
      right: to_moz(M.value)
    };
  });
  def_to_moz(AST_Array, function To_Moz_ArrayExpression(M) {
    return {
      type: "ArrayExpression",
      elements: M.elements.map(to_moz)
    };
  });
  def_to_moz(AST_Object, function To_Moz_ObjectExpression(M) {
    return {
      type: "ObjectExpression",
      properties: M.properties.map(to_moz)
    };
  });
  def_to_moz(AST_ObjectProperty, function To_Moz_Property(M, parent) {
    var key = M.key instanceof AST_Node ? to_moz(M.key) : {
      type: "Identifier",
      value: M.key
    };
    if (typeof M.key === "number") {
      key = {
        type: "Literal",
        value: Number(M.key)
      };
    }
    if (typeof M.key === "string") {
      key = {
        type: "Identifier",
        name: M.key
      };
    }
    var kind;
    var string_or_num = typeof M.key === "string" || typeof M.key === "number";
    var computed = string_or_num ? false : !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef;
    if (M instanceof AST_ObjectKeyVal) {
      kind = "init";
      computed = !string_or_num;
    } else if (M instanceof AST_ObjectGetter) {
      kind = "get";
    } else if (M instanceof AST_ObjectSetter) {
      kind = "set";
    }
    if (M instanceof AST_PrivateGetter || M instanceof AST_PrivateSetter) {
      const kind2 = M instanceof AST_PrivateGetter ? "get" : "set";
      return {
        type: "MethodDefinition",
        computed: false,
        kind: kind2,
        static: M.static,
        key: {
          type: "PrivateIdentifier",
          name: M.key.name
        },
        value: to_moz(M.value)
      };
    }
    if (M instanceof AST_ClassPrivateProperty) {
      return {
        type: "PropertyDefinition",
        key: {
          type: "PrivateIdentifier",
          name: M.key.name
        },
        value: to_moz(M.value),
        computed: false,
        static: M.static
      };
    }
    if (M instanceof AST_ClassProperty) {
      return {
        type: "PropertyDefinition",
        key,
        value: to_moz(M.value),
        computed,
        static: M.static
      };
    }
    if (parent instanceof AST_Class) {
      return {
        type: "MethodDefinition",
        computed,
        kind,
        static: M.static,
        key: to_moz(M.key),
        value: to_moz(M.value)
      };
    }
    return {
      type: "Property",
      computed,
      kind,
      key,
      value: to_moz(M.value)
    };
  });
  def_to_moz(AST_ConciseMethod, function To_Moz_MethodDefinition(M, parent) {
    if (parent instanceof AST_Object) {
      return {
        type: "Property",
        computed: !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef,
        kind: "init",
        method: true,
        shorthand: false,
        key: to_moz(M.key),
        value: to_moz(M.value)
      };
    }
    const key = M instanceof AST_PrivateMethod ? {
      type: "PrivateIdentifier",
      name: M.key.name
    } : to_moz(M.key);
    return {
      type: "MethodDefinition",
      kind: M.key === "constructor" ? "constructor" : "method",
      key,
      value: to_moz(M.value),
      computed: !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef,
      static: M.static
    };
  });
  def_to_moz(AST_Class, function To_Moz_Class(M) {
    var type = M instanceof AST_ClassExpression ? "ClassExpression" : "ClassDeclaration";
    return {
      type,
      superClass: to_moz(M.extends),
      id: M.name ? to_moz(M.name) : null,
      body: {
        type: "ClassBody",
        body: M.properties.map(to_moz)
      }
    };
  });
  def_to_moz(AST_ClassStaticBlock, function To_Moz_StaticBlock(M) {
    return {
      type: "StaticBlock",
      body: M.body.map(to_moz)
    };
  });
  def_to_moz(AST_NewTarget, function To_Moz_MetaProperty() {
    return {
      type: "MetaProperty",
      meta: {
        type: "Identifier",
        name: "new"
      },
      property: {
        type: "Identifier",
        name: "target"
      }
    };
  });
  def_to_moz(AST_Symbol, function To_Moz_Identifier(M, parent) {
    if (M instanceof AST_SymbolMethod && parent.quote || (M instanceof AST_SymbolImportForeign || M instanceof AST_SymbolExportForeign || M instanceof AST_SymbolExport) && M.quote) {
      return {
        type: "Literal",
        value: M.name
      };
    }
    var def = M.definition();
    return {
      type: "Identifier",
      name: def ? def.mangled_name || def.name : M.name
    };
  });
  def_to_moz(AST_RegExp, function To_Moz_RegExpLiteral(M) {
    const pattern = M.value.source;
    const flags = M.value.flags;
    return {
      type: "Literal",
      value: null,
      raw: M.print_to_string(),
      regex: { pattern, flags }
    };
  });
  def_to_moz(AST_Constant, function To_Moz_Literal(M) {
    var value = M.value;
    return {
      type: "Literal",
      value,
      raw: M.raw || M.print_to_string()
    };
  });
  def_to_moz(AST_Atom, function To_Moz_Atom(M) {
    return {
      type: "Identifier",
      name: String(M.value)
    };
  });
  def_to_moz(AST_BigInt, (M) => ({
    type: "BigIntLiteral",
    value: M.value
  }));
  AST_Boolean.DEFMETHOD("to_mozilla_ast", AST_Constant.prototype.to_mozilla_ast);
  AST_Null.DEFMETHOD("to_mozilla_ast", AST_Constant.prototype.to_mozilla_ast);
  AST_Hole.DEFMETHOD("to_mozilla_ast", function To_Moz_ArrayHole() {
    return null;
  });
  AST_Block.DEFMETHOD("to_mozilla_ast", AST_BlockStatement.prototype.to_mozilla_ast);
  AST_Lambda.DEFMETHOD("to_mozilla_ast", AST_Function.prototype.to_mozilla_ast);
  function my_start_token(moznode) {
    var loc = moznode.loc, start = loc && loc.start;
    var range = moznode.range;
    return new AST_Token(
      "",
      "",
      start && start.line || 0,
      start && start.column || 0,
      range ? range[0] : moznode.start,
      false,
      [],
      [],
      loc && loc.source
    );
  }
  function my_end_token(moznode) {
    var loc = moznode.loc, end = loc && loc.end;
    var range = moznode.range;
    return new AST_Token(
      "",
      "",
      end && end.line || 0,
      end && end.column || 0,
      range ? range[0] : moznode.end,
      false,
      [],
      [],
      loc && loc.source
    );
  }
  var FROM_MOZ_STACK = null;
  function from_moz(node) {
    FROM_MOZ_STACK.push(node);
    var ret = node != null ? MOZ_TO_ME[node.type](node) : null;
    FROM_MOZ_STACK.pop();
    return ret;
  }
  AST_Node.from_mozilla_ast = function(node) {
    var save_stack = FROM_MOZ_STACK;
    FROM_MOZ_STACK = [];
    var ast = from_moz(node);
    FROM_MOZ_STACK = save_stack;
    return ast;
  };
  function set_moz_loc(mynode, moznode) {
    var start = mynode.start;
    var end = mynode.end;
    if (!(start && end)) {
      return moznode;
    }
    if (start.pos != null && end.endpos != null) {
      moznode.range = [start.pos, end.endpos];
    }
    if (start.line) {
      moznode.loc = {
        start: { line: start.line, column: start.col },
        end: end.endline ? { line: end.endline, column: end.endcol } : null
      };
      if (start.file) {
        moznode.loc.source = start.file;
      }
    }
    return moznode;
  }
  function def_to_moz(mytype, handler) {
    mytype.DEFMETHOD("to_mozilla_ast", function(parent) {
      return set_moz_loc(this, handler(this, parent));
    });
  }
  var TO_MOZ_STACK = null;
  function to_moz(node) {
    if (TO_MOZ_STACK === null) {
      TO_MOZ_STACK = [];
    }
    TO_MOZ_STACK.push(node);
    var ast = node != null ? node.to_mozilla_ast(TO_MOZ_STACK[TO_MOZ_STACK.length - 2]) : null;
    TO_MOZ_STACK.pop();
    if (TO_MOZ_STACK.length === 0) {
      TO_MOZ_STACK = null;
    }
    return ast;
  }
  function to_moz_in_destructuring() {
    var i = TO_MOZ_STACK.length;
    while (i--) {
      if (TO_MOZ_STACK[i] instanceof AST_Destructuring) {
        return true;
      }
    }
    return false;
  }
  function to_moz_block(node) {
    return {
      type: "BlockStatement",
      body: node.body.map(to_moz)
    };
  }
  function to_moz_scope(type, node) {
    var body = node.body.map(to_moz);
    if (node.body[0] instanceof AST_SimpleStatement && node.body[0].body instanceof AST_String) {
      body.unshift(to_moz(new AST_EmptyStatement(node.body[0])));
    }
    return {
      type,
      body
    };
  }
})();

// node_modules/terser/lib/utils/first_in_statement.js
function first_in_statement(stack) {
  let node = stack.parent(-1);
  for (let i = 0, p; p = stack.parent(i); i++) {
    if (p instanceof AST_Statement && p.body === node)
      return true;
    if (p instanceof AST_Sequence && p.expressions[0] === node || p.TYPE === "Call" && p.expression === node || p instanceof AST_PrefixedTemplateString && p.prefix === node || p instanceof AST_Dot && p.expression === node || p instanceof AST_Sub && p.expression === node || p instanceof AST_Chain && p.expression === node || p instanceof AST_Conditional && p.condition === node || p instanceof AST_Binary && p.left === node || p instanceof AST_UnaryPostfix && p.expression === node) {
      node = p;
    } else {
      return false;
    }
  }
}
function left_is_object(node) {
  if (node instanceof AST_Object)
    return true;
  if (node instanceof AST_Sequence)
    return left_is_object(node.expressions[0]);
  if (node.TYPE === "Call")
    return left_is_object(node.expression);
  if (node instanceof AST_PrefixedTemplateString)
    return left_is_object(node.prefix);
  if (node instanceof AST_Dot || node instanceof AST_Sub)
    return left_is_object(node.expression);
  if (node instanceof AST_Chain)
    return left_is_object(node.expression);
  if (node instanceof AST_Conditional)
    return left_is_object(node.condition);
  if (node instanceof AST_Binary)
    return left_is_object(node.left);
  if (node instanceof AST_UnaryPostfix)
    return left_is_object(node.expression);
  return false;
}

// node_modules/terser/lib/output.js
var EXPECT_DIRECTIVE = /^$|[;{][\s\n]*$/;
var CODE_LINE_BREAK = 10;
var CODE_SPACE = 32;
var r_annotation = /[@#]__(PURE|INLINE|NOINLINE)__/g;
function is_some_comments(comment) {
  return (comment.type === "comment2" || comment.type === "comment1") && /@preserve|@copyright|@lic|@cc_on|^\**!/i.test(comment.value);
}
var Rope = class {
  constructor() {
    this.committed = "";
    this.current = "";
  }
  append(str) {
    this.current += str;
  }
  insertAt(char, index) {
    const { committed, current } = this;
    if (index < committed.length) {
      this.committed = committed.slice(0, index) + char + committed.slice(index);
    } else if (index === committed.length) {
      this.committed += char;
    } else {
      index -= committed.length;
      this.committed += current.slice(0, index) + char;
      this.current = current.slice(index);
    }
  }
  charAt(index) {
    const { committed } = this;
    if (index < committed.length)
      return committed[index];
    return this.current[index - committed.length];
  }
  curLength() {
    return this.current.length;
  }
  length() {
    return this.committed.length + this.current.length;
  }
  toString() {
    return this.committed + this.current;
  }
};
function OutputStream(options3) {
  var readonly = !options3;
  options3 = defaults2(options3, {
    ascii_only: false,
    beautify: false,
    braces: false,
    comments: "some",
    ecma: 5,
    ie8: false,
    indent_level: 4,
    indent_start: 0,
    inline_script: true,
    keep_numbers: false,
    keep_quoted_props: false,
    max_line_len: false,
    preamble: null,
    preserve_annotations: false,
    quote_keys: false,
    quote_style: 0,
    safari10: false,
    semicolons: true,
    shebang: true,
    shorthand: void 0,
    source_map: null,
    webkit: false,
    width: 80,
    wrap_iife: false,
    wrap_func_args: true,
    _destroy_ast: false
  }, true);
  if (options3.shorthand === void 0)
    options3.shorthand = options3.ecma > 5;
  var comment_filter = return_false;
  if (options3.comments) {
    let comments = options3.comments;
    if (typeof options3.comments === "string" && /^\/.*\/[a-zA-Z]*$/.test(options3.comments)) {
      var regex_pos = options3.comments.lastIndexOf("/");
      comments = new RegExp(
        options3.comments.substr(1, regex_pos - 1),
        options3.comments.substr(regex_pos + 1)
      );
    }
    if (comments instanceof RegExp) {
      comment_filter = function(comment) {
        return comment.type != "comment5" && comments.test(comment.value);
      };
    } else if (typeof comments === "function") {
      comment_filter = function(comment) {
        return comment.type != "comment5" && comments(this, comment);
      };
    } else if (comments === "some") {
      comment_filter = is_some_comments;
    } else {
      comment_filter = return_true;
    }
  }
  var indentation = 0;
  var current_col = 0;
  var current_line = 1;
  var current_pos = 0;
  var OUTPUT = new Rope();
  let printed_comments = /* @__PURE__ */ new Set();
  var to_utf8 = options3.ascii_only ? function(str, identifier = false, regexp = false) {
    if (options3.ecma >= 2015 && !options3.safari10 && !regexp) {
      str = str.replace(/[\ud800-\udbff][\udc00-\udfff]/g, function(ch) {
        var code = get_full_char_code(ch, 0).toString(16);
        return "\\u{" + code + "}";
      });
    }
    return str.replace(/[\u0000-\u001f\u007f-\uffff]/g, function(ch) {
      var code = ch.charCodeAt(0).toString(16);
      if (code.length <= 2 && !identifier) {
        while (code.length < 2)
          code = "0" + code;
        return "\\x" + code;
      } else {
        while (code.length < 4)
          code = "0" + code;
        return "\\u" + code;
      }
    });
  } : function(str) {
    return str.replace(/[\ud800-\udbff][\udc00-\udfff]|([\ud800-\udbff]|[\udc00-\udfff])/g, function(match2, lone) {
      if (lone) {
        return "\\u" + lone.charCodeAt(0).toString(16);
      }
      return match2;
    });
  };
  function make_string(str, quote) {
    var dq = 0, sq = 0;
    str = str.replace(
      /[\\\b\f\n\r\v\t\x22\x27\u2028\u2029\0\ufeff]/g,
      function(s, i) {
        switch (s) {
          case '"':
            ++dq;
            return '"';
          case "'":
            ++sq;
            return "'";
          case "\\":
            return "\\\\";
          case "\n":
            return "\\n";
          case "\r":
            return "\\r";
          case "	":
            return "\\t";
          case "\b":
            return "\\b";
          case "\f":
            return "\\f";
          case "\v":
            return options3.ie8 ? "\\x0B" : "\\v";
          case "\u2028":
            return "\\u2028";
          case "\u2029":
            return "\\u2029";
          case "\uFEFF":
            return "\\ufeff";
          case "\0":
            return /[0-9]/.test(get_full_char(str, i + 1)) ? "\\x00" : "\\0";
        }
        return s;
      }
    );
    function quote_single() {
      return "'" + str.replace(/\x27/g, "\\'") + "'";
    }
    function quote_double() {
      return '"' + str.replace(/\x22/g, '\\"') + '"';
    }
    function quote_template() {
      return "`" + str.replace(/`/g, "\\`") + "`";
    }
    str = to_utf8(str);
    if (quote === "`")
      return quote_template();
    switch (options3.quote_style) {
      case 1:
        return quote_single();
      case 2:
        return quote_double();
      case 3:
        return quote == "'" ? quote_single() : quote_double();
      default:
        return dq > sq ? quote_single() : quote_double();
    }
  }
  function encode_string(str, quote) {
    var ret = make_string(str, quote);
    if (options3.inline_script) {
      ret = ret.replace(/<\x2f(script)([>\/\t\n\f\r ])/gi, "<\\/$1$2");
      ret = ret.replace(/\x3c!--/g, "\\x3c!--");
      ret = ret.replace(/--\x3e/g, "--\\x3e");
    }
    return ret;
  }
  function make_name(name) {
    name = name.toString();
    name = to_utf8(name, true);
    return name;
  }
  function make_indent(back) {
    return " ".repeat(options3.indent_start + indentation - back * options3.indent_level);
  }
  var has_parens = false;
  var might_need_space = false;
  var might_need_semicolon = false;
  var might_add_newline = 0;
  var need_newline_indented = false;
  var need_space = false;
  var newline_insert = -1;
  var last = "";
  var mapping_token, mapping_name, mappings = options3.source_map && [];
  var do_add_mapping = mappings ? function() {
    mappings.forEach(function(mapping) {
      try {
        let { name, token } = mapping;
        if (token.type == "name" || token.type === "privatename") {
          name = token.value;
        } else if (name instanceof AST_Symbol) {
          name = token.type === "string" ? token.value : name.name;
        }
        options3.source_map.add(
          mapping.token.file,
          mapping.line,
          mapping.col,
          mapping.token.line,
          mapping.token.col,
          is_basic_identifier_string(name) ? name : void 0
        );
      } catch (ex) {
      }
    });
    mappings = [];
  } : noop;
  var ensure_line_len = options3.max_line_len ? function() {
    if (current_col > options3.max_line_len) {
      if (might_add_newline) {
        OUTPUT.insertAt("\n", might_add_newline);
        const curLength = OUTPUT.curLength();
        if (mappings) {
          var delta = curLength - current_col;
          mappings.forEach(function(mapping) {
            mapping.line++;
            mapping.col += delta;
          });
        }
        current_line++;
        current_pos++;
        current_col = curLength;
      }
    }
    if (might_add_newline) {
      might_add_newline = 0;
      do_add_mapping();
    }
  } : noop;
  var requireSemicolonChars = makePredicate("( [ + * / - , . `");
  function print(str) {
    str = String(str);
    var ch = get_full_char(str, 0);
    if (need_newline_indented && ch) {
      need_newline_indented = false;
      if (ch !== "\n") {
        print("\n");
        indent();
      }
    }
    if (need_space && ch) {
      need_space = false;
      if (!/[\s;})]/.test(ch)) {
        space();
      }
    }
    newline_insert = -1;
    var prev = last.charAt(last.length - 1);
    if (might_need_semicolon) {
      might_need_semicolon = false;
      if (prev === ":" && ch === "}" || (!ch || !";}".includes(ch)) && prev !== ";") {
        if (options3.semicolons || requireSemicolonChars.has(ch)) {
          OUTPUT.append(";");
          current_col++;
          current_pos++;
        } else {
          ensure_line_len();
          if (current_col > 0) {
            OUTPUT.append("\n");
            current_pos++;
            current_line++;
            current_col = 0;
          }
          if (/^\s+$/.test(str)) {
            might_need_semicolon = true;
          }
        }
        if (!options3.beautify)
          might_need_space = false;
      }
    }
    if (might_need_space) {
      if (is_identifier_char(prev) && (is_identifier_char(ch) || ch == "\\") || ch == "/" && ch == prev || (ch == "+" || ch == "-") && ch == last) {
        OUTPUT.append(" ");
        current_col++;
        current_pos++;
      }
      might_need_space = false;
    }
    if (mapping_token) {
      mappings.push({
        token: mapping_token,
        name: mapping_name,
        line: current_line,
        col: current_col
      });
      mapping_token = false;
      if (!might_add_newline)
        do_add_mapping();
    }
    OUTPUT.append(str);
    has_parens = str[str.length - 1] == "(";
    current_pos += str.length;
    var a = str.split(/\r?\n/), n = a.length - 1;
    current_line += n;
    current_col += a[0].length;
    if (n > 0) {
      ensure_line_len();
      current_col = a[n].length;
    }
    last = str;
  }
  var star3 = function() {
    print("*");
  };
  var space = options3.beautify ? function() {
    print(" ");
  } : function() {
    might_need_space = true;
  };
  var indent = options3.beautify ? function(half) {
    if (options3.beautify) {
      print(make_indent(half ? 0.5 : 0));
    }
  } : noop;
  var with_indent = options3.beautify ? function(col, cont) {
    if (col === true)
      col = next_indent();
    var save_indentation = indentation;
    indentation = col;
    var ret = cont();
    indentation = save_indentation;
    return ret;
  } : function(col, cont) {
    return cont();
  };
  var newline = options3.beautify ? function() {
    if (newline_insert < 0)
      return print("\n");
    if (OUTPUT.charAt(newline_insert) != "\n") {
      OUTPUT.insertAt("\n", newline_insert);
      current_pos++;
      current_line++;
    }
    newline_insert++;
  } : options3.max_line_len ? function() {
    ensure_line_len();
    might_add_newline = OUTPUT.length();
  } : noop;
  var semicolon2 = options3.beautify ? function() {
    print(";");
  } : function() {
    might_need_semicolon = true;
  };
  function force_semicolon() {
    might_need_semicolon = false;
    print(";");
  }
  function next_indent() {
    return indentation + options3.indent_level;
  }
  function with_block(cont) {
    var ret;
    print("{");
    newline();
    with_indent(next_indent(), function() {
      ret = cont();
    });
    indent();
    print("}");
    return ret;
  }
  function with_parens(cont) {
    print("(");
    var ret = cont();
    print(")");
    return ret;
  }
  function with_square(cont) {
    print("[");
    var ret = cont();
    print("]");
    return ret;
  }
  function comma2() {
    print(",");
    space();
  }
  function colon() {
    print(":");
    space();
  }
  var add_mapping = mappings ? function(token, name) {
    mapping_token = token;
    mapping_name = name;
  } : noop;
  function get2() {
    if (might_add_newline) {
      ensure_line_len();
    }
    return OUTPUT.toString();
  }
  function has_nlb() {
    const output = OUTPUT.toString();
    let n = output.length - 1;
    while (n >= 0) {
      const code = output.charCodeAt(n);
      if (code === CODE_LINE_BREAK) {
        return true;
      }
      if (code !== CODE_SPACE) {
        return false;
      }
      n--;
    }
    return true;
  }
  function filter_comment(comment) {
    if (!options3.preserve_annotations) {
      comment = comment.replace(r_annotation, " ");
    }
    if (/^\s*$/.test(comment)) {
      return "";
    }
    return comment.replace(/(<\s*\/\s*)(script)/i, "<\\/$2");
  }
  function prepend_comments(node) {
    var self2 = this;
    var start = node.start;
    if (!start)
      return;
    var printed_comments2 = self2.printed_comments;
    const return_with_value = node instanceof AST_Exit && node.value;
    if (start.comments_before && printed_comments2.has(start.comments_before)) {
      if (return_with_value) {
        start.comments_before = [];
      } else {
        return;
      }
    }
    var comments = start.comments_before;
    if (!comments) {
      comments = start.comments_before = [];
    }
    printed_comments2.add(comments);
    if (return_with_value) {
      var tw = new TreeWalker(function(node2) {
        var parent = tw.parent();
        if (parent instanceof AST_Exit || parent instanceof AST_Binary && parent.left === node2 || parent.TYPE == "Call" && parent.expression === node2 || parent instanceof AST_Conditional && parent.condition === node2 || parent instanceof AST_Dot && parent.expression === node2 || parent instanceof AST_Sequence && parent.expressions[0] === node2 || parent instanceof AST_Sub && parent.expression === node2 || parent instanceof AST_UnaryPostfix) {
          if (!node2.start)
            return;
          var text = node2.start.comments_before;
          if (text && !printed_comments2.has(text)) {
            printed_comments2.add(text);
            comments = comments.concat(text);
          }
        } else {
          return true;
        }
      });
      tw.push(node);
      node.value.walk(tw);
    }
    if (current_pos == 0) {
      if (comments.length > 0 && options3.shebang && comments[0].type === "comment5" && !printed_comments2.has(comments[0])) {
        print("#!" + comments.shift().value + "\n");
        indent();
      }
      var preamble = options3.preamble;
      if (preamble) {
        print(preamble.replace(/\r\n?|[\n\u2028\u2029]|\s*$/g, "\n"));
      }
    }
    comments = comments.filter(comment_filter, node).filter((c) => !printed_comments2.has(c));
    if (comments.length == 0)
      return;
    var last_nlb = has_nlb();
    comments.forEach(function(c, i) {
      printed_comments2.add(c);
      if (!last_nlb) {
        if (c.nlb) {
          print("\n");
          indent();
          last_nlb = true;
        } else if (i > 0) {
          space();
        }
      }
      if (/comment[134]/.test(c.type)) {
        var value = filter_comment(c.value);
        if (value) {
          print("//" + value + "\n");
          indent();
        }
        last_nlb = true;
      } else if (c.type == "comment2") {
        var value = filter_comment(c.value);
        if (value) {
          print("/*" + value + "*/");
        }
        last_nlb = false;
      }
    });
    if (!last_nlb) {
      if (start.nlb) {
        print("\n");
        indent();
      } else {
        space();
      }
    }
  }
  function append_comments(node, tail) {
    var self2 = this;
    var token = node.end;
    if (!token)
      return;
    var printed_comments2 = self2.printed_comments;
    var comments = token[tail ? "comments_before" : "comments_after"];
    if (!comments || printed_comments2.has(comments))
      return;
    if (!(node instanceof AST_Statement || comments.every(
      (c) => !/comment[134]/.test(c.type)
    )))
      return;
    printed_comments2.add(comments);
    var insert2 = OUTPUT.length();
    comments.filter(comment_filter, node).forEach(function(c, i) {
      if (printed_comments2.has(c))
        return;
      printed_comments2.add(c);
      need_space = false;
      if (need_newline_indented) {
        print("\n");
        indent();
        need_newline_indented = false;
      } else if (c.nlb && (i > 0 || !has_nlb())) {
        print("\n");
        indent();
      } else if (i > 0 || !tail) {
        space();
      }
      if (/comment[134]/.test(c.type)) {
        const value = filter_comment(c.value);
        if (value) {
          print("//" + value);
        }
        need_newline_indented = true;
      } else if (c.type == "comment2") {
        const value = filter_comment(c.value);
        if (value) {
          print("/*" + value + "*/");
        }
        need_space = true;
      }
    });
    if (OUTPUT.length() > insert2)
      newline_insert = insert2;
  }
  const gc_scope = options3["_destroy_ast"] ? function gc_scope2(scope) {
    scope.body.length = 0;
    scope.argnames.length = 0;
  } : noop;
  var stack = [];
  return {
    get: get2,
    toString: get2,
    indent,
    in_directive: false,
    use_asm: null,
    active_scope: null,
    indentation: function() {
      return indentation;
    },
    current_width: function() {
      return current_col - indentation;
    },
    should_break: function() {
      return options3.width && this.current_width() >= options3.width;
    },
    has_parens: function() {
      return has_parens;
    },
    newline,
    print,
    star: star3,
    space,
    comma: comma2,
    colon,
    last: function() {
      return last;
    },
    semicolon: semicolon2,
    force_semicolon,
    to_utf8,
    print_name: function(name) {
      print(make_name(name));
    },
    print_string: function(str, quote, escape_directive) {
      var encoded = encode_string(str, quote);
      if (escape_directive === true && !encoded.includes("\\")) {
        if (!EXPECT_DIRECTIVE.test(OUTPUT.toString())) {
          force_semicolon();
        }
        force_semicolon();
      }
      print(encoded);
    },
    print_template_string_chars: function(str) {
      var encoded = encode_string(str, "`").replace(/\${/g, "\\${");
      return print(encoded.substr(1, encoded.length - 2));
    },
    encode_string,
    next_indent,
    with_indent,
    with_block,
    with_parens,
    with_square,
    add_mapping,
    option: function(opt) {
      return options3[opt];
    },
    gc_scope,
    printed_comments,
    prepend_comments: readonly ? noop : prepend_comments,
    append_comments: readonly || comment_filter === return_false ? noop : append_comments,
    line: function() {
      return current_line;
    },
    col: function() {
      return current_col;
    },
    pos: function() {
      return current_pos;
    },
    push_node: function(node) {
      stack.push(node);
    },
    pop_node: function() {
      return stack.pop();
    },
    parent: function(n) {
      return stack[stack.length - 2 - (n || 0)];
    }
  };
}
(function() {
  function DEFPRINT(nodetype, generator) {
    nodetype.DEFMETHOD("_codegen", generator);
  }
  AST_Node.DEFMETHOD("print", function(output, force_parens) {
    var self2 = this, generator = self2._codegen;
    if (self2 instanceof AST_Scope) {
      output.active_scope = self2;
    } else if (!output.use_asm && self2 instanceof AST_Directive && self2.value == "use asm") {
      output.use_asm = output.active_scope;
    }
    function doit() {
      output.prepend_comments(self2);
      self2.add_source_map(output);
      generator(self2, output);
      output.append_comments(self2);
    }
    output.push_node(self2);
    if (force_parens || self2.needs_parens(output)) {
      output.with_parens(doit);
    } else {
      doit();
    }
    output.pop_node();
    if (self2 === output.use_asm) {
      output.use_asm = null;
    }
  });
  AST_Node.DEFMETHOD("_print", AST_Node.prototype.print);
  AST_Node.DEFMETHOD("print_to_string", function(options3) {
    var output = OutputStream(options3);
    this.print(output);
    return output.get();
  });
  function PARENS(nodetype, func) {
    if (Array.isArray(nodetype)) {
      nodetype.forEach(function(nodetype2) {
        PARENS(nodetype2, func);
      });
    } else {
      nodetype.DEFMETHOD("needs_parens", func);
    }
  }
  PARENS(AST_Node, return_false);
  PARENS(AST_Function, function(output) {
    if (!output.has_parens() && first_in_statement(output)) {
      return true;
    }
    if (output.option("webkit")) {
      var p = output.parent();
      if (p instanceof AST_PropAccess && p.expression === this) {
        return true;
      }
    }
    if (output.option("wrap_iife")) {
      var p = output.parent();
      if (p instanceof AST_Call && p.expression === this) {
        return true;
      }
    }
    if (output.option("wrap_func_args")) {
      var p = output.parent();
      if (p instanceof AST_Call && p.args.includes(this)) {
        return true;
      }
    }
    return false;
  });
  PARENS(AST_Arrow, function(output) {
    var p = output.parent();
    if (output.option("wrap_func_args") && p instanceof AST_Call && p.args.includes(this)) {
      return true;
    }
    return p instanceof AST_PropAccess && p.expression === this;
  });
  PARENS(AST_Object, function(output) {
    return !output.has_parens() && first_in_statement(output);
  });
  PARENS(AST_ClassExpression, first_in_statement);
  PARENS(AST_Unary, function(output) {
    var p = output.parent();
    return p instanceof AST_PropAccess && p.expression === this || p instanceof AST_Call && p.expression === this || p instanceof AST_Binary && p.operator === "**" && this instanceof AST_UnaryPrefix && p.left === this && this.operator !== "++" && this.operator !== "--";
  });
  PARENS(AST_Await, function(output) {
    var p = output.parent();
    return p instanceof AST_PropAccess && p.expression === this || p instanceof AST_Call && p.expression === this || p instanceof AST_Binary && p.operator === "**" && p.left === this || output.option("safari10") && p instanceof AST_UnaryPrefix;
  });
  PARENS(AST_Sequence, function(output) {
    var p = output.parent();
    return p instanceof AST_Call || p instanceof AST_Unary || p instanceof AST_Binary || p instanceof AST_VarDef || p instanceof AST_PropAccess || p instanceof AST_Array || p instanceof AST_ObjectProperty || p instanceof AST_Conditional || p instanceof AST_Arrow || p instanceof AST_DefaultAssign || p instanceof AST_Expansion || p instanceof AST_ForOf && this === p.object || p instanceof AST_Yield || p instanceof AST_Export;
  });
  PARENS(AST_Binary, function(output) {
    var p = output.parent();
    if (p instanceof AST_Call && p.expression === this)
      return true;
    if (p instanceof AST_Unary)
      return true;
    if (p instanceof AST_PropAccess && p.expression === this)
      return true;
    if (p instanceof AST_Binary) {
      const po = p.operator;
      const so = this.operator;
      if (so === "??" && (po === "||" || po === "&&")) {
        return true;
      }
      if (po === "??" && (so === "||" || so === "&&")) {
        return true;
      }
      const pp = PRECEDENCE[po];
      const sp = PRECEDENCE[so];
      if (pp > sp || pp == sp && (this === p.right || po == "**")) {
        return true;
      }
    }
  });
  PARENS(AST_Yield, function(output) {
    var p = output.parent();
    if (p instanceof AST_Binary && p.operator !== "=")
      return true;
    if (p instanceof AST_Call && p.expression === this)
      return true;
    if (p instanceof AST_Conditional && p.condition === this)
      return true;
    if (p instanceof AST_Unary)
      return true;
    if (p instanceof AST_PropAccess && p.expression === this)
      return true;
  });
  PARENS(AST_Chain, function(output) {
    var p = output.parent();
    if (!(p instanceof AST_Call || p instanceof AST_PropAccess))
      return false;
    return p.expression === this;
  });
  PARENS(AST_PropAccess, function(output) {
    var p = output.parent();
    if (p instanceof AST_New && p.expression === this) {
      return walk(this, (node) => {
        if (node instanceof AST_Scope)
          return true;
        if (node instanceof AST_Call) {
          return walk_abort;
        }
      });
    }
  });
  PARENS(AST_Call, function(output) {
    var p = output.parent(), p1;
    if (p instanceof AST_New && p.expression === this || p instanceof AST_Export && p.is_default && this.expression instanceof AST_Function)
      return true;
    return this.expression instanceof AST_Function && p instanceof AST_PropAccess && p.expression === this && (p1 = output.parent(1)) instanceof AST_Assign && p1.left === p;
  });
  PARENS(AST_New, function(output) {
    var p = output.parent();
    if (this.args.length === 0 && (p instanceof AST_PropAccess || p instanceof AST_Call && p.expression === this || p instanceof AST_PrefixedTemplateString && p.prefix === this))
      return true;
  });
  PARENS(AST_Number, function(output) {
    var p = output.parent();
    if (p instanceof AST_PropAccess && p.expression === this) {
      var value = this.getValue();
      if (value < 0 || /^0/.test(make_num(value))) {
        return true;
      }
    }
  });
  PARENS(AST_BigInt, function(output) {
    var p = output.parent();
    if (p instanceof AST_PropAccess && p.expression === this) {
      var value = this.getValue();
      if (value.startsWith("-")) {
        return true;
      }
    }
  });
  PARENS([AST_Assign, AST_Conditional], function(output) {
    var p = output.parent();
    if (p instanceof AST_Unary)
      return true;
    if (p instanceof AST_Binary && !(p instanceof AST_Assign))
      return true;
    if (p instanceof AST_Call && p.expression === this)
      return true;
    if (p instanceof AST_Conditional && p.condition === this)
      return true;
    if (p instanceof AST_PropAccess && p.expression === this)
      return true;
    if (this instanceof AST_Assign && this.left instanceof AST_Destructuring && this.left.is_array === false)
      return true;
  });
  DEFPRINT(AST_Directive, function(self2, output) {
    output.print_string(self2.value, self2.quote);
    output.semicolon();
  });
  DEFPRINT(AST_Expansion, function(self2, output) {
    output.print("...");
    self2.expression.print(output);
  });
  DEFPRINT(AST_Destructuring, function(self2, output) {
    output.print(self2.is_array ? "[" : "{");
    var len = self2.names.length;
    self2.names.forEach(function(name, i) {
      if (i > 0)
        output.comma();
      name.print(output);
      if (i == len - 1 && name instanceof AST_Hole)
        output.comma();
    });
    output.print(self2.is_array ? "]" : "}");
  });
  DEFPRINT(AST_Debugger, function(self2, output) {
    output.print("debugger");
    output.semicolon();
  });
  function display_body(body, is_toplevel, output, allow_directives) {
    var last = body.length - 1;
    output.in_directive = allow_directives;
    body.forEach(function(stmt, i) {
      if (output.in_directive === true && !(stmt instanceof AST_Directive || stmt instanceof AST_EmptyStatement || stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String)) {
        output.in_directive = false;
      }
      if (!(stmt instanceof AST_EmptyStatement)) {
        output.indent();
        stmt.print(output);
        if (!(i == last && is_toplevel)) {
          output.newline();
          if (is_toplevel)
            output.newline();
        }
      }
      if (output.in_directive === true && stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String) {
        output.in_directive = false;
      }
    });
    output.in_directive = false;
  }
  AST_StatementWithBody.DEFMETHOD("_do_print_body", function(output) {
    print_maybe_braced_body(this.body, output);
  });
  DEFPRINT(AST_Statement, function(self2, output) {
    self2.body.print(output);
    output.semicolon();
  });
  DEFPRINT(AST_Toplevel, function(self2, output) {
    display_body(self2.body, true, output, true);
    output.print("");
  });
  DEFPRINT(AST_LabeledStatement, function(self2, output) {
    self2.label.print(output);
    output.colon();
    self2.body.print(output);
  });
  DEFPRINT(AST_SimpleStatement, function(self2, output) {
    self2.body.print(output);
    output.semicolon();
  });
  function print_braced_empty(self2, output) {
    output.print("{");
    output.with_indent(output.next_indent(), function() {
      output.append_comments(self2, true);
    });
    output.add_mapping(self2.end);
    output.print("}");
  }
  function print_braced(self2, output, allow_directives) {
    if (self2.body.length > 0) {
      output.with_block(function() {
        display_body(self2.body, false, output, allow_directives);
        output.add_mapping(self2.end);
      });
    } else
      print_braced_empty(self2, output);
  }
  DEFPRINT(AST_BlockStatement, function(self2, output) {
    print_braced(self2, output);
  });
  DEFPRINT(AST_EmptyStatement, function(self2, output) {
    output.semicolon();
  });
  DEFPRINT(AST_Do, function(self2, output) {
    output.print("do");
    output.space();
    make_block(self2.body, output);
    output.space();
    output.print("while");
    output.space();
    output.with_parens(function() {
      self2.condition.print(output);
    });
    output.semicolon();
  });
  DEFPRINT(AST_While, function(self2, output) {
    output.print("while");
    output.space();
    output.with_parens(function() {
      self2.condition.print(output);
    });
    output.space();
    self2._do_print_body(output);
  });
  DEFPRINT(AST_For, function(self2, output) {
    output.print("for");
    output.space();
    output.with_parens(function() {
      if (self2.init) {
        if (self2.init instanceof AST_Definitions) {
          self2.init.print(output);
        } else {
          parenthesize_for_noin(self2.init, output, true);
        }
        output.print(";");
        output.space();
      } else {
        output.print(";");
      }
      if (self2.condition) {
        self2.condition.print(output);
        output.print(";");
        output.space();
      } else {
        output.print(";");
      }
      if (self2.step) {
        self2.step.print(output);
      }
    });
    output.space();
    self2._do_print_body(output);
  });
  DEFPRINT(AST_ForIn, function(self2, output) {
    output.print("for");
    if (self2.await) {
      output.space();
      output.print("await");
    }
    output.space();
    output.with_parens(function() {
      self2.init.print(output);
      output.space();
      output.print(self2 instanceof AST_ForOf ? "of" : "in");
      output.space();
      self2.object.print(output);
    });
    output.space();
    self2._do_print_body(output);
  });
  DEFPRINT(AST_With, function(self2, output) {
    output.print("with");
    output.space();
    output.with_parens(function() {
      self2.expression.print(output);
    });
    output.space();
    self2._do_print_body(output);
  });
  AST_Lambda.DEFMETHOD("_do_print", function(output, nokeyword) {
    var self2 = this;
    if (!nokeyword) {
      if (self2.async) {
        output.print("async");
        output.space();
      }
      output.print("function");
      if (self2.is_generator) {
        output.star();
      }
      if (self2.name) {
        output.space();
      }
    }
    if (self2.name instanceof AST_Symbol) {
      self2.name.print(output);
    } else if (nokeyword && self2.name instanceof AST_Node) {
      output.with_square(function() {
        self2.name.print(output);
      });
    }
    output.with_parens(function() {
      self2.argnames.forEach(function(arg, i) {
        if (i)
          output.comma();
        arg.print(output);
      });
    });
    output.space();
    print_braced(self2, output, true);
  });
  DEFPRINT(AST_Lambda, function(self2, output) {
    self2._do_print(output);
    output.gc_scope(self2);
  });
  DEFPRINT(AST_PrefixedTemplateString, function(self2, output) {
    var tag = self2.prefix;
    var parenthesize_tag = tag instanceof AST_Lambda || tag instanceof AST_Binary || tag instanceof AST_Conditional || tag instanceof AST_Sequence || tag instanceof AST_Unary || tag instanceof AST_Dot && tag.expression instanceof AST_Object;
    if (parenthesize_tag)
      output.print("(");
    self2.prefix.print(output);
    if (parenthesize_tag)
      output.print(")");
    self2.template_string.print(output);
  });
  DEFPRINT(AST_TemplateString, function(self2, output) {
    var is_tagged = output.parent() instanceof AST_PrefixedTemplateString;
    output.print("`");
    for (var i = 0; i < self2.segments.length; i++) {
      if (!(self2.segments[i] instanceof AST_TemplateSegment)) {
        output.print("${");
        self2.segments[i].print(output);
        output.print("}");
      } else if (is_tagged) {
        output.print(self2.segments[i].raw);
      } else {
        output.print_template_string_chars(self2.segments[i].value);
      }
    }
    output.print("`");
  });
  DEFPRINT(AST_TemplateSegment, function(self2, output) {
    output.print_template_string_chars(self2.value);
  });
  AST_Arrow.DEFMETHOD("_do_print", function(output) {
    var self2 = this;
    var parent = output.parent();
    var needs_parens = parent instanceof AST_Binary && !(parent instanceof AST_Assign) || parent instanceof AST_Unary || parent instanceof AST_Call && self2 === parent.expression;
    if (needs_parens) {
      output.print("(");
    }
    if (self2.async) {
      output.print("async");
      output.space();
    }
    if (self2.argnames.length === 1 && self2.argnames[0] instanceof AST_Symbol) {
      self2.argnames[0].print(output);
    } else {
      output.with_parens(function() {
        self2.argnames.forEach(function(arg, i) {
          if (i)
            output.comma();
          arg.print(output);
        });
      });
    }
    output.space();
    output.print("=>");
    output.space();
    const first_statement = self2.body[0];
    if (self2.body.length === 1 && first_statement instanceof AST_Return) {
      const returned = first_statement.value;
      if (!returned) {
        output.print("{}");
      } else if (left_is_object(returned)) {
        output.print("(");
        returned.print(output);
        output.print(")");
      } else {
        returned.print(output);
      }
    } else {
      print_braced(self2, output);
    }
    if (needs_parens) {
      output.print(")");
    }
    output.gc_scope(self2);
  });
  AST_Exit.DEFMETHOD("_do_print", function(output, kind) {
    output.print(kind);
    if (this.value) {
      output.space();
      const comments = this.value.start.comments_before;
      if (comments && comments.length && !output.printed_comments.has(comments)) {
        output.print("(");
        this.value.print(output);
        output.print(")");
      } else {
        this.value.print(output);
      }
    }
    output.semicolon();
  });
  DEFPRINT(AST_Return, function(self2, output) {
    self2._do_print(output, "return");
  });
  DEFPRINT(AST_Throw, function(self2, output) {
    self2._do_print(output, "throw");
  });
  DEFPRINT(AST_Yield, function(self2, output) {
    var star3 = self2.is_star ? "*" : "";
    output.print("yield" + star3);
    if (self2.expression) {
      output.space();
      self2.expression.print(output);
    }
  });
  DEFPRINT(AST_Await, function(self2, output) {
    output.print("await");
    output.space();
    var e = self2.expression;
    var parens = !(e instanceof AST_Call || e instanceof AST_SymbolRef || e instanceof AST_PropAccess || e instanceof AST_Unary || e instanceof AST_Constant || e instanceof AST_Await || e instanceof AST_Object);
    if (parens)
      output.print("(");
    self2.expression.print(output);
    if (parens)
      output.print(")");
  });
  AST_LoopControl.DEFMETHOD("_do_print", function(output, kind) {
    output.print(kind);
    if (this.label) {
      output.space();
      this.label.print(output);
    }
    output.semicolon();
  });
  DEFPRINT(AST_Break, function(self2, output) {
    self2._do_print(output, "break");
  });
  DEFPRINT(AST_Continue, function(self2, output) {
    self2._do_print(output, "continue");
  });
  function make_then(self2, output) {
    var b = self2.body;
    if (output.option("braces") || output.option("ie8") && b instanceof AST_Do)
      return make_block(b, output);
    if (!b)
      return output.force_semicolon();
    while (true) {
      if (b instanceof AST_If) {
        if (!b.alternative) {
          make_block(self2.body, output);
          return;
        }
        b = b.alternative;
      } else if (b instanceof AST_StatementWithBody) {
        b = b.body;
      } else
        break;
    }
    print_maybe_braced_body(self2.body, output);
  }
  DEFPRINT(AST_If, function(self2, output) {
    output.print("if");
    output.space();
    output.with_parens(function() {
      self2.condition.print(output);
    });
    output.space();
    if (self2.alternative) {
      make_then(self2, output);
      output.space();
      output.print("else");
      output.space();
      if (self2.alternative instanceof AST_If)
        self2.alternative.print(output);
      else
        print_maybe_braced_body(self2.alternative, output);
    } else {
      self2._do_print_body(output);
    }
  });
  DEFPRINT(AST_Switch, function(self2, output) {
    output.print("switch");
    output.space();
    output.with_parens(function() {
      self2.expression.print(output);
    });
    output.space();
    var last = self2.body.length - 1;
    if (last < 0)
      print_braced_empty(self2, output);
    else
      output.with_block(function() {
        self2.body.forEach(function(branch, i) {
          output.indent(true);
          branch.print(output);
          if (i < last && branch.body.length > 0)
            output.newline();
        });
      });
  });
  AST_SwitchBranch.DEFMETHOD("_do_print_body", function(output) {
    output.newline();
    this.body.forEach(function(stmt) {
      output.indent();
      stmt.print(output);
      output.newline();
    });
  });
  DEFPRINT(AST_Default, function(self2, output) {
    output.print("default:");
    self2._do_print_body(output);
  });
  DEFPRINT(AST_Case, function(self2, output) {
    output.print("case");
    output.space();
    self2.expression.print(output);
    output.print(":");
    self2._do_print_body(output);
  });
  DEFPRINT(AST_Try, function(self2, output) {
    output.print("try");
    output.space();
    self2.body.print(output);
    if (self2.bcatch) {
      output.space();
      self2.bcatch.print(output);
    }
    if (self2.bfinally) {
      output.space();
      self2.bfinally.print(output);
    }
  });
  DEFPRINT(AST_TryBlock, function(self2, output) {
    print_braced(self2, output);
  });
  DEFPRINT(AST_Catch, function(self2, output) {
    output.print("catch");
    if (self2.argname) {
      output.space();
      output.with_parens(function() {
        self2.argname.print(output);
      });
    }
    output.space();
    print_braced(self2, output);
  });
  DEFPRINT(AST_Finally, function(self2, output) {
    output.print("finally");
    output.space();
    print_braced(self2, output);
  });
  AST_Definitions.DEFMETHOD("_do_print", function(output, kind) {
    output.print(kind);
    output.space();
    this.definitions.forEach(function(def, i) {
      if (i)
        output.comma();
      def.print(output);
    });
    var p = output.parent();
    var in_for = p instanceof AST_For || p instanceof AST_ForIn;
    var output_semicolon = !in_for || p && p.init !== this;
    if (output_semicolon)
      output.semicolon();
  });
  DEFPRINT(AST_Let, function(self2, output) {
    self2._do_print(output, "let");
  });
  DEFPRINT(AST_Var, function(self2, output) {
    self2._do_print(output, "var");
  });
  DEFPRINT(AST_Const, function(self2, output) {
    self2._do_print(output, "const");
  });
  DEFPRINT(AST_Import, function(self2, output) {
    output.print("import");
    output.space();
    if (self2.imported_name) {
      self2.imported_name.print(output);
    }
    if (self2.imported_name && self2.imported_names) {
      output.print(",");
      output.space();
    }
    if (self2.imported_names) {
      if (self2.imported_names.length === 1 && self2.imported_names[0].foreign_name.name === "*" && !self2.imported_names[0].foreign_name.quote) {
        self2.imported_names[0].print(output);
      } else {
        output.print("{");
        self2.imported_names.forEach(function(name_import, i) {
          output.space();
          name_import.print(output);
          if (i < self2.imported_names.length - 1) {
            output.print(",");
          }
        });
        output.space();
        output.print("}");
      }
    }
    if (self2.imported_name || self2.imported_names) {
      output.space();
      output.print("from");
      output.space();
    }
    self2.module_name.print(output);
    if (self2.assert_clause) {
      output.print("assert");
      self2.assert_clause.print(output);
    }
    output.semicolon();
  });
  DEFPRINT(AST_ImportMeta, function(self2, output) {
    output.print("import.meta");
  });
  DEFPRINT(AST_NameMapping, function(self2, output) {
    var is_import = output.parent() instanceof AST_Import;
    var definition = self2.name.definition();
    var foreign_name = self2.foreign_name;
    var names_are_different = (definition && definition.mangled_name || self2.name.name) !== foreign_name.name;
    if (!names_are_different && foreign_name.name === "*" && foreign_name.quote != self2.name.quote) {
      names_are_different = true;
    }
    var foreign_name_is_name = foreign_name.quote == null;
    if (names_are_different) {
      if (is_import) {
        if (foreign_name_is_name) {
          output.print(foreign_name.name);
        } else {
          output.print_string(foreign_name.name, foreign_name.quote);
        }
      } else {
        if (self2.name.quote == null) {
          self2.name.print(output);
        } else {
          output.print_string(self2.name.name, self2.name.quote);
        }
      }
      output.space();
      output.print("as");
      output.space();
      if (is_import) {
        self2.name.print(output);
      } else {
        if (foreign_name_is_name) {
          output.print(foreign_name.name);
        } else {
          output.print_string(foreign_name.name, foreign_name.quote);
        }
      }
    } else {
      if (self2.name.quote == null) {
        self2.name.print(output);
      } else {
        output.print_string(self2.name.name, self2.name.quote);
      }
    }
  });
  DEFPRINT(AST_Export, function(self2, output) {
    output.print("export");
    output.space();
    if (self2.is_default) {
      output.print("default");
      output.space();
    }
    if (self2.exported_names) {
      if (self2.exported_names.length === 1 && self2.exported_names[0].name.name === "*" && !self2.exported_names[0].name.quote) {
        self2.exported_names[0].print(output);
      } else {
        output.print("{");
        self2.exported_names.forEach(function(name_export, i) {
          output.space();
          name_export.print(output);
          if (i < self2.exported_names.length - 1) {
            output.print(",");
          }
        });
        output.space();
        output.print("}");
      }
    } else if (self2.exported_value) {
      self2.exported_value.print(output);
    } else if (self2.exported_definition) {
      self2.exported_definition.print(output);
      if (self2.exported_definition instanceof AST_Definitions)
        return;
    }
    if (self2.module_name) {
      output.space();
      output.print("from");
      output.space();
      self2.module_name.print(output);
    }
    if (self2.assert_clause) {
      output.print("assert");
      self2.assert_clause.print(output);
    }
    if (self2.exported_value && !(self2.exported_value instanceof AST_Defun || self2.exported_value instanceof AST_Function || self2.exported_value instanceof AST_Class) || self2.module_name || self2.exported_names) {
      output.semicolon();
    }
  });
  function parenthesize_for_noin(node, output, noin) {
    var parens = false;
    if (noin) {
      parens = walk(node, (node2) => {
        if (node2 instanceof AST_Scope && !(node2 instanceof AST_Arrow)) {
          return true;
        }
        if (node2 instanceof AST_Binary && node2.operator == "in" || node2 instanceof AST_PrivateIn) {
          return walk_abort;
        }
      });
    }
    node.print(output, parens);
  }
  DEFPRINT(AST_VarDef, function(self2, output) {
    self2.name.print(output);
    if (self2.value) {
      output.space();
      output.print("=");
      output.space();
      var p = output.parent(1);
      var noin = p instanceof AST_For || p instanceof AST_ForIn;
      parenthesize_for_noin(self2.value, output, noin);
    }
  });
  DEFPRINT(AST_Call, function(self2, output) {
    self2.expression.print(output);
    if (self2 instanceof AST_New && self2.args.length === 0)
      return;
    if (self2.expression instanceof AST_Call || self2.expression instanceof AST_Lambda) {
      output.add_mapping(self2.start);
    }
    if (self2.optional)
      output.print("?.");
    output.with_parens(function() {
      self2.args.forEach(function(expr, i) {
        if (i)
          output.comma();
        expr.print(output);
      });
    });
  });
  DEFPRINT(AST_New, function(self2, output) {
    output.print("new");
    output.space();
    AST_Call.prototype._codegen(self2, output);
  });
  AST_Sequence.DEFMETHOD("_do_print", function(output) {
    this.expressions.forEach(function(node, index) {
      if (index > 0) {
        output.comma();
        if (output.should_break()) {
          output.newline();
          output.indent();
        }
      }
      node.print(output);
    });
  });
  DEFPRINT(AST_Sequence, function(self2, output) {
    self2._do_print(output);
  });
  DEFPRINT(AST_Dot, function(self2, output) {
    var expr = self2.expression;
    expr.print(output);
    var prop = self2.property;
    var print_computed = ALL_RESERVED_WORDS.has(prop) ? output.option("ie8") : !is_identifier_string(
      prop,
      output.option("ecma") >= 2015 || output.option("safari10")
    );
    if (self2.optional)
      output.print("?.");
    if (print_computed) {
      output.print("[");
      output.add_mapping(self2.end);
      output.print_string(prop);
      output.print("]");
    } else {
      if (expr instanceof AST_Number && expr.getValue() >= 0) {
        if (!/[xa-f.)]/i.test(output.last())) {
          output.print(".");
        }
      }
      if (!self2.optional)
        output.print(".");
      output.add_mapping(self2.end);
      output.print_name(prop);
    }
  });
  DEFPRINT(AST_DotHash, function(self2, output) {
    var expr = self2.expression;
    expr.print(output);
    var prop = self2.property;
    if (self2.optional)
      output.print("?");
    output.print(".#");
    output.add_mapping(self2.end);
    output.print_name(prop);
  });
  DEFPRINT(AST_Sub, function(self2, output) {
    self2.expression.print(output);
    if (self2.optional)
      output.print("?.");
    output.print("[");
    self2.property.print(output);
    output.print("]");
  });
  DEFPRINT(AST_Chain, function(self2, output) {
    self2.expression.print(output);
  });
  DEFPRINT(AST_UnaryPrefix, function(self2, output) {
    var op = self2.operator;
    output.print(op);
    if (/^[a-z]/i.test(op) || /[+-]$/.test(op) && self2.expression instanceof AST_UnaryPrefix && /^[+-]/.test(self2.expression.operator)) {
      output.space();
    }
    self2.expression.print(output);
  });
  DEFPRINT(AST_UnaryPostfix, function(self2, output) {
    self2.expression.print(output);
    output.print(self2.operator);
  });
  DEFPRINT(AST_Binary, function(self2, output) {
    var op = self2.operator;
    self2.left.print(output);
    if (op[0] == ">" && self2.left instanceof AST_UnaryPostfix && self2.left.operator == "--") {
      output.print(" ");
    } else {
      output.space();
    }
    output.print(op);
    if ((op == "<" || op == "<<") && self2.right instanceof AST_UnaryPrefix && self2.right.operator == "!" && self2.right.expression instanceof AST_UnaryPrefix && self2.right.expression.operator == "--") {
      output.print(" ");
    } else {
      output.space();
    }
    self2.right.print(output);
  });
  DEFPRINT(AST_Conditional, function(self2, output) {
    self2.condition.print(output);
    output.space();
    output.print("?");
    output.space();
    self2.consequent.print(output);
    output.space();
    output.colon();
    self2.alternative.print(output);
  });
  DEFPRINT(AST_Array, function(self2, output) {
    output.with_square(function() {
      var a = self2.elements, len = a.length;
      if (len > 0)
        output.space();
      a.forEach(function(exp, i) {
        if (i)
          output.comma();
        exp.print(output);
        if (i === len - 1 && exp instanceof AST_Hole)
          output.comma();
      });
      if (len > 0)
        output.space();
    });
  });
  DEFPRINT(AST_Object, function(self2, output) {
    if (self2.properties.length > 0)
      output.with_block(function() {
        self2.properties.forEach(function(prop, i) {
          if (i) {
            output.print(",");
            output.newline();
          }
          output.indent();
          prop.print(output);
        });
        output.newline();
      });
    else
      print_braced_empty(self2, output);
  });
  DEFPRINT(AST_Class, function(self2, output) {
    output.print("class");
    output.space();
    if (self2.name) {
      self2.name.print(output);
      output.space();
    }
    if (self2.extends) {
      var parens = !(self2.extends instanceof AST_SymbolRef) && !(self2.extends instanceof AST_PropAccess) && !(self2.extends instanceof AST_ClassExpression) && !(self2.extends instanceof AST_Function);
      output.print("extends");
      if (parens) {
        output.print("(");
      } else {
        output.space();
      }
      self2.extends.print(output);
      if (parens) {
        output.print(")");
      } else {
        output.space();
      }
    }
    if (self2.properties.length > 0)
      output.with_block(function() {
        self2.properties.forEach(function(prop, i) {
          if (i) {
            output.newline();
          }
          output.indent();
          prop.print(output);
        });
        output.newline();
      });
    else
      output.print("{}");
  });
  DEFPRINT(AST_NewTarget, function(self2, output) {
    output.print("new.target");
  });
  function print_property_name(key, quote, output) {
    if (output.option("quote_keys")) {
      return output.print_string(key);
    }
    if ("" + +key == key && key >= 0) {
      if (output.option("keep_numbers")) {
        return output.print(key);
      }
      return output.print(make_num(key));
    }
    var print_string = ALL_RESERVED_WORDS.has(key) ? output.option("ie8") : output.option("ecma") < 2015 || output.option("safari10") ? !is_basic_identifier_string(key) : !is_identifier_string(key, true);
    if (print_string || quote && output.option("keep_quoted_props")) {
      return output.print_string(key, quote);
    }
    return output.print_name(key);
  }
  DEFPRINT(AST_ObjectKeyVal, function(self2, output) {
    function get_name(self3) {
      var def = self3.definition();
      return def ? def.mangled_name || def.name : self3.name;
    }
    var allowShortHand = output.option("shorthand");
    if (allowShortHand && self2.value instanceof AST_Symbol && is_identifier_string(
      self2.key,
      output.option("ecma") >= 2015 || output.option("safari10")
    ) && get_name(self2.value) === self2.key && !ALL_RESERVED_WORDS.has(self2.key)) {
      print_property_name(self2.key, self2.quote, output);
    } else if (allowShortHand && self2.value instanceof AST_DefaultAssign && self2.value.left instanceof AST_Symbol && is_identifier_string(
      self2.key,
      output.option("ecma") >= 2015 || output.option("safari10")
    ) && get_name(self2.value.left) === self2.key) {
      print_property_name(self2.key, self2.quote, output);
      output.space();
      output.print("=");
      output.space();
      self2.value.right.print(output);
    } else {
      if (!(self2.key instanceof AST_Node)) {
        print_property_name(self2.key, self2.quote, output);
      } else {
        output.with_square(function() {
          self2.key.print(output);
        });
      }
      output.colon();
      self2.value.print(output);
    }
  });
  DEFPRINT(AST_ClassPrivateProperty, (self2, output) => {
    if (self2.static) {
      output.print("static");
      output.space();
    }
    output.print("#");
    print_property_name(self2.key.name, self2.quote, output);
    if (self2.value) {
      output.print("=");
      self2.value.print(output);
    }
    output.semicolon();
  });
  DEFPRINT(AST_ClassProperty, (self2, output) => {
    if (self2.static) {
      output.print("static");
      output.space();
    }
    if (self2.key instanceof AST_SymbolClassProperty) {
      print_property_name(self2.key.name, self2.quote, output);
    } else {
      output.print("[");
      self2.key.print(output);
      output.print("]");
    }
    if (self2.value) {
      output.print("=");
      self2.value.print(output);
    }
    output.semicolon();
  });
  AST_ObjectProperty.DEFMETHOD("_print_getter_setter", function(type, is_private, output) {
    var self2 = this;
    if (self2.static) {
      output.print("static");
      output.space();
    }
    if (type) {
      output.print(type);
      output.space();
    }
    if (self2.key instanceof AST_SymbolMethod) {
      if (is_private)
        output.print("#");
      print_property_name(self2.key.name, self2.quote, output);
    } else {
      output.with_square(function() {
        self2.key.print(output);
      });
    }
    self2.value._do_print(output, true);
  });
  DEFPRINT(AST_ObjectSetter, function(self2, output) {
    self2._print_getter_setter("set", false, output);
  });
  DEFPRINT(AST_ObjectGetter, function(self2, output) {
    self2._print_getter_setter("get", false, output);
  });
  DEFPRINT(AST_PrivateSetter, function(self2, output) {
    self2._print_getter_setter("set", true, output);
  });
  DEFPRINT(AST_PrivateGetter, function(self2, output) {
    self2._print_getter_setter("get", true, output);
  });
  DEFPRINT(AST_PrivateMethod, function(self2, output) {
    var type;
    if (self2.is_generator && self2.async) {
      type = "async*";
    } else if (self2.is_generator) {
      type = "*";
    } else if (self2.async) {
      type = "async";
    }
    self2._print_getter_setter(type, true, output);
  });
  DEFPRINT(AST_PrivateIn, function(self2, output) {
    self2.key.print(output);
    output.space();
    output.print("in");
    output.space();
    self2.value.print(output);
  });
  DEFPRINT(AST_SymbolPrivateProperty, function(self2, output) {
    output.print("#" + self2.name);
  });
  DEFPRINT(AST_ConciseMethod, function(self2, output) {
    var type;
    if (self2.is_generator && self2.async) {
      type = "async*";
    } else if (self2.is_generator) {
      type = "*";
    } else if (self2.async) {
      type = "async";
    }
    self2._print_getter_setter(type, false, output);
  });
  DEFPRINT(AST_ClassStaticBlock, function(self2, output) {
    output.print("static");
    output.space();
    print_braced(self2, output);
  });
  AST_Symbol.DEFMETHOD("_do_print", function(output) {
    var def = this.definition();
    output.print_name(def ? def.mangled_name || def.name : this.name);
  });
  DEFPRINT(AST_Symbol, function(self2, output) {
    self2._do_print(output);
  });
  DEFPRINT(AST_Hole, noop);
  DEFPRINT(AST_This, function(self2, output) {
    output.print("this");
  });
  DEFPRINT(AST_Super, function(self2, output) {
    output.print("super");
  });
  DEFPRINT(AST_Constant, function(self2, output) {
    output.print(self2.getValue());
  });
  DEFPRINT(AST_String, function(self2, output) {
    output.print_string(self2.getValue(), self2.quote, output.in_directive);
  });
  DEFPRINT(AST_Number, function(self2, output) {
    if ((output.option("keep_numbers") || output.use_asm) && self2.raw) {
      output.print(self2.raw);
    } else {
      output.print(make_num(self2.getValue()));
    }
  });
  DEFPRINT(AST_BigInt, function(self2, output) {
    output.print(self2.getValue() + "n");
  });
  const r_slash_script = /(<\s*\/\s*script)/i;
  const slash_script_replace = (_, $1) => $1.replace("/", "\\/");
  DEFPRINT(AST_RegExp, function(self2, output) {
    let { source, flags } = self2.getValue();
    source = regexp_source_fix(source);
    flags = flags ? sort_regexp_flags(flags) : "";
    source = source.replace(r_slash_script, slash_script_replace);
    output.print(output.to_utf8(`/${source}/${flags}`, false, true));
    const parent = output.parent();
    if (parent instanceof AST_Binary && /^\w/.test(parent.operator) && parent.left === self2) {
      output.print(" ");
    }
  });
  function print_maybe_braced_body(stat, output) {
    if (output.option("braces")) {
      make_block(stat, output);
    } else {
      if (!stat || stat instanceof AST_EmptyStatement)
        output.force_semicolon();
      else if (stat instanceof AST_Let || stat instanceof AST_Const || stat instanceof AST_Class)
        make_block(stat, output);
      else
        stat.print(output);
    }
  }
  function best_of2(a) {
    var best = a[0], len = best.length;
    for (var i = 1; i < a.length; ++i) {
      if (a[i].length < len) {
        best = a[i];
        len = best.length;
      }
    }
    return best;
  }
  function make_num(num) {
    var str = num.toString(10).replace(/^0\./, ".").replace("e+", "e");
    var candidates = [str];
    if (Math.floor(num) === num) {
      if (num < 0) {
        candidates.push("-0x" + (-num).toString(16).toLowerCase());
      } else {
        candidates.push("0x" + num.toString(16).toLowerCase());
      }
    }
    var match2, len, digits;
    if (match2 = /^\.0+/.exec(str)) {
      len = match2[0].length;
      digits = str.slice(len);
      candidates.push(digits + "e-" + (digits.length + len - 1));
    } else if (match2 = /0+$/.exec(str)) {
      len = match2[0].length;
      candidates.push(str.slice(0, -len) + "e" + len);
    } else if (match2 = /^(\d)\.(\d+)e(-?\d+)$/.exec(str)) {
      candidates.push(match2[1] + match2[2] + "e" + (match2[3] - match2[2].length));
    }
    return best_of2(candidates);
  }
  function make_block(stmt, output) {
    if (!stmt || stmt instanceof AST_EmptyStatement)
      output.print("{}");
    else if (stmt instanceof AST_BlockStatement)
      stmt.print(output);
    else
      output.with_block(function() {
        output.indent();
        stmt.print(output);
        output.newline();
      });
  }
  function DEFMAP(nodetype, generator) {
    nodetype.forEach(function(nodetype2) {
      nodetype2.DEFMETHOD("add_source_map", generator);
    });
  }
  DEFMAP([
    // We could easily add info for ALL nodes, but it seems to me that
    // would be quite wasteful, hence this noop in the base class.
    AST_Node,
    // since the label symbol will mark it
    AST_LabeledStatement,
    AST_Toplevel
  ], noop);
  DEFMAP([
    AST_Array,
    AST_BlockStatement,
    AST_Catch,
    AST_Class,
    AST_Constant,
    AST_Debugger,
    AST_Definitions,
    AST_Directive,
    AST_Finally,
    AST_Jump,
    AST_Lambda,
    AST_New,
    AST_Object,
    AST_StatementWithBody,
    AST_Symbol,
    AST_Switch,
    AST_SwitchBranch,
    AST_TemplateString,
    AST_TemplateSegment,
    AST_Try
  ], function(output) {
    output.add_mapping(this.start);
  });
  DEFMAP([
    AST_ObjectGetter,
    AST_ObjectSetter,
    AST_PrivateGetter,
    AST_PrivateSetter
  ], function(output) {
    output.add_mapping(this.key.end, this.key.name);
  });
  DEFMAP([AST_ObjectProperty], function(output) {
    output.add_mapping(this.start, this.key);
  });
})();

// node_modules/terser/lib/equivalent-to.js
var shallow_cmp = (node1, node2) => {
  return node1 === null && node2 === null || node1.TYPE === node2.TYPE && node1.shallow_cmp(node2);
};
var equivalent_to = (tree1, tree2) => {
  if (!shallow_cmp(tree1, tree2))
    return false;
  const walk_1_state = [tree1];
  const walk_2_state = [tree2];
  const walk_1_push = walk_1_state.push.bind(walk_1_state);
  const walk_2_push = walk_2_state.push.bind(walk_2_state);
  while (walk_1_state.length && walk_2_state.length) {
    const node_1 = walk_1_state.pop();
    const node_2 = walk_2_state.pop();
    if (!shallow_cmp(node_1, node_2))
      return false;
    node_1._children_backwards(walk_1_push);
    node_2._children_backwards(walk_2_push);
    if (walk_1_state.length !== walk_2_state.length) {
      return false;
    }
  }
  return walk_1_state.length == 0 && walk_2_state.length == 0;
};
var pass_through = () => true;
AST_Node.prototype.shallow_cmp = function() {
  throw new Error("did not find a shallow_cmp function for " + this.constructor.name);
};
AST_Debugger.prototype.shallow_cmp = pass_through;
AST_Directive.prototype.shallow_cmp = function(other) {
  return this.value === other.value;
};
AST_SimpleStatement.prototype.shallow_cmp = pass_through;
AST_Block.prototype.shallow_cmp = pass_through;
AST_EmptyStatement.prototype.shallow_cmp = pass_through;
AST_LabeledStatement.prototype.shallow_cmp = function(other) {
  return this.label.name === other.label.name;
};
AST_Do.prototype.shallow_cmp = pass_through;
AST_While.prototype.shallow_cmp = pass_through;
AST_For.prototype.shallow_cmp = function(other) {
  return (this.init == null ? other.init == null : this.init === other.init) && (this.condition == null ? other.condition == null : this.condition === other.condition) && (this.step == null ? other.step == null : this.step === other.step);
};
AST_ForIn.prototype.shallow_cmp = pass_through;
AST_ForOf.prototype.shallow_cmp = pass_through;
AST_With.prototype.shallow_cmp = pass_through;
AST_Toplevel.prototype.shallow_cmp = pass_through;
AST_Expansion.prototype.shallow_cmp = pass_through;
AST_Lambda.prototype.shallow_cmp = function(other) {
  return this.is_generator === other.is_generator && this.async === other.async;
};
AST_Destructuring.prototype.shallow_cmp = function(other) {
  return this.is_array === other.is_array;
};
AST_PrefixedTemplateString.prototype.shallow_cmp = pass_through;
AST_TemplateString.prototype.shallow_cmp = pass_through;
AST_TemplateSegment.prototype.shallow_cmp = function(other) {
  return this.value === other.value;
};
AST_Jump.prototype.shallow_cmp = pass_through;
AST_LoopControl.prototype.shallow_cmp = pass_through;
AST_Await.prototype.shallow_cmp = pass_through;
AST_Yield.prototype.shallow_cmp = function(other) {
  return this.is_star === other.is_star;
};
AST_If.prototype.shallow_cmp = function(other) {
  return this.alternative == null ? other.alternative == null : this.alternative === other.alternative;
};
AST_Switch.prototype.shallow_cmp = pass_through;
AST_SwitchBranch.prototype.shallow_cmp = pass_through;
AST_Try.prototype.shallow_cmp = function(other) {
  return this.body === other.body && (this.bcatch == null ? other.bcatch == null : this.bcatch === other.bcatch) && (this.bfinally == null ? other.bfinally == null : this.bfinally === other.bfinally);
};
AST_Catch.prototype.shallow_cmp = function(other) {
  return this.argname == null ? other.argname == null : this.argname === other.argname;
};
AST_Finally.prototype.shallow_cmp = pass_through;
AST_Definitions.prototype.shallow_cmp = pass_through;
AST_VarDef.prototype.shallow_cmp = function(other) {
  return this.value == null ? other.value == null : this.value === other.value;
};
AST_NameMapping.prototype.shallow_cmp = pass_through;
AST_Import.prototype.shallow_cmp = function(other) {
  return (this.imported_name == null ? other.imported_name == null : this.imported_name === other.imported_name) && (this.imported_names == null ? other.imported_names == null : this.imported_names === other.imported_names);
};
AST_ImportMeta.prototype.shallow_cmp = pass_through;
AST_Export.prototype.shallow_cmp = function(other) {
  return (this.exported_definition == null ? other.exported_definition == null : this.exported_definition === other.exported_definition) && (this.exported_value == null ? other.exported_value == null : this.exported_value === other.exported_value) && (this.exported_names == null ? other.exported_names == null : this.exported_names === other.exported_names) && this.module_name === other.module_name && this.is_default === other.is_default;
};
AST_Call.prototype.shallow_cmp = pass_through;
AST_Sequence.prototype.shallow_cmp = pass_through;
AST_PropAccess.prototype.shallow_cmp = pass_through;
AST_Chain.prototype.shallow_cmp = pass_through;
AST_Dot.prototype.shallow_cmp = function(other) {
  return this.property === other.property;
};
AST_DotHash.prototype.shallow_cmp = function(other) {
  return this.property === other.property;
};
AST_Unary.prototype.shallow_cmp = function(other) {
  return this.operator === other.operator;
};
AST_Binary.prototype.shallow_cmp = function(other) {
  return this.operator === other.operator;
};
AST_Conditional.prototype.shallow_cmp = pass_through;
AST_Array.prototype.shallow_cmp = pass_through;
AST_Object.prototype.shallow_cmp = pass_through;
AST_ObjectProperty.prototype.shallow_cmp = pass_through;
AST_ObjectKeyVal.prototype.shallow_cmp = function(other) {
  return this.key === other.key;
};
AST_ObjectSetter.prototype.shallow_cmp = function(other) {
  return this.static === other.static;
};
AST_ObjectGetter.prototype.shallow_cmp = function(other) {
  return this.static === other.static;
};
AST_ConciseMethod.prototype.shallow_cmp = function(other) {
  return this.static === other.static && this.is_generator === other.is_generator && this.async === other.async;
};
AST_Class.prototype.shallow_cmp = function(other) {
  return (this.name == null ? other.name == null : this.name === other.name) && (this.extends == null ? other.extends == null : this.extends === other.extends);
};
AST_ClassProperty.prototype.shallow_cmp = function(other) {
  return this.static === other.static;
};
AST_Symbol.prototype.shallow_cmp = function(other) {
  return this.name === other.name;
};
AST_NewTarget.prototype.shallow_cmp = pass_through;
AST_This.prototype.shallow_cmp = pass_through;
AST_Super.prototype.shallow_cmp = pass_through;
AST_String.prototype.shallow_cmp = function(other) {
  return this.value === other.value;
};
AST_Number.prototype.shallow_cmp = function(other) {
  return this.value === other.value;
};
AST_BigInt.prototype.shallow_cmp = function(other) {
  return this.value === other.value;
};
AST_RegExp.prototype.shallow_cmp = function(other) {
  return this.value.flags === other.value.flags && this.value.source === other.value.source;
};
AST_Atom.prototype.shallow_cmp = pass_through;

// node_modules/terser/lib/scope.js
var MASK_EXPORT_DONT_MANGLE = 1 << 0;
var MASK_EXPORT_WANT_MANGLE = 1 << 1;
var function_defs = null;
var unmangleable_names = null;
var scopes_with_block_defuns = null;
var SymbolDef = class _SymbolDef {
  constructor(scope, orig, init) {
    this.name = orig.name;
    this.orig = [orig];
    this.init = init;
    this.eliminated = 0;
    this.assignments = 0;
    this.scope = scope;
    this.replaced = 0;
    this.global = false;
    this.export = 0;
    this.mangled_name = null;
    this.undeclared = false;
    this.id = _SymbolDef.next_id++;
    this.chained = false;
    this.direct_access = false;
    this.escaped = 0;
    this.recursive_refs = 0;
    this.references = [];
    this.should_replace = void 0;
    this.single_use = false;
    this.fixed = false;
    Object.seal(this);
  }
  fixed_value() {
    if (!this.fixed || this.fixed instanceof AST_Node)
      return this.fixed;
    return this.fixed();
  }
  unmangleable(options3) {
    if (!options3)
      options3 = {};
    if (function_defs && function_defs.has(this.id) && keep_name(options3.keep_fnames, this.orig[0].name))
      return true;
    return this.global && !options3.toplevel || this.export & MASK_EXPORT_DONT_MANGLE || this.undeclared || !options3.eval && this.scope.pinned() || (this.orig[0] instanceof AST_SymbolLambda || this.orig[0] instanceof AST_SymbolDefun) && keep_name(options3.keep_fnames, this.orig[0].name) || this.orig[0] instanceof AST_SymbolMethod || (this.orig[0] instanceof AST_SymbolClass || this.orig[0] instanceof AST_SymbolDefClass) && keep_name(options3.keep_classnames, this.orig[0].name);
  }
  mangle(options3) {
    const cache = options3.cache && options3.cache.props;
    if (this.global && cache && cache.has(this.name)) {
      this.mangled_name = cache.get(this.name);
    } else if (!this.mangled_name && !this.unmangleable(options3)) {
      var s = this.scope;
      var sym = this.orig[0];
      if (options3.ie8 && sym instanceof AST_SymbolLambda)
        s = s.parent_scope;
      const redefinition = redefined_catch_def(this);
      this.mangled_name = redefinition ? redefinition.mangled_name || redefinition.name : s.next_mangled(options3, this);
      if (this.global && cache) {
        cache.set(this.name, this.mangled_name);
      }
    }
  }
};
SymbolDef.next_id = 1;
function redefined_catch_def(def) {
  if (def.orig[0] instanceof AST_SymbolCatch && def.scope.is_block_scope()) {
    return def.scope.get_defun_scope().variables.get(def.name);
  }
}
AST_Scope.DEFMETHOD("figure_out_scope", function(options3, { parent_scope = null, toplevel = this } = {}) {
  options3 = defaults2(options3, {
    cache: null,
    ie8: false,
    safari10: false
  });
  if (!(toplevel instanceof AST_Toplevel)) {
    throw new Error("Invalid toplevel scope");
  }
  var scope = this.parent_scope = parent_scope;
  var labels = /* @__PURE__ */ new Map();
  var defun = null;
  var in_destructuring = null;
  var for_scopes = [];
  var tw = new TreeWalker((node, descend) => {
    if (node.is_block_scope()) {
      const save_scope2 = scope;
      node.block_scope = scope = new AST_Scope(node);
      scope._block_scope = true;
      scope.init_scope_vars(save_scope2);
      scope.uses_with = save_scope2.uses_with;
      scope.uses_eval = save_scope2.uses_eval;
      if (options3.safari10) {
        if (node instanceof AST_For || node instanceof AST_ForIn || node instanceof AST_ForOf) {
          for_scopes.push(scope);
        }
      }
      if (node instanceof AST_Switch) {
        const the_block_scope = scope;
        scope = save_scope2;
        node.expression.walk(tw);
        scope = the_block_scope;
        for (let i = 0; i < node.body.length; i++) {
          node.body[i].walk(tw);
        }
      } else {
        descend();
      }
      scope = save_scope2;
      return true;
    }
    if (node instanceof AST_Destructuring) {
      const save_destructuring = in_destructuring;
      in_destructuring = node;
      descend();
      in_destructuring = save_destructuring;
      return true;
    }
    if (node instanceof AST_Scope) {
      node.init_scope_vars(scope);
      var save_scope = scope;
      var save_defun = defun;
      var save_labels = labels;
      defun = scope = node;
      labels = /* @__PURE__ */ new Map();
      descend();
      scope = save_scope;
      defun = save_defun;
      labels = save_labels;
      return true;
    }
    if (node instanceof AST_LabeledStatement) {
      var l = node.label;
      if (labels.has(l.name)) {
        throw new Error(string_template("Label {name} defined twice", l));
      }
      labels.set(l.name, l);
      descend();
      labels.delete(l.name);
      return true;
    }
    if (node instanceof AST_With) {
      for (var s = scope; s; s = s.parent_scope)
        s.uses_with = true;
      return;
    }
    if (node instanceof AST_Symbol) {
      node.scope = scope;
    }
    if (node instanceof AST_Label) {
      node.thedef = node;
      node.references = [];
    }
    if (node instanceof AST_SymbolLambda) {
      defun.def_function(node, node.name == "arguments" ? void 0 : defun);
    } else if (node instanceof AST_SymbolDefun) {
      const closest_scope = defun.parent_scope;
      node.scope = tw.directives["use strict"] ? closest_scope : closest_scope.get_defun_scope();
      mark_export(node.scope.def_function(node, defun), 1);
    } else if (node instanceof AST_SymbolClass) {
      mark_export(defun.def_variable(node, defun), 1);
    } else if (node instanceof AST_SymbolImport) {
      scope.def_variable(node);
    } else if (node instanceof AST_SymbolDefClass) {
      mark_export((node.scope = defun.parent_scope).def_function(node, defun), 1);
    } else if (node instanceof AST_SymbolVar || node instanceof AST_SymbolLet || node instanceof AST_SymbolConst || node instanceof AST_SymbolCatch) {
      var def;
      if (node instanceof AST_SymbolBlockDeclaration) {
        def = scope.def_variable(node, null);
      } else {
        def = defun.def_variable(node, node.TYPE == "SymbolVar" ? null : void 0);
      }
      if (!def.orig.every((sym2) => {
        if (sym2 === node)
          return true;
        if (node instanceof AST_SymbolBlockDeclaration) {
          return sym2 instanceof AST_SymbolLambda;
        }
        return !(sym2 instanceof AST_SymbolLet || sym2 instanceof AST_SymbolConst);
      })) {
        js_error(
          `"${node.name}" is redeclared`,
          node.start.file,
          node.start.line,
          node.start.col,
          node.start.pos
        );
      }
      if (!(node instanceof AST_SymbolFunarg))
        mark_export(def, 2);
      if (defun !== scope) {
        node.mark_enclosed();
        var def = scope.find_variable(node);
        if (node.thedef !== def) {
          node.thedef = def;
          node.reference();
        }
      }
    } else if (node instanceof AST_LabelRef) {
      var sym = labels.get(node.name);
      if (!sym)
        throw new Error(string_template("Undefined label {name} [{line},{col}]", {
          name: node.name,
          line: node.start.line,
          col: node.start.col
        }));
      node.thedef = sym;
    }
    if (!(scope instanceof AST_Toplevel) && (node instanceof AST_Export || node instanceof AST_Import)) {
      js_error(
        `"${node.TYPE}" statement may only appear at the top level`,
        node.start.file,
        node.start.line,
        node.start.col,
        node.start.pos
      );
    }
  });
  this.walk(tw);
  function mark_export(def, level) {
    if (in_destructuring) {
      var i = 0;
      do {
        level++;
      } while (tw.parent(i++) !== in_destructuring);
    }
    var node = tw.parent(level);
    if (def.export = node instanceof AST_Export ? MASK_EXPORT_DONT_MANGLE : 0) {
      var exported = node.exported_definition;
      if ((exported instanceof AST_Defun || exported instanceof AST_DefClass) && node.is_default) {
        def.export = MASK_EXPORT_WANT_MANGLE;
      }
    }
  }
  const is_toplevel = this instanceof AST_Toplevel;
  if (is_toplevel) {
    this.globals = /* @__PURE__ */ new Map();
  }
  var tw = new TreeWalker((node) => {
    if (node instanceof AST_LoopControl && node.label) {
      node.label.thedef.references.push(node);
      return true;
    }
    if (node instanceof AST_SymbolRef) {
      var name = node.name;
      if (name == "eval" && tw.parent() instanceof AST_Call) {
        for (var s = node.scope; s && !s.uses_eval; s = s.parent_scope) {
          s.uses_eval = true;
        }
      }
      var sym;
      if (tw.parent() instanceof AST_NameMapping && tw.parent(1).module_name || !(sym = node.scope.find_variable(name))) {
        sym = toplevel.def_global(node);
        if (node instanceof AST_SymbolExport)
          sym.export = MASK_EXPORT_DONT_MANGLE;
      } else if (sym.scope instanceof AST_Lambda && name == "arguments") {
        sym.scope.get_defun_scope().uses_arguments = true;
      }
      node.thedef = sym;
      node.reference();
      if (node.scope.is_block_scope() && !(sym.orig[0] instanceof AST_SymbolBlockDeclaration)) {
        node.scope = node.scope.get_defun_scope();
      }
      return true;
    }
    var def;
    if (node instanceof AST_SymbolCatch && (def = redefined_catch_def(node.definition()))) {
      var s = node.scope;
      while (s) {
        push_uniq(s.enclosed, def);
        if (s === def.scope)
          break;
        s = s.parent_scope;
      }
    }
  });
  this.walk(tw);
  if (options3.ie8 || options3.safari10) {
    walk(this, (node) => {
      if (node instanceof AST_SymbolCatch) {
        var name = node.name;
        var refs = node.thedef.references;
        var scope2 = node.scope.get_defun_scope();
        var def = scope2.find_variable(name) || toplevel.globals.get(name) || scope2.def_variable(node);
        refs.forEach(function(ref) {
          ref.thedef = def;
          ref.reference();
        });
        node.thedef = def;
        node.reference();
        return true;
      }
    });
  }
  if (options3.safari10) {
    for (const scope2 of for_scopes) {
      scope2.parent_scope.variables.forEach(function(def) {
        push_uniq(scope2.enclosed, def);
      });
    }
  }
});
AST_Toplevel.DEFMETHOD("def_global", function(node) {
  var globals = this.globals, name = node.name;
  if (globals.has(name)) {
    return globals.get(name);
  } else {
    var g = new SymbolDef(this, node);
    g.undeclared = true;
    g.global = true;
    globals.set(name, g);
    return g;
  }
});
AST_Scope.DEFMETHOD("init_scope_vars", function(parent_scope) {
  this.variables = /* @__PURE__ */ new Map();
  this.uses_with = false;
  this.uses_eval = false;
  this.parent_scope = parent_scope;
  this.enclosed = [];
  this.cname = -1;
});
AST_Scope.DEFMETHOD("conflicting_def", function(name) {
  return this.enclosed.find((def) => def.name === name) || this.variables.has(name) || this.parent_scope && this.parent_scope.conflicting_def(name);
});
AST_Scope.DEFMETHOD("conflicting_def_shallow", function(name) {
  return this.enclosed.find((def) => def.name === name) || this.variables.has(name);
});
AST_Scope.DEFMETHOD("add_child_scope", function(scope) {
  if (scope.parent_scope === this)
    return;
  scope.parent_scope = this;
  if (scope instanceof AST_Arrow && !this.uses_arguments) {
    this.uses_arguments = walk(scope, (node) => {
      if (node instanceof AST_SymbolRef && node.scope instanceof AST_Lambda && node.name === "arguments") {
        return walk_abort;
      }
      if (node instanceof AST_Lambda && !(node instanceof AST_Arrow)) {
        return true;
      }
    });
  }
  this.uses_with = this.uses_with || scope.uses_with;
  this.uses_eval = this.uses_eval || scope.uses_eval;
  const scope_ancestry = (() => {
    const ancestry = [];
    let cur = this;
    do {
      ancestry.push(cur);
    } while (cur = cur.parent_scope);
    ancestry.reverse();
    return ancestry;
  })();
  const new_scope_enclosed_set = new Set(scope.enclosed);
  const to_enclose = [];
  for (const scope_topdown of scope_ancestry) {
    to_enclose.forEach((e) => push_uniq(scope_topdown.enclosed, e));
    for (const def of scope_topdown.variables.values()) {
      if (new_scope_enclosed_set.has(def)) {
        push_uniq(to_enclose, def);
        push_uniq(scope_topdown.enclosed, def);
      }
    }
  }
});
function find_scopes_visible_from(scopes) {
  const found_scopes = /* @__PURE__ */ new Set();
  for (const scope of new Set(scopes)) {
    (function bubble_up(scope2) {
      if (scope2 == null || found_scopes.has(scope2))
        return;
      found_scopes.add(scope2);
      bubble_up(scope2.parent_scope);
    })(scope);
  }
  return [...found_scopes];
}
AST_Scope.DEFMETHOD("create_symbol", function(SymClass, {
  source,
  tentative_name,
  scope,
  conflict_scopes = [scope],
  init = null
} = {}) {
  let symbol_name;
  conflict_scopes = find_scopes_visible_from(conflict_scopes);
  if (tentative_name) {
    tentative_name = symbol_name = tentative_name.replace(/(?:^[^a-z_$]|[^a-z0-9_$])/ig, "_");
    let i = 0;
    while (conflict_scopes.find((s) => s.conflicting_def_shallow(symbol_name))) {
      symbol_name = tentative_name + "$" + i++;
    }
  }
  if (!symbol_name) {
    throw new Error("No symbol name could be generated in create_symbol()");
  }
  const symbol = make_node(SymClass, source, {
    name: symbol_name,
    scope
  });
  this.def_variable(symbol, init || null);
  symbol.mark_enclosed();
  return symbol;
});
AST_Node.DEFMETHOD("is_block_scope", return_false);
AST_Class.DEFMETHOD("is_block_scope", return_false);
AST_Lambda.DEFMETHOD("is_block_scope", return_false);
AST_Toplevel.DEFMETHOD("is_block_scope", return_false);
AST_SwitchBranch.DEFMETHOD("is_block_scope", return_false);
AST_Block.DEFMETHOD("is_block_scope", return_true);
AST_Scope.DEFMETHOD("is_block_scope", function() {
  return this._block_scope || false;
});
AST_IterationStatement.DEFMETHOD("is_block_scope", return_true);
AST_Lambda.DEFMETHOD("init_scope_vars", function() {
  AST_Scope.prototype.init_scope_vars.apply(this, arguments);
  this.uses_arguments = false;
  this.def_variable(new AST_SymbolFunarg({
    name: "arguments",
    start: this.start,
    end: this.end
  }));
});
AST_Arrow.DEFMETHOD("init_scope_vars", function() {
  AST_Scope.prototype.init_scope_vars.apply(this, arguments);
  this.uses_arguments = false;
});
AST_Symbol.DEFMETHOD("mark_enclosed", function() {
  var def = this.definition();
  var s = this.scope;
  while (s) {
    push_uniq(s.enclosed, def);
    if (s === def.scope)
      break;
    s = s.parent_scope;
  }
});
AST_Symbol.DEFMETHOD("reference", function() {
  this.definition().references.push(this);
  this.mark_enclosed();
});
AST_Scope.DEFMETHOD("find_variable", function(name) {
  if (name instanceof AST_Symbol)
    name = name.name;
  return this.variables.get(name) || this.parent_scope && this.parent_scope.find_variable(name);
});
AST_Scope.DEFMETHOD("def_function", function(symbol, init) {
  var def = this.def_variable(symbol, init);
  if (!def.init || def.init instanceof AST_Defun)
    def.init = init;
  return def;
});
AST_Scope.DEFMETHOD("def_variable", function(symbol, init) {
  var def = this.variables.get(symbol.name);
  if (def) {
    def.orig.push(symbol);
    if (def.init && (def.scope !== symbol.scope || def.init instanceof AST_Function)) {
      def.init = init;
    }
  } else {
    def = new SymbolDef(this, symbol, init);
    this.variables.set(symbol.name, def);
    def.global = !this.parent_scope;
  }
  return symbol.thedef = def;
});
function next_mangled(scope, options3) {
  let defun_scope;
  if (scopes_with_block_defuns && (defun_scope = scope.get_defun_scope()) && scopes_with_block_defuns.has(defun_scope)) {
    scope = defun_scope;
  }
  var ext2 = scope.enclosed;
  var nth_identifier = options3.nth_identifier;
  out:
    while (true) {
      var m = nth_identifier.get(++scope.cname);
      if (ALL_RESERVED_WORDS.has(m))
        continue;
      if (options3.reserved.has(m))
        continue;
      if (unmangleable_names && unmangleable_names.has(m))
        continue out;
      for (let i = ext2.length; --i >= 0; ) {
        const def = ext2[i];
        const name = def.mangled_name || def.unmangleable(options3) && def.name;
        if (m == name)
          continue out;
      }
      return m;
    }
}
AST_Scope.DEFMETHOD("next_mangled", function(options3) {
  return next_mangled(this, options3);
});
AST_Toplevel.DEFMETHOD("next_mangled", function(options3) {
  let name;
  const mangled_names = this.mangled_names;
  do {
    name = next_mangled(this, options3);
  } while (mangled_names.has(name));
  return name;
});
AST_Function.DEFMETHOD("next_mangled", function(options3, def) {
  var tricky_def = def.orig[0] instanceof AST_SymbolFunarg && this.name && this.name.definition();
  var tricky_name = tricky_def ? tricky_def.mangled_name || tricky_def.name : null;
  while (true) {
    var name = next_mangled(this, options3);
    if (!tricky_name || tricky_name != name)
      return name;
  }
});
AST_Symbol.DEFMETHOD("unmangleable", function(options3) {
  var def = this.definition();
  return !def || def.unmangleable(options3);
});
AST_Label.DEFMETHOD("unmangleable", return_false);
AST_Symbol.DEFMETHOD("unreferenced", function() {
  return !this.definition().references.length && !this.scope.pinned();
});
AST_Symbol.DEFMETHOD("definition", function() {
  return this.thedef;
});
AST_Symbol.DEFMETHOD("global", function() {
  return this.thedef.global;
});
function format_mangler_options(options3) {
  options3 = defaults2(options3, {
    eval: false,
    nth_identifier: base54,
    ie8: false,
    keep_classnames: false,
    keep_fnames: false,
    module: false,
    reserved: [],
    toplevel: false
  });
  if (options3.module)
    options3.toplevel = true;
  if (!Array.isArray(options3.reserved) && !(options3.reserved instanceof Set)) {
    options3.reserved = [];
  }
  options3.reserved = new Set(options3.reserved);
  options3.reserved.add("arguments");
  return options3;
}
AST_Toplevel.DEFMETHOD("mangle_names", function(options3) {
  options3 = format_mangler_options(options3);
  var nth_identifier = options3.nth_identifier;
  var lname = -1;
  var to_mangle = [];
  if (options3.keep_fnames) {
    function_defs = /* @__PURE__ */ new Set();
  }
  const mangled_names = this.mangled_names = /* @__PURE__ */ new Set();
  unmangleable_names = /* @__PURE__ */ new Set();
  if (options3.cache) {
    this.globals.forEach(collect);
    if (options3.cache.props) {
      options3.cache.props.forEach(function(mangled_name) {
        mangled_names.add(mangled_name);
      });
    }
  }
  var tw = new TreeWalker(function(node, descend) {
    if (node instanceof AST_LabeledStatement) {
      var save_nesting = lname;
      descend();
      lname = save_nesting;
      return true;
    }
    if (node instanceof AST_Defun && !(tw.parent() instanceof AST_Scope)) {
      scopes_with_block_defuns = scopes_with_block_defuns || /* @__PURE__ */ new Set();
      scopes_with_block_defuns.add(node.parent_scope.get_defun_scope());
    }
    if (node instanceof AST_Scope) {
      node.variables.forEach(collect);
      return;
    }
    if (node.is_block_scope()) {
      node.block_scope.variables.forEach(collect);
      return;
    }
    if (function_defs && node instanceof AST_VarDef && node.value instanceof AST_Lambda && !node.value.name && keep_name(options3.keep_fnames, node.name.name)) {
      function_defs.add(node.name.definition().id);
      return;
    }
    if (node instanceof AST_Label) {
      let name;
      do {
        name = nth_identifier.get(++lname);
      } while (ALL_RESERVED_WORDS.has(name));
      node.mangled_name = name;
      return true;
    }
    if (!(options3.ie8 || options3.safari10) && node instanceof AST_SymbolCatch) {
      to_mangle.push(node.definition());
      return;
    }
  });
  this.walk(tw);
  if (options3.keep_fnames || options3.keep_classnames) {
    to_mangle.forEach((def) => {
      if (def.name.length < 6 && def.unmangleable(options3)) {
        unmangleable_names.add(def.name);
      }
    });
  }
  to_mangle.forEach((def) => {
    def.mangle(options3);
  });
  function_defs = null;
  unmangleable_names = null;
  scopes_with_block_defuns = null;
  function collect(symbol) {
    if (symbol.export & MASK_EXPORT_DONT_MANGLE) {
      unmangleable_names.add(symbol.name);
    } else if (!options3.reserved.has(symbol.name)) {
      to_mangle.push(symbol);
    }
  }
});
AST_Toplevel.DEFMETHOD("find_colliding_names", function(options3) {
  const cache = options3.cache && options3.cache.props;
  const avoid = /* @__PURE__ */ new Set();
  options3.reserved.forEach(to_avoid);
  this.globals.forEach(add_def);
  this.walk(new TreeWalker(function(node) {
    if (node instanceof AST_Scope)
      node.variables.forEach(add_def);
    if (node instanceof AST_SymbolCatch)
      add_def(node.definition());
  }));
  return avoid;
  function to_avoid(name) {
    avoid.add(name);
  }
  function add_def(def) {
    var name = def.name;
    if (def.global && cache && cache.has(name))
      name = cache.get(name);
    else if (!def.unmangleable(options3))
      return;
    to_avoid(name);
  }
});
AST_Toplevel.DEFMETHOD("expand_names", function(options3) {
  options3 = format_mangler_options(options3);
  var nth_identifier = options3.nth_identifier;
  if (nth_identifier.reset && nth_identifier.sort) {
    nth_identifier.reset();
    nth_identifier.sort();
  }
  var avoid = this.find_colliding_names(options3);
  var cname = 0;
  this.globals.forEach(rename);
  this.walk(new TreeWalker(function(node) {
    if (node instanceof AST_Scope)
      node.variables.forEach(rename);
    if (node instanceof AST_SymbolCatch)
      rename(node.definition());
  }));
  function next_name() {
    var name;
    do {
      name = nth_identifier.get(cname++);
    } while (avoid.has(name) || ALL_RESERVED_WORDS.has(name));
    return name;
  }
  function rename(def) {
    if (def.global && options3.cache)
      return;
    if (def.unmangleable(options3))
      return;
    if (options3.reserved.has(def.name))
      return;
    const redefinition = redefined_catch_def(def);
    const name = def.name = redefinition ? redefinition.name : next_name();
    def.orig.forEach(function(sym) {
      sym.name = name;
    });
    def.references.forEach(function(sym) {
      sym.name = name;
    });
  }
});
AST_Node.DEFMETHOD("tail_node", return_this);
AST_Sequence.DEFMETHOD("tail_node", function() {
  return this.expressions[this.expressions.length - 1];
});
AST_Toplevel.DEFMETHOD("compute_char_frequency", function(options3) {
  options3 = format_mangler_options(options3);
  var nth_identifier = options3.nth_identifier;
  if (!nth_identifier.reset || !nth_identifier.consider || !nth_identifier.sort) {
    return;
  }
  nth_identifier.reset();
  try {
    AST_Node.prototype.print = function(stream2, force_parens) {
      this._print(stream2, force_parens);
      if (this instanceof AST_Symbol && !this.unmangleable(options3)) {
        nth_identifier.consider(this.name, -1);
      } else if (options3.properties) {
        if (this instanceof AST_DotHash) {
          nth_identifier.consider("#" + this.property, -1);
        } else if (this instanceof AST_Dot) {
          nth_identifier.consider(this.property, -1);
        } else if (this instanceof AST_Sub) {
          skip_string(this.property);
        }
      }
    };
    nth_identifier.consider(this.print_to_string(), 1);
  } finally {
    AST_Node.prototype.print = AST_Node.prototype._print;
  }
  nth_identifier.sort();
  function skip_string(node) {
    if (node instanceof AST_String) {
      nth_identifier.consider(node.value, -1);
    } else if (node instanceof AST_Conditional) {
      skip_string(node.consequent);
      skip_string(node.alternative);
    } else if (node instanceof AST_Sequence) {
      skip_string(node.tail_node());
    }
  }
});
var base54 = (() => {
  const leading = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_".split("");
  const digits = "0123456789".split("");
  let chars2;
  let frequency;
  function reset() {
    frequency = /* @__PURE__ */ new Map();
    leading.forEach(function(ch) {
      frequency.set(ch, 0);
    });
    digits.forEach(function(ch) {
      frequency.set(ch, 0);
    });
  }
  function consider(str, delta) {
    for (var i = str.length; --i >= 0; ) {
      frequency.set(str[i], frequency.get(str[i]) + delta);
    }
  }
  function compare(a, b) {
    return frequency.get(b) - frequency.get(a);
  }
  function sort2() {
    chars2 = mergeSort(leading, compare).concat(mergeSort(digits, compare));
  }
  reset();
  sort2();
  function base542(num) {
    var ret = "", base = 54;
    num++;
    do {
      num--;
      ret += chars2[num % base];
      num = Math.floor(num / base);
      base = 64;
    } while (num > 0);
    return ret;
  }
  return {
    get: base542,
    consider,
    reset,
    sort: sort2
  };
})();

// node_modules/terser/lib/size.js
var mangle_options = void 0;
AST_Node.prototype.size = function(compressor, stack) {
  mangle_options = compressor && compressor.mangle_options;
  let size = 0;
  walk_parent(this, (node, info) => {
    size += node._size(info);
    if (node instanceof AST_Arrow && node.is_braceless()) {
      size += node.body[0].value._size(info);
      return true;
    }
  }, stack || compressor && compressor.stack);
  mangle_options = void 0;
  return size;
};
AST_Node.prototype._size = () => 0;
AST_Debugger.prototype._size = () => 8;
AST_Directive.prototype._size = function() {
  return 2 + this.value.length;
};
var list_overhead = (array) => array.length && array.length - 1;
AST_Block.prototype._size = function() {
  return 2 + list_overhead(this.body);
};
AST_Toplevel.prototype._size = function() {
  return list_overhead(this.body);
};
AST_EmptyStatement.prototype._size = () => 1;
AST_LabeledStatement.prototype._size = () => 2;
AST_Do.prototype._size = () => 9;
AST_While.prototype._size = () => 7;
AST_For.prototype._size = () => 8;
AST_ForIn.prototype._size = () => 8;
AST_With.prototype._size = () => 6;
AST_Expansion.prototype._size = () => 3;
var lambda_modifiers = (func) => (func.is_generator ? 1 : 0) + (func.async ? 6 : 0);
AST_Accessor.prototype._size = function() {
  return lambda_modifiers(this) + 4 + list_overhead(this.argnames) + list_overhead(this.body);
};
AST_Function.prototype._size = function(info) {
  const first = !!first_in_statement(info);
  return first * 2 + lambda_modifiers(this) + 12 + list_overhead(this.argnames) + list_overhead(this.body);
};
AST_Defun.prototype._size = function() {
  return lambda_modifiers(this) + 13 + list_overhead(this.argnames) + list_overhead(this.body);
};
AST_Arrow.prototype._size = function() {
  let args_and_arrow = 2 + list_overhead(this.argnames);
  if (!(this.argnames.length === 1 && this.argnames[0] instanceof AST_Symbol)) {
    args_and_arrow += 2;
  }
  const body_overhead = this.is_braceless() ? 0 : list_overhead(this.body) + 2;
  return lambda_modifiers(this) + args_and_arrow + body_overhead;
};
AST_Destructuring.prototype._size = () => 2;
AST_TemplateString.prototype._size = function() {
  return 2 + Math.floor(this.segments.length / 2) * 3;
};
AST_TemplateSegment.prototype._size = function() {
  return this.value.length;
};
AST_Return.prototype._size = function() {
  return this.value ? 7 : 6;
};
AST_Throw.prototype._size = () => 6;
AST_Break.prototype._size = function() {
  return this.label ? 6 : 5;
};
AST_Continue.prototype._size = function() {
  return this.label ? 9 : 8;
};
AST_If.prototype._size = () => 4;
AST_Switch.prototype._size = function() {
  return 8 + list_overhead(this.body);
};
AST_Case.prototype._size = function() {
  return 5 + list_overhead(this.body);
};
AST_Default.prototype._size = function() {
  return 8 + list_overhead(this.body);
};
AST_Try.prototype._size = () => 3;
AST_Catch.prototype._size = function() {
  let size = 7 + list_overhead(this.body);
  if (this.argname) {
    size += 2;
  }
  return size;
};
AST_Finally.prototype._size = function() {
  return 7 + list_overhead(this.body);
};
AST_Var.prototype._size = function() {
  return 4 + list_overhead(this.definitions);
};
AST_Let.prototype._size = function() {
  return 4 + list_overhead(this.definitions);
};
AST_Const.prototype._size = function() {
  return 6 + list_overhead(this.definitions);
};
AST_VarDef.prototype._size = function() {
  return this.value ? 1 : 0;
};
AST_NameMapping.prototype._size = function() {
  return this.name ? 4 : 0;
};
AST_Import.prototype._size = function() {
  let size = 6;
  if (this.imported_name)
    size += 1;
  if (this.imported_name || this.imported_names)
    size += 5;
  if (this.imported_names) {
    size += 2 + list_overhead(this.imported_names);
  }
  return size;
};
AST_ImportMeta.prototype._size = () => 11;
AST_Export.prototype._size = function() {
  let size = 7 + (this.is_default ? 8 : 0);
  if (this.exported_value) {
    size += this.exported_value._size();
  }
  if (this.exported_names) {
    size += 2 + list_overhead(this.exported_names);
  }
  if (this.module_name) {
    size += 5;
  }
  return size;
};
AST_Call.prototype._size = function() {
  if (this.optional) {
    return 4 + list_overhead(this.args);
  }
  return 2 + list_overhead(this.args);
};
AST_New.prototype._size = function() {
  return 6 + list_overhead(this.args);
};
AST_Sequence.prototype._size = function() {
  return list_overhead(this.expressions);
};
AST_Dot.prototype._size = function() {
  if (this.optional) {
    return this.property.length + 2;
  }
  return this.property.length + 1;
};
AST_DotHash.prototype._size = function() {
  if (this.optional) {
    return this.property.length + 3;
  }
  return this.property.length + 2;
};
AST_Sub.prototype._size = function() {
  return this.optional ? 4 : 2;
};
AST_Unary.prototype._size = function() {
  if (this.operator === "typeof")
    return 7;
  if (this.operator === "void")
    return 5;
  return this.operator.length;
};
AST_Binary.prototype._size = function(info) {
  if (this.operator === "in")
    return 4;
  let size = this.operator.length;
  if ((this.operator === "+" || this.operator === "-") && this.right instanceof AST_Unary && this.right.operator === this.operator) {
    size += 1;
  }
  if (this.needs_parens(info)) {
    size += 2;
  }
  return size;
};
AST_Conditional.prototype._size = () => 3;
AST_Array.prototype._size = function() {
  return 2 + list_overhead(this.elements);
};
AST_Object.prototype._size = function(info) {
  let base = 2;
  if (first_in_statement(info)) {
    base += 2;
  }
  return base + list_overhead(this.properties);
};
var key_size = (key) => typeof key === "string" ? key.length : 0;
AST_ObjectKeyVal.prototype._size = function() {
  return key_size(this.key) + 1;
};
var static_size = (is_static) => is_static ? 7 : 0;
AST_ObjectGetter.prototype._size = function() {
  return 5 + static_size(this.static) + key_size(this.key);
};
AST_ObjectSetter.prototype._size = function() {
  return 5 + static_size(this.static) + key_size(this.key);
};
AST_ConciseMethod.prototype._size = function() {
  return static_size(this.static) + key_size(this.key) + lambda_modifiers(this);
};
AST_PrivateMethod.prototype._size = function() {
  return AST_ConciseMethod.prototype._size.call(this) + 1;
};
AST_PrivateGetter.prototype._size = AST_PrivateSetter.prototype._size = function() {
  return AST_ConciseMethod.prototype._size.call(this) + 4;
};
AST_PrivateIn.prototype._size = function() {
  return 5;
};
AST_Class.prototype._size = function() {
  return (this.name ? 8 : 7) + (this.extends ? 8 : 0);
};
AST_ClassStaticBlock.prototype._size = function() {
  return 7 + list_overhead(this.body);
};
AST_ClassProperty.prototype._size = function() {
  return static_size(this.static) + (typeof this.key === "string" ? this.key.length + 2 : 0) + (this.value ? 1 : 0);
};
AST_ClassPrivateProperty.prototype._size = function() {
  return AST_ClassProperty.prototype._size.call(this) + 1;
};
AST_Symbol.prototype._size = function() {
  if (!(mangle_options && this.thedef && !this.thedef.unmangleable(mangle_options))) {
    return this.name.length;
  } else {
    return 1;
  }
};
AST_SymbolClassProperty.prototype._size = function() {
  return this.name.length;
};
AST_SymbolRef.prototype._size = AST_SymbolDeclaration.prototype._size = function() {
  if (this.name === "arguments")
    return 9;
  return AST_Symbol.prototype._size.call(this);
};
AST_NewTarget.prototype._size = () => 10;
AST_SymbolImportForeign.prototype._size = function() {
  return this.name.length;
};
AST_SymbolExportForeign.prototype._size = function() {
  return this.name.length;
};
AST_This.prototype._size = () => 4;
AST_Super.prototype._size = () => 5;
AST_String.prototype._size = function() {
  return this.value.length + 2;
};
AST_Number.prototype._size = function() {
  const { value } = this;
  if (value === 0)
    return 1;
  if (value > 0 && Math.floor(value) === value) {
    return Math.floor(Math.log10(value) + 1);
  }
  return value.toString().length;
};
AST_BigInt.prototype._size = function() {
  return this.value.length;
};
AST_RegExp.prototype._size = function() {
  return this.value.toString().length;
};
AST_Null.prototype._size = () => 4;
AST_NaN.prototype._size = () => 3;
AST_Undefined.prototype._size = () => 6;
AST_Hole.prototype._size = () => 0;
AST_Infinity.prototype._size = () => 8;
AST_True.prototype._size = () => 4;
AST_False.prototype._size = () => 5;
AST_Await.prototype._size = () => 6;
AST_Yield.prototype._size = () => 6;

// node_modules/terser/lib/compress/compressor-flags.js
var UNUSED = 1;
var TRUTHY = 2;
var FALSY = 4;
var UNDEFINED = 8;
var INLINED = 16;
var WRITE_ONLY = 32;
var SQUEEZED = 256;
var OPTIMIZED = 512;
var TOP = 1024;
var CLEAR_BETWEEN_PASSES = SQUEEZED | OPTIMIZED | TOP;
var has_flag = (node, flag) => node.flags & flag;
var set_flag = (node, flag) => {
  node.flags |= flag;
};
var clear_flag = (node, flag) => {
  node.flags &= ~flag;
};

// node_modules/terser/lib/compress/common.js
function merge_sequence(array, node) {
  if (node instanceof AST_Sequence) {
    array.push(...node.expressions);
  } else {
    array.push(node);
  }
  return array;
}
function make_sequence(orig, expressions) {
  if (expressions.length == 1)
    return expressions[0];
  if (expressions.length == 0)
    throw new Error("trying to create a sequence with length zero!");
  return make_node(AST_Sequence, orig, {
    expressions: expressions.reduce(merge_sequence, [])
  });
}
function make_node_from_constant(val, orig) {
  switch (typeof val) {
    case "string":
      return make_node(AST_String, orig, {
        value: val
      });
    case "number":
      if (isNaN(val))
        return make_node(AST_NaN, orig);
      if (isFinite(val)) {
        return 1 / val < 0 ? make_node(AST_UnaryPrefix, orig, {
          operator: "-",
          expression: make_node(AST_Number, orig, { value: -val })
        }) : make_node(AST_Number, orig, { value: val });
      }
      return val < 0 ? make_node(AST_UnaryPrefix, orig, {
        operator: "-",
        expression: make_node(AST_Infinity, orig)
      }) : make_node(AST_Infinity, orig);
    case "boolean":
      return make_node(val ? AST_True : AST_False, orig);
    case "undefined":
      return make_node(AST_Undefined, orig);
    default:
      if (val === null) {
        return make_node(AST_Null, orig, { value: null });
      }
      if (val instanceof RegExp) {
        return make_node(AST_RegExp, orig, {
          value: {
            source: regexp_source_fix(val.source),
            flags: val.flags
          }
        });
      }
      throw new Error(string_template("Can't handle constant of type: {type}", {
        type: typeof val
      }));
  }
}
function best_of_expression(ast1, ast2) {
  return ast1.size() > ast2.size() ? ast2 : ast1;
}
function best_of_statement(ast1, ast2) {
  return best_of_expression(
    make_node(AST_SimpleStatement, ast1, {
      body: ast1
    }),
    make_node(AST_SimpleStatement, ast2, {
      body: ast2
    })
  ).body;
}
function best_of(compressor, ast1, ast2) {
  if (first_in_statement(compressor)) {
    return best_of_statement(ast1, ast2);
  } else {
    return best_of_expression(ast1, ast2);
  }
}
function get_simple_key(key) {
  if (key instanceof AST_Constant) {
    return key.getValue();
  }
  if (key instanceof AST_UnaryPrefix && key.operator == "void" && key.expression instanceof AST_Constant) {
    return;
  }
  return key;
}
function read_property(obj, key) {
  key = get_simple_key(key);
  if (key instanceof AST_Node)
    return;
  var value;
  if (obj instanceof AST_Array) {
    var elements = obj.elements;
    if (key == "length")
      return make_node_from_constant(elements.length, obj);
    if (typeof key == "number" && key in elements)
      value = elements[key];
  } else if (obj instanceof AST_Object) {
    key = "" + key;
    var props = obj.properties;
    for (var i = props.length; --i >= 0; ) {
      var prop = props[i];
      if (!(prop instanceof AST_ObjectKeyVal))
        return;
      if (!value && props[i].key === key)
        value = props[i].value;
    }
  }
  return value instanceof AST_SymbolRef && value.fixed_value() || value;
}
function has_break_or_continue(loop, parent) {
  var found2 = false;
  var tw = new TreeWalker(function(node) {
    if (found2 || node instanceof AST_Scope)
      return true;
    if (node instanceof AST_LoopControl && tw.loopcontrol_target(node) === loop) {
      return found2 = true;
    }
  });
  if (parent instanceof AST_LabeledStatement)
    tw.push(parent);
  tw.push(loop);
  loop.body.walk(tw);
  return found2;
}
function maintain_this_binding(parent, orig, val) {
  if (parent instanceof AST_UnaryPrefix && parent.operator == "delete" || parent instanceof AST_Call && parent.expression === orig && (val instanceof AST_Chain || val instanceof AST_PropAccess || val instanceof AST_SymbolRef && val.name == "eval")) {
    const zero = make_node(AST_Number, orig, { value: 0 });
    return make_sequence(orig, [zero, val]);
  } else {
    return val;
  }
}
function is_func_expr(node) {
  return node instanceof AST_Arrow || node instanceof AST_Function;
}
function is_iife_call(node) {
  if (node.TYPE != "Call")
    return false;
  return node.expression instanceof AST_Function || is_iife_call(node.expression);
}
function is_empty(thing) {
  if (thing === null)
    return true;
  if (thing instanceof AST_EmptyStatement)
    return true;
  if (thing instanceof AST_BlockStatement)
    return thing.body.length == 0;
  return false;
}
var identifier_atom = makePredicate("Infinity NaN undefined");
function is_identifier_atom(node) {
  return node instanceof AST_Infinity || node instanceof AST_NaN || node instanceof AST_Undefined;
}
function is_ref_of(ref, type) {
  if (!(ref instanceof AST_SymbolRef))
    return false;
  var orig = ref.definition().orig;
  for (var i = orig.length; --i >= 0; ) {
    if (orig[i] instanceof type)
      return true;
  }
}
function can_be_evicted_from_block(node) {
  return !(node instanceof AST_DefClass || node instanceof AST_Defun || node instanceof AST_Let || node instanceof AST_Const || node instanceof AST_Export || node instanceof AST_Import);
}
function as_statement_array(thing) {
  if (thing === null)
    return [];
  if (thing instanceof AST_BlockStatement)
    return thing.body;
  if (thing instanceof AST_EmptyStatement)
    return [];
  if (thing instanceof AST_Statement)
    return [thing];
  throw new Error("Can't convert thing to statement array");
}
function is_reachable(scope_node, defs) {
  const find_ref = (node) => {
    if (node instanceof AST_SymbolRef && defs.includes(node.definition())) {
      return walk_abort;
    }
  };
  return walk_parent(scope_node, (node, info) => {
    if (node instanceof AST_Scope && node !== scope_node) {
      var parent = info.parent();
      if (parent instanceof AST_Call && parent.expression === node && !(node.async || node.is_generator)) {
        return;
      }
      if (walk(node, find_ref))
        return walk_abort;
      return true;
    }
  });
}
function is_recursive_ref(compressor, def) {
  var node;
  for (var i = 0; node = compressor.parent(i); i++) {
    if (node instanceof AST_Lambda || node instanceof AST_Class) {
      var name = node.name;
      if (name && name.definition() === def) {
        return true;
      }
    }
  }
  return false;
}
function retain_top_func(fn, compressor) {
  return compressor.top_retain && fn instanceof AST_Defun && has_flag(fn, TOP) && fn.name && compressor.top_retain(fn.name);
}

// node_modules/terser/lib/compress/native-objects.js
function make_nested_lookup(obj) {
  const out = /* @__PURE__ */ new Map();
  for (var key of Object.keys(obj)) {
    out.set(key, makePredicate(obj[key]));
  }
  const does_have = (global_name, fname) => {
    const inner_map = out.get(global_name);
    return inner_map != null && inner_map.has(fname);
  };
  return does_have;
}
var pure_prop_access_globals = /* @__PURE__ */ new Set([
  "Number",
  "String",
  "Array",
  "Object",
  "Function",
  "Promise"
]);
var object_methods = [
  "constructor",
  "toString",
  "valueOf"
];
var is_pure_native_method = make_nested_lookup({
  Array: [
    "at",
    "flat",
    "includes",
    "indexOf",
    "join",
    "lastIndexOf",
    "slice",
    ...object_methods
  ],
  Boolean: object_methods,
  Function: object_methods,
  Number: [
    "toExponential",
    "toFixed",
    "toPrecision",
    ...object_methods
  ],
  Object: object_methods,
  RegExp: [
    "test",
    ...object_methods
  ],
  String: [
    "at",
    "charAt",
    "charCodeAt",
    "charPointAt",
    "concat",
    "endsWith",
    "fromCharCode",
    "fromCodePoint",
    "includes",
    "indexOf",
    "italics",
    "lastIndexOf",
    "localeCompare",
    "match",
    "matchAll",
    "normalize",
    "padStart",
    "padEnd",
    "repeat",
    "replace",
    "replaceAll",
    "search",
    "slice",
    "split",
    "startsWith",
    "substr",
    "substring",
    "repeat",
    "toLocaleLowerCase",
    "toLocaleUpperCase",
    "toLowerCase",
    "toUpperCase",
    "trim",
    "trimEnd",
    "trimStart",
    ...object_methods
  ]
});
var is_pure_native_fn = make_nested_lookup({
  Array: [
    "isArray"
  ],
  Math: [
    "abs",
    "acos",
    "asin",
    "atan",
    "ceil",
    "cos",
    "exp",
    "floor",
    "log",
    "round",
    "sin",
    "sqrt",
    "tan",
    "atan2",
    "pow",
    "max",
    "min"
  ],
  Number: [
    "isFinite",
    "isNaN"
  ],
  Object: [
    "create",
    "getOwnPropertyDescriptor",
    "getOwnPropertyNames",
    "getPrototypeOf",
    "isExtensible",
    "isFrozen",
    "isSealed",
    "hasOwn",
    "keys"
  ],
  String: [
    "fromCharCode"
  ]
});
var is_pure_native_value = make_nested_lookup({
  Math: [
    "E",
    "LN10",
    "LN2",
    "LOG2E",
    "LOG10E",
    "PI",
    "SQRT1_2",
    "SQRT2"
  ],
  Number: [
    "MAX_VALUE",
    "MIN_VALUE",
    "NaN",
    "NEGATIVE_INFINITY",
    "POSITIVE_INFINITY"
  ]
});

// node_modules/terser/lib/compress/inference.js
var is_undeclared_ref = (node) => node instanceof AST_SymbolRef && node.definition().undeclared;
var lazy_op = makePredicate("&& || ??");
var unary_side_effects = makePredicate("delete ++ --");
(function(def_is_boolean) {
  const unary_bool = makePredicate("! delete");
  const binary_bool = makePredicate("in instanceof == != === !== < <= >= >");
  def_is_boolean(AST_Node, return_false);
  def_is_boolean(AST_UnaryPrefix, function() {
    return unary_bool.has(this.operator);
  });
  def_is_boolean(AST_Binary, function() {
    return binary_bool.has(this.operator) || lazy_op.has(this.operator) && this.left.is_boolean() && this.right.is_boolean();
  });
  def_is_boolean(AST_Conditional, function() {
    return this.consequent.is_boolean() && this.alternative.is_boolean();
  });
  def_is_boolean(AST_Assign, function() {
    return this.operator == "=" && this.right.is_boolean();
  });
  def_is_boolean(AST_Sequence, function() {
    return this.tail_node().is_boolean();
  });
  def_is_boolean(AST_True, return_true);
  def_is_boolean(AST_False, return_true);
})(function(node, func) {
  node.DEFMETHOD("is_boolean", func);
});
(function(def_is_number) {
  def_is_number(AST_Node, return_false);
  def_is_number(AST_Number, return_true);
  const unary = makePredicate("+ - ~ ++ --");
  def_is_number(AST_Unary, function() {
    return unary.has(this.operator) && !(this.expression instanceof AST_BigInt);
  });
  const numeric_ops = makePredicate("- * / % & | ^ << >> >>>");
  def_is_number(AST_Binary, function(compressor) {
    return numeric_ops.has(this.operator) || this.operator == "+" && this.left.is_number(compressor) && this.right.is_number(compressor);
  });
  def_is_number(AST_Assign, function(compressor) {
    return numeric_ops.has(this.operator.slice(0, -1)) || this.operator == "=" && this.right.is_number(compressor);
  });
  def_is_number(AST_Sequence, function(compressor) {
    return this.tail_node().is_number(compressor);
  });
  def_is_number(AST_Conditional, function(compressor) {
    return this.consequent.is_number(compressor) && this.alternative.is_number(compressor);
  });
})(function(node, func) {
  node.DEFMETHOD("is_number", func);
});
(function(def_is_string) {
  def_is_string(AST_Node, return_false);
  def_is_string(AST_String, return_true);
  def_is_string(AST_TemplateString, return_true);
  def_is_string(AST_UnaryPrefix, function() {
    return this.operator == "typeof";
  });
  def_is_string(AST_Binary, function(compressor) {
    return this.operator == "+" && (this.left.is_string(compressor) || this.right.is_string(compressor));
  });
  def_is_string(AST_Assign, function(compressor) {
    return (this.operator == "=" || this.operator == "+=") && this.right.is_string(compressor);
  });
  def_is_string(AST_Sequence, function(compressor) {
    return this.tail_node().is_string(compressor);
  });
  def_is_string(AST_Conditional, function(compressor) {
    return this.consequent.is_string(compressor) && this.alternative.is_string(compressor);
  });
})(function(node, func) {
  node.DEFMETHOD("is_string", func);
});
function is_undefined(node, compressor) {
  return has_flag(node, UNDEFINED) || node instanceof AST_Undefined || node instanceof AST_UnaryPrefix && node.operator == "void" && !node.expression.has_side_effects(compressor);
}
function is_null_or_undefined(node, compressor) {
  let fixed;
  return node instanceof AST_Null || is_undefined(node, compressor) || node instanceof AST_SymbolRef && (fixed = node.definition().fixed) instanceof AST_Node && is_nullish(fixed, compressor);
}
function is_nullish_shortcircuited(node, compressor) {
  if (node instanceof AST_PropAccess || node instanceof AST_Call) {
    return node.optional && is_null_or_undefined(node.expression, compressor) || is_nullish_shortcircuited(node.expression, compressor);
  }
  if (node instanceof AST_Chain)
    return is_nullish_shortcircuited(node.expression, compressor);
  return false;
}
function is_nullish(node, compressor) {
  if (is_null_or_undefined(node, compressor))
    return true;
  return is_nullish_shortcircuited(node, compressor);
}
(function(def_has_side_effects) {
  def_has_side_effects(AST_Node, return_true);
  def_has_side_effects(AST_EmptyStatement, return_false);
  def_has_side_effects(AST_Constant, return_false);
  def_has_side_effects(AST_This, return_false);
  function any(list, compressor) {
    for (var i = list.length; --i >= 0; )
      if (list[i].has_side_effects(compressor))
        return true;
    return false;
  }
  def_has_side_effects(AST_Block, function(compressor) {
    return any(this.body, compressor);
  });
  def_has_side_effects(AST_Call, function(compressor) {
    if (!this.is_callee_pure(compressor) && (!this.expression.is_call_pure(compressor) || this.expression.has_side_effects(compressor))) {
      return true;
    }
    return any(this.args, compressor);
  });
  def_has_side_effects(AST_Switch, function(compressor) {
    return this.expression.has_side_effects(compressor) || any(this.body, compressor);
  });
  def_has_side_effects(AST_Case, function(compressor) {
    return this.expression.has_side_effects(compressor) || any(this.body, compressor);
  });
  def_has_side_effects(AST_Try, function(compressor) {
    return this.body.has_side_effects(compressor) || this.bcatch && this.bcatch.has_side_effects(compressor) || this.bfinally && this.bfinally.has_side_effects(compressor);
  });
  def_has_side_effects(AST_If, function(compressor) {
    return this.condition.has_side_effects(compressor) || this.body && this.body.has_side_effects(compressor) || this.alternative && this.alternative.has_side_effects(compressor);
  });
  def_has_side_effects(AST_ImportMeta, return_false);
  def_has_side_effects(AST_LabeledStatement, function(compressor) {
    return this.body.has_side_effects(compressor);
  });
  def_has_side_effects(AST_SimpleStatement, function(compressor) {
    return this.body.has_side_effects(compressor);
  });
  def_has_side_effects(AST_Lambda, return_false);
  def_has_side_effects(AST_Class, function(compressor) {
    if (this.extends && this.extends.has_side_effects(compressor)) {
      return true;
    }
    return any(this.properties, compressor);
  });
  def_has_side_effects(AST_ClassStaticBlock, function(compressor) {
    return any(this.body, compressor);
  });
  def_has_side_effects(AST_Binary, function(compressor) {
    return this.left.has_side_effects(compressor) || this.right.has_side_effects(compressor);
  });
  def_has_side_effects(AST_Assign, return_true);
  def_has_side_effects(AST_Conditional, function(compressor) {
    return this.condition.has_side_effects(compressor) || this.consequent.has_side_effects(compressor) || this.alternative.has_side_effects(compressor);
  });
  def_has_side_effects(AST_Unary, function(compressor) {
    return unary_side_effects.has(this.operator) || this.expression.has_side_effects(compressor);
  });
  def_has_side_effects(AST_SymbolRef, function(compressor) {
    return !this.is_declared(compressor) && !pure_prop_access_globals.has(this.name);
  });
  def_has_side_effects(AST_SymbolClassProperty, return_false);
  def_has_side_effects(AST_SymbolDeclaration, return_false);
  def_has_side_effects(AST_Object, function(compressor) {
    return any(this.properties, compressor);
  });
  def_has_side_effects(AST_ObjectProperty, function(compressor) {
    return this.computed_key() && this.key.has_side_effects(compressor) || this.value && this.value.has_side_effects(compressor);
  });
  def_has_side_effects(AST_ClassProperty, function(compressor) {
    return this.computed_key() && this.key.has_side_effects(compressor) || this.static && this.value && this.value.has_side_effects(compressor);
  });
  def_has_side_effects(AST_ConciseMethod, function(compressor) {
    return this.computed_key() && this.key.has_side_effects(compressor);
  });
  def_has_side_effects(AST_ObjectGetter, function(compressor) {
    return this.computed_key() && this.key.has_side_effects(compressor);
  });
  def_has_side_effects(AST_ObjectSetter, function(compressor) {
    return this.computed_key() && this.key.has_side_effects(compressor);
  });
  def_has_side_effects(AST_Array, function(compressor) {
    return any(this.elements, compressor);
  });
  def_has_side_effects(AST_Dot, function(compressor) {
    if (is_nullish(this, compressor))
      return false;
    return !this.optional && this.expression.may_throw_on_access(compressor) || this.expression.has_side_effects(compressor);
  });
  def_has_side_effects(AST_Sub, function(compressor) {
    if (is_nullish(this, compressor))
      return false;
    return !this.optional && this.expression.may_throw_on_access(compressor) || this.expression.has_side_effects(compressor) || this.property.has_side_effects(compressor);
  });
  def_has_side_effects(AST_Chain, function(compressor) {
    return this.expression.has_side_effects(compressor);
  });
  def_has_side_effects(AST_Sequence, function(compressor) {
    return any(this.expressions, compressor);
  });
  def_has_side_effects(AST_Definitions, function(compressor) {
    return any(this.definitions, compressor);
  });
  def_has_side_effects(AST_VarDef, function() {
    return this.value;
  });
  def_has_side_effects(AST_TemplateSegment, return_false);
  def_has_side_effects(AST_TemplateString, function(compressor) {
    return any(this.segments, compressor);
  });
})(function(node, func) {
  node.DEFMETHOD("has_side_effects", func);
});
(function(def_may_throw) {
  def_may_throw(AST_Node, return_true);
  def_may_throw(AST_Constant, return_false);
  def_may_throw(AST_EmptyStatement, return_false);
  def_may_throw(AST_Lambda, return_false);
  def_may_throw(AST_SymbolDeclaration, return_false);
  def_may_throw(AST_This, return_false);
  def_may_throw(AST_ImportMeta, return_false);
  function any(list, compressor) {
    for (var i = list.length; --i >= 0; )
      if (list[i].may_throw(compressor))
        return true;
    return false;
  }
  def_may_throw(AST_Class, function(compressor) {
    if (this.extends && this.extends.may_throw(compressor))
      return true;
    return any(this.properties, compressor);
  });
  def_may_throw(AST_ClassStaticBlock, function(compressor) {
    return any(this.body, compressor);
  });
  def_may_throw(AST_Array, function(compressor) {
    return any(this.elements, compressor);
  });
  def_may_throw(AST_Assign, function(compressor) {
    if (this.right.may_throw(compressor))
      return true;
    if (!compressor.has_directive("use strict") && this.operator == "=" && this.left instanceof AST_SymbolRef) {
      return false;
    }
    return this.left.may_throw(compressor);
  });
  def_may_throw(AST_Binary, function(compressor) {
    return this.left.may_throw(compressor) || this.right.may_throw(compressor);
  });
  def_may_throw(AST_Block, function(compressor) {
    return any(this.body, compressor);
  });
  def_may_throw(AST_Call, function(compressor) {
    if (is_nullish(this, compressor))
      return false;
    if (any(this.args, compressor))
      return true;
    if (this.is_callee_pure(compressor))
      return false;
    if (this.expression.may_throw(compressor))
      return true;
    return !(this.expression instanceof AST_Lambda) || any(this.expression.body, compressor);
  });
  def_may_throw(AST_Case, function(compressor) {
    return this.expression.may_throw(compressor) || any(this.body, compressor);
  });
  def_may_throw(AST_Conditional, function(compressor) {
    return this.condition.may_throw(compressor) || this.consequent.may_throw(compressor) || this.alternative.may_throw(compressor);
  });
  def_may_throw(AST_Definitions, function(compressor) {
    return any(this.definitions, compressor);
  });
  def_may_throw(AST_If, function(compressor) {
    return this.condition.may_throw(compressor) || this.body && this.body.may_throw(compressor) || this.alternative && this.alternative.may_throw(compressor);
  });
  def_may_throw(AST_LabeledStatement, function(compressor) {
    return this.body.may_throw(compressor);
  });
  def_may_throw(AST_Object, function(compressor) {
    return any(this.properties, compressor);
  });
  def_may_throw(AST_ObjectProperty, function(compressor) {
    return this.value ? this.value.may_throw(compressor) : false;
  });
  def_may_throw(AST_ClassProperty, function(compressor) {
    return this.computed_key() && this.key.may_throw(compressor) || this.static && this.value && this.value.may_throw(compressor);
  });
  def_may_throw(AST_ConciseMethod, function(compressor) {
    return this.computed_key() && this.key.may_throw(compressor);
  });
  def_may_throw(AST_ObjectGetter, function(compressor) {
    return this.computed_key() && this.key.may_throw(compressor);
  });
  def_may_throw(AST_ObjectSetter, function(compressor) {
    return this.computed_key() && this.key.may_throw(compressor);
  });
  def_may_throw(AST_Return, function(compressor) {
    return this.value && this.value.may_throw(compressor);
  });
  def_may_throw(AST_Sequence, function(compressor) {
    return any(this.expressions, compressor);
  });
  def_may_throw(AST_SimpleStatement, function(compressor) {
    return this.body.may_throw(compressor);
  });
  def_may_throw(AST_Dot, function(compressor) {
    if (is_nullish(this, compressor))
      return false;
    return !this.optional && this.expression.may_throw_on_access(compressor) || this.expression.may_throw(compressor);
  });
  def_may_throw(AST_Sub, function(compressor) {
    if (is_nullish(this, compressor))
      return false;
    return !this.optional && this.expression.may_throw_on_access(compressor) || this.expression.may_throw(compressor) || this.property.may_throw(compressor);
  });
  def_may_throw(AST_Chain, function(compressor) {
    return this.expression.may_throw(compressor);
  });
  def_may_throw(AST_Switch, function(compressor) {
    return this.expression.may_throw(compressor) || any(this.body, compressor);
  });
  def_may_throw(AST_SymbolRef, function(compressor) {
    return !this.is_declared(compressor) && !pure_prop_access_globals.has(this.name);
  });
  def_may_throw(AST_SymbolClassProperty, return_false);
  def_may_throw(AST_Try, function(compressor) {
    return this.bcatch ? this.bcatch.may_throw(compressor) : this.body.may_throw(compressor) || this.bfinally && this.bfinally.may_throw(compressor);
  });
  def_may_throw(AST_Unary, function(compressor) {
    if (this.operator == "typeof" && this.expression instanceof AST_SymbolRef)
      return false;
    return this.expression.may_throw(compressor);
  });
  def_may_throw(AST_VarDef, function(compressor) {
    if (!this.value)
      return false;
    return this.value.may_throw(compressor);
  });
})(function(node, func) {
  node.DEFMETHOD("may_throw", func);
});
(function(def_is_constant_expression) {
  function all_refs_local(scope) {
    let result = true;
    walk(this, (node) => {
      if (node instanceof AST_SymbolRef) {
        if (has_flag(this, INLINED)) {
          result = false;
          return walk_abort;
        }
        var def = node.definition();
        if (member(def, this.enclosed) && !this.variables.has(def.name)) {
          if (scope) {
            var scope_def = scope.find_variable(node);
            if (def.undeclared ? !scope_def : scope_def === def) {
              result = "f";
              return true;
            }
          }
          result = false;
          return walk_abort;
        }
        return true;
      }
      if (node instanceof AST_This && this instanceof AST_Arrow) {
        result = false;
        return walk_abort;
      }
    });
    return result;
  }
  def_is_constant_expression(AST_Node, return_false);
  def_is_constant_expression(AST_Constant, return_true);
  def_is_constant_expression(AST_Class, function(scope) {
    if (this.extends && !this.extends.is_constant_expression(scope)) {
      return false;
    }
    for (const prop of this.properties) {
      if (prop.computed_key() && !prop.key.is_constant_expression(scope)) {
        return false;
      }
      if (prop.static && prop.value && !prop.value.is_constant_expression(scope)) {
        return false;
      }
      if (prop instanceof AST_ClassStaticBlock) {
        return false;
      }
    }
    return all_refs_local.call(this, scope);
  });
  def_is_constant_expression(AST_Lambda, all_refs_local);
  def_is_constant_expression(AST_Unary, function() {
    return this.expression.is_constant_expression();
  });
  def_is_constant_expression(AST_Binary, function() {
    return this.left.is_constant_expression() && this.right.is_constant_expression();
  });
  def_is_constant_expression(AST_Array, function() {
    return this.elements.every((l) => l.is_constant_expression());
  });
  def_is_constant_expression(AST_Object, function() {
    return this.properties.every((l) => l.is_constant_expression());
  });
  def_is_constant_expression(AST_ObjectProperty, function() {
    return !!(!(this.key instanceof AST_Node) && this.value && this.value.is_constant_expression());
  });
})(function(node, func) {
  node.DEFMETHOD("is_constant_expression", func);
});
(function(def_may_throw_on_access) {
  AST_Node.DEFMETHOD("may_throw_on_access", function(compressor) {
    return !compressor.option("pure_getters") || this._dot_throw(compressor);
  });
  function is_strict(compressor) {
    return /strict/.test(compressor.option("pure_getters"));
  }
  def_may_throw_on_access(AST_Node, is_strict);
  def_may_throw_on_access(AST_Null, return_true);
  def_may_throw_on_access(AST_Undefined, return_true);
  def_may_throw_on_access(AST_Constant, return_false);
  def_may_throw_on_access(AST_Array, return_false);
  def_may_throw_on_access(AST_Object, function(compressor) {
    if (!is_strict(compressor))
      return false;
    for (var i = this.properties.length; --i >= 0; )
      if (this.properties[i]._dot_throw(compressor))
        return true;
    return false;
  });
  def_may_throw_on_access(AST_Class, return_false);
  def_may_throw_on_access(AST_ObjectProperty, return_false);
  def_may_throw_on_access(AST_ObjectGetter, return_true);
  def_may_throw_on_access(AST_Expansion, function(compressor) {
    return this.expression._dot_throw(compressor);
  });
  def_may_throw_on_access(AST_Function, return_false);
  def_may_throw_on_access(AST_Arrow, return_false);
  def_may_throw_on_access(AST_UnaryPostfix, return_false);
  def_may_throw_on_access(AST_UnaryPrefix, function() {
    return this.operator == "void";
  });
  def_may_throw_on_access(AST_Binary, function(compressor) {
    return (this.operator == "&&" || this.operator == "||" || this.operator == "??") && (this.left._dot_throw(compressor) || this.right._dot_throw(compressor));
  });
  def_may_throw_on_access(AST_Assign, function(compressor) {
    if (this.logical)
      return true;
    return this.operator == "=" && this.right._dot_throw(compressor);
  });
  def_may_throw_on_access(AST_Conditional, function(compressor) {
    return this.consequent._dot_throw(compressor) || this.alternative._dot_throw(compressor);
  });
  def_may_throw_on_access(AST_Dot, function(compressor) {
    if (!is_strict(compressor))
      return false;
    if (this.property == "prototype") {
      return !(this.expression instanceof AST_Function || this.expression instanceof AST_Class);
    }
    return true;
  });
  def_may_throw_on_access(AST_Chain, function(compressor) {
    return this.expression._dot_throw(compressor);
  });
  def_may_throw_on_access(AST_Sequence, function(compressor) {
    return this.tail_node()._dot_throw(compressor);
  });
  def_may_throw_on_access(AST_SymbolRef, function(compressor) {
    if (this.name === "arguments" && this.scope instanceof AST_Lambda)
      return false;
    if (has_flag(this, UNDEFINED))
      return true;
    if (!is_strict(compressor))
      return false;
    if (is_undeclared_ref(this) && this.is_declared(compressor))
      return false;
    if (this.is_immutable())
      return false;
    var fixed = this.fixed_value();
    return !fixed || fixed._dot_throw(compressor);
  });
})(function(node, func) {
  node.DEFMETHOD("_dot_throw", func);
});
function is_lhs(node, parent) {
  if (parent instanceof AST_Unary && unary_side_effects.has(parent.operator))
    return parent.expression;
  if (parent instanceof AST_Assign && parent.left === node)
    return node;
}
(function(def_find_defs) {
  function to_node(value, orig) {
    if (value instanceof AST_Node) {
      if (!(value instanceof AST_Constant)) {
        value = value.clone(true);
      }
      return make_node(value.CTOR, orig, value);
    }
    if (Array.isArray(value))
      return make_node(AST_Array, orig, {
        elements: value.map(function(value2) {
          return to_node(value2, orig);
        })
      });
    if (value && typeof value == "object") {
      var props = [];
      for (var key in value)
        if (HOP(value, key)) {
          props.push(make_node(AST_ObjectKeyVal, orig, {
            key,
            value: to_node(value[key], orig)
          }));
        }
      return make_node(AST_Object, orig, {
        properties: props
      });
    }
    return make_node_from_constant(value, orig);
  }
  AST_Toplevel.DEFMETHOD("resolve_defines", function(compressor) {
    if (!compressor.option("global_defs"))
      return this;
    this.figure_out_scope({ ie8: compressor.option("ie8") });
    return this.transform(new TreeTransformer(function(node) {
      var def = node._find_defs(compressor, "");
      if (!def)
        return;
      var level = 0, child = node, parent;
      while (parent = this.parent(level++)) {
        if (!(parent instanceof AST_PropAccess))
          break;
        if (parent.expression !== child)
          break;
        child = parent;
      }
      if (is_lhs(child, parent)) {
        return;
      }
      return def;
    }));
  });
  def_find_defs(AST_Node, noop);
  def_find_defs(AST_Chain, function(compressor, suffix) {
    return this.expression._find_defs(compressor, suffix);
  });
  def_find_defs(AST_Dot, function(compressor, suffix) {
    return this.expression._find_defs(compressor, "." + this.property + suffix);
  });
  def_find_defs(AST_SymbolDeclaration, function() {
    if (!this.global())
      return;
  });
  def_find_defs(AST_SymbolRef, function(compressor, suffix) {
    if (!this.global())
      return;
    var defines = compressor.option("global_defs");
    var name = this.name + suffix;
    if (HOP(defines, name))
      return to_node(defines[name], this);
  });
  def_find_defs(AST_ImportMeta, function(compressor, suffix) {
    var defines = compressor.option("global_defs");
    var name = "import.meta" + suffix;
    if (HOP(defines, name))
      return to_node(defines[name], this);
  });
})(function(node, func) {
  node.DEFMETHOD("_find_defs", func);
});
(function(def_negate) {
  function basic_negation(exp) {
    return make_node(AST_UnaryPrefix, exp, {
      operator: "!",
      expression: exp
    });
  }
  function best(orig, alt, first_in_statement2) {
    var negated = basic_negation(orig);
    if (first_in_statement2) {
      var stat = make_node(AST_SimpleStatement, alt, {
        body: alt
      });
      return best_of_expression(negated, stat) === stat ? alt : negated;
    }
    return best_of_expression(negated, alt);
  }
  def_negate(AST_Node, function() {
    return basic_negation(this);
  });
  def_negate(AST_Statement, function() {
    throw new Error("Cannot negate a statement");
  });
  def_negate(AST_Function, function() {
    return basic_negation(this);
  });
  def_negate(AST_Arrow, function() {
    return basic_negation(this);
  });
  def_negate(AST_UnaryPrefix, function() {
    if (this.operator == "!")
      return this.expression;
    return basic_negation(this);
  });
  def_negate(AST_Sequence, function(compressor) {
    var expressions = this.expressions.slice();
    expressions.push(expressions.pop().negate(compressor));
    return make_sequence(this, expressions);
  });
  def_negate(AST_Conditional, function(compressor, first_in_statement2) {
    var self2 = this.clone();
    self2.consequent = self2.consequent.negate(compressor);
    self2.alternative = self2.alternative.negate(compressor);
    return best(this, self2, first_in_statement2);
  });
  def_negate(AST_Binary, function(compressor, first_in_statement2) {
    var self2 = this.clone(), op = this.operator;
    if (compressor.option("unsafe_comps")) {
      switch (op) {
        case "<=":
          self2.operator = ">";
          return self2;
        case "<":
          self2.operator = ">=";
          return self2;
        case ">=":
          self2.operator = "<";
          return self2;
        case ">":
          self2.operator = "<=";
          return self2;
      }
    }
    switch (op) {
      case "==":
        self2.operator = "!=";
        return self2;
      case "!=":
        self2.operator = "==";
        return self2;
      case "===":
        self2.operator = "!==";
        return self2;
      case "!==":
        self2.operator = "===";
        return self2;
      case "&&":
        self2.operator = "||";
        self2.left = self2.left.negate(compressor, first_in_statement2);
        self2.right = self2.right.negate(compressor);
        return best(this, self2, first_in_statement2);
      case "||":
        self2.operator = "&&";
        self2.left = self2.left.negate(compressor, first_in_statement2);
        self2.right = self2.right.negate(compressor);
        return best(this, self2, first_in_statement2);
    }
    return basic_negation(this);
  });
})(function(node, func) {
  node.DEFMETHOD("negate", function(compressor, first_in_statement2) {
    return func.call(this, compressor, first_in_statement2);
  });
});
var global_pure_fns = makePredicate("Boolean decodeURI decodeURIComponent Date encodeURI encodeURIComponent Error escape EvalError isFinite isNaN Number Object parseFloat parseInt RangeError ReferenceError String SyntaxError TypeError unescape URIError");
AST_Call.DEFMETHOD("is_callee_pure", function(compressor) {
  if (compressor.option("unsafe")) {
    var expr = this.expression;
    var first_arg = this.args && this.args[0] && this.args[0].evaluate(compressor);
    if (expr.expression && expr.expression.name === "hasOwnProperty" && (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared)) {
      return false;
    }
    if (is_undeclared_ref(expr) && global_pure_fns.has(expr.name))
      return true;
    if (expr instanceof AST_Dot && is_undeclared_ref(expr.expression) && is_pure_native_fn(expr.expression.name, expr.property)) {
      return true;
    }
  }
  return !!has_annotation(this, _PURE) || !compressor.pure_funcs(this);
});
AST_Node.DEFMETHOD("is_call_pure", return_false);
AST_Dot.DEFMETHOD("is_call_pure", function(compressor) {
  if (!compressor.option("unsafe"))
    return;
  const expr = this.expression;
  let native_obj;
  if (expr instanceof AST_Array) {
    native_obj = "Array";
  } else if (expr.is_boolean()) {
    native_obj = "Boolean";
  } else if (expr.is_number(compressor)) {
    native_obj = "Number";
  } else if (expr instanceof AST_RegExp) {
    native_obj = "RegExp";
  } else if (expr.is_string(compressor)) {
    native_obj = "String";
  } else if (!this.may_throw_on_access(compressor)) {
    native_obj = "Object";
  }
  return native_obj != null && is_pure_native_method(native_obj, this.property);
});
var aborts = (thing) => thing && thing.aborts();
(function(def_aborts) {
  def_aborts(AST_Statement, return_null);
  def_aborts(AST_Jump, return_this);
  function block_aborts() {
    for (var i = 0; i < this.body.length; i++) {
      if (aborts(this.body[i])) {
        return this.body[i];
      }
    }
    return null;
  }
  def_aborts(AST_Import, return_null);
  def_aborts(AST_BlockStatement, block_aborts);
  def_aborts(AST_SwitchBranch, block_aborts);
  def_aborts(AST_DefClass, function() {
    for (const prop of this.properties) {
      if (prop instanceof AST_ClassStaticBlock) {
        if (prop.aborts())
          return prop;
      }
    }
    return null;
  });
  def_aborts(AST_ClassStaticBlock, block_aborts);
  def_aborts(AST_If, function() {
    return this.alternative && aborts(this.body) && aborts(this.alternative) && this;
  });
})(function(node, func) {
  node.DEFMETHOD("aborts", func);
});
function is_modified(compressor, tw, node, value, level, immutable) {
  var parent = tw.parent(level);
  var lhs = is_lhs(node, parent);
  if (lhs)
    return lhs;
  if (!immutable && parent instanceof AST_Call && parent.expression === node && !(value instanceof AST_Arrow) && !(value instanceof AST_Class) && !parent.is_callee_pure(compressor) && (!(value instanceof AST_Function) || !(parent instanceof AST_New) && value.contains_this())) {
    return true;
  }
  if (parent instanceof AST_Array) {
    return is_modified(compressor, tw, parent, parent, level + 1);
  }
  if (parent instanceof AST_ObjectKeyVal && node === parent.value) {
    var obj = tw.parent(level + 1);
    return is_modified(compressor, tw, obj, obj, level + 2);
  }
  if (parent instanceof AST_PropAccess && parent.expression === node) {
    var prop = read_property(value, parent.property);
    return !immutable && is_modified(compressor, tw, parent, prop, level + 1);
  }
}

// node_modules/terser/lib/compress/evaluate.js
function def_eval(node, func) {
  node.DEFMETHOD("_eval", func);
}
var nullish = Symbol("This AST_Chain is nullish");
AST_Node.DEFMETHOD("evaluate", function(compressor) {
  if (!compressor.option("evaluate"))
    return this;
  var val = this._eval(compressor, 1);
  if (!val || val instanceof RegExp)
    return val;
  if (typeof val == "function" || typeof val == "object" || val == nullish)
    return this;
  if (typeof val === "string") {
    const unevaluated_size = this.size(compressor);
    if (val.length + 2 > unevaluated_size)
      return this;
  }
  return val;
});
var unaryPrefix = makePredicate("! ~ - + void");
AST_Node.DEFMETHOD("is_constant", function() {
  if (this instanceof AST_Constant) {
    return !(this instanceof AST_RegExp);
  } else {
    return this instanceof AST_UnaryPrefix && this.expression instanceof AST_Constant && unaryPrefix.has(this.operator);
  }
});
def_eval(AST_Statement, function() {
  throw new Error(string_template("Cannot evaluate a statement [{file}:{line},{col}]", this.start));
});
def_eval(AST_Lambda, return_this);
def_eval(AST_Class, return_this);
def_eval(AST_Node, return_this);
def_eval(AST_Constant, function() {
  return this.getValue();
});
def_eval(AST_BigInt, return_this);
def_eval(AST_RegExp, function(compressor) {
  let evaluated = compressor.evaluated_regexps.get(this.value);
  if (evaluated === void 0 && regexp_is_safe(this.value.source)) {
    try {
      const { source, flags } = this.value;
      evaluated = new RegExp(source, flags);
    } catch (e) {
      evaluated = null;
    }
    compressor.evaluated_regexps.set(this.value, evaluated);
  }
  return evaluated || this;
});
def_eval(AST_TemplateString, function() {
  if (this.segments.length !== 1)
    return this;
  return this.segments[0].value;
});
def_eval(AST_Function, function(compressor) {
  if (compressor.option("unsafe")) {
    var fn = function() {
    };
    fn.node = this;
    fn.toString = () => this.print_to_string();
    return fn;
  }
  return this;
});
def_eval(AST_Array, function(compressor, depth) {
  if (compressor.option("unsafe")) {
    var elements = [];
    for (var i = 0, len = this.elements.length; i < len; i++) {
      var element = this.elements[i];
      var value = element._eval(compressor, depth);
      if (element === value)
        return this;
      elements.push(value);
    }
    return elements;
  }
  return this;
});
def_eval(AST_Object, function(compressor, depth) {
  if (compressor.option("unsafe")) {
    var val = {};
    for (var i = 0, len = this.properties.length; i < len; i++) {
      var prop = this.properties[i];
      if (prop instanceof AST_Expansion)
        return this;
      var key = prop.key;
      if (key instanceof AST_Symbol) {
        key = key.name;
      } else if (key instanceof AST_Node) {
        key = key._eval(compressor, depth);
        if (key === prop.key)
          return this;
      }
      if (typeof Object.prototype[key] === "function") {
        return this;
      }
      if (prop.value instanceof AST_Function)
        continue;
      val[key] = prop.value._eval(compressor, depth);
      if (val[key] === prop.value)
        return this;
    }
    return val;
  }
  return this;
});
var non_converting_unary = makePredicate("! typeof void");
def_eval(AST_UnaryPrefix, function(compressor, depth) {
  var e = this.expression;
  if (compressor.option("typeofs") && this.operator == "typeof" && (e instanceof AST_Lambda || e instanceof AST_SymbolRef && e.fixed_value() instanceof AST_Lambda)) {
    return "function";
  }
  if (!non_converting_unary.has(this.operator))
    depth++;
  e = e._eval(compressor, depth);
  if (e === this.expression)
    return this;
  switch (this.operator) {
    case "!":
      return !e;
    case "typeof":
      if (e instanceof RegExp)
        return this;
      return typeof e;
    case "void":
      return void 0;
    case "~":
      return ~e;
    case "-":
      return -e;
    case "+":
      return +e;
  }
  return this;
});
var non_converting_binary = makePredicate("&& || ?? === !==");
var identity_comparison = makePredicate("== != === !==");
var has_identity = (value) => typeof value === "object" || typeof value === "function" || typeof value === "symbol";
def_eval(AST_Binary, function(compressor, depth) {
  if (!non_converting_binary.has(this.operator))
    depth++;
  var left = this.left._eval(compressor, depth);
  if (left === this.left)
    return this;
  var right = this.right._eval(compressor, depth);
  if (right === this.right)
    return this;
  var result;
  if (left != null && right != null && identity_comparison.has(this.operator) && has_identity(left) && has_identity(right) && typeof left === typeof right) {
    return this;
  }
  switch (this.operator) {
    case "&&":
      result = left && right;
      break;
    case "||":
      result = left || right;
      break;
    case "??":
      result = left != null ? left : right;
      break;
    case "|":
      result = left | right;
      break;
    case "&":
      result = left & right;
      break;
    case "^":
      result = left ^ right;
      break;
    case "+":
      result = left + right;
      break;
    case "*":
      result = left * right;
      break;
    case "**":
      result = Math.pow(left, right);
      break;
    case "/":
      result = left / right;
      break;
    case "%":
      result = left % right;
      break;
    case "-":
      result = left - right;
      break;
    case "<<":
      result = left << right;
      break;
    case ">>":
      result = left >> right;
      break;
    case ">>>":
      result = left >>> right;
      break;
    case "==":
      result = left == right;
      break;
    case "===":
      result = left === right;
      break;
    case "!=":
      result = left != right;
      break;
    case "!==":
      result = left !== right;
      break;
    case "<":
      result = left < right;
      break;
    case "<=":
      result = left <= right;
      break;
    case ">":
      result = left > right;
      break;
    case ">=":
      result = left >= right;
      break;
    default:
      return this;
  }
  if (isNaN(result) && compressor.find_parent(AST_With)) {
    return this;
  }
  return result;
});
def_eval(AST_Conditional, function(compressor, depth) {
  var condition = this.condition._eval(compressor, depth);
  if (condition === this.condition)
    return this;
  var node = condition ? this.consequent : this.alternative;
  var value = node._eval(compressor, depth);
  return value === node ? this : value;
});
var reentrant_ref_eval = /* @__PURE__ */ new Set();
def_eval(AST_SymbolRef, function(compressor, depth) {
  if (reentrant_ref_eval.has(this))
    return this;
  var fixed = this.fixed_value();
  if (!fixed)
    return this;
  reentrant_ref_eval.add(this);
  const value = fixed._eval(compressor, depth);
  reentrant_ref_eval.delete(this);
  if (value === fixed)
    return this;
  if (value && typeof value == "object") {
    var escaped = this.definition().escaped;
    if (escaped && depth > escaped)
      return this;
  }
  return value;
});
var global_objs = { Array, Math, Number, Object, String };
var regexp_flags = /* @__PURE__ */ new Set([
  "dotAll",
  "global",
  "ignoreCase",
  "multiline",
  "sticky",
  "unicode"
]);
def_eval(AST_PropAccess, function(compressor, depth) {
  let obj = this.expression._eval(compressor, depth + 1);
  if (obj === nullish || this.optional && obj == null)
    return nullish;
  if (compressor.option("unsafe")) {
    var key = this.property;
    if (key instanceof AST_Node) {
      key = key._eval(compressor, depth);
      if (key === this.property)
        return this;
    }
    var exp = this.expression;
    if (is_undeclared_ref(exp)) {
      var aa;
      var first_arg = exp.name === "hasOwnProperty" && key === "call" && (aa = compressor.parent() && compressor.parent().args) && (aa && aa[0] && aa[0].evaluate(compressor));
      first_arg = first_arg instanceof AST_Dot ? first_arg.expression : first_arg;
      if (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared) {
        return this.clone();
      }
      if (!is_pure_native_value(exp.name, key))
        return this;
      obj = global_objs[exp.name];
    } else {
      if (obj instanceof RegExp) {
        if (key == "source") {
          return regexp_source_fix(obj.source);
        } else if (key == "flags" || regexp_flags.has(key)) {
          return obj[key];
        }
      }
      if (!obj || obj === exp || !HOP(obj, key))
        return this;
      if (typeof obj == "function")
        switch (key) {
          case "name":
            return obj.node.name ? obj.node.name.name : "";
          case "length":
            return obj.node.length_property();
          default:
            return this;
        }
    }
    return obj[key];
  }
  return this;
});
def_eval(AST_Chain, function(compressor, depth) {
  const evaluated = this.expression._eval(compressor, depth);
  return evaluated === nullish ? void 0 : evaluated === this.expression ? this : evaluated;
});
def_eval(AST_Call, function(compressor, depth) {
  var exp = this.expression;
  const callee = exp._eval(compressor, depth);
  if (callee === nullish || this.optional && callee == null)
    return nullish;
  if (compressor.option("unsafe") && exp instanceof AST_PropAccess) {
    var key = exp.property;
    if (key instanceof AST_Node) {
      key = key._eval(compressor, depth);
      if (key === exp.property)
        return this;
    }
    var val;
    var e = exp.expression;
    if (is_undeclared_ref(e)) {
      var first_arg = e.name === "hasOwnProperty" && key === "call" && (this.args[0] && this.args[0].evaluate(compressor));
      first_arg = first_arg instanceof AST_Dot ? first_arg.expression : first_arg;
      if (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared) {
        return this.clone();
      }
      if (!is_pure_native_fn(e.name, key))
        return this;
      val = global_objs[e.name];
    } else {
      val = e._eval(compressor, depth + 1);
      if (val === e || !val)
        return this;
      if (!is_pure_native_method(val.constructor.name, key))
        return this;
    }
    var args2 = [];
    for (var i = 0, len = this.args.length; i < len; i++) {
      var arg = this.args[i];
      var value = arg._eval(compressor, depth);
      if (arg === value)
        return this;
      if (arg instanceof AST_Lambda)
        return this;
      args2.push(value);
    }
    try {
      return val[key].apply(val, args2);
    } catch (ex) {
    }
  }
  return this;
});
def_eval(AST_New, return_this);

// node_modules/terser/lib/compress/drop-side-effect-free.js
function def_drop_side_effect_free(node, func) {
  node.DEFMETHOD("drop_side_effect_free", func);
}
function trim(nodes, compressor, first_in_statement2) {
  var len = nodes.length;
  if (!len)
    return null;
  var ret = [], changed = false;
  for (var i = 0; i < len; i++) {
    var node = nodes[i].drop_side_effect_free(compressor, first_in_statement2);
    changed |= node !== nodes[i];
    if (node) {
      ret.push(node);
      first_in_statement2 = false;
    }
  }
  return changed ? ret.length ? ret : null : nodes;
}
def_drop_side_effect_free(AST_Node, return_this);
def_drop_side_effect_free(AST_Constant, return_null);
def_drop_side_effect_free(AST_This, return_null);
def_drop_side_effect_free(AST_Call, function(compressor, first_in_statement2) {
  if (is_nullish_shortcircuited(this, compressor)) {
    return this.expression.drop_side_effect_free(compressor, first_in_statement2);
  }
  if (!this.is_callee_pure(compressor)) {
    if (this.expression.is_call_pure(compressor)) {
      var exprs = this.args.slice();
      exprs.unshift(this.expression.expression);
      exprs = trim(exprs, compressor, first_in_statement2);
      return exprs && make_sequence(this, exprs);
    }
    if (is_func_expr(this.expression) && (!this.expression.name || !this.expression.name.definition().references.length)) {
      var node = this.clone();
      node.expression.process_expression(false, compressor);
      return node;
    }
    return this;
  }
  var args2 = trim(this.args, compressor, first_in_statement2);
  return args2 && make_sequence(this, args2);
});
def_drop_side_effect_free(AST_Accessor, return_null);
def_drop_side_effect_free(AST_Function, return_null);
def_drop_side_effect_free(AST_Arrow, return_null);
def_drop_side_effect_free(AST_Class, function(compressor) {
  const with_effects = [];
  const trimmed_extends = this.extends && this.extends.drop_side_effect_free(compressor);
  if (trimmed_extends)
    with_effects.push(trimmed_extends);
  for (const prop of this.properties) {
    if (prop instanceof AST_ClassStaticBlock) {
      if (prop.body.some((stat) => stat.has_side_effects(compressor))) {
        return this;
      } else {
        continue;
      }
    }
    const trimmed_prop = prop.drop_side_effect_free(compressor);
    if (trimmed_prop)
      with_effects.push(trimmed_prop);
  }
  if (!with_effects.length)
    return null;
  return make_sequence(this, with_effects);
});
def_drop_side_effect_free(AST_Binary, function(compressor, first_in_statement2) {
  var right = this.right.drop_side_effect_free(compressor);
  if (!right)
    return this.left.drop_side_effect_free(compressor, first_in_statement2);
  if (lazy_op.has(this.operator)) {
    if (right === this.right)
      return this;
    var node = this.clone();
    node.right = right;
    return node;
  } else {
    var left = this.left.drop_side_effect_free(compressor, first_in_statement2);
    if (!left)
      return this.right.drop_side_effect_free(compressor, first_in_statement2);
    return make_sequence(this, [left, right]);
  }
});
def_drop_side_effect_free(AST_Assign, function(compressor) {
  if (this.logical)
    return this;
  var left = this.left;
  if (left.has_side_effects(compressor) || compressor.has_directive("use strict") && left instanceof AST_PropAccess && left.expression.is_constant()) {
    return this;
  }
  set_flag(this, WRITE_ONLY);
  while (left instanceof AST_PropAccess) {
    left = left.expression;
  }
  if (left.is_constant_expression(compressor.find_parent(AST_Scope))) {
    return this.right.drop_side_effect_free(compressor);
  }
  return this;
});
def_drop_side_effect_free(AST_Conditional, function(compressor) {
  var consequent = this.consequent.drop_side_effect_free(compressor);
  var alternative = this.alternative.drop_side_effect_free(compressor);
  if (consequent === this.consequent && alternative === this.alternative)
    return this;
  if (!consequent)
    return alternative ? make_node(AST_Binary, this, {
      operator: "||",
      left: this.condition,
      right: alternative
    }) : this.condition.drop_side_effect_free(compressor);
  if (!alternative)
    return make_node(AST_Binary, this, {
      operator: "&&",
      left: this.condition,
      right: consequent
    });
  var node = this.clone();
  node.consequent = consequent;
  node.alternative = alternative;
  return node;
});
def_drop_side_effect_free(AST_Unary, function(compressor, first_in_statement2) {
  if (unary_side_effects.has(this.operator)) {
    if (!this.expression.has_side_effects(compressor)) {
      set_flag(this, WRITE_ONLY);
    } else {
      clear_flag(this, WRITE_ONLY);
    }
    return this;
  }
  if (this.operator == "typeof" && this.expression instanceof AST_SymbolRef)
    return null;
  var expression = this.expression.drop_side_effect_free(compressor, first_in_statement2);
  if (first_in_statement2 && expression && is_iife_call(expression)) {
    if (expression === this.expression && this.operator == "!")
      return this;
    return expression.negate(compressor, first_in_statement2);
  }
  return expression;
});
def_drop_side_effect_free(AST_SymbolRef, function(compressor) {
  const safe_access = this.is_declared(compressor) || pure_prop_access_globals.has(this.name);
  return safe_access ? null : this;
});
def_drop_side_effect_free(AST_Object, function(compressor, first_in_statement2) {
  var values = trim(this.properties, compressor, first_in_statement2);
  return values && make_sequence(this, values);
});
def_drop_side_effect_free(AST_ObjectProperty, function(compressor, first_in_statement2) {
  const computed_key = this instanceof AST_ObjectKeyVal && this.key instanceof AST_Node;
  const key = computed_key && this.key.drop_side_effect_free(compressor, first_in_statement2);
  const value = this.value && this.value.drop_side_effect_free(compressor, first_in_statement2);
  if (key && value) {
    return make_sequence(this, [key, value]);
  }
  return key || value;
});
def_drop_side_effect_free(AST_ClassProperty, function(compressor) {
  const key = this.computed_key() && this.key.drop_side_effect_free(compressor);
  const value = this.static && this.value && this.value.drop_side_effect_free(compressor);
  if (key && value)
    return make_sequence(this, [key, value]);
  return key || value || null;
});
def_drop_side_effect_free(AST_ConciseMethod, function() {
  return this.computed_key() ? this.key : null;
});
def_drop_side_effect_free(AST_ObjectGetter, function() {
  return this.computed_key() ? this.key : null;
});
def_drop_side_effect_free(AST_ObjectSetter, function() {
  return this.computed_key() ? this.key : null;
});
def_drop_side_effect_free(AST_Array, function(compressor, first_in_statement2) {
  var values = trim(this.elements, compressor, first_in_statement2);
  return values && make_sequence(this, values);
});
def_drop_side_effect_free(AST_Dot, function(compressor, first_in_statement2) {
  if (is_nullish_shortcircuited(this, compressor)) {
    return this.expression.drop_side_effect_free(compressor, first_in_statement2);
  }
  if (this.expression.may_throw_on_access(compressor))
    return this;
  return this.expression.drop_side_effect_free(compressor, first_in_statement2);
});
def_drop_side_effect_free(AST_Sub, function(compressor, first_in_statement2) {
  if (is_nullish_shortcircuited(this, compressor)) {
    return this.expression.drop_side_effect_free(compressor, first_in_statement2);
  }
  if (this.expression.may_throw_on_access(compressor))
    return this;
  var expression = this.expression.drop_side_effect_free(compressor, first_in_statement2);
  if (!expression)
    return this.property.drop_side_effect_free(compressor, first_in_statement2);
  var property = this.property.drop_side_effect_free(compressor);
  if (!property)
    return expression;
  return make_sequence(this, [expression, property]);
});
def_drop_side_effect_free(AST_Chain, function(compressor, first_in_statement2) {
  return this.expression.drop_side_effect_free(compressor, first_in_statement2);
});
def_drop_side_effect_free(AST_Sequence, function(compressor) {
  var last = this.tail_node();
  var expr = last.drop_side_effect_free(compressor);
  if (expr === last)
    return this;
  var expressions = this.expressions.slice(0, -1);
  if (expr)
    expressions.push(expr);
  if (!expressions.length) {
    return make_node(AST_Number, this, { value: 0 });
  }
  return make_sequence(this, expressions);
});
def_drop_side_effect_free(AST_Expansion, function(compressor, first_in_statement2) {
  return this.expression.drop_side_effect_free(compressor, first_in_statement2);
});
def_drop_side_effect_free(AST_TemplateSegment, return_null);
def_drop_side_effect_free(AST_TemplateString, function(compressor) {
  var values = trim(this.segments, compressor, first_in_statement);
  return values && make_sequence(this, values);
});

// node_modules/terser/lib/compress/drop-unused.js
var r_keep_assign = /keep_assign/;
AST_Scope.DEFMETHOD("drop_unused", function(compressor) {
  if (!compressor.option("unused"))
    return;
  if (compressor.has_directive("use asm"))
    return;
  var self2 = this;
  if (self2.pinned())
    return;
  var drop_funcs = !(self2 instanceof AST_Toplevel) || compressor.toplevel.funcs;
  var drop_vars = !(self2 instanceof AST_Toplevel) || compressor.toplevel.vars;
  const assign_as_unused = r_keep_assign.test(compressor.option("unused")) ? return_false : function(node) {
    if (node instanceof AST_Assign && !node.logical && (has_flag(node, WRITE_ONLY) || node.operator == "=")) {
      return node.left;
    }
    if (node instanceof AST_Unary && has_flag(node, WRITE_ONLY)) {
      return node.expression;
    }
  };
  var in_use_ids = /* @__PURE__ */ new Map();
  var fixed_ids = /* @__PURE__ */ new Map();
  if (self2 instanceof AST_Toplevel && compressor.top_retain) {
    self2.variables.forEach(function(def) {
      if (compressor.top_retain(def) && !in_use_ids.has(def.id)) {
        in_use_ids.set(def.id, def);
      }
    });
  }
  var var_defs_by_id = /* @__PURE__ */ new Map();
  var initializations = /* @__PURE__ */ new Map();
  var scope = this;
  var tw = new TreeWalker(function(node, descend) {
    if (node instanceof AST_Lambda && node.uses_arguments && !tw.has_directive("use strict")) {
      node.argnames.forEach(function(argname) {
        if (!(argname instanceof AST_SymbolDeclaration))
          return;
        var def = argname.definition();
        if (!in_use_ids.has(def.id)) {
          in_use_ids.set(def.id, def);
        }
      });
    }
    if (node === self2)
      return;
    if (node instanceof AST_Defun || node instanceof AST_DefClass) {
      var node_def = node.name.definition();
      const in_export = tw.parent() instanceof AST_Export;
      if (in_export || !drop_funcs && scope === self2) {
        if (node_def.global && !in_use_ids.has(node_def.id)) {
          in_use_ids.set(node_def.id, node_def);
        }
      }
      if (node instanceof AST_DefClass) {
        if (node.extends && (node.extends.has_side_effects(compressor) || node.extends.may_throw(compressor))) {
          node.extends.walk(tw);
        }
        for (const prop of node.properties) {
          if (prop.has_side_effects(compressor) || prop.may_throw(compressor)) {
            prop.walk(tw);
          }
        }
      }
      map_add(initializations, node_def.id, node);
      return true;
    }
    if (node instanceof AST_SymbolFunarg && scope === self2) {
      map_add(var_defs_by_id, node.definition().id, node);
    }
    if (node instanceof AST_Definitions && scope === self2) {
      const in_export = tw.parent() instanceof AST_Export;
      node.definitions.forEach(function(def) {
        if (def.name instanceof AST_SymbolVar) {
          map_add(var_defs_by_id, def.name.definition().id, def);
        }
        if (in_export || !drop_vars) {
          walk(def.name, (node2) => {
            if (node2 instanceof AST_SymbolDeclaration) {
              const def2 = node2.definition();
              if (def2.global && !in_use_ids.has(def2.id)) {
                in_use_ids.set(def2.id, def2);
              }
            }
          });
        }
        if (def.name instanceof AST_Destructuring) {
          def.walk(tw);
        }
        if (def.name instanceof AST_SymbolDeclaration && def.value) {
          var node_def2 = def.name.definition();
          map_add(initializations, node_def2.id, def.value);
          if (!node_def2.chained && def.name.fixed_value() === def.value) {
            fixed_ids.set(node_def2.id, def);
          }
          if (def.value.has_side_effects(compressor)) {
            def.value.walk(tw);
          }
        }
      });
      return true;
    }
    return scan_ref_scoped(node, descend);
  });
  self2.walk(tw);
  tw = new TreeWalker(scan_ref_scoped);
  in_use_ids.forEach(function(def) {
    var init = initializations.get(def.id);
    if (init)
      init.forEach(function(init2) {
        init2.walk(tw);
      });
  });
  var tt = new TreeTransformer(
    function before(node, descend, in_list) {
      var parent = tt.parent();
      if (drop_vars) {
        const sym2 = assign_as_unused(node);
        if (sym2 instanceof AST_SymbolRef) {
          var def = sym2.definition();
          var in_use = in_use_ids.has(def.id);
          if (node instanceof AST_Assign) {
            if (!in_use || fixed_ids.has(def.id) && fixed_ids.get(def.id) !== node) {
              return maintain_this_binding(parent, node, node.right.transform(tt));
            }
          } else if (!in_use)
            return in_list ? MAP.skip : make_node(AST_Number, node, {
              value: 0
            });
        }
      }
      if (scope !== self2)
        return;
      var def;
      if (node.name && (node instanceof AST_ClassExpression && !keep_name(compressor.option("keep_classnames"), (def = node.name.definition()).name) || node instanceof AST_Function && !keep_name(compressor.option("keep_fnames"), (def = node.name.definition()).name))) {
        if (!in_use_ids.has(def.id) || def.orig.length > 1)
          node.name = null;
      }
      if (node instanceof AST_Lambda && !(node instanceof AST_Accessor)) {
        var trim2 = !compressor.option("keep_fargs");
        for (var a = node.argnames, i = a.length; --i >= 0; ) {
          var sym = a[i];
          if (sym instanceof AST_Expansion) {
            sym = sym.expression;
          }
          if (sym instanceof AST_DefaultAssign) {
            sym = sym.left;
          }
          if (!(sym instanceof AST_Destructuring) && !in_use_ids.has(sym.definition().id)) {
            set_flag(sym, UNUSED);
            if (trim2) {
              a.pop();
            }
          } else {
            trim2 = false;
          }
        }
      }
      if ((node instanceof AST_Defun || node instanceof AST_DefClass) && node !== self2) {
        const def2 = node.name.definition();
        const keep = def2.global && !drop_funcs || in_use_ids.has(def2.id);
        const has_side_effects = !keep && node instanceof AST_Class && node.has_side_effects(compressor);
        if (!keep && !has_side_effects) {
          def2.eliminated++;
          return in_list ? MAP.skip : make_node(AST_EmptyStatement, node);
        }
      }
      if (node instanceof AST_Definitions && !(parent instanceof AST_ForIn && parent.init === node)) {
        var drop_block = !(parent instanceof AST_Toplevel) && !(node instanceof AST_Var);
        var body = [], head = [], tail = [];
        var side_effects = [];
        node.definitions.forEach(function(def2) {
          if (def2.value)
            def2.value = def2.value.transform(tt);
          var is_destructure = def2.name instanceof AST_Destructuring;
          var sym2 = is_destructure ? new SymbolDef(null, { name: "<destructure>" }) : def2.name.definition();
          if (drop_block && sym2.global)
            return tail.push(def2);
          if (!(drop_vars || drop_block) || is_destructure && (def2.name.names.length || def2.name.is_array || compressor.option("pure_getters") != true) || in_use_ids.has(sym2.id)) {
            if (def2.value && fixed_ids.has(sym2.id) && fixed_ids.get(sym2.id) !== def2) {
              def2.value = def2.value.drop_side_effect_free(compressor);
            }
            if (def2.name instanceof AST_SymbolVar) {
              var var_defs = var_defs_by_id.get(sym2.id);
              if (var_defs.length > 1 && (!def2.value || sym2.orig.indexOf(def2.name) > sym2.eliminated)) {
                if (def2.value) {
                  var ref = make_node(AST_SymbolRef, def2.name, def2.name);
                  sym2.references.push(ref);
                  var assign = make_node(AST_Assign, def2, {
                    operator: "=",
                    logical: false,
                    left: ref,
                    right: def2.value
                  });
                  if (fixed_ids.get(sym2.id) === def2) {
                    fixed_ids.set(sym2.id, assign);
                  }
                  side_effects.push(assign.transform(tt));
                }
                remove(var_defs, def2);
                sym2.eliminated++;
                return;
              }
            }
            if (def2.value) {
              if (side_effects.length > 0) {
                if (tail.length > 0) {
                  side_effects.push(def2.value);
                  def2.value = make_sequence(def2.value, side_effects);
                } else {
                  body.push(make_node(AST_SimpleStatement, node, {
                    body: make_sequence(node, side_effects)
                  }));
                }
                side_effects = [];
              }
              tail.push(def2);
            } else {
              head.push(def2);
            }
          } else if (sym2.orig[0] instanceof AST_SymbolCatch) {
            var value = def2.value && def2.value.drop_side_effect_free(compressor);
            if (value)
              side_effects.push(value);
            def2.value = null;
            head.push(def2);
          } else {
            var value = def2.value && def2.value.drop_side_effect_free(compressor);
            if (value) {
              side_effects.push(value);
            }
            sym2.eliminated++;
          }
        });
        if (head.length > 0 || tail.length > 0) {
          node.definitions = head.concat(tail);
          body.push(node);
        }
        if (side_effects.length > 0) {
          body.push(make_node(AST_SimpleStatement, node, {
            body: make_sequence(node, side_effects)
          }));
        }
        switch (body.length) {
          case 0:
            return in_list ? MAP.skip : make_node(AST_EmptyStatement, node);
          case 1:
            return body[0];
          default:
            return in_list ? MAP.splice(body) : make_node(AST_BlockStatement, node, {
              body
            });
        }
      }
      if (node instanceof AST_For) {
        descend(node, this);
        var block;
        if (node.init instanceof AST_BlockStatement) {
          block = node.init;
          node.init = block.body.pop();
          block.body.push(node);
        }
        if (node.init instanceof AST_SimpleStatement) {
          node.init = node.init.body;
        } else if (is_empty(node.init)) {
          node.init = null;
        }
        return !block ? node : in_list ? MAP.splice(block.body) : block;
      }
      if (node instanceof AST_LabeledStatement && node.body instanceof AST_For) {
        descend(node, this);
        if (node.body instanceof AST_BlockStatement) {
          var block = node.body;
          node.body = block.body.pop();
          block.body.push(node);
          return in_list ? MAP.splice(block.body) : block;
        }
        return node;
      }
      if (node instanceof AST_BlockStatement) {
        descend(node, this);
        if (in_list && node.body.every(can_be_evicted_from_block)) {
          return MAP.splice(node.body);
        }
        return node;
      }
      if (node instanceof AST_Scope) {
        const save_scope = scope;
        scope = node;
        descend(node, this);
        scope = save_scope;
        return node;
      }
    }
  );
  self2.transform(tt);
  function scan_ref_scoped(node, descend) {
    var node_def;
    const sym = assign_as_unused(node);
    if (sym instanceof AST_SymbolRef && !is_ref_of(node.left, AST_SymbolBlockDeclaration) && self2.variables.get(sym.name) === (node_def = sym.definition())) {
      if (node instanceof AST_Assign) {
        node.right.walk(tw);
        if (!node_def.chained && node.left.fixed_value() === node.right) {
          fixed_ids.set(node_def.id, node);
        }
      }
      return true;
    }
    if (node instanceof AST_SymbolRef) {
      node_def = node.definition();
      if (!in_use_ids.has(node_def.id)) {
        in_use_ids.set(node_def.id, node_def);
        if (node_def.orig[0] instanceof AST_SymbolCatch) {
          const redef = node_def.scope.is_block_scope() && node_def.scope.get_defun_scope().variables.get(node_def.name);
          if (redef)
            in_use_ids.set(redef.id, redef);
        }
      }
      return true;
    }
    if (node instanceof AST_Scope) {
      var save_scope = scope;
      scope = node;
      descend();
      scope = save_scope;
      return true;
    }
  }
});

// node_modules/terser/lib/compress/reduce-vars.js
function def_reduce_vars(node, func) {
  node.DEFMETHOD("reduce_vars", func);
}
def_reduce_vars(AST_Node, noop);
function reset_def(compressor, def) {
  def.assignments = 0;
  def.chained = false;
  def.direct_access = false;
  def.escaped = 0;
  def.recursive_refs = 0;
  def.references = [];
  def.single_use = void 0;
  if (def.scope.pinned() || def.orig[0] instanceof AST_SymbolFunarg && def.scope.uses_arguments) {
    def.fixed = false;
  } else if (def.orig[0] instanceof AST_SymbolConst || !compressor.exposed(def)) {
    def.fixed = def.init;
  } else {
    def.fixed = false;
  }
}
function reset_variables(tw, compressor, node) {
  node.variables.forEach(function(def) {
    reset_def(compressor, def);
    if (def.fixed === null) {
      tw.defs_to_safe_ids.set(def.id, tw.safe_ids);
      mark(tw, def, true);
    } else if (def.fixed) {
      tw.loop_ids.set(def.id, tw.in_loop);
      mark(tw, def, true);
    }
  });
}
function reset_block_variables(compressor, node) {
  if (node.block_scope)
    node.block_scope.variables.forEach((def) => {
      reset_def(compressor, def);
    });
}
function push(tw) {
  tw.safe_ids = Object.create(tw.safe_ids);
}
function pop(tw) {
  tw.safe_ids = Object.getPrototypeOf(tw.safe_ids);
}
function mark(tw, def, safe) {
  tw.safe_ids[def.id] = safe;
}
function safe_to_read(tw, def) {
  if (def.single_use == "m")
    return false;
  if (tw.safe_ids[def.id]) {
    if (def.fixed == null) {
      var orig = def.orig[0];
      if (orig instanceof AST_SymbolFunarg || orig.name == "arguments")
        return false;
      def.fixed = make_node(AST_Undefined, orig);
    }
    return true;
  }
  return def.fixed instanceof AST_Defun;
}
function safe_to_assign(tw, def, scope, value) {
  if (def.fixed === void 0)
    return true;
  let def_safe_ids;
  if (def.fixed === null && (def_safe_ids = tw.defs_to_safe_ids.get(def.id))) {
    def_safe_ids[def.id] = false;
    tw.defs_to_safe_ids.delete(def.id);
    return true;
  }
  if (!HOP(tw.safe_ids, def.id))
    return false;
  if (!safe_to_read(tw, def))
    return false;
  if (def.fixed === false)
    return false;
  if (def.fixed != null && (!value || def.references.length > def.assignments))
    return false;
  if (def.fixed instanceof AST_Defun) {
    return value instanceof AST_Node && def.fixed.parent_scope === scope;
  }
  return def.orig.every((sym) => {
    return !(sym instanceof AST_SymbolConst || sym instanceof AST_SymbolDefun || sym instanceof AST_SymbolLambda);
  });
}
function ref_once(tw, compressor, def) {
  return compressor.option("unused") && !def.scope.pinned() && def.references.length - def.recursive_refs == 1 && tw.loop_ids.get(def.id) === tw.in_loop;
}
function is_immutable(value) {
  if (!value)
    return false;
  return value.is_constant() || value instanceof AST_Lambda || value instanceof AST_This;
}
function mark_escaped(tw, d, scope, node, value, level = 0, depth = 1) {
  var parent = tw.parent(level);
  if (value) {
    if (value.is_constant())
      return;
    if (value instanceof AST_ClassExpression)
      return;
  }
  if (parent instanceof AST_Assign && (parent.operator === "=" || parent.logical) && node === parent.right || parent instanceof AST_Call && (node !== parent.expression || parent instanceof AST_New) || parent instanceof AST_Exit && node === parent.value && node.scope !== d.scope || parent instanceof AST_VarDef && node === parent.value || parent instanceof AST_Yield && node === parent.value && node.scope !== d.scope) {
    if (depth > 1 && !(value && value.is_constant_expression(scope)))
      depth = 1;
    if (!d.escaped || d.escaped > depth)
      d.escaped = depth;
    return;
  } else if (parent instanceof AST_Array || parent instanceof AST_Await || parent instanceof AST_Binary && lazy_op.has(parent.operator) || parent instanceof AST_Conditional && node !== parent.condition || parent instanceof AST_Expansion || parent instanceof AST_Sequence && node === parent.tail_node()) {
    mark_escaped(tw, d, scope, parent, parent, level + 1, depth);
  } else if (parent instanceof AST_ObjectKeyVal && node === parent.value) {
    var obj = tw.parent(level + 1);
    mark_escaped(tw, d, scope, obj, obj, level + 2, depth);
  } else if (parent instanceof AST_PropAccess && node === parent.expression) {
    value = read_property(value, parent.property);
    mark_escaped(tw, d, scope, parent, value, level + 1, depth + 1);
    if (value)
      return;
  }
  if (level > 0)
    return;
  if (parent instanceof AST_Sequence && node !== parent.tail_node())
    return;
  if (parent instanceof AST_SimpleStatement)
    return;
  d.direct_access = true;
}
var suppress = (node) => walk(node, (node2) => {
  if (!(node2 instanceof AST_Symbol))
    return;
  var d = node2.definition();
  if (!d)
    return;
  if (node2 instanceof AST_SymbolRef)
    d.references.push(node2);
  d.fixed = false;
});
def_reduce_vars(AST_Accessor, function(tw, descend, compressor) {
  push(tw);
  reset_variables(tw, compressor, this);
  descend();
  pop(tw);
  return true;
});
def_reduce_vars(AST_Assign, function(tw, descend, compressor) {
  var node = this;
  if (node.left instanceof AST_Destructuring) {
    suppress(node.left);
    return;
  }
  const finish_walk = () => {
    if (node.logical) {
      node.left.walk(tw);
      push(tw);
      node.right.walk(tw);
      pop(tw);
      return true;
    }
  };
  var sym = node.left;
  if (!(sym instanceof AST_SymbolRef))
    return finish_walk();
  var def = sym.definition();
  var safe = safe_to_assign(tw, def, sym.scope, node.right);
  def.assignments++;
  if (!safe)
    return finish_walk();
  var fixed = def.fixed;
  if (!fixed && node.operator != "=" && !node.logical)
    return finish_walk();
  var eq = node.operator == "=";
  var value = eq ? node.right : node;
  if (is_modified(compressor, tw, node, value, 0))
    return finish_walk();
  def.references.push(sym);
  if (!node.logical) {
    if (!eq)
      def.chained = true;
    def.fixed = eq ? function() {
      return node.right;
    } : function() {
      return make_node(AST_Binary, node, {
        operator: node.operator.slice(0, -1),
        left: fixed instanceof AST_Node ? fixed : fixed(),
        right: node.right
      });
    };
  }
  if (node.logical) {
    mark(tw, def, false);
    push(tw);
    node.right.walk(tw);
    pop(tw);
    return true;
  }
  mark(tw, def, false);
  node.right.walk(tw);
  mark(tw, def, true);
  mark_escaped(tw, def, sym.scope, node, value, 0, 1);
  return true;
});
def_reduce_vars(AST_Binary, function(tw) {
  if (!lazy_op.has(this.operator))
    return;
  this.left.walk(tw);
  push(tw);
  this.right.walk(tw);
  pop(tw);
  return true;
});
def_reduce_vars(AST_Block, function(tw, descend, compressor) {
  reset_block_variables(compressor, this);
});
def_reduce_vars(AST_Case, function(tw) {
  push(tw);
  this.expression.walk(tw);
  pop(tw);
  push(tw);
  walk_body(this, tw);
  pop(tw);
  return true;
});
def_reduce_vars(AST_Class, function(tw, descend) {
  clear_flag(this, INLINED);
  push(tw);
  descend();
  pop(tw);
  return true;
});
def_reduce_vars(AST_ClassStaticBlock, function(tw, descend, compressor) {
  reset_block_variables(compressor, this);
});
def_reduce_vars(AST_Conditional, function(tw) {
  this.condition.walk(tw);
  push(tw);
  this.consequent.walk(tw);
  pop(tw);
  push(tw);
  this.alternative.walk(tw);
  pop(tw);
  return true;
});
def_reduce_vars(AST_Chain, function(tw, descend) {
  const safe_ids = tw.safe_ids;
  descend();
  tw.safe_ids = safe_ids;
  return true;
});
def_reduce_vars(AST_Call, function(tw) {
  this.expression.walk(tw);
  if (this.optional) {
    push(tw);
  }
  for (const arg of this.args)
    arg.walk(tw);
  return true;
});
def_reduce_vars(AST_PropAccess, function(tw) {
  if (!this.optional)
    return;
  this.expression.walk(tw);
  push(tw);
  if (this.property instanceof AST_Node)
    this.property.walk(tw);
  return true;
});
def_reduce_vars(AST_Default, function(tw, descend) {
  push(tw);
  descend();
  pop(tw);
  return true;
});
function mark_lambda(tw, descend, compressor) {
  clear_flag(this, INLINED);
  push(tw);
  reset_variables(tw, compressor, this);
  var iife;
  if (!this.name && !this.uses_arguments && !this.pinned() && (iife = tw.parent()) instanceof AST_Call && iife.expression === this && !iife.args.some((arg) => arg instanceof AST_Expansion) && this.argnames.every((arg_name) => arg_name instanceof AST_Symbol)) {
    this.argnames.forEach((arg, i) => {
      if (!arg.definition)
        return;
      var d = arg.definition();
      if (d.orig.length > 1)
        return;
      if (d.fixed === void 0 && (!this.uses_arguments || tw.has_directive("use strict"))) {
        d.fixed = function() {
          return iife.args[i] || make_node(AST_Undefined, iife);
        };
        tw.loop_ids.set(d.id, tw.in_loop);
        mark(tw, d, true);
      } else {
        d.fixed = false;
      }
    });
  }
  descend();
  pop(tw);
  handle_defined_after_hoist(this);
  return true;
}
function handle_defined_after_hoist(parent) {
  const defuns = [];
  walk(parent, (node) => {
    if (node === parent)
      return;
    if (node instanceof AST_Defun)
      defuns.push(node);
    if (node instanceof AST_Scope || node instanceof AST_SimpleStatement)
      return true;
  });
  for (const defun of defuns) {
    const fname_def = defun.name.definition();
    const found_self_ref_in_other_defuns = defuns.some(
      (d) => d !== defun && d.enclosed.indexOf(fname_def) !== -1
    );
    for (const def of defun.enclosed) {
      if (def.fixed === false || def === fname_def || def.scope.get_defun_scope() !== parent) {
        continue;
      }
      if (def.assignments === 0 && def.orig.length === 1 && def.orig[0] instanceof AST_SymbolDefun) {
        continue;
      }
      if (found_self_ref_in_other_defuns) {
        def.fixed = false;
        continue;
      }
      let found_defun = false;
      let found_def_after_defun = false;
      walk(parent, (node) => {
        if (node === defun)
          return true;
        if (node instanceof AST_Symbol) {
          if (!found_defun && node.thedef === fname_def) {
            found_defun = true;
          } else if (found_defun && node.thedef === def) {
            found_def_after_defun = true;
            return walk_abort;
          }
        }
      });
      if (found_def_after_defun) {
        def.fixed = false;
      }
    }
  }
}
def_reduce_vars(AST_Lambda, mark_lambda);
def_reduce_vars(AST_Do, function(tw, descend, compressor) {
  reset_block_variables(compressor, this);
  const saved_loop = tw.in_loop;
  tw.in_loop = this;
  push(tw);
  this.body.walk(tw);
  if (has_break_or_continue(this)) {
    pop(tw);
    push(tw);
  }
  this.condition.walk(tw);
  pop(tw);
  tw.in_loop = saved_loop;
  return true;
});
def_reduce_vars(AST_For, function(tw, descend, compressor) {
  reset_block_variables(compressor, this);
  if (this.init)
    this.init.walk(tw);
  const saved_loop = tw.in_loop;
  tw.in_loop = this;
  push(tw);
  if (this.condition)
    this.condition.walk(tw);
  this.body.walk(tw);
  if (this.step) {
    if (has_break_or_continue(this)) {
      pop(tw);
      push(tw);
    }
    this.step.walk(tw);
  }
  pop(tw);
  tw.in_loop = saved_loop;
  return true;
});
def_reduce_vars(AST_ForIn, function(tw, descend, compressor) {
  reset_block_variables(compressor, this);
  suppress(this.init);
  this.object.walk(tw);
  const saved_loop = tw.in_loop;
  tw.in_loop = this;
  push(tw);
  this.body.walk(tw);
  pop(tw);
  tw.in_loop = saved_loop;
  return true;
});
def_reduce_vars(AST_If, function(tw) {
  this.condition.walk(tw);
  push(tw);
  this.body.walk(tw);
  pop(tw);
  if (this.alternative) {
    push(tw);
    this.alternative.walk(tw);
    pop(tw);
  }
  return true;
});
def_reduce_vars(AST_LabeledStatement, function(tw) {
  push(tw);
  this.body.walk(tw);
  pop(tw);
  return true;
});
def_reduce_vars(AST_SymbolCatch, function() {
  this.definition().fixed = false;
});
def_reduce_vars(AST_SymbolRef, function(tw, descend, compressor) {
  var d = this.definition();
  d.references.push(this);
  if (d.references.length == 1 && !d.fixed && d.orig[0] instanceof AST_SymbolDefun) {
    tw.loop_ids.set(d.id, tw.in_loop);
  }
  var fixed_value;
  if (d.fixed === void 0 || !safe_to_read(tw, d)) {
    d.fixed = false;
  } else if (d.fixed) {
    fixed_value = this.fixed_value();
    if (fixed_value instanceof AST_Lambda && is_recursive_ref(tw, d)) {
      d.recursive_refs++;
    } else if (fixed_value && !compressor.exposed(d) && ref_once(tw, compressor, d)) {
      d.single_use = fixed_value instanceof AST_Lambda && !fixed_value.pinned() || fixed_value instanceof AST_Class || d.scope === this.scope && fixed_value.is_constant_expression();
    } else {
      d.single_use = false;
    }
    if (is_modified(compressor, tw, this, fixed_value, 0, is_immutable(fixed_value))) {
      if (d.single_use) {
        d.single_use = "m";
      } else {
        d.fixed = false;
      }
    }
  }
  mark_escaped(tw, d, this.scope, this, fixed_value, 0, 1);
});
def_reduce_vars(AST_Toplevel, function(tw, descend, compressor) {
  this.globals.forEach(function(def) {
    reset_def(compressor, def);
  });
  reset_variables(tw, compressor, this);
  descend();
  handle_defined_after_hoist(this);
  return true;
});
def_reduce_vars(AST_Try, function(tw, descend, compressor) {
  reset_block_variables(compressor, this);
  push(tw);
  this.body.walk(tw);
  pop(tw);
  if (this.bcatch) {
    push(tw);
    this.bcatch.walk(tw);
    pop(tw);
  }
  if (this.bfinally)
    this.bfinally.walk(tw);
  return true;
});
def_reduce_vars(AST_Unary, function(tw) {
  var node = this;
  if (node.operator !== "++" && node.operator !== "--")
    return;
  var exp = node.expression;
  if (!(exp instanceof AST_SymbolRef))
    return;
  var def = exp.definition();
  var safe = safe_to_assign(tw, def, exp.scope, true);
  def.assignments++;
  if (!safe)
    return;
  var fixed = def.fixed;
  if (!fixed)
    return;
  def.references.push(exp);
  def.chained = true;
  def.fixed = function() {
    return make_node(AST_Binary, node, {
      operator: node.operator.slice(0, -1),
      left: make_node(AST_UnaryPrefix, node, {
        operator: "+",
        expression: fixed instanceof AST_Node ? fixed : fixed()
      }),
      right: make_node(AST_Number, node, {
        value: 1
      })
    });
  };
  mark(tw, def, true);
  return true;
});
def_reduce_vars(AST_VarDef, function(tw, descend) {
  var node = this;
  if (node.name instanceof AST_Destructuring) {
    suppress(node.name);
    return;
  }
  var d = node.name.definition();
  if (node.value) {
    if (safe_to_assign(tw, d, node.name.scope, node.value)) {
      d.fixed = function() {
        return node.value;
      };
      tw.loop_ids.set(d.id, tw.in_loop);
      mark(tw, d, false);
      descend();
      mark(tw, d, true);
      return true;
    } else {
      d.fixed = false;
    }
  }
});
def_reduce_vars(AST_While, function(tw, descend, compressor) {
  reset_block_variables(compressor, this);
  const saved_loop = tw.in_loop;
  tw.in_loop = this;
  push(tw);
  descend();
  pop(tw);
  tw.in_loop = saved_loop;
  return true;
});

// node_modules/terser/lib/compress/tighten-body.js
function loop_body(x) {
  if (x instanceof AST_IterationStatement) {
    return x.body instanceof AST_BlockStatement ? x.body : x;
  }
  return x;
}
function is_lhs_read_only(lhs) {
  if (lhs instanceof AST_This)
    return true;
  if (lhs instanceof AST_SymbolRef)
    return lhs.definition().orig[0] instanceof AST_SymbolLambda;
  if (lhs instanceof AST_PropAccess) {
    lhs = lhs.expression;
    if (lhs instanceof AST_SymbolRef) {
      if (lhs.is_immutable())
        return false;
      lhs = lhs.fixed_value();
    }
    if (!lhs)
      return true;
    if (lhs instanceof AST_RegExp)
      return false;
    if (lhs instanceof AST_Constant)
      return true;
    return is_lhs_read_only(lhs);
  }
  return false;
}
function trim_unreachable_code(compressor, stat, target) {
  walk(stat, (node) => {
    if (node instanceof AST_Var) {
      node.remove_initializers();
      target.push(node);
      return true;
    }
    if (node instanceof AST_Defun && (node === stat || !compressor.has_directive("use strict"))) {
      target.push(node === stat ? node : make_node(AST_Var, node, {
        definitions: [
          make_node(AST_VarDef, node, {
            name: make_node(AST_SymbolVar, node.name, node.name),
            value: null
          })
        ]
      }));
      return true;
    }
    if (node instanceof AST_Export || node instanceof AST_Import) {
      target.push(node);
      return true;
    }
    if (node instanceof AST_Scope) {
      return true;
    }
  });
}
function tighten_body(statements, compressor) {
  const nearest_scope = compressor.find_scope();
  const defun_scope = nearest_scope.get_defun_scope();
  const { in_loop, in_try } = find_loop_scope_try();
  var CHANGED, max_iter = 10;
  do {
    CHANGED = false;
    eliminate_spurious_blocks(statements);
    if (compressor.option("dead_code")) {
      eliminate_dead_code(statements, compressor);
    }
    if (compressor.option("if_return")) {
      handle_if_return(statements, compressor);
    }
    if (compressor.sequences_limit > 0) {
      sequencesize(statements, compressor);
      sequencesize_2(statements, compressor);
    }
    if (compressor.option("join_vars")) {
      join_consecutive_vars(statements);
    }
    if (compressor.option("collapse_vars")) {
      collapse(statements, compressor);
    }
  } while (CHANGED && max_iter-- > 0);
  function find_loop_scope_try() {
    var node = compressor.self(), level = 0, in_loop2 = false, in_try2 = false;
    do {
      if (node instanceof AST_IterationStatement) {
        in_loop2 = true;
      } else if (node instanceof AST_Scope) {
        break;
      } else if (node instanceof AST_TryBlock) {
        in_try2 = true;
      }
    } while (node = compressor.parent(level++));
    return { in_loop: in_loop2, in_try: in_try2 };
  }
  function collapse(statements2, compressor2) {
    if (nearest_scope.pinned() || defun_scope.pinned())
      return statements2;
    var args2;
    var candidates = [];
    var stat_index = statements2.length;
    var scanner = new TreeTransformer(function(node) {
      if (abort)
        return node;
      if (!hit) {
        if (node !== hit_stack[hit_index])
          return node;
        hit_index++;
        if (hit_index < hit_stack.length)
          return handle_custom_scan_order(node);
        hit = true;
        stop_after = find_stop(node, 0);
        if (stop_after === node)
          abort = true;
        return node;
      }
      var parent = scanner.parent();
      if (node instanceof AST_Assign && (node.logical || node.operator != "=" && lhs.equivalent_to(node.left)) || node instanceof AST_Await || node instanceof AST_Call && lhs instanceof AST_PropAccess && lhs.equivalent_to(node.expression) || (node instanceof AST_Call || node instanceof AST_PropAccess) && node.optional || node instanceof AST_Debugger || node instanceof AST_Destructuring || node instanceof AST_Expansion && node.expression instanceof AST_Symbol && (node.expression instanceof AST_This || node.expression.definition().references.length > 1) || node instanceof AST_IterationStatement && !(node instanceof AST_For) || node instanceof AST_LoopControl || node instanceof AST_Try || node instanceof AST_With || node instanceof AST_Yield || node instanceof AST_Export || node instanceof AST_Class || parent instanceof AST_For && node !== parent.init || !replace_all && (node instanceof AST_SymbolRef && !node.is_declared(compressor2) && !pure_prop_access_globals.has(node)) || node instanceof AST_SymbolRef && parent instanceof AST_Call && has_annotation(parent, _NOINLINE)) {
        abort = true;
        return node;
      }
      if (!stop_if_hit && (!lhs_local || !replace_all) && (parent instanceof AST_Binary && lazy_op.has(parent.operator) && parent.left !== node || parent instanceof AST_Conditional && parent.condition !== node || parent instanceof AST_If && parent.condition !== node)) {
        stop_if_hit = parent;
      }
      if (can_replace && !(node instanceof AST_SymbolDeclaration) && lhs.equivalent_to(node) && !shadows(scanner.find_scope() || nearest_scope, lvalues)) {
        if (stop_if_hit) {
          abort = true;
          return node;
        }
        if (is_lhs(node, parent)) {
          if (value_def)
            replaced++;
          return node;
        } else {
          replaced++;
          if (value_def && candidate instanceof AST_VarDef)
            return node;
        }
        CHANGED = abort = true;
        if (candidate instanceof AST_UnaryPostfix) {
          return make_node(AST_UnaryPrefix, candidate, candidate);
        }
        if (candidate instanceof AST_VarDef) {
          var def2 = candidate.name.definition();
          var value = candidate.value;
          if (def2.references.length - def2.replaced == 1 && !compressor2.exposed(def2)) {
            def2.replaced++;
            if (funarg && is_identifier_atom(value)) {
              return value.transform(compressor2);
            } else {
              return maintain_this_binding(parent, node, value);
            }
          }
          return make_node(AST_Assign, candidate, {
            operator: "=",
            logical: false,
            left: make_node(AST_SymbolRef, candidate.name, candidate.name),
            right: value
          });
        }
        clear_flag(candidate, WRITE_ONLY);
        return candidate;
      }
      var sym;
      if (node instanceof AST_Call || node instanceof AST_Exit && (side_effects || lhs instanceof AST_PropAccess || may_modify(lhs)) || node instanceof AST_PropAccess && (side_effects || node.expression.may_throw_on_access(compressor2)) || node instanceof AST_SymbolRef && (lvalues.has(node.name) && lvalues.get(node.name).modified || side_effects && may_modify(node)) || node instanceof AST_VarDef && node.value && (lvalues.has(node.name.name) || side_effects && may_modify(node.name)) || (sym = is_lhs(node.left, node)) && (sym instanceof AST_PropAccess || lvalues.has(sym.name)) || may_throw && (in_try ? node.has_side_effects(compressor2) : side_effects_external(node))) {
        stop_after = node;
        if (node instanceof AST_Scope)
          abort = true;
      }
      return handle_custom_scan_order(node);
    }, function(node) {
      if (abort)
        return;
      if (stop_after === node)
        abort = true;
      if (stop_if_hit === node)
        stop_if_hit = null;
    });
    var multi_replacer = new TreeTransformer(function(node) {
      if (abort)
        return node;
      if (!hit) {
        if (node !== hit_stack[hit_index])
          return node;
        hit_index++;
        if (hit_index < hit_stack.length)
          return;
        hit = true;
        return node;
      }
      if (node instanceof AST_SymbolRef && node.name == def.name) {
        if (!--replaced)
          abort = true;
        if (is_lhs(node, multi_replacer.parent()))
          return node;
        def.replaced++;
        value_def.replaced--;
        return candidate.value;
      }
      if (node instanceof AST_Default || node instanceof AST_Scope)
        return node;
    });
    while (--stat_index >= 0) {
      if (stat_index == 0 && compressor2.option("unused"))
        extract_args();
      var hit_stack = [];
      extract_candidates(statements2[stat_index]);
      while (candidates.length > 0) {
        hit_stack = candidates.pop();
        var hit_index = 0;
        var candidate = hit_stack[hit_stack.length - 1];
        var value_def = null;
        var stop_after = null;
        var stop_if_hit = null;
        var lhs = get_lhs(candidate);
        if (!lhs || is_lhs_read_only(lhs) || lhs.has_side_effects(compressor2))
          continue;
        var lvalues = get_lvalues(candidate);
        var lhs_local = is_lhs_local(lhs);
        if (lhs instanceof AST_SymbolRef) {
          lvalues.set(lhs.name, { def: lhs.definition(), modified: false });
        }
        var side_effects = value_has_side_effects(candidate);
        var replace_all = replace_all_symbols();
        var may_throw = candidate.may_throw(compressor2);
        var funarg = candidate.name instanceof AST_SymbolFunarg;
        var hit = funarg;
        var abort = false, replaced = 0, can_replace = !args2 || !hit;
        if (!can_replace) {
          for (let j = compressor2.self().argnames.lastIndexOf(candidate.name) + 1; !abort && j < args2.length; j++) {
            args2[j].transform(scanner);
          }
          can_replace = true;
        }
        for (var i = stat_index; !abort && i < statements2.length; i++) {
          statements2[i].transform(scanner);
        }
        if (value_def) {
          var def = candidate.name.definition();
          if (abort && def.references.length - def.replaced > replaced)
            replaced = false;
          else {
            abort = false;
            hit_index = 0;
            hit = funarg;
            for (var i = stat_index; !abort && i < statements2.length; i++) {
              statements2[i].transform(multi_replacer);
            }
            value_def.single_use = false;
          }
        }
        if (replaced && !remove_candidate(candidate))
          statements2.splice(stat_index, 1);
      }
    }
    function handle_custom_scan_order(node) {
      if (node instanceof AST_Scope)
        return node;
      if (node instanceof AST_Switch) {
        node.expression = node.expression.transform(scanner);
        for (var i2 = 0, len = node.body.length; !abort && i2 < len; i2++) {
          var branch = node.body[i2];
          if (branch instanceof AST_Case) {
            if (!hit) {
              if (branch !== hit_stack[hit_index])
                continue;
              hit_index++;
            }
            branch.expression = branch.expression.transform(scanner);
            if (!replace_all)
              break;
          }
        }
        abort = true;
        return node;
      }
    }
    function redefined_within_scope(def2, scope) {
      if (def2.global)
        return false;
      let cur_scope = def2.scope;
      while (cur_scope && cur_scope !== scope) {
        if (cur_scope.variables.has(def2.name)) {
          return true;
        }
        cur_scope = cur_scope.parent_scope;
      }
      return false;
    }
    function has_overlapping_symbol(fn, arg, fn_strict) {
      var found2 = false, scan_this = !(fn instanceof AST_Arrow);
      arg.walk(new TreeWalker(function(node, descend) {
        if (found2)
          return true;
        if (node instanceof AST_SymbolRef && (fn.variables.has(node.name) || redefined_within_scope(node.definition(), fn))) {
          var s = node.definition().scope;
          if (s !== defun_scope)
            while (s = s.parent_scope) {
              if (s === defun_scope)
                return true;
            }
          return found2 = true;
        }
        if ((fn_strict || scan_this) && node instanceof AST_This) {
          return found2 = true;
        }
        if (node instanceof AST_Scope && !(node instanceof AST_Arrow)) {
          var prev = scan_this;
          scan_this = false;
          descend();
          scan_this = prev;
          return true;
        }
      }));
      return found2;
    }
    function extract_args() {
      var iife, fn = compressor2.self();
      if (is_func_expr(fn) && !fn.name && !fn.uses_arguments && !fn.pinned() && (iife = compressor2.parent()) instanceof AST_Call && iife.expression === fn && iife.args.every((arg2) => !(arg2 instanceof AST_Expansion))) {
        var fn_strict = compressor2.has_directive("use strict");
        if (fn_strict && !member(fn_strict, fn.body))
          fn_strict = false;
        var len = fn.argnames.length;
        args2 = iife.args.slice(len);
        var names = /* @__PURE__ */ new Set();
        for (var i2 = len; --i2 >= 0; ) {
          var sym = fn.argnames[i2];
          var arg = iife.args[i2];
          const def2 = sym.definition && sym.definition();
          const is_reassigned = def2 && def2.orig.length > 1;
          if (is_reassigned)
            continue;
          args2.unshift(make_node(AST_VarDef, sym, {
            name: sym,
            value: arg
          }));
          if (names.has(sym.name))
            continue;
          names.add(sym.name);
          if (sym instanceof AST_Expansion) {
            var elements = iife.args.slice(i2);
            if (elements.every(
              (arg2) => !has_overlapping_symbol(fn, arg2, fn_strict)
            )) {
              candidates.unshift([make_node(AST_VarDef, sym, {
                name: sym.expression,
                value: make_node(AST_Array, iife, {
                  elements
                })
              })]);
            }
          } else {
            if (!arg) {
              arg = make_node(AST_Undefined, sym).transform(compressor2);
            } else if (arg instanceof AST_Lambda && arg.pinned() || has_overlapping_symbol(fn, arg, fn_strict)) {
              arg = null;
            }
            if (arg)
              candidates.unshift([make_node(AST_VarDef, sym, {
                name: sym,
                value: arg
              })]);
          }
        }
      }
    }
    function extract_candidates(expr) {
      hit_stack.push(expr);
      if (expr instanceof AST_Assign) {
        if (!expr.left.has_side_effects(compressor2) && !(expr.right instanceof AST_Chain)) {
          candidates.push(hit_stack.slice());
        }
        extract_candidates(expr.right);
      } else if (expr instanceof AST_Binary) {
        extract_candidates(expr.left);
        extract_candidates(expr.right);
      } else if (expr instanceof AST_Call && !has_annotation(expr, _NOINLINE)) {
        extract_candidates(expr.expression);
        expr.args.forEach(extract_candidates);
      } else if (expr instanceof AST_Case) {
        extract_candidates(expr.expression);
      } else if (expr instanceof AST_Conditional) {
        extract_candidates(expr.condition);
        extract_candidates(expr.consequent);
        extract_candidates(expr.alternative);
      } else if (expr instanceof AST_Definitions) {
        var len = expr.definitions.length;
        var i2 = len - 200;
        if (i2 < 0)
          i2 = 0;
        for (; i2 < len; i2++) {
          extract_candidates(expr.definitions[i2]);
        }
      } else if (expr instanceof AST_DWLoop) {
        extract_candidates(expr.condition);
        if (!(expr.body instanceof AST_Block)) {
          extract_candidates(expr.body);
        }
      } else if (expr instanceof AST_Exit) {
        if (expr.value)
          extract_candidates(expr.value);
      } else if (expr instanceof AST_For) {
        if (expr.init)
          extract_candidates(expr.init);
        if (expr.condition)
          extract_candidates(expr.condition);
        if (expr.step)
          extract_candidates(expr.step);
        if (!(expr.body instanceof AST_Block)) {
          extract_candidates(expr.body);
        }
      } else if (expr instanceof AST_ForIn) {
        extract_candidates(expr.object);
        if (!(expr.body instanceof AST_Block)) {
          extract_candidates(expr.body);
        }
      } else if (expr instanceof AST_If) {
        extract_candidates(expr.condition);
        if (!(expr.body instanceof AST_Block)) {
          extract_candidates(expr.body);
        }
        if (expr.alternative && !(expr.alternative instanceof AST_Block)) {
          extract_candidates(expr.alternative);
        }
      } else if (expr instanceof AST_Sequence) {
        expr.expressions.forEach(extract_candidates);
      } else if (expr instanceof AST_SimpleStatement) {
        extract_candidates(expr.body);
      } else if (expr instanceof AST_Switch) {
        extract_candidates(expr.expression);
        expr.body.forEach(extract_candidates);
      } else if (expr instanceof AST_Unary) {
        if (expr.operator == "++" || expr.operator == "--") {
          candidates.push(hit_stack.slice());
        }
      } else if (expr instanceof AST_VarDef) {
        if (expr.value && !(expr.value instanceof AST_Chain)) {
          candidates.push(hit_stack.slice());
          extract_candidates(expr.value);
        }
      }
      hit_stack.pop();
    }
    function find_stop(node, level, write_only) {
      var parent = scanner.parent(level);
      if (parent instanceof AST_Assign) {
        if (write_only && !parent.logical && !(parent.left instanceof AST_PropAccess || lvalues.has(parent.left.name))) {
          return find_stop(parent, level + 1, write_only);
        }
        return node;
      }
      if (parent instanceof AST_Binary) {
        if (write_only && (!lazy_op.has(parent.operator) || parent.left === node)) {
          return find_stop(parent, level + 1, write_only);
        }
        return node;
      }
      if (parent instanceof AST_Call)
        return node;
      if (parent instanceof AST_Case)
        return node;
      if (parent instanceof AST_Conditional) {
        if (write_only && parent.condition === node) {
          return find_stop(parent, level + 1, write_only);
        }
        return node;
      }
      if (parent instanceof AST_Definitions) {
        return find_stop(parent, level + 1, true);
      }
      if (parent instanceof AST_Exit) {
        return write_only ? find_stop(parent, level + 1, write_only) : node;
      }
      if (parent instanceof AST_If) {
        if (write_only && parent.condition === node) {
          return find_stop(parent, level + 1, write_only);
        }
        return node;
      }
      if (parent instanceof AST_IterationStatement)
        return node;
      if (parent instanceof AST_Sequence) {
        return find_stop(parent, level + 1, parent.tail_node() !== node);
      }
      if (parent instanceof AST_SimpleStatement) {
        return find_stop(parent, level + 1, true);
      }
      if (parent instanceof AST_Switch)
        return node;
      if (parent instanceof AST_VarDef)
        return node;
      return null;
    }
    function mangleable_var(var_def) {
      var value = var_def.value;
      if (!(value instanceof AST_SymbolRef))
        return;
      if (value.name == "arguments")
        return;
      var def2 = value.definition();
      if (def2.undeclared)
        return;
      return value_def = def2;
    }
    function get_lhs(expr) {
      if (expr instanceof AST_Assign && expr.logical) {
        return false;
      } else if (expr instanceof AST_VarDef && expr.name instanceof AST_SymbolDeclaration) {
        var def2 = expr.name.definition();
        if (!member(expr.name, def2.orig))
          return;
        var referenced = def2.references.length - def2.replaced;
        if (!referenced)
          return;
        var declared = def2.orig.length - def2.eliminated;
        if (declared > 1 && !(expr.name instanceof AST_SymbolFunarg) || (referenced > 1 ? mangleable_var(expr) : !compressor2.exposed(def2))) {
          return make_node(AST_SymbolRef, expr.name, expr.name);
        }
      } else {
        const lhs2 = expr instanceof AST_Assign ? expr.left : expr.expression;
        return !is_ref_of(lhs2, AST_SymbolConst) && !is_ref_of(lhs2, AST_SymbolLet) && lhs2;
      }
    }
    function get_rvalue(expr) {
      if (expr instanceof AST_Assign) {
        return expr.right;
      } else {
        return expr.value;
      }
    }
    function get_lvalues(expr) {
      var lvalues2 = /* @__PURE__ */ new Map();
      if (expr instanceof AST_Unary)
        return lvalues2;
      var tw = new TreeWalker(function(node) {
        var sym = node;
        while (sym instanceof AST_PropAccess)
          sym = sym.expression;
        if (sym instanceof AST_SymbolRef) {
          const prev = lvalues2.get(sym.name);
          if (!prev || !prev.modified) {
            lvalues2.set(sym.name, {
              def: sym.definition(),
              modified: is_modified(compressor2, tw, node, node, 0)
            });
          }
        }
      });
      get_rvalue(expr).walk(tw);
      return lvalues2;
    }
    function remove_candidate(expr) {
      if (expr.name instanceof AST_SymbolFunarg) {
        var iife = compressor2.parent(), argnames = compressor2.self().argnames;
        var index = argnames.indexOf(expr.name);
        if (index < 0) {
          iife.args.length = Math.min(iife.args.length, argnames.length - 1);
        } else {
          var args3 = iife.args;
          if (args3[index])
            args3[index] = make_node(AST_Number, args3[index], {
              value: 0
            });
        }
        return true;
      }
      var found2 = false;
      return statements2[stat_index].transform(new TreeTransformer(function(node, descend, in_list) {
        if (found2)
          return node;
        if (node === expr || node.body === expr) {
          found2 = true;
          if (node instanceof AST_VarDef) {
            node.value = node.name instanceof AST_SymbolConst ? make_node(AST_Undefined, node.value) : null;
            return node;
          }
          return in_list ? MAP.skip : null;
        }
      }, function(node) {
        if (node instanceof AST_Sequence)
          switch (node.expressions.length) {
            case 0:
              return null;
            case 1:
              return node.expressions[0];
          }
      }));
    }
    function is_lhs_local(lhs2) {
      while (lhs2 instanceof AST_PropAccess)
        lhs2 = lhs2.expression;
      return lhs2 instanceof AST_SymbolRef && lhs2.definition().scope.get_defun_scope() === defun_scope && !(in_loop && (lvalues.has(lhs2.name) || candidate instanceof AST_Unary || candidate instanceof AST_Assign && !candidate.logical && candidate.operator != "="));
    }
    function value_has_side_effects(expr) {
      if (expr instanceof AST_Unary)
        return unary_side_effects.has(expr.operator);
      return get_rvalue(expr).has_side_effects(compressor2);
    }
    function replace_all_symbols() {
      if (side_effects)
        return false;
      if (value_def)
        return true;
      if (lhs instanceof AST_SymbolRef) {
        var def2 = lhs.definition();
        if (def2.references.length - def2.replaced == (candidate instanceof AST_VarDef ? 1 : 2)) {
          return true;
        }
      }
      return false;
    }
    function may_modify(sym) {
      if (!sym.definition)
        return true;
      var def2 = sym.definition();
      if (def2.orig.length == 1 && def2.orig[0] instanceof AST_SymbolDefun)
        return false;
      if (def2.scope.get_defun_scope() !== defun_scope)
        return true;
      return def2.references.some(
        (ref) => ref.scope.get_defun_scope() !== defun_scope
      );
    }
    function side_effects_external(node, lhs2) {
      if (node instanceof AST_Assign)
        return side_effects_external(node.left, true);
      if (node instanceof AST_Unary)
        return side_effects_external(node.expression, true);
      if (node instanceof AST_VarDef)
        return node.value && side_effects_external(node.value);
      if (lhs2) {
        if (node instanceof AST_Dot)
          return side_effects_external(node.expression, true);
        if (node instanceof AST_Sub)
          return side_effects_external(node.expression, true);
        if (node instanceof AST_SymbolRef)
          return node.definition().scope.get_defun_scope() !== defun_scope;
      }
      return false;
    }
    function shadows(my_scope, lvalues2) {
      for (const { def: def2 } of lvalues2.values()) {
        const looked_up = my_scope.find_variable(def2.name);
        if (looked_up) {
          if (looked_up === def2)
            continue;
          return true;
        }
      }
      return false;
    }
  }
  function eliminate_spurious_blocks(statements2) {
    var seen_dirs = [];
    for (var i = 0; i < statements2.length; ) {
      var stat = statements2[i];
      if (stat instanceof AST_BlockStatement && stat.body.every(can_be_evicted_from_block)) {
        CHANGED = true;
        eliminate_spurious_blocks(stat.body);
        statements2.splice(i, 1, ...stat.body);
        i += stat.body.length;
      } else if (stat instanceof AST_EmptyStatement) {
        CHANGED = true;
        statements2.splice(i, 1);
      } else if (stat instanceof AST_Directive) {
        if (seen_dirs.indexOf(stat.value) < 0) {
          i++;
          seen_dirs.push(stat.value);
        } else {
          CHANGED = true;
          statements2.splice(i, 1);
        }
      } else
        i++;
    }
  }
  function handle_if_return(statements2, compressor2) {
    var self2 = compressor2.self();
    var multiple_if_returns = has_multiple_if_returns(statements2);
    var in_lambda = self2 instanceof AST_Lambda;
    for (var i = statements2.length; --i >= 0; ) {
      var stat = statements2[i];
      var j = next_index(i);
      var next = statements2[j];
      if (in_lambda && !next && stat instanceof AST_Return) {
        if (!stat.value) {
          CHANGED = true;
          statements2.splice(i, 1);
          continue;
        }
        if (stat.value instanceof AST_UnaryPrefix && stat.value.operator == "void") {
          CHANGED = true;
          statements2[i] = make_node(AST_SimpleStatement, stat, {
            body: stat.value.expression
          });
          continue;
        }
      }
      if (stat instanceof AST_If) {
        var ab = aborts(stat.body);
        if (can_merge_flow(ab)) {
          if (ab.label) {
            remove(ab.label.thedef.references, ab);
          }
          CHANGED = true;
          stat = stat.clone();
          stat.condition = stat.condition.negate(compressor2);
          var body = as_statement_array_with_return(stat.body, ab);
          stat.body = make_node(AST_BlockStatement, stat, {
            body: as_statement_array(stat.alternative).concat(extract_functions())
          });
          stat.alternative = make_node(AST_BlockStatement, stat, {
            body
          });
          statements2[i] = stat.transform(compressor2);
          continue;
        }
        var ab = aborts(stat.alternative);
        if (can_merge_flow(ab)) {
          if (ab.label) {
            remove(ab.label.thedef.references, ab);
          }
          CHANGED = true;
          stat = stat.clone();
          stat.body = make_node(AST_BlockStatement, stat.body, {
            body: as_statement_array(stat.body).concat(extract_functions())
          });
          var body = as_statement_array_with_return(stat.alternative, ab);
          stat.alternative = make_node(AST_BlockStatement, stat.alternative, {
            body
          });
          statements2[i] = stat.transform(compressor2);
          continue;
        }
      }
      if (stat instanceof AST_If && stat.body instanceof AST_Return) {
        var value = stat.body.value;
        if (!value && !stat.alternative && (in_lambda && !next || next instanceof AST_Return && !next.value)) {
          CHANGED = true;
          statements2[i] = make_node(AST_SimpleStatement, stat.condition, {
            body: stat.condition
          });
          continue;
        }
        if (value && !stat.alternative && next instanceof AST_Return && next.value) {
          CHANGED = true;
          stat = stat.clone();
          stat.alternative = next;
          statements2[i] = stat.transform(compressor2);
          statements2.splice(j, 1);
          continue;
        }
        if (value && !stat.alternative && (!next && in_lambda && multiple_if_returns || next instanceof AST_Return)) {
          CHANGED = true;
          stat = stat.clone();
          stat.alternative = next || make_node(AST_Return, stat, {
            value: null
          });
          statements2[i] = stat.transform(compressor2);
          if (next)
            statements2.splice(j, 1);
          continue;
        }
        var prev = statements2[prev_index(i)];
        if (compressor2.option("sequences") && in_lambda && !stat.alternative && prev instanceof AST_If && prev.body instanceof AST_Return && next_index(j) == statements2.length && next instanceof AST_SimpleStatement) {
          CHANGED = true;
          stat = stat.clone();
          stat.alternative = make_node(AST_BlockStatement, next, {
            body: [
              next,
              make_node(AST_Return, next, {
                value: null
              })
            ]
          });
          statements2[i] = stat.transform(compressor2);
          statements2.splice(j, 1);
          continue;
        }
      }
    }
    function has_multiple_if_returns(statements3) {
      var n = 0;
      for (var i2 = statements3.length; --i2 >= 0; ) {
        var stat2 = statements3[i2];
        if (stat2 instanceof AST_If && stat2.body instanceof AST_Return) {
          if (++n > 1)
            return true;
        }
      }
      return false;
    }
    function is_return_void(value2) {
      return !value2 || value2 instanceof AST_UnaryPrefix && value2.operator == "void";
    }
    function can_merge_flow(ab2) {
      if (!ab2)
        return false;
      for (var j2 = i + 1, len = statements2.length; j2 < len; j2++) {
        var stat2 = statements2[j2];
        if (stat2 instanceof AST_Const || stat2 instanceof AST_Let)
          return false;
      }
      var lct = ab2 instanceof AST_LoopControl ? compressor2.loopcontrol_target(ab2) : null;
      return ab2 instanceof AST_Return && in_lambda && is_return_void(ab2.value) || ab2 instanceof AST_Continue && self2 === loop_body(lct) || ab2 instanceof AST_Break && lct instanceof AST_BlockStatement && self2 === lct;
    }
    function extract_functions() {
      var tail = statements2.slice(i + 1);
      statements2.length = i + 1;
      return tail.filter(function(stat2) {
        if (stat2 instanceof AST_Defun) {
          statements2.push(stat2);
          return false;
        }
        return true;
      });
    }
    function as_statement_array_with_return(node, ab2) {
      var body2 = as_statement_array(node).slice(0, -1);
      if (ab2.value) {
        body2.push(make_node(AST_SimpleStatement, ab2.value, {
          body: ab2.value.expression
        }));
      }
      return body2;
    }
    function next_index(i2) {
      for (var j2 = i2 + 1, len = statements2.length; j2 < len; j2++) {
        var stat2 = statements2[j2];
        if (!(stat2 instanceof AST_Var && declarations_only(stat2))) {
          break;
        }
      }
      return j2;
    }
    function prev_index(i2) {
      for (var j2 = i2; --j2 >= 0; ) {
        var stat2 = statements2[j2];
        if (!(stat2 instanceof AST_Var && declarations_only(stat2))) {
          break;
        }
      }
      return j2;
    }
  }
  function eliminate_dead_code(statements2, compressor2) {
    var has_quit;
    var self2 = compressor2.self();
    for (var i = 0, n = 0, len = statements2.length; i < len; i++) {
      var stat = statements2[i];
      if (stat instanceof AST_LoopControl) {
        var lct = compressor2.loopcontrol_target(stat);
        if (stat instanceof AST_Break && !(lct instanceof AST_IterationStatement) && loop_body(lct) === self2 || stat instanceof AST_Continue && loop_body(lct) === self2) {
          if (stat.label) {
            remove(stat.label.thedef.references, stat);
          }
        } else {
          statements2[n++] = stat;
        }
      } else {
        statements2[n++] = stat;
      }
      if (aborts(stat)) {
        has_quit = statements2.slice(i + 1);
        break;
      }
    }
    statements2.length = n;
    CHANGED = n != len;
    if (has_quit)
      has_quit.forEach(function(stat2) {
        trim_unreachable_code(compressor2, stat2, statements2);
      });
  }
  function declarations_only(node) {
    return node.definitions.every((var_def) => !var_def.value);
  }
  function sequencesize(statements2, compressor2) {
    if (statements2.length < 2)
      return;
    var seq = [], n = 0;
    function push_seq() {
      if (!seq.length)
        return;
      var body2 = make_sequence(seq[0], seq);
      statements2[n++] = make_node(AST_SimpleStatement, body2, { body: body2 });
      seq = [];
    }
    for (var i = 0, len = statements2.length; i < len; i++) {
      var stat = statements2[i];
      if (stat instanceof AST_SimpleStatement) {
        if (seq.length >= compressor2.sequences_limit)
          push_seq();
        var body = stat.body;
        if (seq.length > 0)
          body = body.drop_side_effect_free(compressor2);
        if (body)
          merge_sequence(seq, body);
      } else if (stat instanceof AST_Definitions && declarations_only(stat) || stat instanceof AST_Defun) {
        statements2[n++] = stat;
      } else {
        push_seq();
        statements2[n++] = stat;
      }
    }
    push_seq();
    statements2.length = n;
    if (n != len)
      CHANGED = true;
  }
  function to_simple_statement(block, decls) {
    if (!(block instanceof AST_BlockStatement))
      return block;
    var stat = null;
    for (var i = 0, len = block.body.length; i < len; i++) {
      var line = block.body[i];
      if (line instanceof AST_Var && declarations_only(line)) {
        decls.push(line);
      } else if (stat || line instanceof AST_Const || line instanceof AST_Let) {
        return false;
      } else {
        stat = line;
      }
    }
    return stat;
  }
  function sequencesize_2(statements2, compressor2) {
    function cons_seq(right) {
      n--;
      CHANGED = true;
      var left = prev.body;
      return make_sequence(left, [left, right]).transform(compressor2);
    }
    var n = 0, prev;
    for (var i = 0; i < statements2.length; i++) {
      var stat = statements2[i];
      if (prev) {
        if (stat instanceof AST_Exit) {
          stat.value = cons_seq(stat.value || make_node(AST_Undefined, stat).transform(compressor2));
        } else if (stat instanceof AST_For) {
          if (!(stat.init instanceof AST_Definitions)) {
            const abort = walk(prev.body, (node) => {
              if (node instanceof AST_Scope)
                return true;
              if (node instanceof AST_Binary && node.operator === "in") {
                return walk_abort;
              }
            });
            if (!abort) {
              if (stat.init)
                stat.init = cons_seq(stat.init);
              else {
                stat.init = prev.body;
                n--;
                CHANGED = true;
              }
            }
          }
        } else if (stat instanceof AST_ForIn) {
          if (!(stat.init instanceof AST_Const) && !(stat.init instanceof AST_Let)) {
            stat.object = cons_seq(stat.object);
          }
        } else if (stat instanceof AST_If) {
          stat.condition = cons_seq(stat.condition);
        } else if (stat instanceof AST_Switch) {
          stat.expression = cons_seq(stat.expression);
        } else if (stat instanceof AST_With) {
          stat.expression = cons_seq(stat.expression);
        }
      }
      if (compressor2.option("conditionals") && stat instanceof AST_If) {
        var decls = [];
        var body = to_simple_statement(stat.body, decls);
        var alt = to_simple_statement(stat.alternative, decls);
        if (body !== false && alt !== false && decls.length > 0) {
          var len = decls.length;
          decls.push(make_node(AST_If, stat, {
            condition: stat.condition,
            body: body || make_node(AST_EmptyStatement, stat.body),
            alternative: alt
          }));
          decls.unshift(n, 1);
          [].splice.apply(statements2, decls);
          i += len;
          n += len + 1;
          prev = null;
          CHANGED = true;
          continue;
        }
      }
      statements2[n++] = stat;
      prev = stat instanceof AST_SimpleStatement ? stat : null;
    }
    statements2.length = n;
  }
  function join_object_assignments(defn, body) {
    if (!(defn instanceof AST_Definitions))
      return;
    var def = defn.definitions[defn.definitions.length - 1];
    if (!(def.value instanceof AST_Object))
      return;
    var exprs;
    if (body instanceof AST_Assign && !body.logical) {
      exprs = [body];
    } else if (body instanceof AST_Sequence) {
      exprs = body.expressions.slice();
    }
    if (!exprs)
      return;
    var trimmed = false;
    do {
      var node = exprs[0];
      if (!(node instanceof AST_Assign))
        break;
      if (node.operator != "=")
        break;
      if (!(node.left instanceof AST_PropAccess))
        break;
      var sym = node.left.expression;
      if (!(sym instanceof AST_SymbolRef))
        break;
      if (def.name.name != sym.name)
        break;
      if (!node.right.is_constant_expression(nearest_scope))
        break;
      var prop = node.left.property;
      if (prop instanceof AST_Node) {
        prop = prop.evaluate(compressor);
      }
      if (prop instanceof AST_Node)
        break;
      prop = "" + prop;
      var diff = compressor.option("ecma") < 2015 && compressor.has_directive("use strict") ? function(node2) {
        return node2.key != prop && (node2.key && node2.key.name != prop);
      } : function(node2) {
        return node2.key && node2.key.name != prop;
      };
      if (!def.value.properties.every(diff))
        break;
      var p = def.value.properties.filter(function(p2) {
        return p2.key === prop;
      })[0];
      if (!p) {
        def.value.properties.push(make_node(AST_ObjectKeyVal, node, {
          key: prop,
          value: node.right
        }));
      } else {
        p.value = new AST_Sequence({
          start: p.start,
          expressions: [p.value.clone(), node.right.clone()],
          end: p.end
        });
      }
      exprs.shift();
      trimmed = true;
    } while (exprs.length);
    return trimmed && exprs;
  }
  function join_consecutive_vars(statements2) {
    var defs;
    for (var i = 0, j = -1, len = statements2.length; i < len; i++) {
      var stat = statements2[i];
      var prev = statements2[j];
      if (stat instanceof AST_Definitions) {
        if (prev && prev.TYPE == stat.TYPE) {
          prev.definitions = prev.definitions.concat(stat.definitions);
          CHANGED = true;
        } else if (defs && defs.TYPE == stat.TYPE && declarations_only(stat)) {
          defs.definitions = defs.definitions.concat(stat.definitions);
          CHANGED = true;
        } else {
          statements2[++j] = stat;
          defs = stat;
        }
      } else if (stat instanceof AST_Exit) {
        stat.value = extract_object_assignments(stat.value);
      } else if (stat instanceof AST_For) {
        var exprs = join_object_assignments(prev, stat.init);
        if (exprs) {
          CHANGED = true;
          stat.init = exprs.length ? make_sequence(stat.init, exprs) : null;
          statements2[++j] = stat;
        } else if (prev instanceof AST_Var && (!stat.init || stat.init.TYPE == prev.TYPE)) {
          if (stat.init) {
            prev.definitions = prev.definitions.concat(stat.init.definitions);
          }
          stat.init = prev;
          statements2[j] = stat;
          CHANGED = true;
        } else if (defs instanceof AST_Var && stat.init instanceof AST_Var && declarations_only(stat.init)) {
          defs.definitions = defs.definitions.concat(stat.init.definitions);
          stat.init = null;
          statements2[++j] = stat;
          CHANGED = true;
        } else {
          statements2[++j] = stat;
        }
      } else if (stat instanceof AST_ForIn) {
        stat.object = extract_object_assignments(stat.object);
      } else if (stat instanceof AST_If) {
        stat.condition = extract_object_assignments(stat.condition);
      } else if (stat instanceof AST_SimpleStatement) {
        var exprs = join_object_assignments(prev, stat.body);
        if (exprs) {
          CHANGED = true;
          if (!exprs.length)
            continue;
          stat.body = make_sequence(stat.body, exprs);
        }
        statements2[++j] = stat;
      } else if (stat instanceof AST_Switch) {
        stat.expression = extract_object_assignments(stat.expression);
      } else if (stat instanceof AST_With) {
        stat.expression = extract_object_assignments(stat.expression);
      } else {
        statements2[++j] = stat;
      }
    }
    statements2.length = j + 1;
    function extract_object_assignments(value) {
      statements2[++j] = stat;
      var exprs2 = join_object_assignments(prev, value);
      if (exprs2) {
        CHANGED = true;
        if (exprs2.length) {
          return make_sequence(value, exprs2);
        } else if (value instanceof AST_Sequence) {
          return value.tail_node().left;
        } else {
          return value.left;
        }
      }
      return value;
    }
  }
}

// node_modules/terser/lib/compress/inline.js
function within_array_or_object_literal(compressor) {
  var node, level = 0;
  while (node = compressor.parent(level++)) {
    if (node instanceof AST_Statement)
      return false;
    if (node instanceof AST_Array || node instanceof AST_ObjectKeyVal || node instanceof AST_Object) {
      return true;
    }
  }
  return false;
}
function scope_encloses_variables_in_this_scope(scope, pulled_scope) {
  for (const enclosed of pulled_scope.enclosed) {
    if (pulled_scope.variables.has(enclosed.name)) {
      continue;
    }
    const looked_up = scope.find_variable(enclosed.name);
    if (looked_up) {
      if (looked_up === enclosed)
        continue;
      return true;
    }
  }
  return false;
}
function inline_into_symbolref(self2, compressor) {
  const parent = compressor.parent();
  const def = self2.definition();
  const nearest_scope = compressor.find_scope();
  if (compressor.top_retain && def.global && compressor.top_retain(def)) {
    def.fixed = false;
    def.single_use = false;
    return self2;
  }
  let fixed = self2.fixed_value();
  let single_use = def.single_use && !(parent instanceof AST_Call && parent.is_callee_pure(compressor) || has_annotation(parent, _NOINLINE)) && !(parent instanceof AST_Export && fixed instanceof AST_Lambda && fixed.name);
  if (single_use && fixed instanceof AST_Node) {
    single_use = !fixed.has_side_effects(compressor) && !fixed.may_throw(compressor);
  }
  if (single_use && (fixed instanceof AST_Lambda || fixed instanceof AST_Class)) {
    if (retain_top_func(fixed, compressor)) {
      single_use = false;
    } else if (def.scope !== self2.scope && (def.escaped == 1 || has_flag(fixed, INLINED) || within_array_or_object_literal(compressor) || !compressor.option("reduce_funcs"))) {
      single_use = false;
    } else if (is_recursive_ref(compressor, def)) {
      single_use = false;
    } else if (def.scope !== self2.scope || def.orig[0] instanceof AST_SymbolFunarg) {
      single_use = fixed.is_constant_expression(self2.scope);
      if (single_use == "f") {
        var scope = self2.scope;
        do {
          if (scope instanceof AST_Defun || is_func_expr(scope)) {
            set_flag(scope, INLINED);
          }
        } while (scope = scope.parent_scope);
      }
    }
  }
  if (single_use && (fixed instanceof AST_Lambda || fixed instanceof AST_Class)) {
    single_use = def.scope === self2.scope && !scope_encloses_variables_in_this_scope(nearest_scope, fixed) || parent instanceof AST_Call && parent.expression === self2 && !scope_encloses_variables_in_this_scope(nearest_scope, fixed) && !(fixed.name && fixed.name.definition().recursive_refs > 0);
  }
  if (single_use && fixed) {
    if (fixed instanceof AST_DefClass) {
      set_flag(fixed, SQUEEZED);
      fixed = make_node(AST_ClassExpression, fixed, fixed);
    }
    if (fixed instanceof AST_Defun) {
      set_flag(fixed, SQUEEZED);
      fixed = make_node(AST_Function, fixed, fixed);
    }
    if (def.recursive_refs > 0 && fixed.name instanceof AST_SymbolDefun) {
      const defun_def = fixed.name.definition();
      let lambda_def = fixed.variables.get(fixed.name.name);
      let name = lambda_def && lambda_def.orig[0];
      if (!(name instanceof AST_SymbolLambda)) {
        name = make_node(AST_SymbolLambda, fixed.name, fixed.name);
        name.scope = fixed;
        fixed.name = name;
        lambda_def = fixed.def_function(name);
      }
      walk(fixed, (node) => {
        if (node instanceof AST_SymbolRef && node.definition() === defun_def) {
          node.thedef = lambda_def;
          lambda_def.references.push(node);
        }
      });
    }
    if ((fixed instanceof AST_Lambda || fixed instanceof AST_Class) && fixed.parent_scope !== nearest_scope) {
      fixed = fixed.clone(true, compressor.get_toplevel());
      nearest_scope.add_child_scope(fixed);
    }
    return fixed.optimize(compressor);
  }
  if (fixed) {
    let replace;
    if (fixed instanceof AST_This) {
      if (!(def.orig[0] instanceof AST_SymbolFunarg) && def.references.every(
        (ref) => def.scope === ref.scope
      )) {
        replace = fixed;
      }
    } else {
      var ev = fixed.evaluate(compressor);
      if (ev !== fixed && (compressor.option("unsafe_regexp") || !(ev instanceof RegExp))) {
        replace = make_node_from_constant(ev, fixed);
      }
    }
    if (replace) {
      const name_length = self2.size(compressor);
      const replace_size = replace.size(compressor);
      let overhead = 0;
      if (compressor.option("unused") && !compressor.exposed(def)) {
        overhead = (name_length + 2 + replace_size) / (def.references.length - def.assignments);
      }
      if (replace_size <= name_length + overhead) {
        return replace;
      }
    }
  }
  return self2;
}
function inline_into_call(self2, fn, compressor) {
  var exp = self2.expression;
  var simple_args = self2.args.every((arg) => !(arg instanceof AST_Expansion));
  if (compressor.option("reduce_vars") && fn instanceof AST_SymbolRef && !has_annotation(self2, _NOINLINE)) {
    const fixed = fn.fixed_value();
    if (!retain_top_func(fixed, compressor)) {
      fn = fixed;
    }
  }
  var is_func = fn instanceof AST_Lambda;
  var stat = is_func && fn.body[0];
  var is_regular_func = is_func && !fn.is_generator && !fn.async;
  var can_inline = is_regular_func && compressor.option("inline") && !self2.is_callee_pure(compressor);
  if (can_inline && stat instanceof AST_Return) {
    let returned = stat.value;
    if (!returned || returned.is_constant_expression()) {
      if (returned) {
        returned = returned.clone(true);
      } else {
        returned = make_node(AST_Undefined, self2);
      }
      const args3 = self2.args.concat(returned);
      return make_sequence(self2, args3).optimize(compressor);
    }
    if (fn.argnames.length === 1 && fn.argnames[0] instanceof AST_SymbolFunarg && self2.args.length < 2 && !(self2.args[0] instanceof AST_Expansion) && returned instanceof AST_SymbolRef && returned.name === fn.argnames[0].name) {
      const replacement = (self2.args[0] || make_node(AST_Undefined)).optimize(compressor);
      let parent;
      if (replacement instanceof AST_PropAccess && (parent = compressor.parent()) instanceof AST_Call && parent.expression === self2) {
        return make_sequence(self2, [
          make_node(AST_Number, self2, { value: 0 }),
          replacement
        ]);
      }
      return replacement;
    }
  }
  if (can_inline) {
    var scope, in_loop, level = -1;
    let def;
    let returned_value;
    let nearest_scope;
    if (simple_args && !fn.uses_arguments && !(compressor.parent() instanceof AST_Class) && !(fn.name && fn instanceof AST_Function) && (returned_value = can_flatten_body(stat)) && (exp === fn || has_annotation(self2, _INLINE) || compressor.option("unused") && (def = exp.definition()).references.length == 1 && !is_recursive_ref(compressor, def) && fn.is_constant_expression(exp.scope)) && !has_annotation(self2, _PURE | _NOINLINE) && !fn.contains_this() && can_inject_symbols() && (nearest_scope = compressor.find_scope()) && !scope_encloses_variables_in_this_scope(nearest_scope, fn) && !function in_default_assign() {
      let i = 0;
      let p;
      while (p = compressor.parent(i++)) {
        if (p instanceof AST_DefaultAssign)
          return true;
        if (p instanceof AST_Block)
          break;
      }
      return false;
    }() && !(scope instanceof AST_Class)) {
      set_flag(fn, SQUEEZED);
      nearest_scope.add_child_scope(fn);
      return make_sequence(self2, flatten_fn(returned_value)).optimize(compressor);
    }
  }
  if (can_inline && has_annotation(self2, _INLINE)) {
    set_flag(fn, SQUEEZED);
    fn = make_node(fn.CTOR === AST_Defun ? AST_Function : fn.CTOR, fn, fn);
    fn = fn.clone(true);
    fn.figure_out_scope({}, {
      parent_scope: compressor.find_scope(),
      toplevel: compressor.get_toplevel()
    });
    return make_node(AST_Call, self2, {
      expression: fn,
      args: self2.args
    }).optimize(compressor);
  }
  const can_drop_this_call = is_regular_func && compressor.option("side_effects") && fn.body.every(is_empty);
  if (can_drop_this_call) {
    var args2 = self2.args.concat(make_node(AST_Undefined, self2));
    return make_sequence(self2, args2).optimize(compressor);
  }
  if (compressor.option("negate_iife") && compressor.parent() instanceof AST_SimpleStatement && is_iife_call(self2)) {
    return self2.negate(compressor, true);
  }
  var ev = self2.evaluate(compressor);
  if (ev !== self2) {
    ev = make_node_from_constant(ev, self2).optimize(compressor);
    return best_of(compressor, ev, self2);
  }
  return self2;
  function return_value(stat2) {
    if (!stat2)
      return make_node(AST_Undefined, self2);
    if (stat2 instanceof AST_Return) {
      if (!stat2.value)
        return make_node(AST_Undefined, self2);
      return stat2.value.clone(true);
    }
    if (stat2 instanceof AST_SimpleStatement) {
      return make_node(AST_UnaryPrefix, stat2, {
        operator: "void",
        expression: stat2.body.clone(true)
      });
    }
  }
  function can_flatten_body(stat2) {
    var body = fn.body;
    var len = body.length;
    if (compressor.option("inline") < 3) {
      return len == 1 && return_value(stat2);
    }
    stat2 = null;
    for (var i = 0; i < len; i++) {
      var line = body[i];
      if (line instanceof AST_Var) {
        if (stat2 && !line.definitions.every(
          (var_def) => !var_def.value
        )) {
          return false;
        }
      } else if (stat2) {
        return false;
      } else if (!(line instanceof AST_EmptyStatement)) {
        stat2 = line;
      }
    }
    return return_value(stat2);
  }
  function can_inject_args(block_scoped, safe_to_inject) {
    for (var i = 0, len = fn.argnames.length; i < len; i++) {
      var arg = fn.argnames[i];
      if (arg instanceof AST_DefaultAssign) {
        if (has_flag(arg.left, UNUSED))
          continue;
        return false;
      }
      if (arg instanceof AST_Destructuring)
        return false;
      if (arg instanceof AST_Expansion) {
        if (has_flag(arg.expression, UNUSED))
          continue;
        return false;
      }
      if (has_flag(arg, UNUSED))
        continue;
      if (!safe_to_inject || block_scoped.has(arg.name) || identifier_atom.has(arg.name) || scope.conflicting_def(arg.name)) {
        return false;
      }
      if (in_loop)
        in_loop.push(arg.definition());
    }
    return true;
  }
  function can_inject_vars(block_scoped, safe_to_inject) {
    var len = fn.body.length;
    for (var i = 0; i < len; i++) {
      var stat2 = fn.body[i];
      if (!(stat2 instanceof AST_Var))
        continue;
      if (!safe_to_inject)
        return false;
      for (var j = stat2.definitions.length; --j >= 0; ) {
        var name = stat2.definitions[j].name;
        if (name instanceof AST_Destructuring || block_scoped.has(name.name) || identifier_atom.has(name.name) || scope.conflicting_def(name.name)) {
          return false;
        }
        if (in_loop)
          in_loop.push(name.definition());
      }
    }
    return true;
  }
  function can_inject_symbols() {
    var block_scoped = /* @__PURE__ */ new Set();
    do {
      scope = compressor.parent(++level);
      if (scope.is_block_scope() && scope.block_scope) {
        scope.block_scope.variables.forEach(function(variable) {
          block_scoped.add(variable.name);
        });
      }
      if (scope instanceof AST_Catch) {
        if (scope.argname) {
          block_scoped.add(scope.argname.name);
        }
      } else if (scope instanceof AST_IterationStatement) {
        in_loop = [];
      } else if (scope instanceof AST_SymbolRef) {
        if (scope.fixed_value() instanceof AST_Scope)
          return false;
      }
    } while (!(scope instanceof AST_Scope));
    var safe_to_inject = !(scope instanceof AST_Toplevel) || compressor.toplevel.vars;
    var inline = compressor.option("inline");
    if (!can_inject_vars(block_scoped, inline >= 3 && safe_to_inject))
      return false;
    if (!can_inject_args(block_scoped, inline >= 2 && safe_to_inject))
      return false;
    return !in_loop || in_loop.length == 0 || !is_reachable(fn, in_loop);
  }
  function append_var(decls, expressions, name, value) {
    var def = name.definition();
    const already_appended = scope.variables.has(name.name);
    if (!already_appended) {
      scope.variables.set(name.name, def);
      scope.enclosed.push(def);
      decls.push(make_node(AST_VarDef, name, {
        name,
        value: null
      }));
    }
    var sym = make_node(AST_SymbolRef, name, name);
    def.references.push(sym);
    if (value)
      expressions.push(make_node(AST_Assign, self2, {
        operator: "=",
        logical: false,
        left: sym,
        right: value.clone()
      }));
  }
  function flatten_args(decls, expressions) {
    var len = fn.argnames.length;
    for (var i = self2.args.length; --i >= len; ) {
      expressions.push(self2.args[i]);
    }
    for (i = len; --i >= 0; ) {
      var name = fn.argnames[i];
      var value = self2.args[i];
      if (has_flag(name, UNUSED) || !name.name || scope.conflicting_def(name.name)) {
        if (value)
          expressions.push(value);
      } else {
        var symbol = make_node(AST_SymbolVar, name, name);
        name.definition().orig.push(symbol);
        if (!value && in_loop)
          value = make_node(AST_Undefined, self2);
        append_var(decls, expressions, symbol, value);
      }
    }
    decls.reverse();
    expressions.reverse();
  }
  function flatten_vars(decls, expressions) {
    var pos = expressions.length;
    for (var i = 0, lines = fn.body.length; i < lines; i++) {
      var stat2 = fn.body[i];
      if (!(stat2 instanceof AST_Var))
        continue;
      for (var j = 0, defs = stat2.definitions.length; j < defs; j++) {
        var var_def = stat2.definitions[j];
        var name = var_def.name;
        append_var(decls, expressions, name, var_def.value);
        if (in_loop && fn.argnames.every(
          (argname) => argname.name != name.name
        )) {
          var def = fn.variables.get(name.name);
          var sym = make_node(AST_SymbolRef, name, name);
          def.references.push(sym);
          expressions.splice(pos++, 0, make_node(AST_Assign, var_def, {
            operator: "=",
            logical: false,
            left: sym,
            right: make_node(AST_Undefined, name)
          }));
        }
      }
    }
  }
  function flatten_fn(returned_value) {
    var decls = [];
    var expressions = [];
    flatten_args(decls, expressions);
    flatten_vars(decls, expressions);
    expressions.push(returned_value);
    if (decls.length) {
      const i = scope.body.indexOf(compressor.parent(level - 1)) + 1;
      scope.body.splice(i, 0, make_node(AST_Var, fn, {
        definitions: decls
      }));
    }
    return expressions.map((exp2) => exp2.clone(true));
  }
}

// node_modules/terser/lib/compress/index.js
var Compressor = class extends TreeWalker {
  constructor(options3, { false_by_default = false, mangle_options: mangle_options2 = false }) {
    super();
    if (options3.defaults !== void 0 && !options3.defaults)
      false_by_default = true;
    this.options = defaults2(options3, {
      arguments: false,
      arrows: !false_by_default,
      booleans: !false_by_default,
      booleans_as_integers: false,
      collapse_vars: !false_by_default,
      comparisons: !false_by_default,
      computed_props: !false_by_default,
      conditionals: !false_by_default,
      dead_code: !false_by_default,
      defaults: true,
      directives: !false_by_default,
      drop_console: false,
      drop_debugger: !false_by_default,
      ecma: 5,
      evaluate: !false_by_default,
      expression: false,
      global_defs: false,
      hoist_funs: false,
      hoist_props: !false_by_default,
      hoist_vars: false,
      ie8: false,
      if_return: !false_by_default,
      inline: !false_by_default,
      join_vars: !false_by_default,
      keep_classnames: false,
      keep_fargs: true,
      keep_fnames: false,
      keep_infinity: false,
      lhs_constants: !false_by_default,
      loops: !false_by_default,
      module: false,
      negate_iife: !false_by_default,
      passes: 1,
      properties: !false_by_default,
      pure_getters: !false_by_default && "strict",
      pure_funcs: null,
      reduce_funcs: !false_by_default,
      reduce_vars: !false_by_default,
      sequences: !false_by_default,
      side_effects: !false_by_default,
      switches: !false_by_default,
      top_retain: null,
      toplevel: !!(options3 && options3["top_retain"]),
      typeofs: !false_by_default,
      unsafe: false,
      unsafe_arrows: false,
      unsafe_comps: false,
      unsafe_Function: false,
      unsafe_math: false,
      unsafe_symbols: false,
      unsafe_methods: false,
      unsafe_proto: false,
      unsafe_regexp: false,
      unsafe_undefined: false,
      unused: !false_by_default,
      warnings: false
      // legacy
    }, true);
    var global_defs = this.options["global_defs"];
    if (typeof global_defs == "object")
      for (var key in global_defs) {
        if (key[0] === "@" && HOP(global_defs, key)) {
          global_defs[key.slice(1)] = parse(global_defs[key], {
            expression: true
          });
        }
      }
    if (this.options["inline"] === true)
      this.options["inline"] = 3;
    var pure_funcs = this.options["pure_funcs"];
    if (typeof pure_funcs == "function") {
      this.pure_funcs = pure_funcs;
    } else {
      this.pure_funcs = pure_funcs ? function(node) {
        return !pure_funcs.includes(node.expression.print_to_string());
      } : return_true;
    }
    var top_retain = this.options["top_retain"];
    if (top_retain instanceof RegExp) {
      this.top_retain = function(def) {
        return top_retain.test(def.name);
      };
    } else if (typeof top_retain == "function") {
      this.top_retain = top_retain;
    } else if (top_retain) {
      if (typeof top_retain == "string") {
        top_retain = top_retain.split(/,/);
      }
      this.top_retain = function(def) {
        return top_retain.includes(def.name);
      };
    }
    if (this.options["module"]) {
      this.directives["use strict"] = true;
      this.options["toplevel"] = true;
    }
    var toplevel = this.options["toplevel"];
    this.toplevel = typeof toplevel == "string" ? {
      funcs: /funcs/.test(toplevel),
      vars: /vars/.test(toplevel)
    } : {
      funcs: toplevel,
      vars: toplevel
    };
    var sequences = this.options["sequences"];
    this.sequences_limit = sequences == 1 ? 800 : sequences | 0;
    this.evaluated_regexps = /* @__PURE__ */ new Map();
    this._toplevel = void 0;
    this.mangle_options = mangle_options2 ? format_mangler_options(mangle_options2) : mangle_options2;
  }
  option(key) {
    return this.options[key];
  }
  exposed(def) {
    if (def.export)
      return true;
    if (def.global) {
      for (var i = 0, len = def.orig.length; i < len; i++)
        if (!this.toplevel[def.orig[i] instanceof AST_SymbolDefun ? "funcs" : "vars"])
          return true;
    }
    return false;
  }
  in_boolean_context() {
    if (!this.option("booleans"))
      return false;
    var self2 = this.self();
    for (var i = 0, p; p = this.parent(i); i++) {
      if (p instanceof AST_SimpleStatement || p instanceof AST_Conditional && p.condition === self2 || p instanceof AST_DWLoop && p.condition === self2 || p instanceof AST_For && p.condition === self2 || p instanceof AST_If && p.condition === self2 || p instanceof AST_UnaryPrefix && p.operator == "!" && p.expression === self2) {
        return true;
      }
      if (p instanceof AST_Binary && (p.operator == "&&" || p.operator == "||" || p.operator == "??") || p instanceof AST_Conditional || p.tail_node() === self2) {
        self2 = p;
      } else {
        return false;
      }
    }
  }
  get_toplevel() {
    return this._toplevel;
  }
  compress(toplevel) {
    toplevel = toplevel.resolve_defines(this);
    this._toplevel = toplevel;
    if (this.option("expression")) {
      this._toplevel.process_expression(true);
    }
    var passes = +this.options.passes || 1;
    var min_count = 1 / 0;
    var stopping = false;
    var nth_identifier = this.mangle_options && this.mangle_options.nth_identifier || base54;
    var mangle = { ie8: this.option("ie8"), nth_identifier };
    for (var pass = 0; pass < passes; pass++) {
      this._toplevel.figure_out_scope(mangle);
      if (pass === 0 && this.option("drop_console")) {
        this._toplevel = this._toplevel.drop_console();
      }
      if (pass > 0 || this.option("reduce_vars")) {
        this._toplevel.reset_opt_flags(this);
      }
      this._toplevel = this._toplevel.transform(this);
      if (passes > 1) {
        let count = 0;
        walk(this._toplevel, () => {
          count++;
        });
        if (count < min_count) {
          min_count = count;
          stopping = false;
        } else if (stopping) {
          break;
        } else {
          stopping = true;
        }
      }
    }
    if (this.option("expression")) {
      this._toplevel.process_expression(false);
    }
    toplevel = this._toplevel;
    this._toplevel = void 0;
    return toplevel;
  }
  before(node, descend) {
    if (has_flag(node, SQUEEZED))
      return node;
    var was_scope = false;
    if (node instanceof AST_Scope) {
      node = node.hoist_properties(this);
      node = node.hoist_declarations(this);
      was_scope = true;
    }
    descend(node, this);
    descend(node, this);
    var opt = node.optimize(this);
    if (was_scope && opt instanceof AST_Scope) {
      opt.drop_unused(this);
      descend(opt, this);
    }
    if (opt === node)
      set_flag(opt, SQUEEZED);
    return opt;
  }
};
function def_optimize(node, optimizer) {
  node.DEFMETHOD("optimize", function(compressor) {
    var self2 = this;
    if (has_flag(self2, OPTIMIZED))
      return self2;
    if (compressor.has_directive("use asm"))
      return self2;
    var opt = optimizer(self2, compressor);
    set_flag(opt, OPTIMIZED);
    return opt;
  });
}
def_optimize(AST_Node, function(self2) {
  return self2;
});
AST_Toplevel.DEFMETHOD("drop_console", function() {
  return this.transform(new TreeTransformer(function(self2) {
    if (self2.TYPE == "Call") {
      var exp = self2.expression;
      if (exp instanceof AST_PropAccess) {
        var name = exp.expression;
        while (name.expression) {
          name = name.expression;
        }
        if (is_undeclared_ref(name) && name.name == "console") {
          return make_node(AST_Undefined, self2);
        }
      }
    }
  }));
});
AST_Node.DEFMETHOD("equivalent_to", function(node) {
  return equivalent_to(this, node);
});
AST_Scope.DEFMETHOD("process_expression", function(insert2, compressor) {
  var self2 = this;
  var tt = new TreeTransformer(function(node) {
    if (insert2 && node instanceof AST_SimpleStatement) {
      return make_node(AST_Return, node, {
        value: node.body
      });
    }
    if (!insert2 && node instanceof AST_Return) {
      if (compressor) {
        var value = node.value && node.value.drop_side_effect_free(compressor, true);
        return value ? make_node(AST_SimpleStatement, node, { body: value }) : make_node(AST_EmptyStatement, node);
      }
      return make_node(AST_SimpleStatement, node, {
        body: node.value || make_node(AST_UnaryPrefix, node, {
          operator: "void",
          expression: make_node(AST_Number, node, {
            value: 0
          })
        })
      });
    }
    if (node instanceof AST_Class || node instanceof AST_Lambda && node !== self2) {
      return node;
    }
    if (node instanceof AST_Block) {
      var index = node.body.length - 1;
      if (index >= 0) {
        node.body[index] = node.body[index].transform(tt);
      }
    } else if (node instanceof AST_If) {
      node.body = node.body.transform(tt);
      if (node.alternative) {
        node.alternative = node.alternative.transform(tt);
      }
    } else if (node instanceof AST_With) {
      node.body = node.body.transform(tt);
    }
    return node;
  });
  self2.transform(tt);
});
AST_Toplevel.DEFMETHOD("reset_opt_flags", function(compressor) {
  const self2 = this;
  const reduce_vars = compressor.option("reduce_vars");
  const preparation = new TreeWalker(function(node, descend) {
    clear_flag(node, CLEAR_BETWEEN_PASSES);
    if (reduce_vars) {
      if (compressor.top_retain && node instanceof AST_Defun && preparation.parent() === self2) {
        set_flag(node, TOP);
      }
      return node.reduce_vars(preparation, descend, compressor);
    }
  });
  preparation.safe_ids = /* @__PURE__ */ Object.create(null);
  preparation.in_loop = null;
  preparation.loop_ids = /* @__PURE__ */ new Map();
  preparation.defs_to_safe_ids = /* @__PURE__ */ new Map();
  self2.walk(preparation);
});
AST_Symbol.DEFMETHOD("fixed_value", function() {
  var fixed = this.thedef.fixed;
  if (!fixed || fixed instanceof AST_Node)
    return fixed;
  return fixed();
});
AST_SymbolRef.DEFMETHOD("is_immutable", function() {
  var orig = this.definition().orig;
  return orig.length == 1 && orig[0] instanceof AST_SymbolLambda;
});
function find_variable(compressor, name) {
  var scope, i = 0;
  while (scope = compressor.parent(i++)) {
    if (scope instanceof AST_Scope)
      break;
    if (scope instanceof AST_Catch && scope.argname) {
      scope = scope.argname.definition().scope;
      break;
    }
  }
  return scope.find_variable(name);
}
var global_names = makePredicate("Array Boolean clearInterval clearTimeout console Date decodeURI decodeURIComponent encodeURI encodeURIComponent Error escape eval EvalError Function isFinite isNaN JSON Math Number parseFloat parseInt RangeError ReferenceError RegExp Object setInterval setTimeout String SyntaxError TypeError unescape URIError");
AST_SymbolRef.DEFMETHOD("is_declared", function(compressor) {
  return !this.definition().undeclared || compressor.option("unsafe") && global_names.has(this.name);
});
var directives = /* @__PURE__ */ new Set(["use asm", "use strict"]);
def_optimize(AST_Directive, function(self2, compressor) {
  if (compressor.option("directives") && (!directives.has(self2.value) || compressor.has_directive(self2.value) !== self2)) {
    return make_node(AST_EmptyStatement, self2);
  }
  return self2;
});
def_optimize(AST_Debugger, function(self2, compressor) {
  if (compressor.option("drop_debugger"))
    return make_node(AST_EmptyStatement, self2);
  return self2;
});
def_optimize(AST_LabeledStatement, function(self2, compressor) {
  if (self2.body instanceof AST_Break && compressor.loopcontrol_target(self2.body) === self2.body) {
    return make_node(AST_EmptyStatement, self2);
  }
  return self2.label.references.length == 0 ? self2.body : self2;
});
def_optimize(AST_Block, function(self2, compressor) {
  tighten_body(self2.body, compressor);
  return self2;
});
function can_be_extracted_from_if_block(node) {
  return !(node instanceof AST_Const || node instanceof AST_Let || node instanceof AST_Class);
}
def_optimize(AST_BlockStatement, function(self2, compressor) {
  tighten_body(self2.body, compressor);
  switch (self2.body.length) {
    case 1:
      if (!compressor.has_directive("use strict") && compressor.parent() instanceof AST_If && can_be_extracted_from_if_block(self2.body[0]) || can_be_evicted_from_block(self2.body[0])) {
        return self2.body[0];
      }
      break;
    case 0:
      return make_node(AST_EmptyStatement, self2);
  }
  return self2;
});
function opt_AST_Lambda(self2, compressor) {
  tighten_body(self2.body, compressor);
  if (compressor.option("side_effects") && self2.body.length == 1 && self2.body[0] === compressor.has_directive("use strict")) {
    self2.body.length = 0;
  }
  return self2;
}
def_optimize(AST_Lambda, opt_AST_Lambda);
AST_Scope.DEFMETHOD("hoist_declarations", function(compressor) {
  var self2 = this;
  if (compressor.has_directive("use asm"))
    return self2;
  if (!Array.isArray(self2.body))
    return self2;
  var hoist_funs = compressor.option("hoist_funs");
  var hoist_vars = compressor.option("hoist_vars");
  if (hoist_funs || hoist_vars) {
    var dirs = [];
    var hoisted = [];
    var vars = /* @__PURE__ */ new Map(), vars_found = 0, var_decl = 0;
    walk(self2, (node) => {
      if (node instanceof AST_Scope && node !== self2)
        return true;
      if (node instanceof AST_Var) {
        ++var_decl;
        return true;
      }
    });
    hoist_vars = hoist_vars && var_decl > 1;
    var tt = new TreeTransformer(
      function before(node) {
        if (node !== self2) {
          if (node instanceof AST_Directive) {
            dirs.push(node);
            return make_node(AST_EmptyStatement, node);
          }
          if (hoist_funs && node instanceof AST_Defun && !(tt.parent() instanceof AST_Export) && tt.parent() === self2) {
            hoisted.push(node);
            return make_node(AST_EmptyStatement, node);
          }
          if (hoist_vars && node instanceof AST_Var && !node.definitions.some((def3) => def3.name instanceof AST_Destructuring)) {
            node.definitions.forEach(function(def3) {
              vars.set(def3.name.name, def3);
              ++vars_found;
            });
            var seq = node.to_assignments(compressor);
            var p = tt.parent();
            if (p instanceof AST_ForIn && p.init === node) {
              if (seq == null) {
                var def2 = node.definitions[0].name;
                return make_node(AST_SymbolRef, def2, def2);
              }
              return seq;
            }
            if (p instanceof AST_For && p.init === node) {
              return seq;
            }
            if (!seq)
              return make_node(AST_EmptyStatement, node);
            return make_node(AST_SimpleStatement, node, {
              body: seq
            });
          }
          if (node instanceof AST_Scope)
            return node;
        }
      }
    );
    self2 = self2.transform(tt);
    if (vars_found > 0) {
      var defs = [];
      const is_lambda = self2 instanceof AST_Lambda;
      const args_as_names = is_lambda ? self2.args_as_names() : null;
      vars.forEach((def2, name) => {
        if (is_lambda && args_as_names.some((x) => x.name === def2.name.name)) {
          vars.delete(name);
        } else {
          def2 = def2.clone();
          def2.value = null;
          defs.push(def2);
          vars.set(name, def2);
        }
      });
      if (defs.length > 0) {
        for (var i = 0; i < self2.body.length; ) {
          if (self2.body[i] instanceof AST_SimpleStatement) {
            var expr = self2.body[i].body, sym, assign;
            if (expr instanceof AST_Assign && expr.operator == "=" && (sym = expr.left) instanceof AST_Symbol && vars.has(sym.name)) {
              var def = vars.get(sym.name);
              if (def.value)
                break;
              def.value = expr.right;
              remove(defs, def);
              defs.push(def);
              self2.body.splice(i, 1);
              continue;
            }
            if (expr instanceof AST_Sequence && (assign = expr.expressions[0]) instanceof AST_Assign && assign.operator == "=" && (sym = assign.left) instanceof AST_Symbol && vars.has(sym.name)) {
              var def = vars.get(sym.name);
              if (def.value)
                break;
              def.value = assign.right;
              remove(defs, def);
              defs.push(def);
              self2.body[i].body = make_sequence(expr, expr.expressions.slice(1));
              continue;
            }
          }
          if (self2.body[i] instanceof AST_EmptyStatement) {
            self2.body.splice(i, 1);
            continue;
          }
          if (self2.body[i] instanceof AST_BlockStatement) {
            self2.body.splice(i, 1, ...self2.body[i].body);
            continue;
          }
          break;
        }
        defs = make_node(AST_Var, self2, {
          definitions: defs
        });
        hoisted.push(defs);
      }
    }
    self2.body = dirs.concat(hoisted, self2.body);
  }
  return self2;
});
AST_Scope.DEFMETHOD("hoist_properties", function(compressor) {
  var self2 = this;
  if (!compressor.option("hoist_props") || compressor.has_directive("use asm"))
    return self2;
  var top_retain = self2 instanceof AST_Toplevel && compressor.top_retain || return_false;
  var defs_by_id = /* @__PURE__ */ new Map();
  var hoister = new TreeTransformer(function(node, descend) {
    if (node instanceof AST_VarDef) {
      const sym = node.name;
      let def;
      let value;
      if (sym.scope === self2 && (def = sym.definition()).escaped != 1 && !def.assignments && !def.direct_access && !def.single_use && !compressor.exposed(def) && !top_retain(def) && (value = sym.fixed_value()) === node.value && value instanceof AST_Object && !value.properties.some(
        (prop) => prop instanceof AST_Expansion || prop.computed_key()
      )) {
        descend(node, this);
        const defs = /* @__PURE__ */ new Map();
        const assignments = [];
        value.properties.forEach(({ key, value: value2 }) => {
          const scope = hoister.find_scope();
          const symbol = self2.create_symbol(sym.CTOR, {
            source: sym,
            scope,
            conflict_scopes: /* @__PURE__ */ new Set([
              scope,
              ...sym.definition().references.map((ref) => ref.scope)
            ]),
            tentative_name: sym.name + "_" + key
          });
          defs.set(String(key), symbol.definition());
          assignments.push(make_node(AST_VarDef, node, {
            name: symbol,
            value: value2
          }));
        });
        defs_by_id.set(def.id, defs);
        return MAP.splice(assignments);
      }
    } else if (node instanceof AST_PropAccess && node.expression instanceof AST_SymbolRef) {
      const defs = defs_by_id.get(node.expression.definition().id);
      if (defs) {
        const def = defs.get(String(get_simple_key(node.property)));
        const sym = make_node(AST_SymbolRef, node, {
          name: def.name,
          scope: node.expression.scope,
          thedef: def
        });
        sym.reference({});
        return sym;
      }
    }
  });
  return self2.transform(hoister);
});
def_optimize(AST_SimpleStatement, function(self2, compressor) {
  if (compressor.option("side_effects")) {
    var body = self2.body;
    var node = body.drop_side_effect_free(compressor, true);
    if (!node) {
      return make_node(AST_EmptyStatement, self2);
    }
    if (node !== body) {
      return make_node(AST_SimpleStatement, self2, { body: node });
    }
  }
  return self2;
});
def_optimize(AST_While, function(self2, compressor) {
  return compressor.option("loops") ? make_node(AST_For, self2, self2).optimize(compressor) : self2;
});
def_optimize(AST_Do, function(self2, compressor) {
  if (!compressor.option("loops"))
    return self2;
  var cond = self2.condition.tail_node().evaluate(compressor);
  if (!(cond instanceof AST_Node)) {
    if (cond)
      return make_node(AST_For, self2, {
        body: make_node(AST_BlockStatement, self2.body, {
          body: [
            self2.body,
            make_node(AST_SimpleStatement, self2.condition, {
              body: self2.condition
            })
          ]
        })
      }).optimize(compressor);
    if (!has_break_or_continue(self2, compressor.parent())) {
      return make_node(AST_BlockStatement, self2.body, {
        body: [
          self2.body,
          make_node(AST_SimpleStatement, self2.condition, {
            body: self2.condition
          })
        ]
      }).optimize(compressor);
    }
  }
  return self2;
});
function if_break_in_loop(self2, compressor) {
  var first = self2.body instanceof AST_BlockStatement ? self2.body.body[0] : self2.body;
  if (compressor.option("dead_code") && is_break(first)) {
    var body = [];
    if (self2.init instanceof AST_Statement) {
      body.push(self2.init);
    } else if (self2.init) {
      body.push(make_node(AST_SimpleStatement, self2.init, {
        body: self2.init
      }));
    }
    if (self2.condition) {
      body.push(make_node(AST_SimpleStatement, self2.condition, {
        body: self2.condition
      }));
    }
    trim_unreachable_code(compressor, self2.body, body);
    return make_node(AST_BlockStatement, self2, {
      body
    });
  }
  if (first instanceof AST_If) {
    if (is_break(first.body)) {
      if (self2.condition) {
        self2.condition = make_node(AST_Binary, self2.condition, {
          left: self2.condition,
          operator: "&&",
          right: first.condition.negate(compressor)
        });
      } else {
        self2.condition = first.condition.negate(compressor);
      }
      drop_it(first.alternative);
    } else if (is_break(first.alternative)) {
      if (self2.condition) {
        self2.condition = make_node(AST_Binary, self2.condition, {
          left: self2.condition,
          operator: "&&",
          right: first.condition
        });
      } else {
        self2.condition = first.condition;
      }
      drop_it(first.body);
    }
  }
  return self2;
  function is_break(node) {
    return node instanceof AST_Break && compressor.loopcontrol_target(node) === compressor.self();
  }
  function drop_it(rest) {
    rest = as_statement_array(rest);
    if (self2.body instanceof AST_BlockStatement) {
      self2.body = self2.body.clone();
      self2.body.body = rest.concat(self2.body.body.slice(1));
      self2.body = self2.body.transform(compressor);
    } else {
      self2.body = make_node(AST_BlockStatement, self2.body, {
        body: rest
      }).transform(compressor);
    }
    self2 = if_break_in_loop(self2, compressor);
  }
}
def_optimize(AST_For, function(self2, compressor) {
  if (!compressor.option("loops"))
    return self2;
  if (compressor.option("side_effects") && self2.init) {
    self2.init = self2.init.drop_side_effect_free(compressor);
  }
  if (self2.condition) {
    var cond = self2.condition.evaluate(compressor);
    if (!(cond instanceof AST_Node)) {
      if (cond)
        self2.condition = null;
      else if (!compressor.option("dead_code")) {
        var orig = self2.condition;
        self2.condition = make_node_from_constant(cond, self2.condition);
        self2.condition = best_of_expression(self2.condition.transform(compressor), orig);
      }
    }
    if (compressor.option("dead_code")) {
      if (cond instanceof AST_Node)
        cond = self2.condition.tail_node().evaluate(compressor);
      if (!cond) {
        var body = [];
        trim_unreachable_code(compressor, self2.body, body);
        if (self2.init instanceof AST_Statement) {
          body.push(self2.init);
        } else if (self2.init) {
          body.push(make_node(AST_SimpleStatement, self2.init, {
            body: self2.init
          }));
        }
        body.push(make_node(AST_SimpleStatement, self2.condition, {
          body: self2.condition
        }));
        return make_node(AST_BlockStatement, self2, { body }).optimize(compressor);
      }
    }
  }
  return if_break_in_loop(self2, compressor);
});
def_optimize(AST_If, function(self2, compressor) {
  if (is_empty(self2.alternative))
    self2.alternative = null;
  if (!compressor.option("conditionals"))
    return self2;
  var cond = self2.condition.evaluate(compressor);
  if (!compressor.option("dead_code") && !(cond instanceof AST_Node)) {
    var orig = self2.condition;
    self2.condition = make_node_from_constant(cond, orig);
    self2.condition = best_of_expression(self2.condition.transform(compressor), orig);
  }
  if (compressor.option("dead_code")) {
    if (cond instanceof AST_Node)
      cond = self2.condition.tail_node().evaluate(compressor);
    if (!cond) {
      var body = [];
      trim_unreachable_code(compressor, self2.body, body);
      body.push(make_node(AST_SimpleStatement, self2.condition, {
        body: self2.condition
      }));
      if (self2.alternative)
        body.push(self2.alternative);
      return make_node(AST_BlockStatement, self2, { body }).optimize(compressor);
    } else if (!(cond instanceof AST_Node)) {
      var body = [];
      body.push(make_node(AST_SimpleStatement, self2.condition, {
        body: self2.condition
      }));
      body.push(self2.body);
      if (self2.alternative) {
        trim_unreachable_code(compressor, self2.alternative, body);
      }
      return make_node(AST_BlockStatement, self2, { body }).optimize(compressor);
    }
  }
  var negated = self2.condition.negate(compressor);
  var self_condition_length = self2.condition.size();
  var negated_length = negated.size();
  var negated_is_best = negated_length < self_condition_length;
  if (self2.alternative && negated_is_best) {
    negated_is_best = false;
    self2.condition = negated;
    var tmp = self2.body;
    self2.body = self2.alternative || make_node(AST_EmptyStatement, self2);
    self2.alternative = tmp;
  }
  if (is_empty(self2.body) && is_empty(self2.alternative)) {
    return make_node(AST_SimpleStatement, self2.condition, {
      body: self2.condition.clone()
    }).optimize(compressor);
  }
  if (self2.body instanceof AST_SimpleStatement && self2.alternative instanceof AST_SimpleStatement) {
    return make_node(AST_SimpleStatement, self2, {
      body: make_node(AST_Conditional, self2, {
        condition: self2.condition,
        consequent: self2.body.body,
        alternative: self2.alternative.body
      })
    }).optimize(compressor);
  }
  if (is_empty(self2.alternative) && self2.body instanceof AST_SimpleStatement) {
    if (self_condition_length === negated_length && !negated_is_best && self2.condition instanceof AST_Binary && self2.condition.operator == "||") {
      negated_is_best = true;
    }
    if (negated_is_best)
      return make_node(AST_SimpleStatement, self2, {
        body: make_node(AST_Binary, self2, {
          operator: "||",
          left: negated,
          right: self2.body.body
        })
      }).optimize(compressor);
    return make_node(AST_SimpleStatement, self2, {
      body: make_node(AST_Binary, self2, {
        operator: "&&",
        left: self2.condition,
        right: self2.body.body
      })
    }).optimize(compressor);
  }
  if (self2.body instanceof AST_EmptyStatement && self2.alternative instanceof AST_SimpleStatement) {
    return make_node(AST_SimpleStatement, self2, {
      body: make_node(AST_Binary, self2, {
        operator: "||",
        left: self2.condition,
        right: self2.alternative.body
      })
    }).optimize(compressor);
  }
  if (self2.body instanceof AST_Exit && self2.alternative instanceof AST_Exit && self2.body.TYPE == self2.alternative.TYPE) {
    return make_node(self2.body.CTOR, self2, {
      value: make_node(AST_Conditional, self2, {
        condition: self2.condition,
        consequent: self2.body.value || make_node(AST_Undefined, self2.body),
        alternative: self2.alternative.value || make_node(AST_Undefined, self2.alternative)
      }).transform(compressor)
    }).optimize(compressor);
  }
  if (self2.body instanceof AST_If && !self2.body.alternative && !self2.alternative) {
    self2 = make_node(AST_If, self2, {
      condition: make_node(AST_Binary, self2.condition, {
        operator: "&&",
        left: self2.condition,
        right: self2.body.condition
      }),
      body: self2.body.body,
      alternative: null
    });
  }
  if (aborts(self2.body)) {
    if (self2.alternative) {
      var alt = self2.alternative;
      self2.alternative = null;
      return make_node(AST_BlockStatement, self2, {
        body: [self2, alt]
      }).optimize(compressor);
    }
  }
  if (aborts(self2.alternative)) {
    var body = self2.body;
    self2.body = self2.alternative;
    self2.condition = negated_is_best ? negated : self2.condition.negate(compressor);
    self2.alternative = null;
    return make_node(AST_BlockStatement, self2, {
      body: [self2, body]
    }).optimize(compressor);
  }
  return self2;
});
def_optimize(AST_Switch, function(self2, compressor) {
  if (!compressor.option("switches"))
    return self2;
  var branch;
  var value = self2.expression.evaluate(compressor);
  if (!(value instanceof AST_Node)) {
    var orig = self2.expression;
    self2.expression = make_node_from_constant(value, orig);
    self2.expression = best_of_expression(self2.expression.transform(compressor), orig);
  }
  if (!compressor.option("dead_code"))
    return self2;
  if (value instanceof AST_Node) {
    value = self2.expression.tail_node().evaluate(compressor);
  }
  var decl = [];
  var body = [];
  var default_branch;
  var exact_match;
  for (var i = 0, len = self2.body.length; i < len && !exact_match; i++) {
    branch = self2.body[i];
    if (branch instanceof AST_Default) {
      if (!default_branch) {
        default_branch = branch;
      } else {
        eliminate_branch(branch, body[body.length - 1]);
      }
    } else if (!(value instanceof AST_Node)) {
      var exp = branch.expression.evaluate(compressor);
      if (!(exp instanceof AST_Node) && exp !== value) {
        eliminate_branch(branch, body[body.length - 1]);
        continue;
      }
      if (exp instanceof AST_Node)
        exp = branch.expression.tail_node().evaluate(compressor);
      if (exp === value) {
        exact_match = branch;
        if (default_branch) {
          var default_index = body.indexOf(default_branch);
          body.splice(default_index, 1);
          eliminate_branch(default_branch, body[default_index - 1]);
          default_branch = null;
        }
      }
    }
    body.push(branch);
  }
  while (i < len)
    eliminate_branch(self2.body[i++], body[body.length - 1]);
  self2.body = body;
  let default_or_exact = default_branch || exact_match;
  default_branch = null;
  exact_match = null;
  if (body.every((branch2, i2) => (branch2 === default_or_exact || branch2.expression instanceof AST_Constant) && (branch2.body.length === 0 || aborts(branch2) || body.length - 1 === i2))) {
    for (let i2 = 0; i2 < body.length; i2++) {
      const branch2 = body[i2];
      for (let j = i2 + 1; j < body.length; j++) {
        const next = body[j];
        if (next.body.length === 0)
          continue;
        const last_branch = j === body.length - 1;
        const equivalentBranch = branches_equivalent(next, branch2, false);
        if (equivalentBranch || last_branch && branches_equivalent(next, branch2, true)) {
          if (!equivalentBranch && last_branch) {
            next.body.push(make_node(AST_Break));
          }
          let x = j - 1;
          let fallthroughDepth = 0;
          while (x > i2) {
            if (is_inert_body(body[x--])) {
              fallthroughDepth++;
            } else {
              break;
            }
          }
          const plucked = body.splice(j - fallthroughDepth, 1 + fallthroughDepth);
          body.splice(i2 + 1, 0, ...plucked);
          i2 += plucked.length;
        }
      }
    }
  }
  for (let i2 = 0; i2 < body.length; i2++) {
    let branch2 = body[i2];
    if (branch2.body.length === 0)
      continue;
    if (!aborts(branch2))
      continue;
    for (let j = i2 + 1; j < body.length; i2++, j++) {
      let next = body[j];
      if (next.body.length === 0)
        continue;
      if (branches_equivalent(next, branch2, false) || j === body.length - 1 && branches_equivalent(next, branch2, true)) {
        branch2.body = [];
        branch2 = next;
        continue;
      }
      break;
    }
  }
  {
    let i2 = body.length - 1;
    for (; i2 >= 0; i2--) {
      let bbody = body[i2].body;
      if (is_break(bbody[bbody.length - 1], compressor))
        bbody.pop();
      if (!is_inert_body(body[i2]))
        break;
    }
    i2++;
    if (!default_or_exact || body.indexOf(default_or_exact) >= i2) {
      for (let j = body.length - 1; j >= i2; j--) {
        let branch2 = body[j];
        if (branch2 === default_or_exact) {
          default_or_exact = null;
          body.pop();
        } else if (!branch2.expression.has_side_effects(compressor)) {
          body.pop();
        } else {
          break;
        }
      }
    }
  }
  DEFAULT:
    if (default_or_exact) {
      let default_index2 = body.indexOf(default_or_exact);
      let default_body_index = default_index2;
      for (; default_body_index < body.length - 1; default_body_index++) {
        if (!is_inert_body(body[default_body_index]))
          break;
      }
      if (default_body_index < body.length - 1) {
        break DEFAULT;
      }
      let side_effect_index = body.length - 1;
      for (; side_effect_index >= 0; side_effect_index--) {
        let branch2 = body[side_effect_index];
        if (branch2 === default_or_exact)
          continue;
        if (branch2.expression.has_side_effects(compressor))
          break;
      }
      if (default_body_index > side_effect_index) {
        let prev_body_index = default_index2 - 1;
        for (; prev_body_index >= 0; prev_body_index--) {
          if (!is_inert_body(body[prev_body_index]))
            break;
        }
        let before = Math.max(side_effect_index, prev_body_index) + 1;
        let after = default_index2;
        if (side_effect_index > default_index2) {
          after = side_effect_index;
          body[side_effect_index].body = body[default_body_index].body;
        } else {
          default_or_exact.body = body[default_body_index].body;
        }
        body.splice(after + 1, default_body_index - after);
        body.splice(before, default_index2 - before);
      }
    }
  DEFAULT:
    if (default_or_exact) {
      let i2 = body.findIndex((branch2) => !is_inert_body(branch2));
      let caseBody;
      if (i2 === body.length - 1) {
        let branch2 = body[i2];
        if (has_nested_break(self2))
          break DEFAULT;
        caseBody = make_node(AST_BlockStatement, branch2, {
          body: branch2.body
        });
        branch2.body = [];
      } else if (i2 !== -1) {
        break DEFAULT;
      }
      let sideEffect = body.find((branch2) => {
        return branch2 !== default_or_exact && branch2.expression.has_side_effects(compressor);
      });
      if (!sideEffect) {
        return make_node(AST_BlockStatement, self2, {
          body: decl.concat(
            statement(self2.expression),
            default_or_exact.expression ? statement(default_or_exact.expression) : [],
            caseBody || []
          )
        }).optimize(compressor);
      }
      const default_index2 = body.indexOf(default_or_exact);
      body.splice(default_index2, 1);
      default_or_exact = null;
      if (caseBody) {
        return make_node(AST_BlockStatement, self2, {
          body: decl.concat(self2, caseBody)
        }).optimize(compressor);
      }
    }
  if (body.length > 0) {
    body[0].body = decl.concat(body[0].body);
  }
  if (body.length == 0) {
    return make_node(AST_BlockStatement, self2, {
      body: decl.concat(statement(self2.expression))
    }).optimize(compressor);
  }
  if (body.length == 1 && !has_nested_break(self2)) {
    let branch2 = body[0];
    return make_node(AST_If, self2, {
      condition: make_node(AST_Binary, self2, {
        operator: "===",
        left: self2.expression,
        right: branch2.expression
      }),
      body: make_node(AST_BlockStatement, branch2, {
        body: branch2.body
      }),
      alternative: null
    }).optimize(compressor);
  }
  if (body.length === 2 && default_or_exact && !has_nested_break(self2)) {
    let branch2 = body[0] === default_or_exact ? body[1] : body[0];
    let exact_exp = default_or_exact.expression && statement(default_or_exact.expression);
    if (aborts(body[0])) {
      let first = body[0];
      if (is_break(first.body[first.body.length - 1], compressor)) {
        first.body.pop();
      }
      return make_node(AST_If, self2, {
        condition: make_node(AST_Binary, self2, {
          operator: "===",
          left: self2.expression,
          right: branch2.expression
        }),
        body: make_node(AST_BlockStatement, branch2, {
          body: branch2.body
        }),
        alternative: make_node(AST_BlockStatement, default_or_exact, {
          body: [].concat(
            exact_exp || [],
            default_or_exact.body
          )
        })
      }).optimize(compressor);
    }
    let operator = "===";
    let consequent = make_node(AST_BlockStatement, branch2, {
      body: branch2.body
    });
    let always = make_node(AST_BlockStatement, default_or_exact, {
      body: [].concat(
        exact_exp || [],
        default_or_exact.body
      )
    });
    if (body[0] === default_or_exact) {
      operator = "!==";
      let tmp = always;
      always = consequent;
      consequent = tmp;
    }
    return make_node(AST_BlockStatement, self2, {
      body: [
        make_node(AST_If, self2, {
          condition: make_node(AST_Binary, self2, {
            operator,
            left: self2.expression,
            right: branch2.expression
          }),
          body: consequent,
          alternative: null
        })
      ].concat(always)
    }).optimize(compressor);
  }
  return self2;
  function eliminate_branch(branch2, prev) {
    if (prev && !aborts(prev)) {
      prev.body = prev.body.concat(branch2.body);
    } else {
      trim_unreachable_code(compressor, branch2, decl);
    }
  }
  function branches_equivalent(branch2, prev, insertBreak) {
    let bbody = branch2.body;
    let pbody = prev.body;
    if (insertBreak) {
      bbody = bbody.concat(make_node(AST_Break));
    }
    if (bbody.length !== pbody.length)
      return false;
    let bblock = make_node(AST_BlockStatement, branch2, { body: bbody });
    let pblock = make_node(AST_BlockStatement, prev, { body: pbody });
    return bblock.equivalent_to(pblock);
  }
  function statement(expression) {
    return make_node(AST_SimpleStatement, expression, {
      body: expression
    });
  }
  function has_nested_break(root) {
    let has_break = false;
    let tw = new TreeWalker((node) => {
      if (has_break)
        return true;
      if (node instanceof AST_Lambda)
        return true;
      if (node instanceof AST_SimpleStatement)
        return true;
      if (!is_break(node, tw))
        return;
      let parent = tw.parent();
      if (parent instanceof AST_SwitchBranch && parent.body[parent.body.length - 1] === node) {
        return;
      }
      has_break = true;
    });
    root.walk(tw);
    return has_break;
  }
  function is_break(node, stack) {
    return node instanceof AST_Break && stack.loopcontrol_target(node) === self2;
  }
  function is_inert_body(branch2) {
    return !aborts(branch2) && !make_node(AST_BlockStatement, branch2, {
      body: branch2.body
    }).has_side_effects(compressor);
  }
});
def_optimize(AST_Try, function(self2, compressor) {
  if (self2.bcatch && self2.bfinally && self2.bfinally.body.every(is_empty))
    self2.bfinally = null;
  if (compressor.option("dead_code") && self2.body.body.every(is_empty)) {
    var body = [];
    if (self2.bcatch) {
      trim_unreachable_code(compressor, self2.bcatch, body);
    }
    if (self2.bfinally)
      body.push(...self2.bfinally.body);
    return make_node(AST_BlockStatement, self2, {
      body
    }).optimize(compressor);
  }
  return self2;
});
AST_Definitions.DEFMETHOD("remove_initializers", function() {
  var decls = [];
  this.definitions.forEach(function(def) {
    if (def.name instanceof AST_SymbolDeclaration) {
      def.value = null;
      decls.push(def);
    } else {
      walk(def.name, (node) => {
        if (node instanceof AST_SymbolDeclaration) {
          decls.push(make_node(AST_VarDef, def, {
            name: node,
            value: null
          }));
        }
      });
    }
  });
  this.definitions = decls;
});
AST_Definitions.DEFMETHOD("to_assignments", function(compressor) {
  var reduce_vars = compressor.option("reduce_vars");
  var assignments = [];
  for (const def of this.definitions) {
    if (def.value) {
      var name = make_node(AST_SymbolRef, def.name, def.name);
      assignments.push(make_node(AST_Assign, def, {
        operator: "=",
        logical: false,
        left: name,
        right: def.value
      }));
      if (reduce_vars)
        name.definition().fixed = false;
    }
    const thedef = def.name.definition();
    thedef.eliminated++;
    thedef.replaced--;
  }
  if (assignments.length == 0)
    return null;
  return make_sequence(this, assignments);
});
def_optimize(AST_Definitions, function(self2) {
  if (self2.definitions.length == 0) {
    return make_node(AST_EmptyStatement, self2);
  }
  return self2;
});
def_optimize(AST_VarDef, function(self2, compressor) {
  if (self2.name instanceof AST_SymbolLet && self2.value != null && is_undefined(self2.value, compressor)) {
    self2.value = null;
  }
  return self2;
});
def_optimize(AST_Import, function(self2) {
  return self2;
});
def_optimize(AST_Call, function(self2, compressor) {
  var exp = self2.expression;
  var fn = exp;
  inline_array_like_spread(self2.args);
  var simple_args = self2.args.every(
    (arg2) => !(arg2 instanceof AST_Expansion)
  );
  if (compressor.option("reduce_vars") && fn instanceof AST_SymbolRef && !has_annotation(self2, _NOINLINE)) {
    const fixed = fn.fixed_value();
    if (!retain_top_func(fixed, compressor)) {
      fn = fixed;
    }
  }
  var is_func = fn instanceof AST_Lambda;
  if (is_func && fn.pinned())
    return self2;
  if (compressor.option("unused") && simple_args && is_func && !fn.uses_arguments) {
    var pos = 0, last = 0;
    for (var i = 0, len = self2.args.length; i < len; i++) {
      if (fn.argnames[i] instanceof AST_Expansion) {
        if (has_flag(fn.argnames[i].expression, UNUSED))
          while (i < len) {
            var node = self2.args[i++].drop_side_effect_free(compressor);
            if (node) {
              self2.args[pos++] = node;
            }
          }
        else
          while (i < len) {
            self2.args[pos++] = self2.args[i++];
          }
        last = pos;
        break;
      }
      var trim2 = i >= fn.argnames.length;
      if (trim2 || has_flag(fn.argnames[i], UNUSED)) {
        var node = self2.args[i].drop_side_effect_free(compressor);
        if (node) {
          self2.args[pos++] = node;
        } else if (!trim2) {
          self2.args[pos++] = make_node(AST_Number, self2.args[i], {
            value: 0
          });
          continue;
        }
      } else {
        self2.args[pos++] = self2.args[i];
      }
      last = pos;
    }
    self2.args.length = last;
  }
  if (compressor.option("unsafe")) {
    if (exp instanceof AST_Dot && exp.start.value === "Array" && exp.property === "from" && self2.args.length === 1) {
      const [argument] = self2.args;
      if (argument instanceof AST_Array) {
        return make_node(AST_Array, argument, {
          elements: argument.elements
        }).optimize(compressor);
      }
    }
    if (is_undeclared_ref(exp))
      switch (exp.name) {
        case "Array":
          if (self2.args.length != 1) {
            return make_node(AST_Array, self2, {
              elements: self2.args
            }).optimize(compressor);
          } else if (self2.args[0] instanceof AST_Number && self2.args[0].value <= 11) {
            const elements2 = [];
            for (let i2 = 0; i2 < self2.args[0].value; i2++)
              elements2.push(new AST_Hole());
            return new AST_Array({ elements: elements2 });
          }
          break;
        case "Object":
          if (self2.args.length == 0) {
            return make_node(AST_Object, self2, {
              properties: []
            });
          }
          break;
        case "String":
          if (self2.args.length == 0)
            return make_node(AST_String, self2, {
              value: ""
            });
          if (self2.args.length <= 1)
            return make_node(AST_Binary, self2, {
              left: self2.args[0],
              operator: "+",
              right: make_node(AST_String, self2, { value: "" })
            }).optimize(compressor);
          break;
        case "Number":
          if (self2.args.length == 0)
            return make_node(AST_Number, self2, {
              value: 0
            });
          if (self2.args.length == 1 && compressor.option("unsafe_math")) {
            return make_node(AST_UnaryPrefix, self2, {
              expression: self2.args[0],
              operator: "+"
            }).optimize(compressor);
          }
          break;
        case "Symbol":
          if (self2.args.length == 1 && self2.args[0] instanceof AST_String && compressor.option("unsafe_symbols"))
            self2.args.length = 0;
          break;
        case "Boolean":
          if (self2.args.length == 0)
            return make_node(AST_False, self2);
          if (self2.args.length == 1)
            return make_node(AST_UnaryPrefix, self2, {
              expression: make_node(AST_UnaryPrefix, self2, {
                expression: self2.args[0],
                operator: "!"
              }),
              operator: "!"
            }).optimize(compressor);
          break;
        case "RegExp":
          var params = [];
          if (self2.args.length >= 1 && self2.args.length <= 2 && self2.args.every((arg2) => {
            var value2 = arg2.evaluate(compressor);
            params.push(value2);
            return arg2 !== value2;
          }) && regexp_is_safe(params[0])) {
            let [source, flags] = params;
            source = regexp_source_fix(new RegExp(source).source);
            const rx = make_node(AST_RegExp, self2, {
              value: { source, flags }
            });
            if (rx._eval(compressor) !== rx) {
              return rx;
            }
          }
          break;
      }
    else if (exp instanceof AST_Dot)
      switch (exp.property) {
        case "toString":
          if (self2.args.length == 0 && !exp.expression.may_throw_on_access(compressor)) {
            return make_node(AST_Binary, self2, {
              left: make_node(AST_String, self2, { value: "" }),
              operator: "+",
              right: exp.expression
            }).optimize(compressor);
          }
          break;
        case "join":
          if (exp.expression instanceof AST_Array)
            EXIT: {
              var separator;
              if (self2.args.length > 0) {
                separator = self2.args[0].evaluate(compressor);
                if (separator === self2.args[0])
                  break EXIT;
              }
              var elements = [];
              var consts = [];
              for (var i = 0, len = exp.expression.elements.length; i < len; i++) {
                var el = exp.expression.elements[i];
                if (el instanceof AST_Expansion)
                  break EXIT;
                var value = el.evaluate(compressor);
                if (value !== el) {
                  consts.push(value);
                } else {
                  if (consts.length > 0) {
                    elements.push(make_node(AST_String, self2, {
                      value: consts.join(separator)
                    }));
                    consts.length = 0;
                  }
                  elements.push(el);
                }
              }
              if (consts.length > 0) {
                elements.push(make_node(AST_String, self2, {
                  value: consts.join(separator)
                }));
              }
              if (elements.length == 0)
                return make_node(AST_String, self2, { value: "" });
              if (elements.length == 1) {
                if (elements[0].is_string(compressor)) {
                  return elements[0];
                }
                return make_node(AST_Binary, elements[0], {
                  operator: "+",
                  left: make_node(AST_String, self2, { value: "" }),
                  right: elements[0]
                });
              }
              if (separator == "") {
                var first;
                if (elements[0].is_string(compressor) || elements[1].is_string(compressor)) {
                  first = elements.shift();
                } else {
                  first = make_node(AST_String, self2, { value: "" });
                }
                return elements.reduce(function(prev, el2) {
                  return make_node(AST_Binary, el2, {
                    operator: "+",
                    left: prev,
                    right: el2
                  });
                }, first).optimize(compressor);
              }
              var node = self2.clone();
              node.expression = node.expression.clone();
              node.expression.expression = node.expression.expression.clone();
              node.expression.expression.elements = elements;
              return best_of(compressor, self2, node);
            }
          break;
        case "charAt":
          if (exp.expression.is_string(compressor)) {
            var arg = self2.args[0];
            var index = arg ? arg.evaluate(compressor) : 0;
            if (index !== arg) {
              return make_node(AST_Sub, exp, {
                expression: exp.expression,
                property: make_node_from_constant(index | 0, arg || exp)
              }).optimize(compressor);
            }
          }
          break;
        case "apply":
          if (self2.args.length == 2 && self2.args[1] instanceof AST_Array) {
            var args2 = self2.args[1].elements.slice();
            args2.unshift(self2.args[0]);
            return make_node(AST_Call, self2, {
              expression: make_node(AST_Dot, exp, {
                expression: exp.expression,
                optional: false,
                property: "call"
              }),
              args: args2
            }).optimize(compressor);
          }
          break;
        case "call":
          var func = exp.expression;
          if (func instanceof AST_SymbolRef) {
            func = func.fixed_value();
          }
          if (func instanceof AST_Lambda && !func.contains_this()) {
            return (self2.args.length ? make_sequence(this, [
              self2.args[0],
              make_node(AST_Call, self2, {
                expression: exp.expression,
                args: self2.args.slice(1)
              })
            ]) : make_node(AST_Call, self2, {
              expression: exp.expression,
              args: []
            })).optimize(compressor);
          }
          break;
      }
  }
  if (compressor.option("unsafe_Function") && is_undeclared_ref(exp) && exp.name == "Function") {
    if (self2.args.length == 0)
      return make_node(AST_Function, self2, {
        argnames: [],
        body: []
      }).optimize(compressor);
    var nth_identifier = compressor.mangle_options && compressor.mangle_options.nth_identifier || base54;
    if (self2.args.every((x) => x instanceof AST_String)) {
      try {
        var code = "n(function(" + self2.args.slice(0, -1).map(function(arg2) {
          return arg2.value;
        }).join(",") + "){" + self2.args[self2.args.length - 1].value + "})";
        var ast = parse(code);
        var mangle = { ie8: compressor.option("ie8"), nth_identifier };
        ast.figure_out_scope(mangle);
        var comp = new Compressor(compressor.options, {
          mangle_options: compressor.mangle_options
        });
        ast = ast.transform(comp);
        ast.figure_out_scope(mangle);
        ast.compute_char_frequency(mangle);
        ast.mangle_names(mangle);
        var fun;
        walk(ast, (node2) => {
          if (is_func_expr(node2)) {
            fun = node2;
            return walk_abort;
          }
        });
        var code = OutputStream();
        AST_BlockStatement.prototype._codegen.call(fun, fun, code);
        self2.args = [
          make_node(AST_String, self2, {
            value: fun.argnames.map(function(arg2) {
              return arg2.print_to_string();
            }).join(",")
          }),
          make_node(AST_String, self2.args[self2.args.length - 1], {
            value: code.get().replace(/^{|}$/g, "")
          })
        ];
        return self2;
      } catch (ex) {
        if (!(ex instanceof JS_Parse_Error)) {
          throw ex;
        }
      }
    }
  }
  return inline_into_call(self2, fn, compressor);
});
def_optimize(AST_New, function(self2, compressor) {
  if (compressor.option("unsafe") && is_undeclared_ref(self2.expression) && ["Object", "RegExp", "Function", "Error", "Array"].includes(self2.expression.name))
    return make_node(AST_Call, self2, self2).transform(compressor);
  return self2;
});
def_optimize(AST_Sequence, function(self2, compressor) {
  if (!compressor.option("side_effects"))
    return self2;
  var expressions = [];
  filter_for_side_effects();
  var end = expressions.length - 1;
  trim_right_for_undefined();
  if (end == 0) {
    self2 = maintain_this_binding(compressor.parent(), compressor.self(), expressions[0]);
    if (!(self2 instanceof AST_Sequence))
      self2 = self2.optimize(compressor);
    return self2;
  }
  self2.expressions = expressions;
  return self2;
  function filter_for_side_effects() {
    var first = first_in_statement(compressor);
    var last = self2.expressions.length - 1;
    self2.expressions.forEach(function(expr, index) {
      if (index < last)
        expr = expr.drop_side_effect_free(compressor, first);
      if (expr) {
        merge_sequence(expressions, expr);
        first = false;
      }
    });
  }
  function trim_right_for_undefined() {
    while (end > 0 && is_undefined(expressions[end], compressor))
      end--;
    if (end < expressions.length - 1) {
      expressions[end] = make_node(AST_UnaryPrefix, self2, {
        operator: "void",
        expression: expressions[end]
      });
      expressions.length = end + 1;
    }
  }
});
AST_Unary.DEFMETHOD("lift_sequences", function(compressor) {
  if (compressor.option("sequences")) {
    if (this.expression instanceof AST_Sequence) {
      var x = this.expression.expressions.slice();
      var e = this.clone();
      e.expression = x.pop();
      x.push(e);
      return make_sequence(this, x).optimize(compressor);
    }
  }
  return this;
});
def_optimize(AST_UnaryPostfix, function(self2, compressor) {
  return self2.lift_sequences(compressor);
});
def_optimize(AST_UnaryPrefix, function(self2, compressor) {
  var e = self2.expression;
  if (self2.operator == "delete" && !(e instanceof AST_SymbolRef || e instanceof AST_PropAccess || e instanceof AST_Chain || is_identifier_atom(e))) {
    return make_sequence(self2, [e, make_node(AST_True, self2)]).optimize(compressor);
  }
  var seq = self2.lift_sequences(compressor);
  if (seq !== self2) {
    return seq;
  }
  if (compressor.option("side_effects") && self2.operator == "void") {
    e = e.drop_side_effect_free(compressor);
    if (e) {
      self2.expression = e;
      return self2;
    } else {
      return make_node(AST_Undefined, self2).optimize(compressor);
    }
  }
  if (compressor.in_boolean_context()) {
    switch (self2.operator) {
      case "!":
        if (e instanceof AST_UnaryPrefix && e.operator == "!") {
          return e.expression;
        }
        if (e instanceof AST_Binary) {
          self2 = best_of(compressor, self2, e.negate(compressor, first_in_statement(compressor)));
        }
        break;
      case "typeof":
        return (e instanceof AST_SymbolRef ? make_node(AST_True, self2) : make_sequence(self2, [
          e,
          make_node(AST_True, self2)
        ])).optimize(compressor);
    }
  }
  if (self2.operator == "-" && e instanceof AST_Infinity) {
    e = e.transform(compressor);
  }
  if (e instanceof AST_Binary && (self2.operator == "+" || self2.operator == "-") && (e.operator == "*" || e.operator == "/" || e.operator == "%")) {
    return make_node(AST_Binary, self2, {
      operator: e.operator,
      left: make_node(AST_UnaryPrefix, e.left, {
        operator: self2.operator,
        expression: e.left
      }),
      right: e.right
    });
  }
  if (self2.operator != "-" || !(e instanceof AST_Number || e instanceof AST_Infinity || e instanceof AST_BigInt)) {
    var ev = self2.evaluate(compressor);
    if (ev !== self2) {
      ev = make_node_from_constant(ev, self2).optimize(compressor);
      return best_of(compressor, ev, self2);
    }
  }
  return self2;
});
AST_Binary.DEFMETHOD("lift_sequences", function(compressor) {
  if (compressor.option("sequences")) {
    if (this.left instanceof AST_Sequence) {
      var x = this.left.expressions.slice();
      var e = this.clone();
      e.left = x.pop();
      x.push(e);
      return make_sequence(this, x).optimize(compressor);
    }
    if (this.right instanceof AST_Sequence && !this.left.has_side_effects(compressor)) {
      var assign = this.operator == "=" && this.left instanceof AST_SymbolRef;
      var x = this.right.expressions;
      var last = x.length - 1;
      for (var i = 0; i < last; i++) {
        if (!assign && x[i].has_side_effects(compressor))
          break;
      }
      if (i == last) {
        x = x.slice();
        var e = this.clone();
        e.right = x.pop();
        x.push(e);
        return make_sequence(this, x).optimize(compressor);
      } else if (i > 0) {
        var e = this.clone();
        e.right = make_sequence(this.right, x.slice(i));
        x = x.slice(0, i);
        x.push(e);
        return make_sequence(this, x).optimize(compressor);
      }
    }
  }
  return this;
});
var commutativeOperators = makePredicate("== === != !== * & | ^");
function is_object(node) {
  return node instanceof AST_Array || node instanceof AST_Lambda || node instanceof AST_Object || node instanceof AST_Class;
}
def_optimize(AST_Binary, function(self2, compressor) {
  function reversible() {
    return self2.left.is_constant() || self2.right.is_constant() || !self2.left.has_side_effects(compressor) && !self2.right.has_side_effects(compressor);
  }
  function reverse(op) {
    if (reversible()) {
      if (op)
        self2.operator = op;
      var tmp = self2.left;
      self2.left = self2.right;
      self2.right = tmp;
    }
  }
  if (compressor.option("lhs_constants") && commutativeOperators.has(self2.operator)) {
    if (self2.right.is_constant() && !self2.left.is_constant()) {
      if (!(self2.left instanceof AST_Binary && PRECEDENCE[self2.left.operator] >= PRECEDENCE[self2.operator])) {
        reverse();
      }
    }
  }
  self2 = self2.lift_sequences(compressor);
  if (compressor.option("comparisons"))
    switch (self2.operator) {
      case "===":
      case "!==":
        var is_strict_comparison = true;
        if (self2.left.is_string(compressor) && self2.right.is_string(compressor) || self2.left.is_number(compressor) && self2.right.is_number(compressor) || self2.left.is_boolean() && self2.right.is_boolean() || self2.left.equivalent_to(self2.right)) {
          self2.operator = self2.operator.substr(0, 2);
        }
      case "==":
      case "!=":
        if (!is_strict_comparison && is_undefined(self2.left, compressor)) {
          self2.left = make_node(AST_Null, self2.left);
        } else if (!is_strict_comparison && is_undefined(self2.right, compressor)) {
          self2.right = make_node(AST_Null, self2.right);
        } else if (compressor.option("typeofs") && self2.left instanceof AST_String && self2.left.value == "undefined" && self2.right instanceof AST_UnaryPrefix && self2.right.operator == "typeof") {
          var expr = self2.right.expression;
          if (expr instanceof AST_SymbolRef ? expr.is_declared(compressor) : !(expr instanceof AST_PropAccess && compressor.option("ie8"))) {
            self2.right = expr;
            self2.left = make_node(AST_Undefined, self2.left).optimize(compressor);
            if (self2.operator.length == 2)
              self2.operator += "=";
          }
        } else if (compressor.option("typeofs") && self2.left instanceof AST_UnaryPrefix && self2.left.operator == "typeof" && self2.right instanceof AST_String && self2.right.value == "undefined") {
          var expr = self2.left.expression;
          if (expr instanceof AST_SymbolRef ? expr.is_declared(compressor) : !(expr instanceof AST_PropAccess && compressor.option("ie8"))) {
            self2.left = expr;
            self2.right = make_node(AST_Undefined, self2.right).optimize(compressor);
            if (self2.operator.length == 2)
              self2.operator += "=";
          }
        } else if (self2.left instanceof AST_SymbolRef && self2.right instanceof AST_SymbolRef && self2.left.definition() === self2.right.definition() && is_object(self2.left.fixed_value())) {
          return make_node(self2.operator[0] == "=" ? AST_True : AST_False, self2);
        }
        break;
      case "&&":
      case "||":
        var lhs = self2.left;
        if (lhs.operator == self2.operator) {
          lhs = lhs.right;
        }
        if (lhs instanceof AST_Binary && lhs.operator == (self2.operator == "&&" ? "!==" : "===") && self2.right instanceof AST_Binary && lhs.operator == self2.right.operator && (is_undefined(lhs.left, compressor) && self2.right.left instanceof AST_Null || lhs.left instanceof AST_Null && is_undefined(self2.right.left, compressor)) && !lhs.right.has_side_effects(compressor) && lhs.right.equivalent_to(self2.right.right)) {
          var combined = make_node(AST_Binary, self2, {
            operator: lhs.operator.slice(0, -1),
            left: make_node(AST_Null, self2),
            right: lhs.right
          });
          if (lhs !== self2.left) {
            combined = make_node(AST_Binary, self2, {
              operator: self2.operator,
              left: self2.left.left,
              right: combined
            });
          }
          return combined;
        }
        break;
    }
  if (self2.operator == "+" && compressor.in_boolean_context()) {
    var ll = self2.left.evaluate(compressor);
    var rr = self2.right.evaluate(compressor);
    if (ll && typeof ll == "string") {
      return make_sequence(self2, [
        self2.right,
        make_node(AST_True, self2)
      ]).optimize(compressor);
    }
    if (rr && typeof rr == "string") {
      return make_sequence(self2, [
        self2.left,
        make_node(AST_True, self2)
      ]).optimize(compressor);
    }
  }
  if (compressor.option("comparisons") && self2.is_boolean()) {
    if (!(compressor.parent() instanceof AST_Binary) || compressor.parent() instanceof AST_Assign) {
      var negated = make_node(AST_UnaryPrefix, self2, {
        operator: "!",
        expression: self2.negate(compressor, first_in_statement(compressor))
      });
      self2 = best_of(compressor, self2, negated);
    }
    if (compressor.option("unsafe_comps")) {
      switch (self2.operator) {
        case "<":
          reverse(">");
          break;
        case "<=":
          reverse(">=");
          break;
      }
    }
  }
  if (self2.operator == "+") {
    if (self2.right instanceof AST_String && self2.right.getValue() == "" && self2.left.is_string(compressor)) {
      return self2.left;
    }
    if (self2.left instanceof AST_String && self2.left.getValue() == "" && self2.right.is_string(compressor)) {
      return self2.right;
    }
    if (self2.left instanceof AST_Binary && self2.left.operator == "+" && self2.left.left instanceof AST_String && self2.left.left.getValue() == "" && self2.right.is_string(compressor)) {
      self2.left = self2.left.right;
      return self2;
    }
  }
  if (compressor.option("evaluate")) {
    switch (self2.operator) {
      case "&&":
        var ll = has_flag(self2.left, TRUTHY) ? true : has_flag(self2.left, FALSY) ? false : self2.left.evaluate(compressor);
        if (!ll) {
          return maintain_this_binding(compressor.parent(), compressor.self(), self2.left).optimize(compressor);
        } else if (!(ll instanceof AST_Node)) {
          return make_sequence(self2, [self2.left, self2.right]).optimize(compressor);
        }
        var rr = self2.right.evaluate(compressor);
        if (!rr) {
          if (compressor.in_boolean_context()) {
            return make_sequence(self2, [
              self2.left,
              make_node(AST_False, self2)
            ]).optimize(compressor);
          } else {
            set_flag(self2, FALSY);
          }
        } else if (!(rr instanceof AST_Node)) {
          var parent = compressor.parent();
          if (parent.operator == "&&" && parent.left === compressor.self() || compressor.in_boolean_context()) {
            return self2.left.optimize(compressor);
          }
        }
        if (self2.left.operator == "||") {
          var lr = self2.left.right.evaluate(compressor);
          if (!lr)
            return make_node(AST_Conditional, self2, {
              condition: self2.left.left,
              consequent: self2.right,
              alternative: self2.left.right
            }).optimize(compressor);
        }
        break;
      case "||":
        var ll = has_flag(self2.left, TRUTHY) ? true : has_flag(self2.left, FALSY) ? false : self2.left.evaluate(compressor);
        if (!ll) {
          return make_sequence(self2, [self2.left, self2.right]).optimize(compressor);
        } else if (!(ll instanceof AST_Node)) {
          return maintain_this_binding(compressor.parent(), compressor.self(), self2.left).optimize(compressor);
        }
        var rr = self2.right.evaluate(compressor);
        if (!rr) {
          var parent = compressor.parent();
          if (parent.operator == "||" && parent.left === compressor.self() || compressor.in_boolean_context()) {
            return self2.left.optimize(compressor);
          }
        } else if (!(rr instanceof AST_Node)) {
          if (compressor.in_boolean_context()) {
            return make_sequence(self2, [
              self2.left,
              make_node(AST_True, self2)
            ]).optimize(compressor);
          } else {
            set_flag(self2, TRUTHY);
          }
        }
        if (self2.left.operator == "&&") {
          var lr = self2.left.right.evaluate(compressor);
          if (lr && !(lr instanceof AST_Node))
            return make_node(AST_Conditional, self2, {
              condition: self2.left.left,
              consequent: self2.left.right,
              alternative: self2.right
            }).optimize(compressor);
        }
        break;
      case "??":
        if (is_nullish(self2.left, compressor)) {
          return self2.right;
        }
        var ll = self2.left.evaluate(compressor);
        if (!(ll instanceof AST_Node)) {
          return ll == null ? self2.right : self2.left;
        }
        if (compressor.in_boolean_context()) {
          const rr2 = self2.right.evaluate(compressor);
          if (!(rr2 instanceof AST_Node) && !rr2) {
            return self2.left;
          }
        }
    }
    var associative = true;
    switch (self2.operator) {
      case "+":
        if (self2.right instanceof AST_Constant && self2.left instanceof AST_Binary && self2.left.operator == "+" && self2.left.is_string(compressor)) {
          var binary = make_node(AST_Binary, self2, {
            operator: "+",
            left: self2.left.right,
            right: self2.right
          });
          var r = binary.optimize(compressor);
          if (binary !== r) {
            self2 = make_node(AST_Binary, self2, {
              operator: "+",
              left: self2.left.left,
              right: r
            });
          }
        }
        if (self2.left instanceof AST_Binary && self2.left.operator == "+" && self2.left.is_string(compressor) && self2.right instanceof AST_Binary && self2.right.operator == "+" && self2.right.is_string(compressor)) {
          var binary = make_node(AST_Binary, self2, {
            operator: "+",
            left: self2.left.right,
            right: self2.right.left
          });
          var m = binary.optimize(compressor);
          if (binary !== m) {
            self2 = make_node(AST_Binary, self2, {
              operator: "+",
              left: make_node(AST_Binary, self2.left, {
                operator: "+",
                left: self2.left.left,
                right: m
              }),
              right: self2.right.right
            });
          }
        }
        if (self2.right instanceof AST_UnaryPrefix && self2.right.operator == "-" && self2.left.is_number(compressor)) {
          self2 = make_node(AST_Binary, self2, {
            operator: "-",
            left: self2.left,
            right: self2.right.expression
          });
          break;
        }
        if (self2.left instanceof AST_UnaryPrefix && self2.left.operator == "-" && reversible() && self2.right.is_number(compressor)) {
          self2 = make_node(AST_Binary, self2, {
            operator: "-",
            left: self2.right,
            right: self2.left.expression
          });
          break;
        }
        if (self2.left instanceof AST_TemplateString) {
          var l = self2.left;
          var r = self2.right.evaluate(compressor);
          if (r != self2.right) {
            l.segments[l.segments.length - 1].value += String(r);
            return l;
          }
        }
        if (self2.right instanceof AST_TemplateString) {
          var r = self2.right;
          var l = self2.left.evaluate(compressor);
          if (l != self2.left) {
            r.segments[0].value = String(l) + r.segments[0].value;
            return r;
          }
        }
        if (self2.left instanceof AST_TemplateString && self2.right instanceof AST_TemplateString) {
          var l = self2.left;
          var segments = l.segments;
          var r = self2.right;
          segments[segments.length - 1].value += r.segments[0].value;
          for (var i = 1; i < r.segments.length; i++) {
            segments.push(r.segments[i]);
          }
          return l;
        }
      case "*":
        associative = compressor.option("unsafe_math");
      case "&":
      case "|":
      case "^":
        if (self2.left.is_number(compressor) && self2.right.is_number(compressor) && reversible() && !(self2.left instanceof AST_Binary && self2.left.operator != self2.operator && PRECEDENCE[self2.left.operator] >= PRECEDENCE[self2.operator])) {
          var reversed = make_node(AST_Binary, self2, {
            operator: self2.operator,
            left: self2.right,
            right: self2.left
          });
          if (self2.right instanceof AST_Constant && !(self2.left instanceof AST_Constant)) {
            self2 = best_of(compressor, reversed, self2);
          } else {
            self2 = best_of(compressor, self2, reversed);
          }
        }
        if (associative && self2.is_number(compressor)) {
          if (self2.right instanceof AST_Binary && self2.right.operator == self2.operator) {
            self2 = make_node(AST_Binary, self2, {
              operator: self2.operator,
              left: make_node(AST_Binary, self2.left, {
                operator: self2.operator,
                left: self2.left,
                right: self2.right.left,
                start: self2.left.start,
                end: self2.right.left.end
              }),
              right: self2.right.right
            });
          }
          if (self2.right instanceof AST_Constant && self2.left instanceof AST_Binary && self2.left.operator == self2.operator) {
            if (self2.left.left instanceof AST_Constant) {
              self2 = make_node(AST_Binary, self2, {
                operator: self2.operator,
                left: make_node(AST_Binary, self2.left, {
                  operator: self2.operator,
                  left: self2.left.left,
                  right: self2.right,
                  start: self2.left.left.start,
                  end: self2.right.end
                }),
                right: self2.left.right
              });
            } else if (self2.left.right instanceof AST_Constant) {
              self2 = make_node(AST_Binary, self2, {
                operator: self2.operator,
                left: make_node(AST_Binary, self2.left, {
                  operator: self2.operator,
                  left: self2.left.right,
                  right: self2.right,
                  start: self2.left.right.start,
                  end: self2.right.end
                }),
                right: self2.left.left
              });
            }
          }
          if (self2.left instanceof AST_Binary && self2.left.operator == self2.operator && self2.left.right instanceof AST_Constant && self2.right instanceof AST_Binary && self2.right.operator == self2.operator && self2.right.left instanceof AST_Constant) {
            self2 = make_node(AST_Binary, self2, {
              operator: self2.operator,
              left: make_node(AST_Binary, self2.left, {
                operator: self2.operator,
                left: make_node(AST_Binary, self2.left.left, {
                  operator: self2.operator,
                  left: self2.left.right,
                  right: self2.right.left,
                  start: self2.left.right.start,
                  end: self2.right.left.end
                }),
                right: self2.left.left
              }),
              right: self2.right.right
            });
          }
        }
    }
  }
  if (self2.right instanceof AST_Binary && self2.right.operator == self2.operator && (lazy_op.has(self2.operator) || self2.operator == "+" && (self2.right.left.is_string(compressor) || self2.left.is_string(compressor) && self2.right.right.is_string(compressor)))) {
    self2.left = make_node(AST_Binary, self2.left, {
      operator: self2.operator,
      left: self2.left.transform(compressor),
      right: self2.right.left.transform(compressor)
    });
    self2.right = self2.right.right.transform(compressor);
    return self2.transform(compressor);
  }
  var ev = self2.evaluate(compressor);
  if (ev !== self2) {
    ev = make_node_from_constant(ev, self2).optimize(compressor);
    return best_of(compressor, ev, self2);
  }
  return self2;
});
def_optimize(AST_SymbolExport, function(self2) {
  return self2;
});
def_optimize(AST_SymbolRef, function(self2, compressor) {
  if (!compressor.option("ie8") && is_undeclared_ref(self2) && !compressor.find_parent(AST_With)) {
    switch (self2.name) {
      case "undefined":
        return make_node(AST_Undefined, self2).optimize(compressor);
      case "NaN":
        return make_node(AST_NaN, self2).optimize(compressor);
      case "Infinity":
        return make_node(AST_Infinity, self2).optimize(compressor);
    }
  }
  const parent = compressor.parent();
  if (compressor.option("reduce_vars") && is_lhs(self2, parent) !== self2) {
    return inline_into_symbolref(self2, compressor);
  } else {
    return self2;
  }
});
function is_atomic(lhs, self2) {
  return lhs instanceof AST_SymbolRef || lhs.TYPE === self2.TYPE;
}
def_optimize(AST_Undefined, function(self2, compressor) {
  if (compressor.option("unsafe_undefined")) {
    var undef = find_variable(compressor, "undefined");
    if (undef) {
      var ref = make_node(AST_SymbolRef, self2, {
        name: "undefined",
        scope: undef.scope,
        thedef: undef
      });
      set_flag(ref, UNDEFINED);
      return ref;
    }
  }
  var lhs = is_lhs(compressor.self(), compressor.parent());
  if (lhs && is_atomic(lhs, self2))
    return self2;
  return make_node(AST_UnaryPrefix, self2, {
    operator: "void",
    expression: make_node(AST_Number, self2, {
      value: 0
    })
  });
});
def_optimize(AST_Infinity, function(self2, compressor) {
  var lhs = is_lhs(compressor.self(), compressor.parent());
  if (lhs && is_atomic(lhs, self2))
    return self2;
  if (compressor.option("keep_infinity") && !(lhs && !is_atomic(lhs, self2)) && !find_variable(compressor, "Infinity")) {
    return self2;
  }
  return make_node(AST_Binary, self2, {
    operator: "/",
    left: make_node(AST_Number, self2, {
      value: 1
    }),
    right: make_node(AST_Number, self2, {
      value: 0
    })
  });
});
def_optimize(AST_NaN, function(self2, compressor) {
  var lhs = is_lhs(compressor.self(), compressor.parent());
  if (lhs && !is_atomic(lhs, self2) || find_variable(compressor, "NaN")) {
    return make_node(AST_Binary, self2, {
      operator: "/",
      left: make_node(AST_Number, self2, {
        value: 0
      }),
      right: make_node(AST_Number, self2, {
        value: 0
      })
    });
  }
  return self2;
});
var ASSIGN_OPS = makePredicate("+ - / * % >> << >>> | ^ &");
var ASSIGN_OPS_COMMUTATIVE = makePredicate("* | ^ &");
def_optimize(AST_Assign, function(self2, compressor) {
  if (self2.logical) {
    return self2.lift_sequences(compressor);
  }
  var def;
  if (self2.operator === "=" && self2.left instanceof AST_SymbolRef && self2.left.name !== "arguments" && !(def = self2.left.definition()).undeclared && self2.right.equivalent_to(self2.left)) {
    return self2.right;
  }
  if (compressor.option("dead_code") && self2.left instanceof AST_SymbolRef && (def = self2.left.definition()).scope === compressor.find_parent(AST_Lambda)) {
    var level = 0, node, parent = self2;
    do {
      node = parent;
      parent = compressor.parent(level++);
      if (parent instanceof AST_Exit) {
        if (in_try(level, parent))
          break;
        if (is_reachable(def.scope, [def]))
          break;
        if (self2.operator == "=")
          return self2.right;
        def.fixed = false;
        return make_node(AST_Binary, self2, {
          operator: self2.operator.slice(0, -1),
          left: self2.left,
          right: self2.right
        }).optimize(compressor);
      }
    } while (parent instanceof AST_Binary && parent.right === node || parent instanceof AST_Sequence && parent.tail_node() === node);
  }
  self2 = self2.lift_sequences(compressor);
  if (self2.operator == "=" && self2.left instanceof AST_SymbolRef && self2.right instanceof AST_Binary) {
    if (self2.right.left instanceof AST_SymbolRef && self2.right.left.name == self2.left.name && ASSIGN_OPS.has(self2.right.operator)) {
      self2.operator = self2.right.operator + "=";
      self2.right = self2.right.right;
    } else if (self2.right.right instanceof AST_SymbolRef && self2.right.right.name == self2.left.name && ASSIGN_OPS_COMMUTATIVE.has(self2.right.operator) && !self2.right.left.has_side_effects(compressor)) {
      self2.operator = self2.right.operator + "=";
      self2.right = self2.right.left;
    }
  }
  return self2;
  function in_try(level2, node2) {
    function may_assignment_throw() {
      const right = self2.right;
      self2.right = make_node(AST_Null, right);
      const may_throw = node2.may_throw(compressor);
      self2.right = right;
      return may_throw;
    }
    var stop_at = self2.left.definition().scope.get_defun_scope();
    var parent2;
    while ((parent2 = compressor.parent(level2++)) !== stop_at) {
      if (parent2 instanceof AST_Try) {
        if (parent2.bfinally)
          return true;
        if (parent2.bcatch && may_assignment_throw())
          return true;
      }
    }
  }
});
def_optimize(AST_DefaultAssign, function(self2, compressor) {
  if (!compressor.option("evaluate")) {
    return self2;
  }
  var evaluateRight = self2.right.evaluate(compressor);
  if (evaluateRight === void 0 && (compressor.parent() instanceof AST_Lambda ? compressor.option("keep_fargs") === false : true)) {
    self2 = self2.left;
  } else if (evaluateRight !== self2.right) {
    evaluateRight = make_node_from_constant(evaluateRight, self2.right);
    self2.right = best_of_expression(evaluateRight, self2.right);
  }
  return self2;
});
function is_nullish_check(check, check_subject, compressor) {
  if (check_subject.may_throw(compressor))
    return false;
  let nullish_side;
  if (check instanceof AST_Binary && check.operator === "==" && ((nullish_side = is_nullish(check.left, compressor) && check.left) || (nullish_side = is_nullish(check.right, compressor) && check.right)) && (nullish_side === check.left ? check.right : check.left).equivalent_to(check_subject)) {
    return true;
  }
  if (check instanceof AST_Binary && check.operator === "||") {
    let null_cmp;
    let undefined_cmp;
    const find_comparison = (cmp) => {
      if (!(cmp instanceof AST_Binary && (cmp.operator === "===" || cmp.operator === "=="))) {
        return false;
      }
      let found2 = 0;
      let defined_side;
      if (cmp.left instanceof AST_Null) {
        found2++;
        null_cmp = cmp;
        defined_side = cmp.right;
      }
      if (cmp.right instanceof AST_Null) {
        found2++;
        null_cmp = cmp;
        defined_side = cmp.left;
      }
      if (is_undefined(cmp.left, compressor)) {
        found2++;
        undefined_cmp = cmp;
        defined_side = cmp.right;
      }
      if (is_undefined(cmp.right, compressor)) {
        found2++;
        undefined_cmp = cmp;
        defined_side = cmp.left;
      }
      if (found2 !== 1) {
        return false;
      }
      if (!defined_side.equivalent_to(check_subject)) {
        return false;
      }
      return true;
    };
    if (!find_comparison(check.left))
      return false;
    if (!find_comparison(check.right))
      return false;
    if (null_cmp && undefined_cmp && null_cmp !== undefined_cmp) {
      return true;
    }
  }
  return false;
}
def_optimize(AST_Conditional, function(self2, compressor) {
  if (!compressor.option("conditionals"))
    return self2;
  if (self2.condition instanceof AST_Sequence) {
    var expressions = self2.condition.expressions.slice();
    self2.condition = expressions.pop();
    expressions.push(self2);
    return make_sequence(self2, expressions);
  }
  var cond = self2.condition.evaluate(compressor);
  if (cond !== self2.condition) {
    if (cond) {
      return maintain_this_binding(compressor.parent(), compressor.self(), self2.consequent);
    } else {
      return maintain_this_binding(compressor.parent(), compressor.self(), self2.alternative);
    }
  }
  var negated = cond.negate(compressor, first_in_statement(compressor));
  if (best_of(compressor, cond, negated) === negated) {
    self2 = make_node(AST_Conditional, self2, {
      condition: negated,
      consequent: self2.alternative,
      alternative: self2.consequent
    });
  }
  var condition = self2.condition;
  var consequent = self2.consequent;
  var alternative = self2.alternative;
  if (condition instanceof AST_SymbolRef && consequent instanceof AST_SymbolRef && condition.definition() === consequent.definition()) {
    return make_node(AST_Binary, self2, {
      operator: "||",
      left: condition,
      right: alternative
    });
  }
  if (consequent instanceof AST_Assign && alternative instanceof AST_Assign && consequent.operator === alternative.operator && consequent.logical === alternative.logical && consequent.left.equivalent_to(alternative.left) && (!self2.condition.has_side_effects(compressor) || consequent.operator == "=" && !consequent.left.has_side_effects(compressor))) {
    return make_node(AST_Assign, self2, {
      operator: consequent.operator,
      left: consequent.left,
      logical: consequent.logical,
      right: make_node(AST_Conditional, self2, {
        condition: self2.condition,
        consequent: consequent.right,
        alternative: alternative.right
      })
    });
  }
  var arg_index;
  if (consequent instanceof AST_Call && alternative.TYPE === consequent.TYPE && consequent.args.length > 0 && consequent.args.length == alternative.args.length && consequent.expression.equivalent_to(alternative.expression) && !self2.condition.has_side_effects(compressor) && !consequent.expression.has_side_effects(compressor) && typeof (arg_index = single_arg_diff()) == "number") {
    var node = consequent.clone();
    node.args[arg_index] = make_node(AST_Conditional, self2, {
      condition: self2.condition,
      consequent: consequent.args[arg_index],
      alternative: alternative.args[arg_index]
    });
    return node;
  }
  if (alternative instanceof AST_Conditional && consequent.equivalent_to(alternative.consequent)) {
    return make_node(AST_Conditional, self2, {
      condition: make_node(AST_Binary, self2, {
        operator: "||",
        left: condition,
        right: alternative.condition
      }),
      consequent,
      alternative: alternative.alternative
    }).optimize(compressor);
  }
  if (compressor.option("ecma") >= 2020 && is_nullish_check(condition, alternative, compressor)) {
    return make_node(AST_Binary, self2, {
      operator: "??",
      left: alternative,
      right: consequent
    }).optimize(compressor);
  }
  if (alternative instanceof AST_Sequence && consequent.equivalent_to(alternative.expressions[alternative.expressions.length - 1])) {
    return make_sequence(self2, [
      make_node(AST_Binary, self2, {
        operator: "||",
        left: condition,
        right: make_sequence(self2, alternative.expressions.slice(0, -1))
      }),
      consequent
    ]).optimize(compressor);
  }
  if (alternative instanceof AST_Binary && alternative.operator == "&&" && consequent.equivalent_to(alternative.right)) {
    return make_node(AST_Binary, self2, {
      operator: "&&",
      left: make_node(AST_Binary, self2, {
        operator: "||",
        left: condition,
        right: alternative.left
      }),
      right: consequent
    }).optimize(compressor);
  }
  if (consequent instanceof AST_Conditional && consequent.alternative.equivalent_to(alternative)) {
    return make_node(AST_Conditional, self2, {
      condition: make_node(AST_Binary, self2, {
        left: self2.condition,
        operator: "&&",
        right: consequent.condition
      }),
      consequent: consequent.consequent,
      alternative
    });
  }
  if (consequent.equivalent_to(alternative)) {
    return make_sequence(self2, [
      self2.condition,
      consequent
    ]).optimize(compressor);
  }
  if (consequent instanceof AST_Binary && consequent.operator == "||" && consequent.right.equivalent_to(alternative)) {
    return make_node(AST_Binary, self2, {
      operator: "||",
      left: make_node(AST_Binary, self2, {
        operator: "&&",
        left: self2.condition,
        right: consequent.left
      }),
      right: alternative
    }).optimize(compressor);
  }
  const in_bool = compressor.in_boolean_context();
  if (is_true(self2.consequent)) {
    if (is_false(self2.alternative)) {
      return booleanize(self2.condition);
    }
    return make_node(AST_Binary, self2, {
      operator: "||",
      left: booleanize(self2.condition),
      right: self2.alternative
    });
  }
  if (is_false(self2.consequent)) {
    if (is_true(self2.alternative)) {
      return booleanize(self2.condition.negate(compressor));
    }
    return make_node(AST_Binary, self2, {
      operator: "&&",
      left: booleanize(self2.condition.negate(compressor)),
      right: self2.alternative
    });
  }
  if (is_true(self2.alternative)) {
    return make_node(AST_Binary, self2, {
      operator: "||",
      left: booleanize(self2.condition.negate(compressor)),
      right: self2.consequent
    });
  }
  if (is_false(self2.alternative)) {
    return make_node(AST_Binary, self2, {
      operator: "&&",
      left: booleanize(self2.condition),
      right: self2.consequent
    });
  }
  return self2;
  function booleanize(node2) {
    if (node2.is_boolean())
      return node2;
    return make_node(AST_UnaryPrefix, node2, {
      operator: "!",
      expression: node2.negate(compressor)
    });
  }
  function is_true(node2) {
    return node2 instanceof AST_True || in_bool && node2 instanceof AST_Constant && node2.getValue() || node2 instanceof AST_UnaryPrefix && node2.operator == "!" && node2.expression instanceof AST_Constant && !node2.expression.getValue();
  }
  function is_false(node2) {
    return node2 instanceof AST_False || in_bool && node2 instanceof AST_Constant && !node2.getValue() || node2 instanceof AST_UnaryPrefix && node2.operator == "!" && node2.expression instanceof AST_Constant && node2.expression.getValue();
  }
  function single_arg_diff() {
    var a = consequent.args;
    var b = alternative.args;
    for (var i = 0, len = a.length; i < len; i++) {
      if (a[i] instanceof AST_Expansion)
        return;
      if (!a[i].equivalent_to(b[i])) {
        if (b[i] instanceof AST_Expansion)
          return;
        for (var j = i + 1; j < len; j++) {
          if (a[j] instanceof AST_Expansion)
            return;
          if (!a[j].equivalent_to(b[j]))
            return;
        }
        return i;
      }
    }
  }
});
def_optimize(AST_Boolean, function(self2, compressor) {
  if (compressor.in_boolean_context())
    return make_node(AST_Number, self2, {
      value: +self2.value
    });
  var p = compressor.parent();
  if (compressor.option("booleans_as_integers")) {
    if (p instanceof AST_Binary && (p.operator == "===" || p.operator == "!==")) {
      p.operator = p.operator.replace(/=$/, "");
    }
    return make_node(AST_Number, self2, {
      value: +self2.value
    });
  }
  if (compressor.option("booleans")) {
    if (p instanceof AST_Binary && (p.operator == "==" || p.operator == "!=")) {
      return make_node(AST_Number, self2, {
        value: +self2.value
      });
    }
    return make_node(AST_UnaryPrefix, self2, {
      operator: "!",
      expression: make_node(AST_Number, self2, {
        value: 1 - self2.value
      })
    });
  }
  return self2;
});
function safe_to_flatten(value, compressor) {
  if (value instanceof AST_SymbolRef) {
    value = value.fixed_value();
  }
  if (!value)
    return false;
  if (!(value instanceof AST_Lambda || value instanceof AST_Class))
    return true;
  if (!(value instanceof AST_Lambda && value.contains_this()))
    return true;
  return compressor.parent() instanceof AST_New;
}
AST_PropAccess.DEFMETHOD("flatten_object", function(key, compressor) {
  if (!compressor.option("properties"))
    return;
  if (key === "__proto__")
    return;
  var arrows = compressor.option("unsafe_arrows") && compressor.option("ecma") >= 2015;
  var expr = this.expression;
  if (expr instanceof AST_Object) {
    var props = expr.properties;
    for (var i = props.length; --i >= 0; ) {
      var prop = props[i];
      if ("" + (prop instanceof AST_ConciseMethod ? prop.key.name : prop.key) == key) {
        const all_props_flattenable = props.every(
          (p) => (p instanceof AST_ObjectKeyVal || arrows && p instanceof AST_ConciseMethod && !p.is_generator) && !p.computed_key()
        );
        if (!all_props_flattenable)
          return;
        if (!safe_to_flatten(prop.value, compressor))
          return;
        return make_node(AST_Sub, this, {
          expression: make_node(AST_Array, expr, {
            elements: props.map(function(prop2) {
              var v = prop2.value;
              if (v instanceof AST_Accessor) {
                v = make_node(AST_Function, v, v);
              }
              var k = prop2.key;
              if (k instanceof AST_Node && !(k instanceof AST_SymbolMethod)) {
                return make_sequence(prop2, [k, v]);
              }
              return v;
            })
          }),
          property: make_node(AST_Number, this, {
            value: i
          })
        });
      }
    }
  }
});
def_optimize(AST_Sub, function(self2, compressor) {
  var expr = self2.expression;
  var prop = self2.property;
  if (compressor.option("properties")) {
    var key = prop.evaluate(compressor);
    if (key !== prop) {
      if (typeof key == "string") {
        if (key == "undefined") {
          key = void 0;
        } else {
          var value = parseFloat(key);
          if (value.toString() == key) {
            key = value;
          }
        }
      }
      prop = self2.property = best_of_expression(prop, make_node_from_constant(key, prop).transform(compressor));
      var property = "" + key;
      if (is_basic_identifier_string(property) && property.length <= prop.size() + 1) {
        return make_node(AST_Dot, self2, {
          expression: expr,
          optional: self2.optional,
          property,
          quote: prop.quote
        }).optimize(compressor);
      }
    }
  }
  var fn;
  OPT_ARGUMENTS:
    if (compressor.option("arguments") && expr instanceof AST_SymbolRef && expr.name == "arguments" && expr.definition().orig.length == 1 && (fn = expr.scope) instanceof AST_Lambda && fn.uses_arguments && !(fn instanceof AST_Arrow) && prop instanceof AST_Number) {
      var index = prop.getValue();
      var params = /* @__PURE__ */ new Set();
      var argnames = fn.argnames;
      for (var n = 0; n < argnames.length; n++) {
        if (!(argnames[n] instanceof AST_SymbolFunarg)) {
          break OPT_ARGUMENTS;
        }
        var param = argnames[n].name;
        if (params.has(param)) {
          break OPT_ARGUMENTS;
        }
        params.add(param);
      }
      var argname = fn.argnames[index];
      if (argname && compressor.has_directive("use strict")) {
        var def = argname.definition();
        if (!compressor.option("reduce_vars") || def.assignments || def.orig.length > 1) {
          argname = null;
        }
      } else if (!argname && !compressor.option("keep_fargs") && index < fn.argnames.length + 5) {
        while (index >= fn.argnames.length) {
          argname = fn.create_symbol(AST_SymbolFunarg, {
            source: fn,
            scope: fn,
            tentative_name: "argument_" + fn.argnames.length
          });
          fn.argnames.push(argname);
        }
      }
      if (argname) {
        var sym = make_node(AST_SymbolRef, self2, argname);
        sym.reference({});
        clear_flag(argname, UNUSED);
        return sym;
      }
    }
  if (is_lhs(self2, compressor.parent()))
    return self2;
  if (key !== prop) {
    var sub = self2.flatten_object(property, compressor);
    if (sub) {
      expr = self2.expression = sub.expression;
      prop = self2.property = sub.property;
    }
  }
  if (compressor.option("properties") && compressor.option("side_effects") && prop instanceof AST_Number && expr instanceof AST_Array) {
    var index = prop.getValue();
    var elements = expr.elements;
    var retValue = elements[index];
    FLATTEN:
      if (safe_to_flatten(retValue, compressor)) {
        var flatten = true;
        var values = [];
        for (var i = elements.length; --i > index; ) {
          var value = elements[i].drop_side_effect_free(compressor);
          if (value) {
            values.unshift(value);
            if (flatten && value.has_side_effects(compressor))
              flatten = false;
          }
        }
        if (retValue instanceof AST_Expansion)
          break FLATTEN;
        retValue = retValue instanceof AST_Hole ? make_node(AST_Undefined, retValue) : retValue;
        if (!flatten)
          values.unshift(retValue);
        while (--i >= 0) {
          var value = elements[i];
          if (value instanceof AST_Expansion)
            break FLATTEN;
          value = value.drop_side_effect_free(compressor);
          if (value)
            values.unshift(value);
          else
            index--;
        }
        if (flatten) {
          values.push(retValue);
          return make_sequence(self2, values).optimize(compressor);
        } else
          return make_node(AST_Sub, self2, {
            expression: make_node(AST_Array, expr, {
              elements: values
            }),
            property: make_node(AST_Number, prop, {
              value: index
            })
          });
      }
  }
  var ev = self2.evaluate(compressor);
  if (ev !== self2) {
    ev = make_node_from_constant(ev, self2).optimize(compressor);
    return best_of(compressor, ev, self2);
  }
  return self2;
});
def_optimize(AST_Chain, function(self2, compressor) {
  if (is_nullish(self2.expression, compressor)) {
    let parent = compressor.parent();
    if (parent instanceof AST_UnaryPrefix && parent.operator === "delete") {
      return make_node_from_constant(0, self2);
    }
    return make_node(AST_Undefined, self2);
  }
  return self2;
});
AST_Lambda.DEFMETHOD("contains_this", function() {
  return walk(this, (node) => {
    if (node instanceof AST_This)
      return walk_abort;
    if (node !== this && node instanceof AST_Scope && !(node instanceof AST_Arrow)) {
      return true;
    }
  });
});
def_optimize(AST_Dot, function(self2, compressor) {
  const parent = compressor.parent();
  if (is_lhs(self2, parent))
    return self2;
  if (compressor.option("unsafe_proto") && self2.expression instanceof AST_Dot && self2.expression.property == "prototype") {
    var exp = self2.expression.expression;
    if (is_undeclared_ref(exp))
      switch (exp.name) {
        case "Array":
          self2.expression = make_node(AST_Array, self2.expression, {
            elements: []
          });
          break;
        case "Function":
          self2.expression = make_node(AST_Function, self2.expression, {
            argnames: [],
            body: []
          });
          break;
        case "Number":
          self2.expression = make_node(AST_Number, self2.expression, {
            value: 0
          });
          break;
        case "Object":
          self2.expression = make_node(AST_Object, self2.expression, {
            properties: []
          });
          break;
        case "RegExp":
          self2.expression = make_node(AST_RegExp, self2.expression, {
            value: { source: "t", flags: "" }
          });
          break;
        case "String":
          self2.expression = make_node(AST_String, self2.expression, {
            value: ""
          });
          break;
      }
  }
  if (!(parent instanceof AST_Call) || !has_annotation(parent, _NOINLINE)) {
    const sub = self2.flatten_object(self2.property, compressor);
    if (sub)
      return sub.optimize(compressor);
  }
  if (self2.expression instanceof AST_PropAccess && parent instanceof AST_PropAccess) {
    return self2;
  }
  let ev = self2.evaluate(compressor);
  if (ev !== self2) {
    ev = make_node_from_constant(ev, self2).optimize(compressor);
    return best_of(compressor, ev, self2);
  }
  return self2;
});
function literals_in_boolean_context(self2, compressor) {
  if (compressor.in_boolean_context()) {
    return best_of(compressor, self2, make_sequence(self2, [
      self2,
      make_node(AST_True, self2)
    ]).optimize(compressor));
  }
  return self2;
}
function inline_array_like_spread(elements) {
  for (var i = 0; i < elements.length; i++) {
    var el = elements[i];
    if (el instanceof AST_Expansion) {
      var expr = el.expression;
      if (expr instanceof AST_Array && !expr.elements.some((elm) => elm instanceof AST_Hole)) {
        elements.splice(i, 1, ...expr.elements);
        i--;
      }
    }
  }
}
def_optimize(AST_Array, function(self2, compressor) {
  var optimized = literals_in_boolean_context(self2, compressor);
  if (optimized !== self2) {
    return optimized;
  }
  inline_array_like_spread(self2.elements);
  return self2;
});
function inline_object_prop_spread(props, compressor) {
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    if (prop instanceof AST_Expansion) {
      const expr = prop.expression;
      if (expr instanceof AST_Object && expr.properties.every((prop2) => prop2 instanceof AST_ObjectKeyVal)) {
        props.splice(i, 1, ...expr.properties);
        i--;
      } else if (expr instanceof AST_Constant && !(expr instanceof AST_String)) {
        props.splice(i, 1);
        i--;
      } else if (is_nullish(expr, compressor)) {
        props.splice(i, 1);
        i--;
      }
    }
  }
}
def_optimize(AST_Object, function(self2, compressor) {
  var optimized = literals_in_boolean_context(self2, compressor);
  if (optimized !== self2) {
    return optimized;
  }
  inline_object_prop_spread(self2.properties, compressor);
  return self2;
});
def_optimize(AST_RegExp, literals_in_boolean_context);
def_optimize(AST_Return, function(self2, compressor) {
  if (self2.value && is_undefined(self2.value, compressor)) {
    self2.value = null;
  }
  return self2;
});
def_optimize(AST_Arrow, opt_AST_Lambda);
def_optimize(AST_Function, function(self2, compressor) {
  self2 = opt_AST_Lambda(self2, compressor);
  if (compressor.option("unsafe_arrows") && compressor.option("ecma") >= 2015 && !self2.name && !self2.is_generator && !self2.uses_arguments && !self2.pinned()) {
    const uses_this = walk(self2, (node) => {
      if (node instanceof AST_This)
        return walk_abort;
    });
    if (!uses_this)
      return make_node(AST_Arrow, self2, self2).optimize(compressor);
  }
  return self2;
});
def_optimize(AST_Class, function(self2) {
  return self2;
});
def_optimize(AST_ClassStaticBlock, function(self2, compressor) {
  tighten_body(self2.body, compressor);
  return self2;
});
def_optimize(AST_Yield, function(self2, compressor) {
  if (self2.expression && !self2.is_star && is_undefined(self2.expression, compressor)) {
    self2.expression = null;
  }
  return self2;
});
def_optimize(AST_TemplateString, function(self2, compressor) {
  if (!compressor.option("evaluate") || compressor.parent() instanceof AST_PrefixedTemplateString) {
    return self2;
  }
  var segments = [];
  for (var i = 0; i < self2.segments.length; i++) {
    var segment = self2.segments[i];
    if (segment instanceof AST_Node) {
      var result = segment.evaluate(compressor);
      if (result !== segment && (result + "").length <= segment.size() + "${}".length) {
        segments[segments.length - 1].value = segments[segments.length - 1].value + result + self2.segments[++i].value;
        continue;
      }
      if (segment instanceof AST_TemplateString) {
        var inners = segment.segments;
        segments[segments.length - 1].value += inners[0].value;
        for (var j = 1; j < inners.length; j++) {
          segment = inners[j];
          segments.push(segment);
        }
        continue;
      }
    }
    segments.push(segment);
  }
  self2.segments = segments;
  if (segments.length == 1) {
    return make_node(AST_String, self2, segments[0]);
  }
  if (segments.length === 3 && segments[1] instanceof AST_Node && (segments[1].is_string(compressor) || segments[1].is_number(compressor) || is_nullish(segments[1], compressor) || compressor.option("unsafe"))) {
    if (segments[2].value === "") {
      return make_node(AST_Binary, self2, {
        operator: "+",
        left: make_node(AST_String, self2, {
          value: segments[0].value
        }),
        right: segments[1]
      });
    }
    if (segments[0].value === "") {
      return make_node(AST_Binary, self2, {
        operator: "+",
        left: segments[1],
        right: make_node(AST_String, self2, {
          value: segments[2].value
        })
      });
    }
  }
  return self2;
});
def_optimize(AST_PrefixedTemplateString, function(self2) {
  return self2;
});
function lift_key(self2, compressor) {
  if (!compressor.option("computed_props"))
    return self2;
  if (!(self2.key instanceof AST_Constant))
    return self2;
  if (self2.key instanceof AST_String || self2.key instanceof AST_Number) {
    if (self2.key.value === "__proto__")
      return self2;
    if (self2.key.value == "constructor" && compressor.parent() instanceof AST_Class)
      return self2;
    if (self2 instanceof AST_ObjectKeyVal) {
      self2.quote = self2.key.quote;
      self2.key = self2.key.value;
    } else if (self2 instanceof AST_ClassProperty) {
      self2.quote = self2.key.quote;
      self2.key = make_node(AST_SymbolClassProperty, self2.key, {
        name: self2.key.value
      });
    } else {
      self2.quote = self2.key.quote;
      self2.key = make_node(AST_SymbolMethod, self2.key, {
        name: self2.key.value
      });
    }
  }
  return self2;
}
def_optimize(AST_ObjectProperty, lift_key);
def_optimize(AST_ConciseMethod, function(self2, compressor) {
  lift_key(self2, compressor);
  if (compressor.option("arrows") && compressor.parent() instanceof AST_Object && !self2.is_generator && !self2.value.uses_arguments && !self2.value.pinned() && self2.value.body.length == 1 && self2.value.body[0] instanceof AST_Return && self2.value.body[0].value && !self2.value.contains_this()) {
    var arrow = make_node(AST_Arrow, self2.value, self2.value);
    arrow.async = self2.async;
    arrow.is_generator = self2.is_generator;
    return make_node(AST_ObjectKeyVal, self2, {
      key: self2.key instanceof AST_SymbolMethod ? self2.key.name : self2.key,
      value: arrow,
      quote: self2.quote
    });
  }
  return self2;
});
def_optimize(AST_ObjectKeyVal, function(self2, compressor) {
  lift_key(self2, compressor);
  var unsafe_methods = compressor.option("unsafe_methods");
  if (unsafe_methods && compressor.option("ecma") >= 2015 && (!(unsafe_methods instanceof RegExp) || unsafe_methods.test(self2.key + ""))) {
    var key = self2.key;
    var value = self2.value;
    var is_arrow_with_block = value instanceof AST_Arrow && Array.isArray(value.body) && !value.contains_this();
    if ((is_arrow_with_block || value instanceof AST_Function) && !value.name) {
      return make_node(AST_ConciseMethod, self2, {
        async: value.async,
        is_generator: value.is_generator,
        key: key instanceof AST_Node ? key : make_node(AST_SymbolMethod, self2, {
          name: key
        }),
        value: make_node(AST_Accessor, value, value),
        quote: self2.quote
      });
    }
  }
  return self2;
});
def_optimize(AST_Destructuring, function(self2, compressor) {
  if (compressor.option("pure_getters") == true && compressor.option("unused") && !self2.is_array && Array.isArray(self2.names) && !is_destructuring_export_decl(compressor) && !(self2.names[self2.names.length - 1] instanceof AST_Expansion)) {
    var keep = [];
    for (var i = 0; i < self2.names.length; i++) {
      var elem = self2.names[i];
      if (!(elem instanceof AST_ObjectKeyVal && typeof elem.key == "string" && elem.value instanceof AST_SymbolDeclaration && !should_retain(compressor, elem.value.definition()))) {
        keep.push(elem);
      }
    }
    if (keep.length != self2.names.length) {
      self2.names = keep;
    }
  }
  return self2;
  function is_destructuring_export_decl(compressor2) {
    var ancestors = [/^VarDef$/, /^(Const|Let|Var)$/, /^Export$/];
    for (var a = 0, p = 0, len = ancestors.length; a < len; p++) {
      var parent = compressor2.parent(p);
      if (!parent)
        return false;
      if (a === 0 && parent.TYPE == "Destructuring")
        continue;
      if (!ancestors[a].test(parent.TYPE)) {
        return false;
      }
      a++;
    }
    return true;
  }
  function should_retain(compressor2, def) {
    if (def.references.length)
      return true;
    if (!def.global)
      return false;
    if (compressor2.toplevel.vars) {
      if (compressor2.top_retain) {
        return compressor2.top_retain(def);
      }
      return false;
    }
    return true;
  }
});

// node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.mjs
var comma = ",".charCodeAt(0);
var semicolon = ";".charCodeAt(0);
var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var intToChar = new Uint8Array(64);
var charToInt = new Uint8Array(128);
for (let i = 0; i < chars.length; i++) {
  const c = chars.charCodeAt(i);
  intToChar[i] = c;
  charToInt[c] = i;
}
function decodeInteger(reader, relative) {
  let value = 0;
  let shift = 0;
  let integer = 0;
  do {
    const c = reader.next();
    integer = charToInt[c];
    value |= (integer & 31) << shift;
    shift += 5;
  } while (integer & 32);
  const shouldNegate = value & 1;
  value >>>= 1;
  if (shouldNegate) {
    value = -2147483648 | -value;
  }
  return relative + value;
}
function encodeInteger(builder, num, relative) {
  let delta = num - relative;
  delta = delta < 0 ? -delta << 1 | 1 : delta << 1;
  do {
    let clamped = delta & 31;
    delta >>>= 5;
    if (delta > 0)
      clamped |= 32;
    builder.write(intToChar[clamped]);
  } while (delta > 0);
  return num;
}
function hasMoreVlq(reader, max) {
  if (reader.pos >= max)
    return false;
  return reader.peek() !== comma;
}
var bufLength = 1024 * 16;
var td = typeof TextDecoder !== "undefined" ? /* @__PURE__ */ new TextDecoder() : typeof Buffer !== "undefined" ? {
  decode(buf) {
    const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);
    return out.toString();
  }
} : {
  decode(buf) {
    let out = "";
    for (let i = 0; i < buf.length; i++) {
      out += String.fromCharCode(buf[i]);
    }
    return out;
  }
};
var StringWriter = class {
  constructor() {
    this.pos = 0;
    this.out = "";
    this.buffer = new Uint8Array(bufLength);
  }
  write(v) {
    const { buffer } = this;
    buffer[this.pos++] = v;
    if (this.pos === bufLength) {
      this.out += td.decode(buffer);
      this.pos = 0;
    }
  }
  flush() {
    const { buffer, out, pos } = this;
    return pos > 0 ? out + td.decode(buffer.subarray(0, pos)) : out;
  }
};
var StringReader = class {
  constructor(buffer) {
    this.pos = 0;
    this.buffer = buffer;
  }
  next() {
    return this.buffer.charCodeAt(this.pos++);
  }
  peek() {
    return this.buffer.charCodeAt(this.pos);
  }
  indexOf(char) {
    const { buffer, pos } = this;
    const idx = buffer.indexOf(char, pos);
    return idx === -1 ? buffer.length : idx;
  }
};
function decode(mappings) {
  const { length } = mappings;
  const reader = new StringReader(mappings);
  const decoded = [];
  let genColumn = 0;
  let sourcesIndex = 0;
  let sourceLine = 0;
  let sourceColumn = 0;
  let namesIndex = 0;
  do {
    const semi = reader.indexOf(";");
    const line = [];
    let sorted = true;
    let lastCol = 0;
    genColumn = 0;
    while (reader.pos < semi) {
      let seg;
      genColumn = decodeInteger(reader, genColumn);
      if (genColumn < lastCol)
        sorted = false;
      lastCol = genColumn;
      if (hasMoreVlq(reader, semi)) {
        sourcesIndex = decodeInteger(reader, sourcesIndex);
        sourceLine = decodeInteger(reader, sourceLine);
        sourceColumn = decodeInteger(reader, sourceColumn);
        if (hasMoreVlq(reader, semi)) {
          namesIndex = decodeInteger(reader, namesIndex);
          seg = [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex];
        } else {
          seg = [genColumn, sourcesIndex, sourceLine, sourceColumn];
        }
      } else {
        seg = [genColumn];
      }
      line.push(seg);
      reader.pos++;
    }
    if (!sorted)
      sort(line);
    decoded.push(line);
    reader.pos = semi + 1;
  } while (reader.pos <= length);
  return decoded;
}
function sort(line) {
  line.sort(sortComparator);
}
function sortComparator(a, b) {
  return a[0] - b[0];
}
function encode(decoded) {
  const writer = new StringWriter();
  let sourcesIndex = 0;
  let sourceLine = 0;
  let sourceColumn = 0;
  let namesIndex = 0;
  for (let i = 0; i < decoded.length; i++) {
    const line = decoded[i];
    if (i > 0)
      writer.write(semicolon);
    if (line.length === 0)
      continue;
    let genColumn = 0;
    for (let j = 0; j < line.length; j++) {
      const segment = line[j];
      if (j > 0)
        writer.write(comma);
      genColumn = encodeInteger(writer, segment[0], genColumn);
      if (segment.length === 1)
        continue;
      sourcesIndex = encodeInteger(writer, segment[1], sourcesIndex);
      sourceLine = encodeInteger(writer, segment[2], sourceLine);
      sourceColumn = encodeInteger(writer, segment[3], sourceColumn);
      if (segment.length === 4)
        continue;
      namesIndex = encodeInteger(writer, segment[4], namesIndex);
    }
  }
  return writer.flush();
}

// node_modules/@jridgewell/resolve-uri/dist/resolve-uri.mjs
var schemeRegex = /^[\w+.-]+:\/\//;
var urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/;
var fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
function isAbsoluteUrl(input) {
  return schemeRegex.test(input);
}
function isSchemeRelativeUrl(input) {
  return input.startsWith("//");
}
function isAbsolutePath(input) {
  return input.startsWith("/");
}
function isFileUrl(input) {
  return input.startsWith("file:");
}
function isRelative(input) {
  return /^[.?#]/.test(input);
}
function parseAbsoluteUrl(input) {
  const match2 = urlRegex.exec(input);
  return makeUrl(match2[1], match2[2] || "", match2[3], match2[4] || "", match2[5] || "/", match2[6] || "", match2[7] || "");
}
function parseFileUrl(input) {
  const match2 = fileRegex.exec(input);
  const path14 = match2[2];
  return makeUrl("file:", "", match2[1] || "", "", isAbsolutePath(path14) ? path14 : "/" + path14, match2[3] || "", match2[4] || "");
}
function makeUrl(scheme, user, host, port, path14, query, hash) {
  return {
    scheme,
    user,
    host,
    port,
    path: path14,
    query,
    hash,
    type: 7
  };
}
function parseUrl(input) {
  if (isSchemeRelativeUrl(input)) {
    const url7 = parseAbsoluteUrl("http:" + input);
    url7.scheme = "";
    url7.type = 6;
    return url7;
  }
  if (isAbsolutePath(input)) {
    const url7 = parseAbsoluteUrl("http://foo.com" + input);
    url7.scheme = "";
    url7.host = "";
    url7.type = 5;
    return url7;
  }
  if (isFileUrl(input))
    return parseFileUrl(input);
  if (isAbsoluteUrl(input))
    return parseAbsoluteUrl(input);
  const url6 = parseAbsoluteUrl("http://foo.com/" + input);
  url6.scheme = "";
  url6.host = "";
  url6.type = input ? input.startsWith("?") ? 3 : input.startsWith("#") ? 2 : 4 : 1;
  return url6;
}
function stripPathFilename(path14) {
  if (path14.endsWith("/.."))
    return path14;
  const index = path14.lastIndexOf("/");
  return path14.slice(0, index + 1);
}
function mergePaths(url6, base) {
  normalizePath(base, base.type);
  if (url6.path === "/") {
    url6.path = base.path;
  } else {
    url6.path = stripPathFilename(base.path) + url6.path;
  }
}
function normalizePath(url6, type) {
  const rel = type <= 4;
  const pieces = url6.path.split("/");
  let pointer = 1;
  let positive = 0;
  let addTrailingSlash = false;
  for (let i = 1; i < pieces.length; i++) {
    const piece = pieces[i];
    if (!piece) {
      addTrailingSlash = true;
      continue;
    }
    addTrailingSlash = false;
    if (piece === ".")
      continue;
    if (piece === "..") {
      if (positive) {
        addTrailingSlash = true;
        positive--;
        pointer--;
      } else if (rel) {
        pieces[pointer++] = piece;
      }
      continue;
    }
    pieces[pointer++] = piece;
    positive++;
  }
  let path14 = "";
  for (let i = 1; i < pointer; i++) {
    path14 += "/" + pieces[i];
  }
  if (!path14 || addTrailingSlash && !path14.endsWith("/..")) {
    path14 += "/";
  }
  url6.path = path14;
}
function resolve(input, base) {
  if (!input && !base)
    return "";
  const url6 = parseUrl(input);
  let inputType = url6.type;
  if (base && inputType !== 7) {
    const baseUrl = parseUrl(base);
    const baseType = baseUrl.type;
    switch (inputType) {
      case 1:
        url6.hash = baseUrl.hash;
      case 2:
        url6.query = baseUrl.query;
      case 3:
      case 4:
        mergePaths(url6, baseUrl);
      case 5:
        url6.user = baseUrl.user;
        url6.host = baseUrl.host;
        url6.port = baseUrl.port;
      case 6:
        url6.scheme = baseUrl.scheme;
    }
    if (baseType > inputType)
      inputType = baseType;
  }
  normalizePath(url6, inputType);
  const queryHash = url6.query + url6.hash;
  switch (inputType) {
    case 2:
    case 3:
      return queryHash;
    case 4: {
      const path14 = url6.path.slice(1);
      if (!path14)
        return queryHash || ".";
      if (isRelative(base || input) && !isRelative(path14)) {
        return "./" + path14 + queryHash;
      }
      return path14 + queryHash;
    }
    case 5:
      return url6.path + queryHash;
    default:
      return url6.scheme + "//" + url6.user + url6.host + url6.port + url6.path + queryHash;
  }
}

// node_modules/@jridgewell/source-map/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.mjs
function stripFilename(path14) {
  if (!path14)
    return "";
  const index = path14.lastIndexOf("/");
  return path14.slice(0, index + 1);
}
function resolver(mapUrl, sourceRoot) {
  const from = stripFilename(mapUrl);
  const prefix = sourceRoot ? sourceRoot + "/" : "";
  return (source) => resolve(prefix + (source || ""), from);
}
var COLUMN = 0;
var SOURCES_INDEX = 1;
var SOURCE_LINE = 2;
var SOURCE_COLUMN = 3;
var NAMES_INDEX = 4;
var REV_GENERATED_LINE = 1;
var REV_GENERATED_COLUMN = 2;
function maybeSort(mappings, owned) {
  const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
  if (unsortedIndex === mappings.length)
    return mappings;
  if (!owned)
    mappings = mappings.slice();
  for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {
    mappings[i] = sortSegments(mappings[i], owned);
  }
  return mappings;
}
function nextUnsortedSegmentLine(mappings, start) {
  for (let i = start; i < mappings.length; i++) {
    if (!isSorted(mappings[i]))
      return i;
  }
  return mappings.length;
}
function isSorted(line) {
  for (let j = 1; j < line.length; j++) {
    if (line[j][COLUMN] < line[j - 1][COLUMN]) {
      return false;
    }
  }
  return true;
}
function sortSegments(line, owned) {
  if (!owned)
    line = line.slice();
  return line.sort(sortComparator2);
}
function sortComparator2(a, b) {
  return a[COLUMN] - b[COLUMN];
}
function buildBySources(decoded, memos) {
  const sources = memos.map(() => []);
  for (let i = 0; i < decoded.length; i++) {
    const line = decoded[i];
    for (let j = 0; j < line.length; j++) {
      const seg = line[j];
      if (seg.length === 1)
        continue;
      const sourceIndex2 = seg[SOURCES_INDEX];
      const sourceLine = seg[SOURCE_LINE];
      const sourceColumn = seg[SOURCE_COLUMN];
      const source = sources[sourceIndex2];
      const segs = source[sourceLine] || (source[sourceLine] = []);
      segs.push([sourceColumn, i, seg[COLUMN]]);
    }
  }
  for (let i = 0; i < sources.length; i++) {
    const source = sources[i];
    for (let j = 0; j < source.length; j++) {
      const line = source[j];
      if (line)
        line.sort(sortComparator2);
    }
  }
  return sources;
}
var found = false;
function binarySearch(haystack, needle, low, high) {
  while (low <= high) {
    const mid = low + (high - low >> 1);
    const cmp = haystack[mid][COLUMN] - needle;
    if (cmp === 0) {
      found = true;
      return mid;
    }
    if (cmp < 0) {
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }
  found = false;
  return low - 1;
}
function upperBound(haystack, needle, index) {
  for (let i = index + 1; i < haystack.length; index = i++) {
    if (haystack[i][COLUMN] !== needle)
      break;
  }
  return index;
}
function lowerBound(haystack, needle, index) {
  for (let i = index - 1; i >= 0; index = i--) {
    if (haystack[i][COLUMN] !== needle)
      break;
  }
  return index;
}
function memoizedState() {
  return {
    lastKey: -1,
    lastNeedle: -1,
    lastIndex: -1
  };
}
function memoizedBinarySearch(haystack, needle, state, key) {
  const { lastKey, lastNeedle, lastIndex } = state;
  let low = 0;
  let high = haystack.length - 1;
  if (key === lastKey) {
    if (needle === lastNeedle) {
      found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;
      return lastIndex;
    }
    if (needle >= lastNeedle) {
      low = lastIndex === -1 ? 0 : lastIndex;
    } else {
      high = lastIndex;
    }
  }
  state.lastKey = key;
  state.lastNeedle = needle;
  return state.lastIndex = binarySearch(haystack, needle, low, high);
}
function parse2(map) {
  return typeof map === "string" ? JSON.parse(map) : map;
}
var FlattenMap = function(map, mapUrl) {
  const parsed = parse2(map);
  if (!("sections" in parsed)) {
    return new TraceMap(parsed, mapUrl);
  }
  const mappings = [];
  const sources = [];
  const sourcesContent = [];
  const names = [];
  const ignoreList = [];
  recurse(
    parsed,
    mapUrl,
    mappings,
    sources,
    sourcesContent,
    names,
    ignoreList,
    0,
    0,
    Infinity,
    Infinity
  );
  const joined = {
    version: 3,
    file: parsed.file,
    names,
    sources,
    sourcesContent,
    mappings,
    ignoreList
  };
  return presortedDecodedMap(joined);
};
function recurse(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
  const { sections } = input;
  for (let i = 0; i < sections.length; i++) {
    const { map, offset } = sections[i];
    let sl = stopLine;
    let sc = stopColumn;
    if (i + 1 < sections.length) {
      const nextOffset = sections[i + 1].offset;
      sl = Math.min(stopLine, lineOffset + nextOffset.line);
      if (sl === stopLine) {
        sc = Math.min(stopColumn, columnOffset + nextOffset.column);
      } else if (sl < stopLine) {
        sc = columnOffset + nextOffset.column;
      }
    }
    addSection(
      map,
      mapUrl,
      mappings,
      sources,
      sourcesContent,
      names,
      ignoreList,
      lineOffset + offset.line,
      columnOffset + offset.column,
      sl,
      sc
    );
  }
}
function addSection(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
  const parsed = parse2(input);
  if ("sections" in parsed)
    return recurse(...arguments);
  const map = new TraceMap(parsed, mapUrl);
  const sourcesOffset = sources.length;
  const namesOffset = names.length;
  const decoded = decodedMappings(map);
  const { resolvedSources, sourcesContent: contents, ignoreList: ignores } = map;
  append(sources, resolvedSources);
  append(names, map.names);
  if (contents)
    append(sourcesContent, contents);
  else
    for (let i = 0; i < resolvedSources.length; i++)
      sourcesContent.push(null);
  if (ignores)
    for (let i = 0; i < ignores.length; i++)
      ignoreList.push(ignores[i] + sourcesOffset);
  for (let i = 0; i < decoded.length; i++) {
    const lineI = lineOffset + i;
    if (lineI > stopLine)
      return;
    const out = getLine(mappings, lineI);
    const cOffset = i === 0 ? columnOffset : 0;
    const line = decoded[i];
    for (let j = 0; j < line.length; j++) {
      const seg = line[j];
      const column = cOffset + seg[COLUMN];
      if (lineI === stopLine && column >= stopColumn)
        return;
      if (seg.length === 1) {
        out.push([column]);
        continue;
      }
      const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];
      const sourceLine = seg[SOURCE_LINE];
      const sourceColumn = seg[SOURCE_COLUMN];
      out.push(
        seg.length === 4 ? [column, sourcesIndex, sourceLine, sourceColumn] : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]
      );
    }
  }
}
function append(arr, other) {
  for (let i = 0; i < other.length; i++)
    arr.push(other[i]);
}
function getLine(arr, index) {
  for (let i = arr.length; i <= index; i++)
    arr[i] = [];
  return arr[index];
}
var LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)";
var COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)";
var LEAST_UPPER_BOUND = -1;
var GREATEST_LOWER_BOUND = 1;
var TraceMap = class {
  constructor(map, mapUrl) {
    const isString = typeof map === "string";
    if (!isString && map._decodedMemo)
      return map;
    const parsed = parse2(map);
    const { version, file, names, sourceRoot, sources, sourcesContent } = parsed;
    this.version = version;
    this.file = file;
    this.names = names || [];
    this.sourceRoot = sourceRoot;
    this.sources = sources;
    this.sourcesContent = sourcesContent;
    this.ignoreList = parsed.ignoreList || parsed.x_google_ignoreList || void 0;
    const resolve2 = resolver(mapUrl, sourceRoot);
    this.resolvedSources = sources.map(resolve2);
    const { mappings } = parsed;
    if (typeof mappings === "string") {
      this._encoded = mappings;
      this._decoded = void 0;
    } else if (Array.isArray(mappings)) {
      this._encoded = void 0;
      this._decoded = maybeSort(mappings, isString);
    } else if (parsed.sections) {
      throw new Error(`TraceMap passed sectioned source map, please use FlattenMap export instead`);
    } else {
      throw new Error(`invalid source map: ${JSON.stringify(parsed)}`);
    }
    this._decodedMemo = memoizedState();
    this._bySources = void 0;
    this._bySourceMemos = void 0;
  }
};
function cast(map) {
  return map;
}
function encodedMappings(map) {
  var _a, _b;
  return (_b = (_a = cast(map))._encoded) != null ? _b : _a._encoded = encode(cast(map)._decoded);
}
function decodedMappings(map) {
  var _a;
  return (_a = cast(map))._decoded || (_a._decoded = decode(cast(map)._encoded));
}
function originalPositionFor(map, needle) {
  let { line, column, bias } = needle;
  line--;
  if (line < 0)
    throw new Error(LINE_GTR_ZERO);
  if (column < 0)
    throw new Error(COL_GTR_EQ_ZERO);
  const decoded = decodedMappings(map);
  if (line >= decoded.length)
    return OMapping(null, null, null, null);
  const segments = decoded[line];
  const index = traceSegmentInternal(
    segments,
    cast(map)._decodedMemo,
    line,
    column,
    bias || GREATEST_LOWER_BOUND
  );
  if (index === -1)
    return OMapping(null, null, null, null);
  const segment = segments[index];
  if (segment.length === 1)
    return OMapping(null, null, null, null);
  const { names, resolvedSources } = map;
  return OMapping(
    resolvedSources[segment[SOURCES_INDEX]],
    segment[SOURCE_LINE] + 1,
    segment[SOURCE_COLUMN],
    segment.length === 5 ? names[segment[NAMES_INDEX]] : null
  );
}
function generatedPositionFor(map, needle) {
  const { source, line, column, bias } = needle;
  return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);
}
function allGeneratedPositionsFor(map, needle) {
  const { source, line, column, bias } = needle;
  return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);
}
function eachMapping(map, cb) {
  const decoded = decodedMappings(map);
  const { names, resolvedSources } = map;
  for (let i = 0; i < decoded.length; i++) {
    const line = decoded[i];
    for (let j = 0; j < line.length; j++) {
      const seg = line[j];
      const generatedLine = i + 1;
      const generatedColumn = seg[0];
      let source = null;
      let originalLine = null;
      let originalColumn = null;
      let name = null;
      if (seg.length !== 1) {
        source = resolvedSources[seg[1]];
        originalLine = seg[2] + 1;
        originalColumn = seg[3];
      }
      if (seg.length === 5)
        name = names[seg[4]];
      cb({
        generatedLine,
        generatedColumn,
        source,
        originalLine,
        originalColumn,
        name
      });
    }
  }
}
function sourceIndex(map, source) {
  const { sources, resolvedSources } = map;
  let index = sources.indexOf(source);
  if (index === -1)
    index = resolvedSources.indexOf(source);
  return index;
}
function sourceContentFor(map, source) {
  const { sourcesContent } = map;
  if (sourcesContent == null)
    return null;
  const index = sourceIndex(map, source);
  return index === -1 ? null : sourcesContent[index];
}
function presortedDecodedMap(map, mapUrl) {
  const tracer = new TraceMap(clone(map, []), mapUrl);
  cast(tracer)._decoded = map.mappings;
  return tracer;
}
function clone(map, mappings) {
  return {
    version: map.version,
    file: map.file,
    names: map.names,
    sourceRoot: map.sourceRoot,
    sources: map.sources,
    sourcesContent: map.sourcesContent,
    mappings,
    ignoreList: map.ignoreList || map.x_google_ignoreList
  };
}
function OMapping(source, line, column, name) {
  return { source, line, column, name };
}
function GMapping(line, column) {
  return { line, column };
}
function traceSegmentInternal(segments, memo, line, column, bias) {
  let index = memoizedBinarySearch(segments, column, memo, line);
  if (found) {
    index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);
  } else if (bias === LEAST_UPPER_BOUND)
    index++;
  if (index === -1 || index === segments.length)
    return -1;
  return index;
}
function sliceGeneratedPositions(segments, memo, line, column, bias) {
  let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);
  if (!found && bias === LEAST_UPPER_BOUND)
    min++;
  if (min === -1 || min === segments.length)
    return [];
  const matchedColumn = found ? column : segments[min][COLUMN];
  if (!found)
    min = lowerBound(segments, matchedColumn, min);
  const max = upperBound(segments, matchedColumn, min);
  const result = [];
  for (; min <= max; min++) {
    const segment = segments[min];
    result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
  }
  return result;
}
function generatedPosition(map, source, line, column, bias, all) {
  var _a, _b;
  line--;
  if (line < 0)
    throw new Error(LINE_GTR_ZERO);
  if (column < 0)
    throw new Error(COL_GTR_EQ_ZERO);
  const { sources, resolvedSources } = map;
  let sourceIndex2 = sources.indexOf(source);
  if (sourceIndex2 === -1)
    sourceIndex2 = resolvedSources.indexOf(source);
  if (sourceIndex2 === -1)
    return all ? [] : GMapping(null, null);
  const bySourceMemos = (_a = cast(map))._bySourceMemos || (_a._bySourceMemos = sources.map(memoizedState));
  const generated = (_b = cast(map))._bySources || (_b._bySources = buildBySources(decodedMappings(map), bySourceMemos));
  const segments = generated[sourceIndex2][line];
  if (segments == null)
    return all ? [] : GMapping(null, null);
  const memo = bySourceMemos[sourceIndex2];
  if (all)
    return sliceGeneratedPositions(segments, memo, line, column, bias);
  const index = traceSegmentInternal(segments, memo, line, column, bias);
  if (index === -1)
    return GMapping(null, null);
  const segment = segments[index];
  return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
}

// node_modules/@jridgewell/gen-mapping/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.mjs
function stripFilename2(path14) {
  if (!path14)
    return "";
  const index = path14.lastIndexOf("/");
  return path14.slice(0, index + 1);
}
function resolver2(mapUrl, sourceRoot) {
  const from = stripFilename2(mapUrl);
  const prefix = sourceRoot ? sourceRoot + "/" : "";
  return (source) => resolve(prefix + (source || ""), from);
}
var COLUMN2 = 0;
function maybeSort2(mappings, owned) {
  const unsortedIndex = nextUnsortedSegmentLine2(mappings, 0);
  if (unsortedIndex === mappings.length)
    return mappings;
  if (!owned)
    mappings = mappings.slice();
  for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine2(mappings, i + 1)) {
    mappings[i] = sortSegments2(mappings[i], owned);
  }
  return mappings;
}
function nextUnsortedSegmentLine2(mappings, start) {
  for (let i = start; i < mappings.length; i++) {
    if (!isSorted2(mappings[i]))
      return i;
  }
  return mappings.length;
}
function isSorted2(line) {
  for (let j = 1; j < line.length; j++) {
    if (line[j][COLUMN2] < line[j - 1][COLUMN2]) {
      return false;
    }
  }
  return true;
}
function sortSegments2(line, owned) {
  if (!owned)
    line = line.slice();
  return line.sort(sortComparator3);
}
function sortComparator3(a, b) {
  return a[COLUMN2] - b[COLUMN2];
}
function memoizedState2() {
  return {
    lastKey: -1,
    lastNeedle: -1,
    lastIndex: -1
  };
}
function parse3(map) {
  return typeof map === "string" ? JSON.parse(map) : map;
}
var TraceMap2 = class {
  constructor(map, mapUrl) {
    const isString = typeof map === "string";
    if (!isString && map._decodedMemo)
      return map;
    const parsed = parse3(map);
    const { version, file, names, sourceRoot, sources, sourcesContent } = parsed;
    this.version = version;
    this.file = file;
    this.names = names || [];
    this.sourceRoot = sourceRoot;
    this.sources = sources;
    this.sourcesContent = sourcesContent;
    this.ignoreList = parsed.ignoreList || parsed.x_google_ignoreList || void 0;
    const resolve2 = resolver2(mapUrl, sourceRoot);
    this.resolvedSources = sources.map(resolve2);
    const { mappings } = parsed;
    if (typeof mappings === "string") {
      this._encoded = mappings;
      this._decoded = void 0;
    } else if (Array.isArray(mappings)) {
      this._encoded = void 0;
      this._decoded = maybeSort2(mappings, isString);
    } else if (parsed.sections) {
      throw new Error(`TraceMap passed sectioned source map, please use FlattenMap export instead`);
    } else {
      throw new Error(`invalid source map: ${JSON.stringify(parsed)}`);
    }
    this._decodedMemo = memoizedState2();
    this._bySources = void 0;
    this._bySourceMemos = void 0;
  }
};
function cast2(map) {
  return map;
}
function decodedMappings2(map) {
  var _a;
  return (_a = cast2(map))._decoded || (_a._decoded = decode(cast2(map)._encoded));
}

// node_modules/@jridgewell/gen-mapping/dist/gen-mapping.mjs
var SetArray = class {
  constructor() {
    this._indexes = { __proto__: null };
    this.array = [];
  }
};
function cast3(set) {
  return set;
}
function get(setarr, key) {
  return cast3(setarr)._indexes[key];
}
function put(setarr, key) {
  const index = get(setarr, key);
  if (index !== void 0)
    return index;
  const { array, _indexes: indexes } = cast3(setarr);
  const length = array.push(key);
  return indexes[key] = length - 1;
}
var COLUMN3 = 0;
var SOURCES_INDEX2 = 1;
var SOURCE_LINE2 = 2;
var SOURCE_COLUMN2 = 3;
var NAMES_INDEX2 = 4;
var NO_NAME = -1;
var GenMapping = class {
  constructor({ file, sourceRoot } = {}) {
    this._names = new SetArray();
    this._sources = new SetArray();
    this._sourcesContent = [];
    this._mappings = [];
    this.file = file;
    this.sourceRoot = sourceRoot;
    this._ignoreList = new SetArray();
  }
};
function cast22(map) {
  return map;
}
var maybeAddMapping = (map, mapping) => {
  return addMappingInternal(true, map, mapping);
};
function setSourceContent(map, source, content) {
  const {
    _sources: sources,
    _sourcesContent: sourcesContent
    // _originalScopes: originalScopes,
  } = cast22(map);
  const index = put(sources, source);
  sourcesContent[index] = content;
}
function toDecodedMap(map) {
  const {
    _mappings: mappings,
    _sources: sources,
    _sourcesContent: sourcesContent,
    _names: names,
    _ignoreList: ignoreList
    // _originalScopes: originalScopes,
    // _generatedRanges: generatedRanges,
  } = cast22(map);
  removeEmptyFinalLines(mappings);
  return {
    version: 3,
    file: map.file || void 0,
    names: names.array,
    sourceRoot: map.sourceRoot || void 0,
    sources: sources.array,
    sourcesContent,
    mappings,
    // originalScopes,
    // generatedRanges,
    ignoreList: ignoreList.array
  };
}
function toEncodedMap(map) {
  const decoded = toDecodedMap(map);
  return Object.assign({}, decoded, {
    // originalScopes: decoded.originalScopes.map((os) => encodeOriginalScopes(os)),
    // generatedRanges: encodeGeneratedRanges(decoded.generatedRanges as GeneratedRange[]),
    mappings: encode(decoded.mappings)
  });
}
function fromMap(input) {
  const map = new TraceMap2(input);
  const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });
  putAll(cast22(gen)._names, map.names);
  putAll(cast22(gen)._sources, map.sources);
  cast22(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null);
  cast22(gen)._mappings = decodedMappings2(map);
  if (map.ignoreList)
    putAll(cast22(gen)._ignoreList, map.ignoreList);
  return gen;
}
function addSegmentInternal(skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
  const {
    _mappings: mappings,
    _sources: sources,
    _sourcesContent: sourcesContent,
    _names: names
    // _originalScopes: originalScopes,
  } = cast22(map);
  const line = getIndex(mappings, genLine);
  const index = getColumnIndex(line, genColumn);
  if (!source) {
    if (skipable && skipSourceless(line, index))
      return;
    return insert(line, index, [genColumn]);
  }
  assert(sourceLine);
  assert(sourceColumn);
  const sourcesIndex = put(sources, source);
  const namesIndex = name ? put(names, name) : NO_NAME;
  if (sourcesIndex === sourcesContent.length)
    sourcesContent[sourcesIndex] = content != null ? content : null;
  if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {
    return;
  }
  return insert(
    line,
    index,
    name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]
  );
}
function assert(_val) {
}
function getIndex(arr, index) {
  for (let i = arr.length; i <= index; i++) {
    arr[i] = [];
  }
  return arr[index];
}
function getColumnIndex(line, genColumn) {
  let index = line.length;
  for (let i = index - 1; i >= 0; index = i--) {
    const current = line[i];
    if (genColumn >= current[COLUMN3])
      break;
  }
  return index;
}
function insert(array, index, value) {
  for (let i = array.length; i > index; i--) {
    array[i] = array[i - 1];
  }
  array[index] = value;
}
function removeEmptyFinalLines(mappings) {
  const { length } = mappings;
  let len = length;
  for (let i = len - 1; i >= 0; len = i, i--) {
    if (mappings[i].length > 0)
      break;
  }
  if (len < length)
    mappings.length = len;
}
function putAll(setarr, array) {
  for (let i = 0; i < array.length; i++)
    put(setarr, array[i]);
}
function skipSourceless(line, index) {
  if (index === 0)
    return true;
  const prev = line[index - 1];
  return prev.length === 1;
}
function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
  if (index === 0)
    return false;
  const prev = line[index - 1];
  if (prev.length === 1)
    return false;
  return sourcesIndex === prev[SOURCES_INDEX2] && sourceLine === prev[SOURCE_LINE2] && sourceColumn === prev[SOURCE_COLUMN2] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX2] : NO_NAME);
}
function addMappingInternal(skipable, map, mapping) {
  const { generated, source, original, name, content } = mapping;
  if (!source) {
    return addSegmentInternal(
      skipable,
      map,
      generated.line - 1,
      generated.column,
      null,
      null,
      null,
      null,
      null
    );
  }
  assert(original);
  return addSegmentInternal(
    skipable,
    map,
    generated.line - 1,
    generated.column,
    source,
    original.line - 1,
    original.column,
    name,
    content
  );
}

// node_modules/@jridgewell/source-map/dist/source-map.mjs
var SourceMapConsumer = class _SourceMapConsumer {
  constructor(map, mapUrl) {
    const trace = this._map = new FlattenMap(map, mapUrl);
    this.file = trace.file;
    this.names = trace.names;
    this.sourceRoot = trace.sourceRoot;
    this.sources = trace.resolvedSources;
    this.sourcesContent = trace.sourcesContent;
    this.version = trace.version;
  }
  static fromSourceMap(map, mapUrl) {
    if (map.toDecodedMap) {
      return new _SourceMapConsumer(map.toDecodedMap(), mapUrl);
    }
    return new _SourceMapConsumer(map.toJSON(), mapUrl);
  }
  get mappings() {
    return encodedMappings(this._map);
  }
  originalPositionFor(needle) {
    return originalPositionFor(this._map, needle);
  }
  generatedPositionFor(originalPosition) {
    return generatedPositionFor(this._map, originalPosition);
  }
  allGeneratedPositionsFor(originalPosition) {
    return allGeneratedPositionsFor(this._map, originalPosition);
  }
  hasContentsOfAllSources() {
    if (!this.sourcesContent || this.sourcesContent.length !== this.sources.length) {
      return false;
    }
    for (const content of this.sourcesContent) {
      if (content == null) {
        return false;
      }
    }
    return true;
  }
  sourceContentFor(source, nullOnMissing) {
    const sourceContent = sourceContentFor(this._map, source);
    if (sourceContent != null) {
      return sourceContent;
    }
    if (nullOnMissing) {
      return null;
    }
    throw new Error(`"${source}" is not in the SourceMap.`);
  }
  eachMapping(callback, context) {
    eachMapping(this._map, context ? callback.bind(context) : callback);
  }
  destroy() {
  }
};
var SourceMapGenerator = class _SourceMapGenerator {
  constructor(opts) {
    this._map = opts instanceof GenMapping ? opts : new GenMapping(opts);
  }
  static fromSourceMap(consumer) {
    return new _SourceMapGenerator(fromMap(consumer));
  }
  addMapping(mapping) {
    maybeAddMapping(this._map, mapping);
  }
  setSourceContent(source, content) {
    setSourceContent(this._map, source, content);
  }
  toJSON() {
    return toEncodedMap(this._map);
  }
  toString() {
    return JSON.stringify(this.toJSON());
  }
  toDecodedMap() {
    return toDecodedMap(this._map);
  }
};

// node_modules/terser/lib/sourcemap.js
async function SourceMap(options3) {
  options3 = defaults2(options3, {
    file: null,
    root: null,
    orig: null,
    files: {}
  });
  var orig_map;
  var generator = new SourceMapGenerator({
    file: options3.file,
    sourceRoot: options3.root
  });
  let sourcesContent = { __proto__: null };
  let files = options3.files;
  for (var name in files)
    if (HOP(files, name)) {
      sourcesContent[name] = files[name];
    }
  if (options3.orig) {
    orig_map = await new SourceMapConsumer(options3.orig);
    if (orig_map.sourcesContent) {
      orig_map.sources.forEach(function(source, i) {
        var content = orig_map.sourcesContent[i];
        if (content) {
          sourcesContent[source] = content;
        }
      });
    }
  }
  function add(source, gen_line, gen_col, orig_line, orig_col, name2) {
    let generatedPos = { line: gen_line, column: gen_col };
    if (orig_map) {
      var info = orig_map.originalPositionFor({
        line: orig_line,
        column: orig_col
      });
      if (info.source === null) {
        generator.addMapping({
          generated: generatedPos,
          original: null,
          source: null,
          name: null
        });
        return;
      }
      source = info.source;
      orig_line = info.line;
      orig_col = info.column;
      name2 = info.name || name2;
    }
    generator.addMapping({
      generated: generatedPos,
      original: { line: orig_line, column: orig_col },
      source,
      name: name2
    });
    generator.setSourceContent(source, sourcesContent[source]);
  }
  function clean(map) {
    const allNull = map.sourcesContent && map.sourcesContent.every((c) => c == null);
    if (allNull)
      delete map.sourcesContent;
    if (map.file === void 0)
      delete map.file;
    if (map.sourceRoot === void 0)
      delete map.sourceRoot;
    return map;
  }
  function getDecoded() {
    if (!generator.toDecodedMap)
      return null;
    return clean(generator.toDecodedMap());
  }
  function getEncoded() {
    return clean(generator.toJSON());
  }
  function destroy() {
    if (orig_map && orig_map.destroy)
      orig_map.destroy();
  }
  return {
    add,
    getDecoded,
    getEncoded,
    destroy
  };
}

// node_modules/terser/tools/domprops.js
var domprops = [
  "$&",
  "$'",
  "$*",
  "$+",
  "$1",
  "$2",
  "$3",
  "$4",
  "$5",
  "$6",
  "$7",
  "$8",
  "$9",
  "$_",
  "$`",
  "$input",
  "-moz-animation",
  "-moz-animation-delay",
  "-moz-animation-direction",
  "-moz-animation-duration",
  "-moz-animation-fill-mode",
  "-moz-animation-iteration-count",
  "-moz-animation-name",
  "-moz-animation-play-state",
  "-moz-animation-timing-function",
  "-moz-appearance",
  "-moz-backface-visibility",
  "-moz-border-end",
  "-moz-border-end-color",
  "-moz-border-end-style",
  "-moz-border-end-width",
  "-moz-border-image",
  "-moz-border-start",
  "-moz-border-start-color",
  "-moz-border-start-style",
  "-moz-border-start-width",
  "-moz-box-align",
  "-moz-box-direction",
  "-moz-box-flex",
  "-moz-box-ordinal-group",
  "-moz-box-orient",
  "-moz-box-pack",
  "-moz-box-sizing",
  "-moz-float-edge",
  "-moz-font-feature-settings",
  "-moz-font-language-override",
  "-moz-force-broken-image-icon",
  "-moz-hyphens",
  "-moz-image-region",
  "-moz-margin-end",
  "-moz-margin-start",
  "-moz-orient",
  "-moz-osx-font-smoothing",
  "-moz-outline-radius",
  "-moz-outline-radius-bottomleft",
  "-moz-outline-radius-bottomright",
  "-moz-outline-radius-topleft",
  "-moz-outline-radius-topright",
  "-moz-padding-end",
  "-moz-padding-start",
  "-moz-perspective",
  "-moz-perspective-origin",
  "-moz-tab-size",
  "-moz-text-size-adjust",
  "-moz-transform",
  "-moz-transform-origin",
  "-moz-transform-style",
  "-moz-transition",
  "-moz-transition-delay",
  "-moz-transition-duration",
  "-moz-transition-property",
  "-moz-transition-timing-function",
  "-moz-user-focus",
  "-moz-user-input",
  "-moz-user-modify",
  "-moz-user-select",
  "-moz-window-dragging",
  "-webkit-align-content",
  "-webkit-align-items",
  "-webkit-align-self",
  "-webkit-animation",
  "-webkit-animation-delay",
  "-webkit-animation-direction",
  "-webkit-animation-duration",
  "-webkit-animation-fill-mode",
  "-webkit-animation-iteration-count",
  "-webkit-animation-name",
  "-webkit-animation-play-state",
  "-webkit-animation-timing-function",
  "-webkit-appearance",
  "-webkit-backface-visibility",
  "-webkit-background-clip",
  "-webkit-background-origin",
  "-webkit-background-size",
  "-webkit-border-bottom-left-radius",
  "-webkit-border-bottom-right-radius",
  "-webkit-border-image",
  "-webkit-border-radius",
  "-webkit-border-top-left-radius",
  "-webkit-border-top-right-radius",
  "-webkit-box-align",
  "-webkit-box-direction",
  "-webkit-box-flex",
  "-webkit-box-ordinal-group",
  "-webkit-box-orient",
  "-webkit-box-pack",
  "-webkit-box-shadow",
  "-webkit-box-sizing",
  "-webkit-filter",
  "-webkit-flex",
  "-webkit-flex-basis",
  "-webkit-flex-direction",
  "-webkit-flex-flow",
  "-webkit-flex-grow",
  "-webkit-flex-shrink",
  "-webkit-flex-wrap",
  "-webkit-justify-content",
  "-webkit-line-clamp",
  "-webkit-mask",
  "-webkit-mask-clip",
  "-webkit-mask-composite",
  "-webkit-mask-image",
  "-webkit-mask-origin",
  "-webkit-mask-position",
  "-webkit-mask-position-x",
  "-webkit-mask-position-y",
  "-webkit-mask-repeat",
  "-webkit-mask-size",
  "-webkit-order",
  "-webkit-perspective",
  "-webkit-perspective-origin",
  "-webkit-text-fill-color",
  "-webkit-text-size-adjust",
  "-webkit-text-stroke",
  "-webkit-text-stroke-color",
  "-webkit-text-stroke-width",
  "-webkit-transform",
  "-webkit-transform-origin",
  "-webkit-transform-style",
  "-webkit-transition",
  "-webkit-transition-delay",
  "-webkit-transition-duration",
  "-webkit-transition-property",
  "-webkit-transition-timing-function",
  "-webkit-user-select",
  "0",
  "1",
  "10",
  "11",
  "12",
  "13",
  "14",
  "15",
  "16",
  "17",
  "18",
  "19",
  "2",
  "20",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "@@iterator",
  "ABORT_ERR",
  "ACTIVE",
  "ACTIVE_ATTRIBUTES",
  "ACTIVE_TEXTURE",
  "ACTIVE_UNIFORMS",
  "ACTIVE_UNIFORM_BLOCKS",
  "ADDITION",
  "ALIASED_LINE_WIDTH_RANGE",
  "ALIASED_POINT_SIZE_RANGE",
  "ALLOW_KEYBOARD_INPUT",
  "ALLPASS",
  "ALPHA",
  "ALPHA_BITS",
  "ALREADY_SIGNALED",
  "ALT_MASK",
  "ALWAYS",
  "ANY_SAMPLES_PASSED",
  "ANY_SAMPLES_PASSED_CONSERVATIVE",
  "ANY_TYPE",
  "ANY_UNORDERED_NODE_TYPE",
  "ARRAY_BUFFER",
  "ARRAY_BUFFER_BINDING",
  "ATTACHED_SHADERS",
  "ATTRIBUTE_NODE",
  "AT_TARGET",
  "AbortController",
  "AbortSignal",
  "AbsoluteOrientationSensor",
  "AbstractRange",
  "Accelerometer",
  "AddSearchProvider",
  "AggregateError",
  "AnalyserNode",
  "Animation",
  "AnimationEffect",
  "AnimationEvent",
  "AnimationPlaybackEvent",
  "AnimationTimeline",
  "AnonXMLHttpRequest",
  "Any",
  "ApplicationCache",
  "ApplicationCacheErrorEvent",
  "Array",
  "ArrayBuffer",
  "ArrayType",
  "Atomics",
  "Attr",
  "Audio",
  "AudioBuffer",
  "AudioBufferSourceNode",
  "AudioContext",
  "AudioDestinationNode",
  "AudioListener",
  "AudioNode",
  "AudioParam",
  "AudioParamMap",
  "AudioProcessingEvent",
  "AudioScheduledSourceNode",
  "AudioStreamTrack",
  "AudioWorklet",
  "AudioWorkletNode",
  "AuthenticatorAssertionResponse",
  "AuthenticatorAttestationResponse",
  "AuthenticatorResponse",
  "AutocompleteErrorEvent",
  "BACK",
  "BAD_BOUNDARYPOINTS_ERR",
  "BAD_REQUEST",
  "BANDPASS",
  "BLEND",
  "BLEND_COLOR",
  "BLEND_DST_ALPHA",
  "BLEND_DST_RGB",
  "BLEND_EQUATION",
  "BLEND_EQUATION_ALPHA",
  "BLEND_EQUATION_RGB",
  "BLEND_SRC_ALPHA",
  "BLEND_SRC_RGB",
  "BLUE_BITS",
  "BLUR",
  "BOOL",
  "BOOLEAN_TYPE",
  "BOOL_VEC2",
  "BOOL_VEC3",
  "BOOL_VEC4",
  "BOTH",
  "BROWSER_DEFAULT_WEBGL",
  "BUBBLING_PHASE",
  "BUFFER_SIZE",
  "BUFFER_USAGE",
  "BYTE",
  "BYTES_PER_ELEMENT",
  "BackgroundFetchManager",
  "BackgroundFetchRecord",
  "BackgroundFetchRegistration",
  "BarProp",
  "BarcodeDetector",
  "BaseAudioContext",
  "BaseHref",
  "BatteryManager",
  "BeforeInstallPromptEvent",
  "BeforeLoadEvent",
  "BeforeUnloadEvent",
  "BigInt",
  "BigInt64Array",
  "BigUint64Array",
  "BiquadFilterNode",
  "Blob",
  "BlobEvent",
  "Bluetooth",
  "BluetoothCharacteristicProperties",
  "BluetoothDevice",
  "BluetoothRemoteGATTCharacteristic",
  "BluetoothRemoteGATTDescriptor",
  "BluetoothRemoteGATTServer",
  "BluetoothRemoteGATTService",
  "BluetoothUUID",
  "Boolean",
  "BroadcastChannel",
  "ByteLengthQueuingStrategy",
  "CAPTURING_PHASE",
  "CCW",
  "CDATASection",
  "CDATA_SECTION_NODE",
  "CHANGE",
  "CHARSET_RULE",
  "CHECKING",
  "CLAMP_TO_EDGE",
  "CLICK",
  "CLOSED",
  "CLOSING",
  "COLOR",
  "COLOR_ATTACHMENT0",
  "COLOR_ATTACHMENT1",
  "COLOR_ATTACHMENT10",
  "COLOR_ATTACHMENT11",
  "COLOR_ATTACHMENT12",
  "COLOR_ATTACHMENT13",
  "COLOR_ATTACHMENT14",
  "COLOR_ATTACHMENT15",
  "COLOR_ATTACHMENT2",
  "COLOR_ATTACHMENT3",
  "COLOR_ATTACHMENT4",
  "COLOR_ATTACHMENT5",
  "COLOR_ATTACHMENT6",
  "COLOR_ATTACHMENT7",
  "COLOR_ATTACHMENT8",
  "COLOR_ATTACHMENT9",
  "COLOR_BUFFER_BIT",
  "COLOR_CLEAR_VALUE",
  "COLOR_WRITEMASK",
  "COMMENT_NODE",
  "COMPARE_REF_TO_TEXTURE",
  "COMPILE_STATUS",
  "COMPLETION_STATUS_KHR",
  "COMPRESSED_RGBA_S3TC_DXT1_EXT",
  "COMPRESSED_RGBA_S3TC_DXT3_EXT",
  "COMPRESSED_RGBA_S3TC_DXT5_EXT",
  "COMPRESSED_RGB_S3TC_DXT1_EXT",
  "COMPRESSED_TEXTURE_FORMATS",
  "CONDITION_SATISFIED",
  "CONFIGURATION_UNSUPPORTED",
  "CONNECTING",
  "CONSTANT_ALPHA",
  "CONSTANT_COLOR",
  "CONSTRAINT_ERR",
  "CONTEXT_LOST_WEBGL",
  "CONTROL_MASK",
  "COPY_READ_BUFFER",
  "COPY_READ_BUFFER_BINDING",
  "COPY_WRITE_BUFFER",
  "COPY_WRITE_BUFFER_BINDING",
  "COUNTER_STYLE_RULE",
  "CSS",
  "CSS2Properties",
  "CSSAnimation",
  "CSSCharsetRule",
  "CSSConditionRule",
  "CSSCounterStyleRule",
  "CSSFontFaceRule",
  "CSSFontFeatureValuesRule",
  "CSSGroupingRule",
  "CSSImageValue",
  "CSSImportRule",
  "CSSKeyframeRule",
  "CSSKeyframesRule",
  "CSSKeywordValue",
  "CSSMathInvert",
  "CSSMathMax",
  "CSSMathMin",
  "CSSMathNegate",
  "CSSMathProduct",
  "CSSMathSum",
  "CSSMathValue",
  "CSSMatrixComponent",
  "CSSMediaRule",
  "CSSMozDocumentRule",
  "CSSNameSpaceRule",
  "CSSNamespaceRule",
  "CSSNumericArray",
  "CSSNumericValue",
  "CSSPageRule",
  "CSSPerspective",
  "CSSPositionValue",
  "CSSPrimitiveValue",
  "CSSRotate",
  "CSSRule",
  "CSSRuleList",
  "CSSScale",
  "CSSSkew",
  "CSSSkewX",
  "CSSSkewY",
  "CSSStyleDeclaration",
  "CSSStyleRule",
  "CSSStyleSheet",
  "CSSStyleValue",
  "CSSSupportsRule",
  "CSSTransformComponent",
  "CSSTransformValue",
  "CSSTransition",
  "CSSTranslate",
  "CSSUnitValue",
  "CSSUnknownRule",
  "CSSUnparsedValue",
  "CSSValue",
  "CSSValueList",
  "CSSVariableReferenceValue",
  "CSSVariablesDeclaration",
  "CSSVariablesRule",
  "CSSViewportRule",
  "CSS_ATTR",
  "CSS_CM",
  "CSS_COUNTER",
  "CSS_CUSTOM",
  "CSS_DEG",
  "CSS_DIMENSION",
  "CSS_EMS",
  "CSS_EXS",
  "CSS_FILTER_BLUR",
  "CSS_FILTER_BRIGHTNESS",
  "CSS_FILTER_CONTRAST",
  "CSS_FILTER_CUSTOM",
  "CSS_FILTER_DROP_SHADOW",
  "CSS_FILTER_GRAYSCALE",
  "CSS_FILTER_HUE_ROTATE",
  "CSS_FILTER_INVERT",
  "CSS_FILTER_OPACITY",
  "CSS_FILTER_REFERENCE",
  "CSS_FILTER_SATURATE",
  "CSS_FILTER_SEPIA",
  "CSS_GRAD",
  "CSS_HZ",
  "CSS_IDENT",
  "CSS_IN",
  "CSS_INHERIT",
  "CSS_KHZ",
  "CSS_MATRIX",
  "CSS_MATRIX3D",
  "CSS_MM",
  "CSS_MS",
  "CSS_NUMBER",
  "CSS_PC",
  "CSS_PERCENTAGE",
  "CSS_PERSPECTIVE",
  "CSS_PRIMITIVE_VALUE",
  "CSS_PT",
  "CSS_PX",
  "CSS_RAD",
  "CSS_RECT",
  "CSS_RGBCOLOR",
  "CSS_ROTATE",
  "CSS_ROTATE3D",
  "CSS_ROTATEX",
  "CSS_ROTATEY",
  "CSS_ROTATEZ",
  "CSS_S",
  "CSS_SCALE",
  "CSS_SCALE3D",
  "CSS_SCALEX",
  "CSS_SCALEY",
  "CSS_SCALEZ",
  "CSS_SKEW",
  "CSS_SKEWX",
  "CSS_SKEWY",
  "CSS_STRING",
  "CSS_TRANSLATE",
  "CSS_TRANSLATE3D",
  "CSS_TRANSLATEX",
  "CSS_TRANSLATEY",
  "CSS_TRANSLATEZ",
  "CSS_UNKNOWN",
  "CSS_URI",
  "CSS_VALUE_LIST",
  "CSS_VH",
  "CSS_VMAX",
  "CSS_VMIN",
  "CSS_VW",
  "CULL_FACE",
  "CULL_FACE_MODE",
  "CURRENT_PROGRAM",
  "CURRENT_QUERY",
  "CURRENT_VERTEX_ATTRIB",
  "CUSTOM",
  "CW",
  "Cache",
  "CacheStorage",
  "CanvasCaptureMediaStream",
  "CanvasCaptureMediaStreamTrack",
  "CanvasGradient",
  "CanvasPattern",
  "CanvasRenderingContext2D",
  "CaretPosition",
  "ChannelMergerNode",
  "ChannelSplitterNode",
  "CharacterData",
  "ClientRect",
  "ClientRectList",
  "Clipboard",
  "ClipboardEvent",
  "ClipboardItem",
  "CloseEvent",
  "Collator",
  "CommandEvent",
  "Comment",
  "CompileError",
  "CompositionEvent",
  "CompressionStream",
  "Console",
  "ConstantSourceNode",
  "Controllers",
  "ConvolverNode",
  "CountQueuingStrategy",
  "Counter",
  "Credential",
  "CredentialsContainer",
  "Crypto",
  "CryptoKey",
  "CustomElementRegistry",
  "CustomEvent",
  "DATABASE_ERR",
  "DATA_CLONE_ERR",
  "DATA_ERR",
  "DBLCLICK",
  "DECR",
  "DECR_WRAP",
  "DELETE_STATUS",
  "DEPTH",
  "DEPTH24_STENCIL8",
  "DEPTH32F_STENCIL8",
  "DEPTH_ATTACHMENT",
  "DEPTH_BITS",
  "DEPTH_BUFFER_BIT",
  "DEPTH_CLEAR_VALUE",
  "DEPTH_COMPONENT",
  "DEPTH_COMPONENT16",
  "DEPTH_COMPONENT24",
  "DEPTH_COMPONENT32F",
  "DEPTH_FUNC",
  "DEPTH_RANGE",
  "DEPTH_STENCIL",
  "DEPTH_STENCIL_ATTACHMENT",
  "DEPTH_TEST",
  "DEPTH_WRITEMASK",
  "DEVICE_INELIGIBLE",
  "DIRECTION_DOWN",
  "DIRECTION_LEFT",
  "DIRECTION_RIGHT",
  "DIRECTION_UP",
  "DISABLED",
  "DISPATCH_REQUEST_ERR",
  "DITHER",
  "DOCUMENT_FRAGMENT_NODE",
  "DOCUMENT_NODE",
  "DOCUMENT_POSITION_CONTAINED_BY",
  "DOCUMENT_POSITION_CONTAINS",
  "DOCUMENT_POSITION_DISCONNECTED",
  "DOCUMENT_POSITION_FOLLOWING",
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
  "DOCUMENT_POSITION_PRECEDING",
  "DOCUMENT_TYPE_NODE",
  "DOMCursor",
  "DOMError",
  "DOMException",
  "DOMImplementation",
  "DOMImplementationLS",
  "DOMMatrix",
  "DOMMatrixReadOnly",
  "DOMParser",
  "DOMPoint",
  "DOMPointReadOnly",
  "DOMQuad",
  "DOMRect",
  "DOMRectList",
  "DOMRectReadOnly",
  "DOMRequest",
  "DOMSTRING_SIZE_ERR",
  "DOMSettableTokenList",
  "DOMStringList",
  "DOMStringMap",
  "DOMTokenList",
  "DOMTransactionEvent",
  "DOM_DELTA_LINE",
  "DOM_DELTA_PAGE",
  "DOM_DELTA_PIXEL",
  "DOM_INPUT_METHOD_DROP",
  "DOM_INPUT_METHOD_HANDWRITING",
  "DOM_INPUT_METHOD_IME",
  "DOM_INPUT_METHOD_KEYBOARD",
  "DOM_INPUT_METHOD_MULTIMODAL",
  "DOM_INPUT_METHOD_OPTION",
  "DOM_INPUT_METHOD_PASTE",
  "DOM_INPUT_METHOD_SCRIPT",
  "DOM_INPUT_METHOD_UNKNOWN",
  "DOM_INPUT_METHOD_VOICE",
  "DOM_KEY_LOCATION_JOYSTICK",
  "DOM_KEY_LOCATION_LEFT",
  "DOM_KEY_LOCATION_MOBILE",
  "DOM_KEY_LOCATION_NUMPAD",
  "DOM_KEY_LOCATION_RIGHT",
  "DOM_KEY_LOCATION_STANDARD",
  "DOM_VK_0",
  "DOM_VK_1",
  "DOM_VK_2",
  "DOM_VK_3",
  "DOM_VK_4",
  "DOM_VK_5",
  "DOM_VK_6",
  "DOM_VK_7",
  "DOM_VK_8",
  "DOM_VK_9",
  "DOM_VK_A",
  "DOM_VK_ACCEPT",
  "DOM_VK_ADD",
  "DOM_VK_ALT",
  "DOM_VK_ALTGR",
  "DOM_VK_AMPERSAND",
  "DOM_VK_ASTERISK",
  "DOM_VK_AT",
  "DOM_VK_ATTN",
  "DOM_VK_B",
  "DOM_VK_BACKSPACE",
  "DOM_VK_BACK_QUOTE",
  "DOM_VK_BACK_SLASH",
  "DOM_VK_BACK_SPACE",
  "DOM_VK_C",
  "DOM_VK_CANCEL",
  "DOM_VK_CAPS_LOCK",
  "DOM_VK_CIRCUMFLEX",
  "DOM_VK_CLEAR",
  "DOM_VK_CLOSE_BRACKET",
  "DOM_VK_CLOSE_CURLY_BRACKET",
  "DOM_VK_CLOSE_PAREN",
  "DOM_VK_COLON",
  "DOM_VK_COMMA",
  "DOM_VK_CONTEXT_MENU",
  "DOM_VK_CONTROL",
  "DOM_VK_CONVERT",
  "DOM_VK_CRSEL",
  "DOM_VK_CTRL",
  "DOM_VK_D",
  "DOM_VK_DECIMAL",
  "DOM_VK_DELETE",
  "DOM_VK_DIVIDE",
  "DOM_VK_DOLLAR",
  "DOM_VK_DOUBLE_QUOTE",
  "DOM_VK_DOWN",
  "DOM_VK_E",
  "DOM_VK_EISU",
  "DOM_VK_END",
  "DOM_VK_ENTER",
  "DOM_VK_EQUALS",
  "DOM_VK_EREOF",
  "DOM_VK_ESCAPE",
  "DOM_VK_EXCLAMATION",
  "DOM_VK_EXECUTE",
  "DOM_VK_EXSEL",
  "DOM_VK_F",
  "DOM_VK_F1",
  "DOM_VK_F10",
  "DOM_VK_F11",
  "DOM_VK_F12",
  "DOM_VK_F13",
  "DOM_VK_F14",
  "DOM_VK_F15",
  "DOM_VK_F16",
  "DOM_VK_F17",
  "DOM_VK_F18",
  "DOM_VK_F19",
  "DOM_VK_F2",
  "DOM_VK_F20",
  "DOM_VK_F21",
  "DOM_VK_F22",
  "DOM_VK_F23",
  "DOM_VK_F24",
  "DOM_VK_F25",
  "DOM_VK_F26",
  "DOM_VK_F27",
  "DOM_VK_F28",
  "DOM_VK_F29",
  "DOM_VK_F3",
  "DOM_VK_F30",
  "DOM_VK_F31",
  "DOM_VK_F32",
  "DOM_VK_F33",
  "DOM_VK_F34",
  "DOM_VK_F35",
  "DOM_VK_F36",
  "DOM_VK_F4",
  "DOM_VK_F5",
  "DOM_VK_F6",
  "DOM_VK_F7",
  "DOM_VK_F8",
  "DOM_VK_F9",
  "DOM_VK_FINAL",
  "DOM_VK_FRONT",
  "DOM_VK_G",
  "DOM_VK_GREATER_THAN",
  "DOM_VK_H",
  "DOM_VK_HANGUL",
  "DOM_VK_HANJA",
  "DOM_VK_HASH",
  "DOM_VK_HELP",
  "DOM_VK_HK_TOGGLE",
  "DOM_VK_HOME",
  "DOM_VK_HYPHEN_MINUS",
  "DOM_VK_I",
  "DOM_VK_INSERT",
  "DOM_VK_J",
  "DOM_VK_JUNJA",
  "DOM_VK_K",
  "DOM_VK_KANA",
  "DOM_VK_KANJI",
  "DOM_VK_L",
  "DOM_VK_LEFT",
  "DOM_VK_LEFT_TAB",
  "DOM_VK_LESS_THAN",
  "DOM_VK_M",
  "DOM_VK_META",
  "DOM_VK_MODECHANGE",
  "DOM_VK_MULTIPLY",
  "DOM_VK_N",
  "DOM_VK_NONCONVERT",
  "DOM_VK_NUMPAD0",
  "DOM_VK_NUMPAD1",
  "DOM_VK_NUMPAD2",
  "DOM_VK_NUMPAD3",
  "DOM_VK_NUMPAD4",
  "DOM_VK_NUMPAD5",
  "DOM_VK_NUMPAD6",
  "DOM_VK_NUMPAD7",
  "DOM_VK_NUMPAD8",
  "DOM_VK_NUMPAD9",
  "DOM_VK_NUM_LOCK",
  "DOM_VK_O",
  "DOM_VK_OEM_1",
  "DOM_VK_OEM_102",
  "DOM_VK_OEM_2",
  "DOM_VK_OEM_3",
  "DOM_VK_OEM_4",
  "DOM_VK_OEM_5",
  "DOM_VK_OEM_6",
  "DOM_VK_OEM_7",
  "DOM_VK_OEM_8",
  "DOM_VK_OEM_COMMA",
  "DOM_VK_OEM_MINUS",
  "DOM_VK_OEM_PERIOD",
  "DOM_VK_OEM_PLUS",
  "DOM_VK_OPEN_BRACKET",
  "DOM_VK_OPEN_CURLY_BRACKET",
  "DOM_VK_OPEN_PAREN",
  "DOM_VK_P",
  "DOM_VK_PA1",
  "DOM_VK_PAGEDOWN",
  "DOM_VK_PAGEUP",
  "DOM_VK_PAGE_DOWN",
  "DOM_VK_PAGE_UP",
  "DOM_VK_PAUSE",
  "DOM_VK_PERCENT",
  "DOM_VK_PERIOD",
  "DOM_VK_PIPE",
  "DOM_VK_PLAY",
  "DOM_VK_PLUS",
  "DOM_VK_PRINT",
  "DOM_VK_PRINTSCREEN",
  "DOM_VK_PROCESSKEY",
  "DOM_VK_PROPERITES",
  "DOM_VK_Q",
  "DOM_VK_QUESTION_MARK",
  "DOM_VK_QUOTE",
  "DOM_VK_R",
  "DOM_VK_REDO",
  "DOM_VK_RETURN",
  "DOM_VK_RIGHT",
  "DOM_VK_S",
  "DOM_VK_SCROLL_LOCK",
  "DOM_VK_SELECT",
  "DOM_VK_SEMICOLON",
  "DOM_VK_SEPARATOR",
  "DOM_VK_SHIFT",
  "DOM_VK_SLASH",
  "DOM_VK_SLEEP",
  "DOM_VK_SPACE",
  "DOM_VK_SUBTRACT",
  "DOM_VK_T",
  "DOM_VK_TAB",
  "DOM_VK_TILDE",
  "DOM_VK_U",
  "DOM_VK_UNDERSCORE",
  "DOM_VK_UNDO",
  "DOM_VK_UNICODE",
  "DOM_VK_UP",
  "DOM_VK_V",
  "DOM_VK_VOLUME_DOWN",
  "DOM_VK_VOLUME_MUTE",
  "DOM_VK_VOLUME_UP",
  "DOM_VK_W",
  "DOM_VK_WIN",
  "DOM_VK_WINDOW",
  "DOM_VK_WIN_ICO_00",
  "DOM_VK_WIN_ICO_CLEAR",
  "DOM_VK_WIN_ICO_HELP",
  "DOM_VK_WIN_OEM_ATTN",
  "DOM_VK_WIN_OEM_AUTO",
  "DOM_VK_WIN_OEM_BACKTAB",
  "DOM_VK_WIN_OEM_CLEAR",
  "DOM_VK_WIN_OEM_COPY",
  "DOM_VK_WIN_OEM_CUSEL",
  "DOM_VK_WIN_OEM_ENLW",
  "DOM_VK_WIN_OEM_FINISH",
  "DOM_VK_WIN_OEM_FJ_JISHO",
  "DOM_VK_WIN_OEM_FJ_LOYA",
  "DOM_VK_WIN_OEM_FJ_MASSHOU",
  "DOM_VK_WIN_OEM_FJ_ROYA",
  "DOM_VK_WIN_OEM_FJ_TOUROKU",
  "DOM_VK_WIN_OEM_JUMP",
  "DOM_VK_WIN_OEM_PA1",
  "DOM_VK_WIN_OEM_PA2",
  "DOM_VK_WIN_OEM_PA3",
  "DOM_VK_WIN_OEM_RESET",
  "DOM_VK_WIN_OEM_WSCTRL",
  "DOM_VK_X",
  "DOM_VK_XF86XK_ADD_FAVORITE",
  "DOM_VK_XF86XK_APPLICATION_LEFT",
  "DOM_VK_XF86XK_APPLICATION_RIGHT",
  "DOM_VK_XF86XK_AUDIO_CYCLE_TRACK",
  "DOM_VK_XF86XK_AUDIO_FORWARD",
  "DOM_VK_XF86XK_AUDIO_LOWER_VOLUME",
  "DOM_VK_XF86XK_AUDIO_MEDIA",
  "DOM_VK_XF86XK_AUDIO_MUTE",
  "DOM_VK_XF86XK_AUDIO_NEXT",
  "DOM_VK_XF86XK_AUDIO_PAUSE",
  "DOM_VK_XF86XK_AUDIO_PLAY",
  "DOM_VK_XF86XK_AUDIO_PREV",
  "DOM_VK_XF86XK_AUDIO_RAISE_VOLUME",
  "DOM_VK_XF86XK_AUDIO_RANDOM_PLAY",
  "DOM_VK_XF86XK_AUDIO_RECORD",
  "DOM_VK_XF86XK_AUDIO_REPEAT",
  "DOM_VK_XF86XK_AUDIO_REWIND",
  "DOM_VK_XF86XK_AUDIO_STOP",
  "DOM_VK_XF86XK_AWAY",
  "DOM_VK_XF86XK_BACK",
  "DOM_VK_XF86XK_BACK_FORWARD",
  "DOM_VK_XF86XK_BATTERY",
  "DOM_VK_XF86XK_BLUE",
  "DOM_VK_XF86XK_BLUETOOTH",
  "DOM_VK_XF86XK_BOOK",
  "DOM_VK_XF86XK_BRIGHTNESS_ADJUST",
  "DOM_VK_XF86XK_CALCULATOR",
  "DOM_VK_XF86XK_CALENDAR",
  "DOM_VK_XF86XK_CD",
  "DOM_VK_XF86XK_CLOSE",
  "DOM_VK_XF86XK_COMMUNITY",
  "DOM_VK_XF86XK_CONTRAST_ADJUST",
  "DOM_VK_XF86XK_COPY",
  "DOM_VK_XF86XK_CUT",
  "DOM_VK_XF86XK_CYCLE_ANGLE",
  "DOM_VK_XF86XK_DISPLAY",
  "DOM_VK_XF86XK_DOCUMENTS",
  "DOM_VK_XF86XK_DOS",
  "DOM_VK_XF86XK_EJECT",
  "DOM_VK_XF86XK_EXCEL",
  "DOM_VK_XF86XK_EXPLORER",
  "DOM_VK_XF86XK_FAVORITES",
  "DOM_VK_XF86XK_FINANCE",
  "DOM_VK_XF86XK_FORWARD",
  "DOM_VK_XF86XK_FRAME_BACK",
  "DOM_VK_XF86XK_FRAME_FORWARD",
  "DOM_VK_XF86XK_GAME",
  "DOM_VK_XF86XK_GO",
  "DOM_VK_XF86XK_GREEN",
  "DOM_VK_XF86XK_HIBERNATE",
  "DOM_VK_XF86XK_HISTORY",
  "DOM_VK_XF86XK_HOME_PAGE",
  "DOM_VK_XF86XK_HOT_LINKS",
  "DOM_VK_XF86XK_I_TOUCH",
  "DOM_VK_XF86XK_KBD_BRIGHTNESS_DOWN",
  "DOM_VK_XF86XK_KBD_BRIGHTNESS_UP",
  "DOM_VK_XF86XK_KBD_LIGHT_ON_OFF",
  "DOM_VK_XF86XK_LAUNCH0",
  "DOM_VK_XF86XK_LAUNCH1",
  "DOM_VK_XF86XK_LAUNCH2",
  "DOM_VK_XF86XK_LAUNCH3",
  "DOM_VK_XF86XK_LAUNCH4",
  "DOM_VK_XF86XK_LAUNCH5",
  "DOM_VK_XF86XK_LAUNCH6",
  "DOM_VK_XF86XK_LAUNCH7",
  "DOM_VK_XF86XK_LAUNCH8",
  "DOM_VK_XF86XK_LAUNCH9",
  "DOM_VK_XF86XK_LAUNCH_A",
  "DOM_VK_XF86XK_LAUNCH_B",
  "DOM_VK_XF86XK_LAUNCH_C",
  "DOM_VK_XF86XK_LAUNCH_D",
  "DOM_VK_XF86XK_LAUNCH_E",
  "DOM_VK_XF86XK_LAUNCH_F",
  "DOM_VK_XF86XK_LIGHT_BULB",
  "DOM_VK_XF86XK_LOG_OFF",
  "DOM_VK_XF86XK_MAIL",
  "DOM_VK_XF86XK_MAIL_FORWARD",
  "DOM_VK_XF86XK_MARKET",
  "DOM_VK_XF86XK_MEETING",
  "DOM_VK_XF86XK_MEMO",
  "DOM_VK_XF86XK_MENU_KB",
  "DOM_VK_XF86XK_MENU_PB",
  "DOM_VK_XF86XK_MESSENGER",
  "DOM_VK_XF86XK_MON_BRIGHTNESS_DOWN",
  "DOM_VK_XF86XK_MON_BRIGHTNESS_UP",
  "DOM_VK_XF86XK_MUSIC",
  "DOM_VK_XF86XK_MY_COMPUTER",
  "DOM_VK_XF86XK_MY_SITES",
  "DOM_VK_XF86XK_NEW",
  "DOM_VK_XF86XK_NEWS",
  "DOM_VK_XF86XK_OFFICE_HOME",
  "DOM_VK_XF86XK_OPEN",
  "DOM_VK_XF86XK_OPEN_URL",
  "DOM_VK_XF86XK_OPTION",
  "DOM_VK_XF86XK_PASTE",
  "DOM_VK_XF86XK_PHONE",
  "DOM_VK_XF86XK_PICTURES",
  "DOM_VK_XF86XK_POWER_DOWN",
  "DOM_VK_XF86XK_POWER_OFF",
  "DOM_VK_XF86XK_RED",
  "DOM_VK_XF86XK_REFRESH",
  "DOM_VK_XF86XK_RELOAD",
  "DOM_VK_XF86XK_REPLY",
  "DOM_VK_XF86XK_ROCKER_DOWN",
  "DOM_VK_XF86XK_ROCKER_ENTER",
  "DOM_VK_XF86XK_ROCKER_UP",
  "DOM_VK_XF86XK_ROTATE_WINDOWS",
  "DOM_VK_XF86XK_ROTATION_KB",
  "DOM_VK_XF86XK_ROTATION_PB",
  "DOM_VK_XF86XK_SAVE",
  "DOM_VK_XF86XK_SCREEN_SAVER",
  "DOM_VK_XF86XK_SCROLL_CLICK",
  "DOM_VK_XF86XK_SCROLL_DOWN",
  "DOM_VK_XF86XK_SCROLL_UP",
  "DOM_VK_XF86XK_SEARCH",
  "DOM_VK_XF86XK_SEND",
  "DOM_VK_XF86XK_SHOP",
  "DOM_VK_XF86XK_SPELL",
  "DOM_VK_XF86XK_SPLIT_SCREEN",
  "DOM_VK_XF86XK_STANDBY",
  "DOM_VK_XF86XK_START",
  "DOM_VK_XF86XK_STOP",
  "DOM_VK_XF86XK_SUBTITLE",
  "DOM_VK_XF86XK_SUPPORT",
  "DOM_VK_XF86XK_SUSPEND",
  "DOM_VK_XF86XK_TASK_PANE",
  "DOM_VK_XF86XK_TERMINAL",
  "DOM_VK_XF86XK_TIME",
  "DOM_VK_XF86XK_TOOLS",
  "DOM_VK_XF86XK_TOP_MENU",
  "DOM_VK_XF86XK_TO_DO_LIST",
  "DOM_VK_XF86XK_TRAVEL",
  "DOM_VK_XF86XK_USER1KB",
  "DOM_VK_XF86XK_USER2KB",
  "DOM_VK_XF86XK_USER_PB",
  "DOM_VK_XF86XK_UWB",
  "DOM_VK_XF86XK_VENDOR_HOME",
  "DOM_VK_XF86XK_VIDEO",
  "DOM_VK_XF86XK_VIEW",
  "DOM_VK_XF86XK_WAKE_UP",
  "DOM_VK_XF86XK_WEB_CAM",
  "DOM_VK_XF86XK_WHEEL_BUTTON",
  "DOM_VK_XF86XK_WLAN",
  "DOM_VK_XF86XK_WORD",
  "DOM_VK_XF86XK_WWW",
  "DOM_VK_XF86XK_XFER",
  "DOM_VK_XF86XK_YELLOW",
  "DOM_VK_XF86XK_ZOOM_IN",
  "DOM_VK_XF86XK_ZOOM_OUT",
  "DOM_VK_Y",
  "DOM_VK_Z",
  "DOM_VK_ZOOM",
  "DONE",
  "DONT_CARE",
  "DOWNLOADING",
  "DRAGDROP",
  "DRAW_BUFFER0",
  "DRAW_BUFFER1",
  "DRAW_BUFFER10",
  "DRAW_BUFFER11",
  "DRAW_BUFFER12",
  "DRAW_BUFFER13",
  "DRAW_BUFFER14",
  "DRAW_BUFFER15",
  "DRAW_BUFFER2",
  "DRAW_BUFFER3",
  "DRAW_BUFFER4",
  "DRAW_BUFFER5",
  "DRAW_BUFFER6",
  "DRAW_BUFFER7",
  "DRAW_BUFFER8",
  "DRAW_BUFFER9",
  "DRAW_FRAMEBUFFER",
  "DRAW_FRAMEBUFFER_BINDING",
  "DST_ALPHA",
  "DST_COLOR",
  "DYNAMIC_COPY",
  "DYNAMIC_DRAW",
  "DYNAMIC_READ",
  "DataChannel",
  "DataTransfer",
  "DataTransferItem",
  "DataTransferItemList",
  "DataView",
  "Date",
  "DateTimeFormat",
  "DecompressionStream",
  "DelayNode",
  "DeprecationReportBody",
  "DesktopNotification",
  "DesktopNotificationCenter",
  "DeviceLightEvent",
  "DeviceMotionEvent",
  "DeviceMotionEventAcceleration",
  "DeviceMotionEventRotationRate",
  "DeviceOrientationEvent",
  "DeviceProximityEvent",
  "DeviceStorage",
  "DeviceStorageChangeEvent",
  "Directory",
  "DisplayNames",
  "Document",
  "DocumentFragment",
  "DocumentTimeline",
  "DocumentType",
  "DragEvent",
  "DynamicsCompressorNode",
  "E",
  "ELEMENT_ARRAY_BUFFER",
  "ELEMENT_ARRAY_BUFFER_BINDING",
  "ELEMENT_NODE",
  "EMPTY",
  "ENCODING_ERR",
  "ENDED",
  "END_TO_END",
  "END_TO_START",
  "ENTITY_NODE",
  "ENTITY_REFERENCE_NODE",
  "EPSILON",
  "EQUAL",
  "EQUALPOWER",
  "ERROR",
  "EXPONENTIAL_DISTANCE",
  "Element",
  "ElementInternals",
  "ElementQuery",
  "EnterPictureInPictureEvent",
  "Entity",
  "EntityReference",
  "Error",
  "ErrorEvent",
  "EvalError",
  "Event",
  "EventException",
  "EventSource",
  "EventTarget",
  "External",
  "FASTEST",
  "FIDOSDK",
  "FILTER_ACCEPT",
  "FILTER_INTERRUPT",
  "FILTER_REJECT",
  "FILTER_SKIP",
  "FINISHED_STATE",
  "FIRST_ORDERED_NODE_TYPE",
  "FLOAT",
  "FLOAT_32_UNSIGNED_INT_24_8_REV",
  "FLOAT_MAT2",
  "FLOAT_MAT2x3",
  "FLOAT_MAT2x4",
  "FLOAT_MAT3",
  "FLOAT_MAT3x2",
  "FLOAT_MAT3x4",
  "FLOAT_MAT4",
  "FLOAT_MAT4x2",
  "FLOAT_MAT4x3",
  "FLOAT_VEC2",
  "FLOAT_VEC3",
  "FLOAT_VEC4",
  "FOCUS",
  "FONT_FACE_RULE",
  "FONT_FEATURE_VALUES_RULE",
  "FRAGMENT_SHADER",
  "FRAGMENT_SHADER_DERIVATIVE_HINT",
  "FRAGMENT_SHADER_DERIVATIVE_HINT_OES",
  "FRAMEBUFFER",
  "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",
  "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",
  "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",
  "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",
  "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",
  "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",
  "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
  "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
  "FRAMEBUFFER_ATTACHMENT_RED_SIZE",
  "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",
  "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
  "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",
  "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
  "FRAMEBUFFER_BINDING",
  "FRAMEBUFFER_COMPLETE",
  "FRAMEBUFFER_DEFAULT",
  "FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
  "FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
  "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
  "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",
  "FRAMEBUFFER_UNSUPPORTED",
  "FRONT",
  "FRONT_AND_BACK",
  "FRONT_FACE",
  "FUNC_ADD",
  "FUNC_REVERSE_SUBTRACT",
  "FUNC_SUBTRACT",
  "FeaturePolicy",
  "FeaturePolicyViolationReportBody",
  "FederatedCredential",
  "Feed",
  "FeedEntry",
  "File",
  "FileError",
  "FileList",
  "FileReader",
  "FileSystem",
  "FileSystemDirectoryEntry",
  "FileSystemDirectoryReader",
  "FileSystemEntry",
  "FileSystemFileEntry",
  "FinalizationRegistry",
  "FindInPage",
  "Float32Array",
  "Float64Array",
  "FocusEvent",
  "FontFace",
  "FontFaceSet",
  "FontFaceSetLoadEvent",
  "FormData",
  "FormDataEvent",
  "FragmentDirective",
  "Function",
  "GENERATE_MIPMAP_HINT",
  "GEQUAL",
  "GREATER",
  "GREEN_BITS",
  "GainNode",
  "Gamepad",
  "GamepadAxisMoveEvent",
  "GamepadButton",
  "GamepadButtonEvent",
  "GamepadEvent",
  "GamepadHapticActuator",
  "GamepadPose",
  "Geolocation",
  "GeolocationCoordinates",
  "GeolocationPosition",
  "GeolocationPositionError",
  "GestureEvent",
  "Global",
  "Gyroscope",
  "HALF_FLOAT",
  "HAVE_CURRENT_DATA",
  "HAVE_ENOUGH_DATA",
  "HAVE_FUTURE_DATA",
  "HAVE_METADATA",
  "HAVE_NOTHING",
  "HEADERS_RECEIVED",
  "HIDDEN",
  "HIERARCHY_REQUEST_ERR",
  "HIGHPASS",
  "HIGHSHELF",
  "HIGH_FLOAT",
  "HIGH_INT",
  "HORIZONTAL",
  "HORIZONTAL_AXIS",
  "HRTF",
  "HTMLAllCollection",
  "HTMLAnchorElement",
  "HTMLAppletElement",
  "HTMLAreaElement",
  "HTMLAudioElement",
  "HTMLBRElement",
  "HTMLBaseElement",
  "HTMLBaseFontElement",
  "HTMLBlockquoteElement",
  "HTMLBodyElement",
  "HTMLButtonElement",
  "HTMLCanvasElement",
  "HTMLCollection",
  "HTMLCommandElement",
  "HTMLContentElement",
  "HTMLDListElement",
  "HTMLDataElement",
  "HTMLDataListElement",
  "HTMLDetailsElement",
  "HTMLDialogElement",
  "HTMLDirectoryElement",
  "HTMLDivElement",
  "HTMLDocument",
  "HTMLElement",
  "HTMLEmbedElement",
  "HTMLFieldSetElement",
  "HTMLFontElement",
  "HTMLFormControlsCollection",
  "HTMLFormElement",
  "HTMLFrameElement",
  "HTMLFrameSetElement",
  "HTMLHRElement",
  "HTMLHeadElement",
  "HTMLHeadingElement",
  "HTMLHtmlElement",
  "HTMLIFrameElement",
  "HTMLImageElement",
  "HTMLInputElement",
  "HTMLIsIndexElement",
  "HTMLKeygenElement",
  "HTMLLIElement",
  "HTMLLabelElement",
  "HTMLLegendElement",
  "HTMLLinkElement",
  "HTMLMapElement",
  "HTMLMarqueeElement",
  "HTMLMediaElement",
  "HTMLMenuElement",
  "HTMLMenuItemElement",
  "HTMLMetaElement",
  "HTMLMeterElement",
  "HTMLModElement",
  "HTMLOListElement",
  "HTMLObjectElement",
  "HTMLOptGroupElement",
  "HTMLOptionElement",
  "HTMLOptionsCollection",
  "HTMLOutputElement",
  "HTMLParagraphElement",
  "HTMLParamElement",
  "HTMLPictureElement",
  "HTMLPreElement",
  "HTMLProgressElement",
  "HTMLPropertiesCollection",
  "HTMLQuoteElement",
  "HTMLScriptElement",
  "HTMLSelectElement",
  "HTMLShadowElement",
  "HTMLSlotElement",
  "HTMLSourceElement",
  "HTMLSpanElement",
  "HTMLStyleElement",
  "HTMLTableCaptionElement",
  "HTMLTableCellElement",
  "HTMLTableColElement",
  "HTMLTableElement",
  "HTMLTableRowElement",
  "HTMLTableSectionElement",
  "HTMLTemplateElement",
  "HTMLTextAreaElement",
  "HTMLTimeElement",
  "HTMLTitleElement",
  "HTMLTrackElement",
  "HTMLUListElement",
  "HTMLUnknownElement",
  "HTMLVideoElement",
  "HashChangeEvent",
  "Headers",
  "History",
  "Hz",
  "ICE_CHECKING",
  "ICE_CLOSED",
  "ICE_COMPLETED",
  "ICE_CONNECTED",
  "ICE_FAILED",
  "ICE_GATHERING",
  "ICE_WAITING",
  "IDBCursor",
  "IDBCursorWithValue",
  "IDBDatabase",
  "IDBDatabaseException",
  "IDBFactory",
  "IDBFileHandle",
  "IDBFileRequest",
  "IDBIndex",
  "IDBKeyRange",
  "IDBMutableFile",
  "IDBObjectStore",
  "IDBOpenDBRequest",
  "IDBRequest",
  "IDBTransaction",
  "IDBVersionChangeEvent",
  "IDLE",
  "IIRFilterNode",
  "IMPLEMENTATION_COLOR_READ_FORMAT",
  "IMPLEMENTATION_COLOR_READ_TYPE",
  "IMPORT_RULE",
  "INCR",
  "INCR_WRAP",
  "INDEX_SIZE_ERR",
  "INT",
  "INTERLEAVED_ATTRIBS",
  "INT_2_10_10_10_REV",
  "INT_SAMPLER_2D",
  "INT_SAMPLER_2D_ARRAY",
  "INT_SAMPLER_3D",
  "INT_SAMPLER_CUBE",
  "INT_VEC2",
  "INT_VEC3",
  "INT_VEC4",
  "INUSE_ATTRIBUTE_ERR",
  "INVALID_ACCESS_ERR",
  "INVALID_CHARACTER_ERR",
  "INVALID_ENUM",
  "INVALID_EXPRESSION_ERR",
  "INVALID_FRAMEBUFFER_OPERATION",
  "INVALID_INDEX",
  "INVALID_MODIFICATION_ERR",
  "INVALID_NODE_TYPE_ERR",
  "INVALID_OPERATION",
  "INVALID_STATE_ERR",
  "INVALID_VALUE",
  "INVERSE_DISTANCE",
  "INVERT",
  "IceCandidate",
  "IdleDeadline",
  "Image",
  "ImageBitmap",
  "ImageBitmapRenderingContext",
  "ImageCapture",
  "ImageData",
  "Infinity",
  "InputDeviceCapabilities",
  "InputDeviceInfo",
  "InputEvent",
  "InputMethodContext",
  "InstallTrigger",
  "InstallTriggerImpl",
  "Instance",
  "Int16Array",
  "Int32Array",
  "Int8Array",
  "Intent",
  "InternalError",
  "IntersectionObserver",
  "IntersectionObserverEntry",
  "Intl",
  "IsSearchProviderInstalled",
  "Iterator",
  "JSON",
  "KEEP",
  "KEYDOWN",
  "KEYFRAMES_RULE",
  "KEYFRAME_RULE",
  "KEYPRESS",
  "KEYUP",
  "KeyEvent",
  "Keyboard",
  "KeyboardEvent",
  "KeyboardLayoutMap",
  "KeyframeEffect",
  "LENGTHADJUST_SPACING",
  "LENGTHADJUST_SPACINGANDGLYPHS",
  "LENGTHADJUST_UNKNOWN",
  "LEQUAL",
  "LESS",
  "LINEAR",
  "LINEAR_DISTANCE",
  "LINEAR_MIPMAP_LINEAR",
  "LINEAR_MIPMAP_NEAREST",
  "LINES",
  "LINE_LOOP",
  "LINE_STRIP",
  "LINE_WIDTH",
  "LINK_STATUS",
  "LIVE",
  "LN10",
  "LN2",
  "LOADED",
  "LOADING",
  "LOG10E",
  "LOG2E",
  "LOWPASS",
  "LOWSHELF",
  "LOW_FLOAT",
  "LOW_INT",
  "LSException",
  "LSParserFilter",
  "LUMINANCE",
  "LUMINANCE_ALPHA",
  "LargestContentfulPaint",
  "LayoutShift",
  "LayoutShiftAttribution",
  "LinearAccelerationSensor",
  "LinkError",
  "ListFormat",
  "LocalMediaStream",
  "Locale",
  "Location",
  "Lock",
  "LockManager",
  "MAX",
  "MAX_3D_TEXTURE_SIZE",
  "MAX_ARRAY_TEXTURE_LAYERS",
  "MAX_CLIENT_WAIT_TIMEOUT_WEBGL",
  "MAX_COLOR_ATTACHMENTS",
  "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",
  "MAX_COMBINED_TEXTURE_IMAGE_UNITS",
  "MAX_COMBINED_UNIFORM_BLOCKS",
  "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",
  "MAX_CUBE_MAP_TEXTURE_SIZE",
  "MAX_DRAW_BUFFERS",
  "MAX_ELEMENTS_INDICES",
  "MAX_ELEMENTS_VERTICES",
  "MAX_ELEMENT_INDEX",
  "MAX_FRAGMENT_INPUT_COMPONENTS",
  "MAX_FRAGMENT_UNIFORM_BLOCKS",
  "MAX_FRAGMENT_UNIFORM_COMPONENTS",
  "MAX_FRAGMENT_UNIFORM_VECTORS",
  "MAX_PROGRAM_TEXEL_OFFSET",
  "MAX_RENDERBUFFER_SIZE",
  "MAX_SAFE_INTEGER",
  "MAX_SAMPLES",
  "MAX_SERVER_WAIT_TIMEOUT",
  "MAX_TEXTURE_IMAGE_UNITS",
  "MAX_TEXTURE_LOD_BIAS",
  "MAX_TEXTURE_MAX_ANISOTROPY_EXT",
  "MAX_TEXTURE_SIZE",
  "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",
  "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",
  "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",
  "MAX_UNIFORM_BLOCK_SIZE",
  "MAX_UNIFORM_BUFFER_BINDINGS",
  "MAX_VALUE",
  "MAX_VARYING_COMPONENTS",
  "MAX_VARYING_VECTORS",
  "MAX_VERTEX_ATTRIBS",
  "MAX_VERTEX_OUTPUT_COMPONENTS",
  "MAX_VERTEX_TEXTURE_IMAGE_UNITS",
  "MAX_VERTEX_UNIFORM_BLOCKS",
  "MAX_VERTEX_UNIFORM_COMPONENTS",
  "MAX_VERTEX_UNIFORM_VECTORS",
  "MAX_VIEWPORT_DIMS",
  "MEDIA_ERR_ABORTED",
  "MEDIA_ERR_DECODE",
  "MEDIA_ERR_ENCRYPTED",
  "MEDIA_ERR_NETWORK",
  "MEDIA_ERR_SRC_NOT_SUPPORTED",
  "MEDIA_KEYERR_CLIENT",
  "MEDIA_KEYERR_DOMAIN",
  "MEDIA_KEYERR_HARDWARECHANGE",
  "MEDIA_KEYERR_OUTPUT",
  "MEDIA_KEYERR_SERVICE",
  "MEDIA_KEYERR_UNKNOWN",
  "MEDIA_RULE",
  "MEDIUM_FLOAT",
  "MEDIUM_INT",
  "META_MASK",
  "MIDIAccess",
  "MIDIConnectionEvent",
  "MIDIInput",
  "MIDIInputMap",
  "MIDIMessageEvent",
  "MIDIOutput",
  "MIDIOutputMap",
  "MIDIPort",
  "MIN",
  "MIN_PROGRAM_TEXEL_OFFSET",
  "MIN_SAFE_INTEGER",
  "MIN_VALUE",
  "MIRRORED_REPEAT",
  "MODE_ASYNCHRONOUS",
  "MODE_SYNCHRONOUS",
  "MODIFICATION",
  "MOUSEDOWN",
  "MOUSEDRAG",
  "MOUSEMOVE",
  "MOUSEOUT",
  "MOUSEOVER",
  "MOUSEUP",
  "MOZ_KEYFRAMES_RULE",
  "MOZ_KEYFRAME_RULE",
  "MOZ_SOURCE_CURSOR",
  "MOZ_SOURCE_ERASER",
  "MOZ_SOURCE_KEYBOARD",
  "MOZ_SOURCE_MOUSE",
  "MOZ_SOURCE_PEN",
  "MOZ_SOURCE_TOUCH",
  "MOZ_SOURCE_UNKNOWN",
  "MSGESTURE_FLAG_BEGIN",
  "MSGESTURE_FLAG_CANCEL",
  "MSGESTURE_FLAG_END",
  "MSGESTURE_FLAG_INERTIA",
  "MSGESTURE_FLAG_NONE",
  "MSPOINTER_TYPE_MOUSE",
  "MSPOINTER_TYPE_PEN",
  "MSPOINTER_TYPE_TOUCH",
  "MS_ASYNC_CALLBACK_STATUS_ASSIGN_DELEGATE",
  "MS_ASYNC_CALLBACK_STATUS_CANCEL",
  "MS_ASYNC_CALLBACK_STATUS_CHOOSEANY",
  "MS_ASYNC_CALLBACK_STATUS_ERROR",
  "MS_ASYNC_CALLBACK_STATUS_JOIN",
  "MS_ASYNC_OP_STATUS_CANCELED",
  "MS_ASYNC_OP_STATUS_ERROR",
  "MS_ASYNC_OP_STATUS_SUCCESS",
  "MS_MANIPULATION_STATE_ACTIVE",
  "MS_MANIPULATION_STATE_CANCELLED",
  "MS_MANIPULATION_STATE_COMMITTED",
  "MS_MANIPULATION_STATE_DRAGGING",
  "MS_MANIPULATION_STATE_INERTIA",
  "MS_MANIPULATION_STATE_PRESELECT",
  "MS_MANIPULATION_STATE_SELECTING",
  "MS_MANIPULATION_STATE_STOPPED",
  "MS_MEDIA_ERR_ENCRYPTED",
  "MS_MEDIA_KEYERR_CLIENT",
  "MS_MEDIA_KEYERR_DOMAIN",
  "MS_MEDIA_KEYERR_HARDWARECHANGE",
  "MS_MEDIA_KEYERR_OUTPUT",
  "MS_MEDIA_KEYERR_SERVICE",
  "MS_MEDIA_KEYERR_UNKNOWN",
  "Map",
  "Math",
  "MathMLElement",
  "MediaCapabilities",
  "MediaCapabilitiesInfo",
  "MediaController",
  "MediaDeviceInfo",
  "MediaDevices",
  "MediaElementAudioSourceNode",
  "MediaEncryptedEvent",
  "MediaError",
  "MediaKeyError",
  "MediaKeyEvent",
  "MediaKeyMessageEvent",
  "MediaKeyNeededEvent",
  "MediaKeySession",
  "MediaKeyStatusMap",
  "MediaKeySystemAccess",
  "MediaKeys",
  "MediaList",
  "MediaMetadata",
  "MediaQueryList",
  "MediaQueryListEvent",
  "MediaRecorder",
  "MediaRecorderErrorEvent",
  "MediaSession",
  "MediaSettingsRange",
  "MediaSource",
  "MediaStream",
  "MediaStreamAudioDestinationNode",
  "MediaStreamAudioSourceNode",
  "MediaStreamEvent",
  "MediaStreamTrack",
  "MediaStreamTrackAudioSourceNode",
  "MediaStreamTrackEvent",
  "Memory",
  "MessageChannel",
  "MessageEvent",
  "MessagePort",
  "Methods",
  "MimeType",
  "MimeTypeArray",
  "Module",
  "MouseEvent",
  "MouseScrollEvent",
  "MozAnimation",
  "MozAnimationDelay",
  "MozAnimationDirection",
  "MozAnimationDuration",
  "MozAnimationFillMode",
  "MozAnimationIterationCount",
  "MozAnimationName",
  "MozAnimationPlayState",
  "MozAnimationTimingFunction",
  "MozAppearance",
  "MozBackfaceVisibility",
  "MozBinding",
  "MozBorderBottomColors",
  "MozBorderEnd",
  "MozBorderEndColor",
  "MozBorderEndStyle",
  "MozBorderEndWidth",
  "MozBorderImage",
  "MozBorderLeftColors",
  "MozBorderRightColors",
  "MozBorderStart",
  "MozBorderStartColor",
  "MozBorderStartStyle",
  "MozBorderStartWidth",
  "MozBorderTopColors",
  "MozBoxAlign",
  "MozBoxDirection",
  "MozBoxFlex",
  "MozBoxOrdinalGroup",
  "MozBoxOrient",
  "MozBoxPack",
  "MozBoxSizing",
  "MozCSSKeyframeRule",
  "MozCSSKeyframesRule",
  "MozColumnCount",
  "MozColumnFill",
  "MozColumnGap",
  "MozColumnRule",
  "MozColumnRuleColor",
  "MozColumnRuleStyle",
  "MozColumnRuleWidth",
  "MozColumnWidth",
  "MozColumns",
  "MozContactChangeEvent",
  "MozFloatEdge",
  "MozFontFeatureSettings",
  "MozFontLanguageOverride",
  "MozForceBrokenImageIcon",
  "MozHyphens",
  "MozImageRegion",
  "MozMarginEnd",
  "MozMarginStart",
  "MozMmsEvent",
  "MozMmsMessage",
  "MozMobileMessageThread",
  "MozOSXFontSmoothing",
  "MozOrient",
  "MozOsxFontSmoothing",
  "MozOutlineRadius",
  "MozOutlineRadiusBottomleft",
  "MozOutlineRadiusBottomright",
  "MozOutlineRadiusTopleft",
  "MozOutlineRadiusTopright",
  "MozPaddingEnd",
  "MozPaddingStart",
  "MozPerspective",
  "MozPerspectiveOrigin",
  "MozPowerManager",
  "MozSettingsEvent",
  "MozSmsEvent",
  "MozSmsMessage",
  "MozStackSizing",
  "MozTabSize",
  "MozTextAlignLast",
  "MozTextDecorationColor",
  "MozTextDecorationLine",
  "MozTextDecorationStyle",
  "MozTextSizeAdjust",
  "MozTransform",
  "MozTransformOrigin",
  "MozTransformStyle",
  "MozTransition",
  "MozTransitionDelay",
  "MozTransitionDuration",
  "MozTransitionProperty",
  "MozTransitionTimingFunction",
  "MozUserFocus",
  "MozUserInput",
  "MozUserModify",
  "MozUserSelect",
  "MozWindowDragging",
  "MozWindowShadow",
  "MutationEvent",
  "MutationObserver",
  "MutationRecord",
  "NAMESPACE_ERR",
  "NAMESPACE_RULE",
  "NEAREST",
  "NEAREST_MIPMAP_LINEAR",
  "NEAREST_MIPMAP_NEAREST",
  "NEGATIVE_INFINITY",
  "NETWORK_EMPTY",
  "NETWORK_ERR",
  "NETWORK_IDLE",
  "NETWORK_LOADED",
  "NETWORK_LOADING",
  "NETWORK_NO_SOURCE",
  "NEVER",
  "NEW",
  "NEXT",
  "NEXT_NO_DUPLICATE",
  "NICEST",
  "NODE_AFTER",
  "NODE_BEFORE",
  "NODE_BEFORE_AND_AFTER",
  "NODE_INSIDE",
  "NONE",
  "NON_TRANSIENT_ERR",
  "NOTATION_NODE",
  "NOTCH",
  "NOTEQUAL",
  "NOT_ALLOWED_ERR",
  "NOT_FOUND_ERR",
  "NOT_READABLE_ERR",
  "NOT_SUPPORTED_ERR",
  "NO_DATA_ALLOWED_ERR",
  "NO_ERR",
  "NO_ERROR",
  "NO_MODIFICATION_ALLOWED_ERR",
  "NUMBER_TYPE",
  "NUM_COMPRESSED_TEXTURE_FORMATS",
  "NaN",
  "NamedNodeMap",
  "NavigationPreloadManager",
  "Navigator",
  "NearbyLinks",
  "NetworkInformation",
  "Node",
  "NodeFilter",
  "NodeIterator",
  "NodeList",
  "Notation",
  "Notification",
  "NotifyPaintEvent",
  "Number",
  "NumberFormat",
  "OBJECT_TYPE",
  "OBSOLETE",
  "OK",
  "ONE",
  "ONE_MINUS_CONSTANT_ALPHA",
  "ONE_MINUS_CONSTANT_COLOR",
  "ONE_MINUS_DST_ALPHA",
  "ONE_MINUS_DST_COLOR",
  "ONE_MINUS_SRC_ALPHA",
  "ONE_MINUS_SRC_COLOR",
  "OPEN",
  "OPENED",
  "OPENING",
  "ORDERED_NODE_ITERATOR_TYPE",
  "ORDERED_NODE_SNAPSHOT_TYPE",
  "OTHER_ERROR",
  "OUT_OF_MEMORY",
  "Object",
  "OfflineAudioCompletionEvent",
  "OfflineAudioContext",
  "OfflineResourceList",
  "OffscreenCanvas",
  "OffscreenCanvasRenderingContext2D",
  "Option",
  "OrientationSensor",
  "OscillatorNode",
  "OverconstrainedError",
  "OverflowEvent",
  "PACK_ALIGNMENT",
  "PACK_ROW_LENGTH",
  "PACK_SKIP_PIXELS",
  "PACK_SKIP_ROWS",
  "PAGE_RULE",
  "PARSE_ERR",
  "PATHSEG_ARC_ABS",
  "PATHSEG_ARC_REL",
  "PATHSEG_CLOSEPATH",
  "PATHSEG_CURVETO_CUBIC_ABS",
  "PATHSEG_CURVETO_CUBIC_REL",
  "PATHSEG_CURVETO_CUBIC_SMOOTH_ABS",
  "PATHSEG_CURVETO_CUBIC_SMOOTH_REL",
  "PATHSEG_CURVETO_QUADRATIC_ABS",
  "PATHSEG_CURVETO_QUADRATIC_REL",
  "PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS",
  "PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL",
  "PATHSEG_LINETO_ABS",
  "PATHSEG_LINETO_HORIZONTAL_ABS",
  "PATHSEG_LINETO_HORIZONTAL_REL",
  "PATHSEG_LINETO_REL",
  "PATHSEG_LINETO_VERTICAL_ABS",
  "PATHSEG_LINETO_VERTICAL_REL",
  "PATHSEG_MOVETO_ABS",
  "PATHSEG_MOVETO_REL",
  "PATHSEG_UNKNOWN",
  "PATH_EXISTS_ERR",
  "PEAKING",
  "PERMISSION_DENIED",
  "PERSISTENT",
  "PI",
  "PIXEL_PACK_BUFFER",
  "PIXEL_PACK_BUFFER_BINDING",
  "PIXEL_UNPACK_BUFFER",
  "PIXEL_UNPACK_BUFFER_BINDING",
  "PLAYING_STATE",
  "POINTS",
  "POLYGON_OFFSET_FACTOR",
  "POLYGON_OFFSET_FILL",
  "POLYGON_OFFSET_UNITS",
  "POSITION_UNAVAILABLE",
  "POSITIVE_INFINITY",
  "PREV",
  "PREV_NO_DUPLICATE",
  "PROCESSING_INSTRUCTION_NODE",
  "PageChangeEvent",
  "PageTransitionEvent",
  "PaintRequest",
  "PaintRequestList",
  "PannerNode",
  "PasswordCredential",
  "Path2D",
  "PaymentAddress",
  "PaymentInstruments",
  "PaymentManager",
  "PaymentMethodChangeEvent",
  "PaymentRequest",
  "PaymentRequestUpdateEvent",
  "PaymentResponse",
  "Performance",
  "PerformanceElementTiming",
  "PerformanceEntry",
  "PerformanceEventTiming",
  "PerformanceLongTaskTiming",
  "PerformanceMark",
  "PerformanceMeasure",
  "PerformanceNavigation",
  "PerformanceNavigationTiming",
  "PerformanceObserver",
  "PerformanceObserverEntryList",
  "PerformancePaintTiming",
  "PerformanceResourceTiming",
  "PerformanceServerTiming",
  "PerformanceTiming",
  "PeriodicSyncManager",
  "PeriodicWave",
  "PermissionStatus",
  "Permissions",
  "PhotoCapabilities",
  "PictureInPictureWindow",
  "Plugin",
  "PluginArray",
  "PluralRules",
  "PointerEvent",
  "PopStateEvent",
  "PopupBlockedEvent",
  "Presentation",
  "PresentationAvailability",
  "PresentationConnection",
  "PresentationConnectionAvailableEvent",
  "PresentationConnectionCloseEvent",
  "PresentationConnectionList",
  "PresentationReceiver",
  "PresentationRequest",
  "ProcessingInstruction",
  "ProgressEvent",
  "Promise",
  "PromiseRejectionEvent",
  "PropertyNodeList",
  "Proxy",
  "PublicKeyCredential",
  "PushManager",
  "PushSubscription",
  "PushSubscriptionOptions",
  "Q",
  "QUERY_RESULT",
  "QUERY_RESULT_AVAILABLE",
  "QUOTA_ERR",
  "QUOTA_EXCEEDED_ERR",
  "QueryInterface",
  "R11F_G11F_B10F",
  "R16F",
  "R16I",
  "R16UI",
  "R32F",
  "R32I",
  "R32UI",
  "R8",
  "R8I",
  "R8UI",
  "R8_SNORM",
  "RASTERIZER_DISCARD",
  "READ_BUFFER",
  "READ_FRAMEBUFFER",
  "READ_FRAMEBUFFER_BINDING",
  "READ_ONLY",
  "READ_ONLY_ERR",
  "READ_WRITE",
  "RED",
  "RED_BITS",
  "RED_INTEGER",
  "REMOVAL",
  "RENDERBUFFER",
  "RENDERBUFFER_ALPHA_SIZE",
  "RENDERBUFFER_BINDING",
  "RENDERBUFFER_BLUE_SIZE",
  "RENDERBUFFER_DEPTH_SIZE",
  "RENDERBUFFER_GREEN_SIZE",
  "RENDERBUFFER_HEIGHT",
  "RENDERBUFFER_INTERNAL_FORMAT",
  "RENDERBUFFER_RED_SIZE",
  "RENDERBUFFER_SAMPLES",
  "RENDERBUFFER_STENCIL_SIZE",
  "RENDERBUFFER_WIDTH",
  "RENDERER",
  "RENDERING_INTENT_ABSOLUTE_COLORIMETRIC",
  "RENDERING_INTENT_AUTO",
  "RENDERING_INTENT_PERCEPTUAL",
  "RENDERING_INTENT_RELATIVE_COLORIMETRIC",
  "RENDERING_INTENT_SATURATION",
  "RENDERING_INTENT_UNKNOWN",
  "REPEAT",
  "REPLACE",
  "RG",
  "RG16F",
  "RG16I",
  "RG16UI",
  "RG32F",
  "RG32I",
  "RG32UI",
  "RG8",
  "RG8I",
  "RG8UI",
  "RG8_SNORM",
  "RGB",
  "RGB10_A2",
  "RGB10_A2UI",
  "RGB16F",
  "RGB16I",
  "RGB16UI",
  "RGB32F",
  "RGB32I",
  "RGB32UI",
  "RGB565",
  "RGB5_A1",
  "RGB8",
  "RGB8I",
  "RGB8UI",
  "RGB8_SNORM",
  "RGB9_E5",
  "RGBA",
  "RGBA16F",
  "RGBA16I",
  "RGBA16UI",
  "RGBA32F",
  "RGBA32I",
  "RGBA32UI",
  "RGBA4",
  "RGBA8",
  "RGBA8I",
  "RGBA8UI",
  "RGBA8_SNORM",
  "RGBA_INTEGER",
  "RGBColor",
  "RGB_INTEGER",
  "RG_INTEGER",
  "ROTATION_CLOCKWISE",
  "ROTATION_COUNTERCLOCKWISE",
  "RTCCertificate",
  "RTCDTMFSender",
  "RTCDTMFToneChangeEvent",
  "RTCDataChannel",
  "RTCDataChannelEvent",
  "RTCDtlsTransport",
  "RTCError",
  "RTCErrorEvent",
  "RTCIceCandidate",
  "RTCIceTransport",
  "RTCPeerConnection",
  "RTCPeerConnectionIceErrorEvent",
  "RTCPeerConnectionIceEvent",
  "RTCRtpReceiver",
  "RTCRtpSender",
  "RTCRtpTransceiver",
  "RTCSctpTransport",
  "RTCSessionDescription",
  "RTCStatsReport",
  "RTCTrackEvent",
  "RadioNodeList",
  "Range",
  "RangeError",
  "RangeException",
  "ReadableStream",
  "ReadableStreamDefaultReader",
  "RecordErrorEvent",
  "Rect",
  "ReferenceError",
  "Reflect",
  "RegExp",
  "RelativeOrientationSensor",
  "RelativeTimeFormat",
  "RemotePlayback",
  "Report",
  "ReportBody",
  "ReportingObserver",
  "Request",
  "ResizeObserver",
  "ResizeObserverEntry",
  "ResizeObserverSize",
  "Response",
  "RuntimeError",
  "SAMPLER_2D",
  "SAMPLER_2D_ARRAY",
  "SAMPLER_2D_ARRAY_SHADOW",
  "SAMPLER_2D_SHADOW",
  "SAMPLER_3D",
  "SAMPLER_BINDING",
  "SAMPLER_CUBE",
  "SAMPLER_CUBE_SHADOW",
  "SAMPLES",
  "SAMPLE_ALPHA_TO_COVERAGE",
  "SAMPLE_BUFFERS",
  "SAMPLE_COVERAGE",
  "SAMPLE_COVERAGE_INVERT",
  "SAMPLE_COVERAGE_VALUE",
  "SAWTOOTH",
  "SCHEDULED_STATE",
  "SCISSOR_BOX",
  "SCISSOR_TEST",
  "SCROLL_PAGE_DOWN",
  "SCROLL_PAGE_UP",
  "SDP_ANSWER",
  "SDP_OFFER",
  "SDP_PRANSWER",
  "SECURITY_ERR",
  "SELECT",
  "SEPARATE_ATTRIBS",
  "SERIALIZE_ERR",
  "SEVERITY_ERROR",
  "SEVERITY_FATAL_ERROR",
  "SEVERITY_WARNING",
  "SHADER_COMPILER",
  "SHADER_TYPE",
  "SHADING_LANGUAGE_VERSION",
  "SHIFT_MASK",
  "SHORT",
  "SHOWING",
  "SHOW_ALL",
  "SHOW_ATTRIBUTE",
  "SHOW_CDATA_SECTION",
  "SHOW_COMMENT",
  "SHOW_DOCUMENT",
  "SHOW_DOCUMENT_FRAGMENT",
  "SHOW_DOCUMENT_TYPE",
  "SHOW_ELEMENT",
  "SHOW_ENTITY",
  "SHOW_ENTITY_REFERENCE",
  "SHOW_NOTATION",
  "SHOW_PROCESSING_INSTRUCTION",
  "SHOW_TEXT",
  "SIGNALED",
  "SIGNED_NORMALIZED",
  "SINE",
  "SOUNDFIELD",
  "SQLException",
  "SQRT1_2",
  "SQRT2",
  "SQUARE",
  "SRC_ALPHA",
  "SRC_ALPHA_SATURATE",
  "SRC_COLOR",
  "SRGB",
  "SRGB8",
  "SRGB8_ALPHA8",
  "START_TO_END",
  "START_TO_START",
  "STATIC_COPY",
  "STATIC_DRAW",
  "STATIC_READ",
  "STENCIL",
  "STENCIL_ATTACHMENT",
  "STENCIL_BACK_FAIL",
  "STENCIL_BACK_FUNC",
  "STENCIL_BACK_PASS_DEPTH_FAIL",
  "STENCIL_BACK_PASS_DEPTH_PASS",
  "STENCIL_BACK_REF",
  "STENCIL_BACK_VALUE_MASK",
  "STENCIL_BACK_WRITEMASK",
  "STENCIL_BITS",
  "STENCIL_BUFFER_BIT",
  "STENCIL_CLEAR_VALUE",
  "STENCIL_FAIL",
  "STENCIL_FUNC",
  "STENCIL_INDEX",
  "STENCIL_INDEX8",
  "STENCIL_PASS_DEPTH_FAIL",
  "STENCIL_PASS_DEPTH_PASS",
  "STENCIL_REF",
  "STENCIL_TEST",
  "STENCIL_VALUE_MASK",
  "STENCIL_WRITEMASK",
  "STREAM_COPY",
  "STREAM_DRAW",
  "STREAM_READ",
  "STRING_TYPE",
  "STYLE_RULE",
  "SUBPIXEL_BITS",
  "SUPPORTS_RULE",
  "SVGAElement",
  "SVGAltGlyphDefElement",
  "SVGAltGlyphElement",
  "SVGAltGlyphItemElement",
  "SVGAngle",
  "SVGAnimateColorElement",
  "SVGAnimateElement",
  "SVGAnimateMotionElement",
  "SVGAnimateTransformElement",
  "SVGAnimatedAngle",
  "SVGAnimatedBoolean",
  "SVGAnimatedEnumeration",
  "SVGAnimatedInteger",
  "SVGAnimatedLength",
  "SVGAnimatedLengthList",
  "SVGAnimatedNumber",
  "SVGAnimatedNumberList",
  "SVGAnimatedPreserveAspectRatio",
  "SVGAnimatedRect",
  "SVGAnimatedString",
  "SVGAnimatedTransformList",
  "SVGAnimationElement",
  "SVGCircleElement",
  "SVGClipPathElement",
  "SVGColor",
  "SVGComponentTransferFunctionElement",
  "SVGCursorElement",
  "SVGDefsElement",
  "SVGDescElement",
  "SVGDiscardElement",
  "SVGDocument",
  "SVGElement",
  "SVGElementInstance",
  "SVGElementInstanceList",
  "SVGEllipseElement",
  "SVGException",
  "SVGFEBlendElement",
  "SVGFEColorMatrixElement",
  "SVGFEComponentTransferElement",
  "SVGFECompositeElement",
  "SVGFEConvolveMatrixElement",
  "SVGFEDiffuseLightingElement",
  "SVGFEDisplacementMapElement",
  "SVGFEDistantLightElement",
  "SVGFEDropShadowElement",
  "SVGFEFloodElement",
  "SVGFEFuncAElement",
  "SVGFEFuncBElement",
  "SVGFEFuncGElement",
  "SVGFEFuncRElement",
  "SVGFEGaussianBlurElement",
  "SVGFEImageElement",
  "SVGFEMergeElement",
  "SVGFEMergeNodeElement",
  "SVGFEMorphologyElement",
  "SVGFEOffsetElement",
  "SVGFEPointLightElement",
  "SVGFESpecularLightingElement",
  "SVGFESpotLightElement",
  "SVGFETileElement",
  "SVGFETurbulenceElement",
  "SVGFilterElement",
  "SVGFontElement",
  "SVGFontFaceElement",
  "SVGFontFaceFormatElement",
  "SVGFontFaceNameElement",
  "SVGFontFaceSrcElement",
  "SVGFontFaceUriElement",
  "SVGForeignObjectElement",
  "SVGGElement",
  "SVGGeometryElement",
  "SVGGlyphElement",
  "SVGGlyphRefElement",
  "SVGGradientElement",
  "SVGGraphicsElement",
  "SVGHKernElement",
  "SVGImageElement",
  "SVGLength",
  "SVGLengthList",
  "SVGLineElement",
  "SVGLinearGradientElement",
  "SVGMPathElement",
  "SVGMarkerElement",
  "SVGMaskElement",
  "SVGMatrix",
  "SVGMetadataElement",
  "SVGMissingGlyphElement",
  "SVGNumber",
  "SVGNumberList",
  "SVGPaint",
  "SVGPathElement",
  "SVGPathSeg",
  "SVGPathSegArcAbs",
  "SVGPathSegArcRel",
  "SVGPathSegClosePath",
  "SVGPathSegCurvetoCubicAbs",
  "SVGPathSegCurvetoCubicRel",
  "SVGPathSegCurvetoCubicSmoothAbs",
  "SVGPathSegCurvetoCubicSmoothRel",
  "SVGPathSegCurvetoQuadraticAbs",
  "SVGPathSegCurvetoQuadraticRel",
  "SVGPathSegCurvetoQuadraticSmoothAbs",
  "SVGPathSegCurvetoQuadraticSmoothRel",
  "SVGPathSegLinetoAbs",
  "SVGPathSegLinetoHorizontalAbs",
  "SVGPathSegLinetoHorizontalRel",
  "SVGPathSegLinetoRel",
  "SVGPathSegLinetoVerticalAbs",
  "SVGPathSegLinetoVerticalRel",
  "SVGPathSegList",
  "SVGPathSegMovetoAbs",
  "SVGPathSegMovetoRel",
  "SVGPatternElement",
  "SVGPoint",
  "SVGPointList",
  "SVGPolygonElement",
  "SVGPolylineElement",
  "SVGPreserveAspectRatio",
  "SVGRadialGradientElement",
  "SVGRect",
  "SVGRectElement",
  "SVGRenderingIntent",
  "SVGSVGElement",
  "SVGScriptElement",
  "SVGSetElement",
  "SVGStopElement",
  "SVGStringList",
  "SVGStyleElement",
  "SVGSwitchElement",
  "SVGSymbolElement",
  "SVGTRefElement",
  "SVGTSpanElement",
  "SVGTextContentElement",
  "SVGTextElement",
  "SVGTextPathElement",
  "SVGTextPositioningElement",
  "SVGTitleElement",
  "SVGTransform",
  "SVGTransformList",
  "SVGUnitTypes",
  "SVGUseElement",
  "SVGVKernElement",
  "SVGViewElement",
  "SVGViewSpec",
  "SVGZoomAndPan",
  "SVGZoomEvent",
  "SVG_ANGLETYPE_DEG",
  "SVG_ANGLETYPE_GRAD",
  "SVG_ANGLETYPE_RAD",
  "SVG_ANGLETYPE_UNKNOWN",
  "SVG_ANGLETYPE_UNSPECIFIED",
  "SVG_CHANNEL_A",
  "SVG_CHANNEL_B",
  "SVG_CHANNEL_G",
  "SVG_CHANNEL_R",
  "SVG_CHANNEL_UNKNOWN",
  "SVG_COLORTYPE_CURRENTCOLOR",
  "SVG_COLORTYPE_RGBCOLOR",
  "SVG_COLORTYPE_RGBCOLOR_ICCCOLOR",
  "SVG_COLORTYPE_UNKNOWN",
  "SVG_EDGEMODE_DUPLICATE",
  "SVG_EDGEMODE_NONE",
  "SVG_EDGEMODE_UNKNOWN",
  "SVG_EDGEMODE_WRAP",
  "SVG_FEBLEND_MODE_COLOR",
  "SVG_FEBLEND_MODE_COLOR_BURN",
  "SVG_FEBLEND_MODE_COLOR_DODGE",
  "SVG_FEBLEND_MODE_DARKEN",
  "SVG_FEBLEND_MODE_DIFFERENCE",
  "SVG_FEBLEND_MODE_EXCLUSION",
  "SVG_FEBLEND_MODE_HARD_LIGHT",
  "SVG_FEBLEND_MODE_HUE",
  "SVG_FEBLEND_MODE_LIGHTEN",
  "SVG_FEBLEND_MODE_LUMINOSITY",
  "SVG_FEBLEND_MODE_MULTIPLY",
  "SVG_FEBLEND_MODE_NORMAL",
  "SVG_FEBLEND_MODE_OVERLAY",
  "SVG_FEBLEND_MODE_SATURATION",
  "SVG_FEBLEND_MODE_SCREEN",
  "SVG_FEBLEND_MODE_SOFT_LIGHT",
  "SVG_FEBLEND_MODE_UNKNOWN",
  "SVG_FECOLORMATRIX_TYPE_HUEROTATE",
  "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA",
  "SVG_FECOLORMATRIX_TYPE_MATRIX",
  "SVG_FECOLORMATRIX_TYPE_SATURATE",
  "SVG_FECOLORMATRIX_TYPE_UNKNOWN",
  "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE",
  "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA",
  "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY",
  "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR",
  "SVG_FECOMPONENTTRANSFER_TYPE_TABLE",
  "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN",
  "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC",
  "SVG_FECOMPOSITE_OPERATOR_ATOP",
  "SVG_FECOMPOSITE_OPERATOR_IN",
  "SVG_FECOMPOSITE_OPERATOR_OUT",
  "SVG_FECOMPOSITE_OPERATOR_OVER",
  "SVG_FECOMPOSITE_OPERATOR_UNKNOWN",
  "SVG_FECOMPOSITE_OPERATOR_XOR",
  "SVG_INVALID_VALUE_ERR",
  "SVG_LENGTHTYPE_CM",
  "SVG_LENGTHTYPE_EMS",
  "SVG_LENGTHTYPE_EXS",
  "SVG_LENGTHTYPE_IN",
  "SVG_LENGTHTYPE_MM",
  "SVG_LENGTHTYPE_NUMBER",
  "SVG_LENGTHTYPE_PC",
  "SVG_LENGTHTYPE_PERCENTAGE",
  "SVG_LENGTHTYPE_PT",
  "SVG_LENGTHTYPE_PX",
  "SVG_LENGTHTYPE_UNKNOWN",
  "SVG_MARKERUNITS_STROKEWIDTH",
  "SVG_MARKERUNITS_UNKNOWN",
  "SVG_MARKERUNITS_USERSPACEONUSE",
  "SVG_MARKER_ORIENT_ANGLE",
  "SVG_MARKER_ORIENT_AUTO",
  "SVG_MARKER_ORIENT_UNKNOWN",
  "SVG_MASKTYPE_ALPHA",
  "SVG_MASKTYPE_LUMINANCE",
  "SVG_MATRIX_NOT_INVERTABLE",
  "SVG_MEETORSLICE_MEET",
  "SVG_MEETORSLICE_SLICE",
  "SVG_MEETORSLICE_UNKNOWN",
  "SVG_MORPHOLOGY_OPERATOR_DILATE",
  "SVG_MORPHOLOGY_OPERATOR_ERODE",
  "SVG_MORPHOLOGY_OPERATOR_UNKNOWN",
  "SVG_PAINTTYPE_CURRENTCOLOR",
  "SVG_PAINTTYPE_NONE",
  "SVG_PAINTTYPE_RGBCOLOR",
  "SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR",
  "SVG_PAINTTYPE_UNKNOWN",
  "SVG_PAINTTYPE_URI",
  "SVG_PAINTTYPE_URI_CURRENTCOLOR",
  "SVG_PAINTTYPE_URI_NONE",
  "SVG_PAINTTYPE_URI_RGBCOLOR",
  "SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR",
  "SVG_PRESERVEASPECTRATIO_NONE",
  "SVG_PRESERVEASPECTRATIO_UNKNOWN",
  "SVG_PRESERVEASPECTRATIO_XMAXYMAX",
  "SVG_PRESERVEASPECTRATIO_XMAXYMID",
  "SVG_PRESERVEASPECTRATIO_XMAXYMIN",
  "SVG_PRESERVEASPECTRATIO_XMIDYMAX",
  "SVG_PRESERVEASPECTRATIO_XMIDYMID",
  "SVG_PRESERVEASPECTRATIO_XMIDYMIN",
  "SVG_PRESERVEASPECTRATIO_XMINYMAX",
  "SVG_PRESERVEASPECTRATIO_XMINYMID",
  "SVG_PRESERVEASPECTRATIO_XMINYMIN",
  "SVG_SPREADMETHOD_PAD",
  "SVG_SPREADMETHOD_REFLECT",
  "SVG_SPREADMETHOD_REPEAT",
  "SVG_SPREADMETHOD_UNKNOWN",
  "SVG_STITCHTYPE_NOSTITCH",
  "SVG_STITCHTYPE_STITCH",
  "SVG_STITCHTYPE_UNKNOWN",
  "SVG_TRANSFORM_MATRIX",
  "SVG_TRANSFORM_ROTATE",
  "SVG_TRANSFORM_SCALE",
  "SVG_TRANSFORM_SKEWX",
  "SVG_TRANSFORM_SKEWY",
  "SVG_TRANSFORM_TRANSLATE",
  "SVG_TRANSFORM_UNKNOWN",
  "SVG_TURBULENCE_TYPE_FRACTALNOISE",
  "SVG_TURBULENCE_TYPE_TURBULENCE",
  "SVG_TURBULENCE_TYPE_UNKNOWN",
  "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX",
  "SVG_UNIT_TYPE_UNKNOWN",
  "SVG_UNIT_TYPE_USERSPACEONUSE",
  "SVG_WRONG_TYPE_ERR",
  "SVG_ZOOMANDPAN_DISABLE",
  "SVG_ZOOMANDPAN_MAGNIFY",
  "SVG_ZOOMANDPAN_UNKNOWN",
  "SYNC_CONDITION",
  "SYNC_FENCE",
  "SYNC_FLAGS",
  "SYNC_FLUSH_COMMANDS_BIT",
  "SYNC_GPU_COMMANDS_COMPLETE",
  "SYNC_STATUS",
  "SYNTAX_ERR",
  "SavedPages",
  "Screen",
  "ScreenOrientation",
  "Script",
  "ScriptProcessorNode",
  "ScrollAreaEvent",
  "SecurityPolicyViolationEvent",
  "Selection",
  "Sensor",
  "SensorErrorEvent",
  "ServiceWorker",
  "ServiceWorkerContainer",
  "ServiceWorkerRegistration",
  "SessionDescription",
  "Set",
  "ShadowRoot",
  "SharedArrayBuffer",
  "SharedWorker",
  "SimpleGestureEvent",
  "SourceBuffer",
  "SourceBufferList",
  "SpeechSynthesis",
  "SpeechSynthesisErrorEvent",
  "SpeechSynthesisEvent",
  "SpeechSynthesisUtterance",
  "SpeechSynthesisVoice",
  "StaticRange",
  "StereoPannerNode",
  "StopIteration",
  "Storage",
  "StorageEvent",
  "StorageManager",
  "String",
  "StructType",
  "StylePropertyMap",
  "StylePropertyMapReadOnly",
  "StyleSheet",
  "StyleSheetList",
  "SubmitEvent",
  "SubtleCrypto",
  "Symbol",
  "SyncManager",
  "SyntaxError",
  "TEMPORARY",
  "TEXTPATH_METHODTYPE_ALIGN",
  "TEXTPATH_METHODTYPE_STRETCH",
  "TEXTPATH_METHODTYPE_UNKNOWN",
  "TEXTPATH_SPACINGTYPE_AUTO",
  "TEXTPATH_SPACINGTYPE_EXACT",
  "TEXTPATH_SPACINGTYPE_UNKNOWN",
  "TEXTURE",
  "TEXTURE0",
  "TEXTURE1",
  "TEXTURE10",
  "TEXTURE11",
  "TEXTURE12",
  "TEXTURE13",
  "TEXTURE14",
  "TEXTURE15",
  "TEXTURE16",
  "TEXTURE17",
  "TEXTURE18",
  "TEXTURE19",
  "TEXTURE2",
  "TEXTURE20",
  "TEXTURE21",
  "TEXTURE22",
  "TEXTURE23",
  "TEXTURE24",
  "TEXTURE25",
  "TEXTURE26",
  "TEXTURE27",
  "TEXTURE28",
  "TEXTURE29",
  "TEXTURE3",
  "TEXTURE30",
  "TEXTURE31",
  "TEXTURE4",
  "TEXTURE5",
  "TEXTURE6",
  "TEXTURE7",
  "TEXTURE8",
  "TEXTURE9",
  "TEXTURE_2D",
  "TEXTURE_2D_ARRAY",
  "TEXTURE_3D",
  "TEXTURE_BASE_LEVEL",
  "TEXTURE_BINDING_2D",
  "TEXTURE_BINDING_2D_ARRAY",
  "TEXTURE_BINDING_3D",
  "TEXTURE_BINDING_CUBE_MAP",
  "TEXTURE_COMPARE_FUNC",
  "TEXTURE_COMPARE_MODE",
  "TEXTURE_CUBE_MAP",
  "TEXTURE_CUBE_MAP_NEGATIVE_X",
  "TEXTURE_CUBE_MAP_NEGATIVE_Y",
  "TEXTURE_CUBE_MAP_NEGATIVE_Z",
  "TEXTURE_CUBE_MAP_POSITIVE_X",
  "TEXTURE_CUBE_MAP_POSITIVE_Y",
  "TEXTURE_CUBE_MAP_POSITIVE_Z",
  "TEXTURE_IMMUTABLE_FORMAT",
  "TEXTURE_IMMUTABLE_LEVELS",
  "TEXTURE_MAG_FILTER",
  "TEXTURE_MAX_ANISOTROPY_EXT",
  "TEXTURE_MAX_LEVEL",
  "TEXTURE_MAX_LOD",
  "TEXTURE_MIN_FILTER",
  "TEXTURE_MIN_LOD",
  "TEXTURE_WRAP_R",
  "TEXTURE_WRAP_S",
  "TEXTURE_WRAP_T",
  "TEXT_NODE",
  "TIMEOUT",
  "TIMEOUT_ERR",
  "TIMEOUT_EXPIRED",
  "TIMEOUT_IGNORED",
  "TOO_LARGE_ERR",
  "TRANSACTION_INACTIVE_ERR",
  "TRANSFORM_FEEDBACK",
  "TRANSFORM_FEEDBACK_ACTIVE",
  "TRANSFORM_FEEDBACK_BINDING",
  "TRANSFORM_FEEDBACK_BUFFER",
  "TRANSFORM_FEEDBACK_BUFFER_BINDING",
  "TRANSFORM_FEEDBACK_BUFFER_MODE",
  "TRANSFORM_FEEDBACK_BUFFER_SIZE",
  "TRANSFORM_FEEDBACK_BUFFER_START",
  "TRANSFORM_FEEDBACK_PAUSED",
  "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",
  "TRANSFORM_FEEDBACK_VARYINGS",
  "TRIANGLE",
  "TRIANGLES",
  "TRIANGLE_FAN",
  "TRIANGLE_STRIP",
  "TYPE_BACK_FORWARD",
  "TYPE_ERR",
  "TYPE_MISMATCH_ERR",
  "TYPE_NAVIGATE",
  "TYPE_RELOAD",
  "TYPE_RESERVED",
  "Table",
  "TaskAttributionTiming",
  "Text",
  "TextDecoder",
  "TextDecoderStream",
  "TextEncoder",
  "TextEncoderStream",
  "TextEvent",
  "TextMetrics",
  "TextTrack",
  "TextTrackCue",
  "TextTrackCueList",
  "TextTrackList",
  "TimeEvent",
  "TimeRanges",
  "Touch",
  "TouchEvent",
  "TouchList",
  "TrackEvent",
  "TransformStream",
  "TransitionEvent",
  "TreeWalker",
  "TrustedHTML",
  "TrustedScript",
  "TrustedScriptURL",
  "TrustedTypePolicy",
  "TrustedTypePolicyFactory",
  "TypeError",
  "TypedObject",
  "U2F",
  "UIEvent",
  "UNCACHED",
  "UNIFORM_ARRAY_STRIDE",
  "UNIFORM_BLOCK_ACTIVE_UNIFORMS",
  "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",
  "UNIFORM_BLOCK_BINDING",
  "UNIFORM_BLOCK_DATA_SIZE",
  "UNIFORM_BLOCK_INDEX",
  "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",
  "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",
  "UNIFORM_BUFFER",
  "UNIFORM_BUFFER_BINDING",
  "UNIFORM_BUFFER_OFFSET_ALIGNMENT",
  "UNIFORM_BUFFER_SIZE",
  "UNIFORM_BUFFER_START",
  "UNIFORM_IS_ROW_MAJOR",
  "UNIFORM_MATRIX_STRIDE",
  "UNIFORM_OFFSET",
  "UNIFORM_SIZE",
  "UNIFORM_TYPE",
  "UNKNOWN_ERR",
  "UNKNOWN_RULE",
  "UNMASKED_RENDERER_WEBGL",
  "UNMASKED_VENDOR_WEBGL",
  "UNORDERED_NODE_ITERATOR_TYPE",
  "UNORDERED_NODE_SNAPSHOT_TYPE",
  "UNPACK_ALIGNMENT",
  "UNPACK_COLORSPACE_CONVERSION_WEBGL",
  "UNPACK_FLIP_Y_WEBGL",
  "UNPACK_IMAGE_HEIGHT",
  "UNPACK_PREMULTIPLY_ALPHA_WEBGL",
  "UNPACK_ROW_LENGTH",
  "UNPACK_SKIP_IMAGES",
  "UNPACK_SKIP_PIXELS",
  "UNPACK_SKIP_ROWS",
  "UNSCHEDULED_STATE",
  "UNSENT",
  "UNSIGNALED",
  "UNSIGNED_BYTE",
  "UNSIGNED_INT",
  "UNSIGNED_INT_10F_11F_11F_REV",
  "UNSIGNED_INT_24_8",
  "UNSIGNED_INT_2_10_10_10_REV",
  "UNSIGNED_INT_5_9_9_9_REV",
  "UNSIGNED_INT_SAMPLER_2D",
  "UNSIGNED_INT_SAMPLER_2D_ARRAY",
  "UNSIGNED_INT_SAMPLER_3D",
  "UNSIGNED_INT_SAMPLER_CUBE",
  "UNSIGNED_INT_VEC2",
  "UNSIGNED_INT_VEC3",
  "UNSIGNED_INT_VEC4",
  "UNSIGNED_NORMALIZED",
  "UNSIGNED_SHORT",
  "UNSIGNED_SHORT_4_4_4_4",
  "UNSIGNED_SHORT_5_5_5_1",
  "UNSIGNED_SHORT_5_6_5",
  "UNSPECIFIED_EVENT_TYPE_ERR",
  "UPDATEREADY",
  "URIError",
  "URL",
  "URLSearchParams",
  "URLUnencoded",
  "URL_MISMATCH_ERR",
  "USB",
  "USBAlternateInterface",
  "USBConfiguration",
  "USBConnectionEvent",
  "USBDevice",
  "USBEndpoint",
  "USBInTransferResult",
  "USBInterface",
  "USBIsochronousInTransferPacket",
  "USBIsochronousInTransferResult",
  "USBIsochronousOutTransferPacket",
  "USBIsochronousOutTransferResult",
  "USBOutTransferResult",
  "UTC",
  "Uint16Array",
  "Uint32Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "UserActivation",
  "UserMessageHandler",
  "UserMessageHandlersNamespace",
  "UserProximityEvent",
  "VALIDATE_STATUS",
  "VALIDATION_ERR",
  "VARIABLES_RULE",
  "VENDOR",
  "VERSION",
  "VERSION_CHANGE",
  "VERSION_ERR",
  "VERTEX_ARRAY_BINDING",
  "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
  "VERTEX_ATTRIB_ARRAY_DIVISOR",
  "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE",
  "VERTEX_ATTRIB_ARRAY_ENABLED",
  "VERTEX_ATTRIB_ARRAY_INTEGER",
  "VERTEX_ATTRIB_ARRAY_NORMALIZED",
  "VERTEX_ATTRIB_ARRAY_POINTER",
  "VERTEX_ATTRIB_ARRAY_SIZE",
  "VERTEX_ATTRIB_ARRAY_STRIDE",
  "VERTEX_ATTRIB_ARRAY_TYPE",
  "VERTEX_SHADER",
  "VERTICAL",
  "VERTICAL_AXIS",
  "VER_ERR",
  "VIEWPORT",
  "VIEWPORT_RULE",
  "VRDisplay",
  "VRDisplayCapabilities",
  "VRDisplayEvent",
  "VREyeParameters",
  "VRFieldOfView",
  "VRFrameData",
  "VRPose",
  "VRStageParameters",
  "VTTCue",
  "VTTRegion",
  "ValidityState",
  "VideoPlaybackQuality",
  "VideoStreamTrack",
  "VisualViewport",
  "WAIT_FAILED",
  "WEBKIT_FILTER_RULE",
  "WEBKIT_KEYFRAMES_RULE",
  "WEBKIT_KEYFRAME_RULE",
  "WEBKIT_REGION_RULE",
  "WRONG_DOCUMENT_ERR",
  "WakeLock",
  "WakeLockSentinel",
  "WasmAnyRef",
  "WaveShaperNode",
  "WeakMap",
  "WeakRef",
  "WeakSet",
  "WebAssembly",
  "WebGL2RenderingContext",
  "WebGLActiveInfo",
  "WebGLBuffer",
  "WebGLContextEvent",
  "WebGLFramebuffer",
  "WebGLProgram",
  "WebGLQuery",
  "WebGLRenderbuffer",
  "WebGLRenderingContext",
  "WebGLSampler",
  "WebGLShader",
  "WebGLShaderPrecisionFormat",
  "WebGLSync",
  "WebGLTexture",
  "WebGLTransformFeedback",
  "WebGLUniformLocation",
  "WebGLVertexArray",
  "WebGLVertexArrayObject",
  "WebKitAnimationEvent",
  "WebKitBlobBuilder",
  "WebKitCSSFilterRule",
  "WebKitCSSFilterValue",
  "WebKitCSSKeyframeRule",
  "WebKitCSSKeyframesRule",
  "WebKitCSSMatrix",
  "WebKitCSSRegionRule",
  "WebKitCSSTransformValue",
  "WebKitDataCue",
  "WebKitGamepad",
  "WebKitMediaKeyError",
  "WebKitMediaKeyMessageEvent",
  "WebKitMediaKeySession",
  "WebKitMediaKeys",
  "WebKitMediaSource",
  "WebKitMutationObserver",
  "WebKitNamespace",
  "WebKitPlaybackTargetAvailabilityEvent",
  "WebKitPoint",
  "WebKitShadowRoot",
  "WebKitSourceBuffer",
  "WebKitSourceBufferList",
  "WebKitTransitionEvent",
  "WebSocket",
  "WebkitAlignContent",
  "WebkitAlignItems",
  "WebkitAlignSelf",
  "WebkitAnimation",
  "WebkitAnimationDelay",
  "WebkitAnimationDirection",
  "WebkitAnimationDuration",
  "WebkitAnimationFillMode",
  "WebkitAnimationIterationCount",
  "WebkitAnimationName",
  "WebkitAnimationPlayState",
  "WebkitAnimationTimingFunction",
  "WebkitAppearance",
  "WebkitBackfaceVisibility",
  "WebkitBackgroundClip",
  "WebkitBackgroundOrigin",
  "WebkitBackgroundSize",
  "WebkitBorderBottomLeftRadius",
  "WebkitBorderBottomRightRadius",
  "WebkitBorderImage",
  "WebkitBorderRadius",
  "WebkitBorderTopLeftRadius",
  "WebkitBorderTopRightRadius",
  "WebkitBoxAlign",
  "WebkitBoxDirection",
  "WebkitBoxFlex",
  "WebkitBoxOrdinalGroup",
  "WebkitBoxOrient",
  "WebkitBoxPack",
  "WebkitBoxShadow",
  "WebkitBoxSizing",
  "WebkitFilter",
  "WebkitFlex",
  "WebkitFlexBasis",
  "WebkitFlexDirection",
  "WebkitFlexFlow",
  "WebkitFlexGrow",
  "WebkitFlexShrink",
  "WebkitFlexWrap",
  "WebkitJustifyContent",
  "WebkitLineClamp",
  "WebkitMask",
  "WebkitMaskClip",
  "WebkitMaskComposite",
  "WebkitMaskImage",
  "WebkitMaskOrigin",
  "WebkitMaskPosition",
  "WebkitMaskPositionX",
  "WebkitMaskPositionY",
  "WebkitMaskRepeat",
  "WebkitMaskSize",
  "WebkitOrder",
  "WebkitPerspective",
  "WebkitPerspectiveOrigin",
  "WebkitTextFillColor",
  "WebkitTextSizeAdjust",
  "WebkitTextStroke",
  "WebkitTextStrokeColor",
  "WebkitTextStrokeWidth",
  "WebkitTransform",
  "WebkitTransformOrigin",
  "WebkitTransformStyle",
  "WebkitTransition",
  "WebkitTransitionDelay",
  "WebkitTransitionDuration",
  "WebkitTransitionProperty",
  "WebkitTransitionTimingFunction",
  "WebkitUserSelect",
  "WheelEvent",
  "Window",
  "Worker",
  "Worklet",
  "WritableStream",
  "WritableStreamDefaultWriter",
  "XMLDocument",
  "XMLHttpRequest",
  "XMLHttpRequestEventTarget",
  "XMLHttpRequestException",
  "XMLHttpRequestProgressEvent",
  "XMLHttpRequestUpload",
  "XMLSerializer",
  "XMLStylesheetProcessingInstruction",
  "XPathEvaluator",
  "XPathException",
  "XPathExpression",
  "XPathNSResolver",
  "XPathResult",
  "XRBoundedReferenceSpace",
  "XRDOMOverlayState",
  "XRFrame",
  "XRHitTestResult",
  "XRHitTestSource",
  "XRInputSource",
  "XRInputSourceArray",
  "XRInputSourceEvent",
  "XRInputSourcesChangeEvent",
  "XRLayer",
  "XRPose",
  "XRRay",
  "XRReferenceSpace",
  "XRReferenceSpaceEvent",
  "XRRenderState",
  "XRRigidTransform",
  "XRSession",
  "XRSessionEvent",
  "XRSpace",
  "XRSystem",
  "XRTransientInputHitTestResult",
  "XRTransientInputHitTestSource",
  "XRView",
  "XRViewerPose",
  "XRViewport",
  "XRWebGLLayer",
  "XSLTProcessor",
  "ZERO",
  "_XD0M_",
  "_YD0M_",
  "__defineGetter__",
  "__defineSetter__",
  "__lookupGetter__",
  "__lookupSetter__",
  "__opera",
  "__proto__",
  "_browserjsran",
  "a",
  "aLink",
  "abbr",
  "abort",
  "aborted",
  "abs",
  "absolute",
  "acceleration",
  "accelerationIncludingGravity",
  "accelerator",
  "accept",
  "acceptCharset",
  "acceptNode",
  "accessKey",
  "accessKeyLabel",
  "accuracy",
  "acos",
  "acosh",
  "action",
  "actionURL",
  "actions",
  "activated",
  "active",
  "activeCues",
  "activeElement",
  "activeSourceBuffers",
  "activeSourceCount",
  "activeTexture",
  "activeVRDisplays",
  "actualBoundingBoxAscent",
  "actualBoundingBoxDescent",
  "actualBoundingBoxLeft",
  "actualBoundingBoxRight",
  "add",
  "addAll",
  "addBehavior",
  "addCandidate",
  "addColorStop",
  "addCue",
  "addElement",
  "addEventListener",
  "addFilter",
  "addFromString",
  "addFromUri",
  "addIceCandidate",
  "addImport",
  "addListener",
  "addModule",
  "addNamed",
  "addPageRule",
  "addPath",
  "addPointer",
  "addRange",
  "addRegion",
  "addRule",
  "addSearchEngine",
  "addSourceBuffer",
  "addStream",
  "addTextTrack",
  "addTrack",
  "addTransceiver",
  "addWakeLockListener",
  "added",
  "addedNodes",
  "additionalName",
  "additiveSymbols",
  "addons",
  "address",
  "addressLine",
  "adoptNode",
  "adoptedStyleSheets",
  "adr",
  "advance",
  "after",
  "album",
  "alert",
  "algorithm",
  "align",
  "align-content",
  "align-items",
  "align-self",
  "alignContent",
  "alignItems",
  "alignSelf",
  "alignmentBaseline",
  "alinkColor",
  "all",
  "allSettled",
  "allow",
  "allowFullscreen",
  "allowPaymentRequest",
  "allowedDirections",
  "allowedFeatures",
  "allowedToPlay",
  "allowsFeature",
  "alpha",
  "alt",
  "altGraphKey",
  "altHtml",
  "altKey",
  "altLeft",
  "alternate",
  "alternateSetting",
  "alternates",
  "altitude",
  "altitudeAccuracy",
  "amplitude",
  "ancestorOrigins",
  "anchor",
  "anchorNode",
  "anchorOffset",
  "anchors",
  "and",
  "angle",
  "angularAcceleration",
  "angularVelocity",
  "animVal",
  "animate",
  "animatedInstanceRoot",
  "animatedNormalizedPathSegList",
  "animatedPathSegList",
  "animatedPoints",
  "animation",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-timing-function",
  "animationDelay",
  "animationDirection",
  "animationDuration",
  "animationFillMode",
  "animationIterationCount",
  "animationName",
  "animationPlayState",
  "animationStartTime",
  "animationTimingFunction",
  "animationsPaused",
  "anniversary",
  "antialias",
  "anticipatedRemoval",
  "any",
  "app",
  "appCodeName",
  "appMinorVersion",
  "appName",
  "appNotifications",
  "appVersion",
  "appearance",
  "append",
  "appendBuffer",
  "appendChild",
  "appendData",
  "appendItem",
  "appendMedium",
  "appendNamed",
  "appendRule",
  "appendStream",
  "appendWindowEnd",
  "appendWindowStart",
  "applets",
  "applicationCache",
  "applicationServerKey",
  "apply",
  "applyConstraints",
  "applyElement",
  "arc",
  "arcTo",
  "architecture",
  "archive",
  "areas",
  "arguments",
  "ariaAtomic",
  "ariaAutoComplete",
  "ariaBusy",
  "ariaChecked",
  "ariaColCount",
  "ariaColIndex",
  "ariaColSpan",
  "ariaCurrent",
  "ariaDescription",
  "ariaDisabled",
  "ariaExpanded",
  "ariaHasPopup",
  "ariaHidden",
  "ariaKeyShortcuts",
  "ariaLabel",
  "ariaLevel",
  "ariaLive",
  "ariaModal",
  "ariaMultiLine",
  "ariaMultiSelectable",
  "ariaOrientation",
  "ariaPlaceholder",
  "ariaPosInSet",
  "ariaPressed",
  "ariaReadOnly",
  "ariaRelevant",
  "ariaRequired",
  "ariaRoleDescription",
  "ariaRowCount",
  "ariaRowIndex",
  "ariaRowSpan",
  "ariaSelected",
  "ariaSetSize",
  "ariaSort",
  "ariaValueMax",
  "ariaValueMin",
  "ariaValueNow",
  "ariaValueText",
  "arrayBuffer",
  "artist",
  "artwork",
  "as",
  "asIntN",
  "asUintN",
  "asin",
  "asinh",
  "assert",
  "assign",
  "assignedElements",
  "assignedNodes",
  "assignedSlot",
  "async",
  "asyncIterator",
  "atEnd",
  "atan",
  "atan2",
  "atanh",
  "atob",
  "attachEvent",
  "attachInternals",
  "attachShader",
  "attachShadow",
  "attachments",
  "attack",
  "attestationObject",
  "attrChange",
  "attrName",
  "attributeFilter",
  "attributeName",
  "attributeNamespace",
  "attributeOldValue",
  "attributeStyleMap",
  "attributes",
  "attribution",
  "audioBitsPerSecond",
  "audioTracks",
  "audioWorklet",
  "authenticatedSignedWrites",
  "authenticatorData",
  "autoIncrement",
  "autobuffer",
  "autocapitalize",
  "autocomplete",
  "autocorrect",
  "autofocus",
  "automationRate",
  "autoplay",
  "availHeight",
  "availLeft",
  "availTop",
  "availWidth",
  "availability",
  "available",
  "aversion",
  "ax",
  "axes",
  "axis",
  "ay",
  "azimuth",
  "b",
  "back",
  "backface-visibility",
  "backfaceVisibility",
  "background",
  "background-attachment",
  "background-blend-mode",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-position-x",
  "background-position-y",
  "background-repeat",
  "background-size",
  "backgroundAttachment",
  "backgroundBlendMode",
  "backgroundClip",
  "backgroundColor",
  "backgroundFetch",
  "backgroundImage",
  "backgroundOrigin",
  "backgroundPosition",
  "backgroundPositionX",
  "backgroundPositionY",
  "backgroundRepeat",
  "backgroundSize",
  "badInput",
  "badge",
  "balance",
  "baseFrequencyX",
  "baseFrequencyY",
  "baseLatency",
  "baseLayer",
  "baseNode",
  "baseOffset",
  "baseURI",
  "baseVal",
  "baselineShift",
  "battery",
  "bday",
  "before",
  "beginElement",
  "beginElementAt",
  "beginPath",
  "beginQuery",
  "beginTransformFeedback",
  "behavior",
  "behaviorCookie",
  "behaviorPart",
  "behaviorUrns",
  "beta",
  "bezierCurveTo",
  "bgColor",
  "bgProperties",
  "bias",
  "big",
  "bigint64",
  "biguint64",
  "binaryType",
  "bind",
  "bindAttribLocation",
  "bindBuffer",
  "bindBufferBase",
  "bindBufferRange",
  "bindFramebuffer",
  "bindRenderbuffer",
  "bindSampler",
  "bindTexture",
  "bindTransformFeedback",
  "bindVertexArray",
  "bitness",
  "blendColor",
  "blendEquation",
  "blendEquationSeparate",
  "blendFunc",
  "blendFuncSeparate",
  "blink",
  "blitFramebuffer",
  "blob",
  "block-size",
  "blockDirection",
  "blockSize",
  "blockedURI",
  "blue",
  "bluetooth",
  "blur",
  "body",
  "bodyUsed",
  "bold",
  "bookmarks",
  "booleanValue",
  "border",
  "border-block",
  "border-block-color",
  "border-block-end",
  "border-block-end-color",
  "border-block-end-style",
  "border-block-end-width",
  "border-block-start",
  "border-block-start-color",
  "border-block-start-style",
  "border-block-start-width",
  "border-block-style",
  "border-block-width",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-end-end-radius",
  "border-end-start-radius",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-inline",
  "border-inline-color",
  "border-inline-end",
  "border-inline-end-color",
  "border-inline-end-style",
  "border-inline-end-width",
  "border-inline-start",
  "border-inline-start-color",
  "border-inline-start-style",
  "border-inline-start-width",
  "border-inline-style",
  "border-inline-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-start-end-radius",
  "border-start-start-radius",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "borderBlock",
  "borderBlockColor",
  "borderBlockEnd",
  "borderBlockEndColor",
  "borderBlockEndStyle",
  "borderBlockEndWidth",
  "borderBlockStart",
  "borderBlockStartColor",
  "borderBlockStartStyle",
  "borderBlockStartWidth",
  "borderBlockStyle",
  "borderBlockWidth",
  "borderBottom",
  "borderBottomColor",
  "borderBottomLeftRadius",
  "borderBottomRightRadius",
  "borderBottomStyle",
  "borderBottomWidth",
  "borderBoxSize",
  "borderCollapse",
  "borderColor",
  "borderColorDark",
  "borderColorLight",
  "borderEndEndRadius",
  "borderEndStartRadius",
  "borderImage",
  "borderImageOutset",
  "borderImageRepeat",
  "borderImageSlice",
  "borderImageSource",
  "borderImageWidth",
  "borderInline",
  "borderInlineColor",
  "borderInlineEnd",
  "borderInlineEndColor",
  "borderInlineEndStyle",
  "borderInlineEndWidth",
  "borderInlineStart",
  "borderInlineStartColor",
  "borderInlineStartStyle",
  "borderInlineStartWidth",
  "borderInlineStyle",
  "borderInlineWidth",
  "borderLeft",
  "borderLeftColor",
  "borderLeftStyle",
  "borderLeftWidth",
  "borderRadius",
  "borderRight",
  "borderRightColor",
  "borderRightStyle",
  "borderRightWidth",
  "borderSpacing",
  "borderStartEndRadius",
  "borderStartStartRadius",
  "borderStyle",
  "borderTop",
  "borderTopColor",
  "borderTopLeftRadius",
  "borderTopRightRadius",
  "borderTopStyle",
  "borderTopWidth",
  "borderWidth",
  "bottom",
  "bottomMargin",
  "bound",
  "boundElements",
  "boundingClientRect",
  "boundingHeight",
  "boundingLeft",
  "boundingTop",
  "boundingWidth",
  "bounds",
  "boundsGeometry",
  "box-decoration-break",
  "box-shadow",
  "box-sizing",
  "boxDecorationBreak",
  "boxShadow",
  "boxSizing",
  "brand",
  "brands",
  "break-after",
  "break-before",
  "break-inside",
  "breakAfter",
  "breakBefore",
  "breakInside",
  "broadcast",
  "browserLanguage",
  "btoa",
  "bubbles",
  "buffer",
  "bufferData",
  "bufferDepth",
  "bufferSize",
  "bufferSubData",
  "buffered",
  "bufferedAmount",
  "bufferedAmountLowThreshold",
  "buildID",
  "buildNumber",
  "button",
  "buttonID",
  "buttons",
  "byteLength",
  "byteOffset",
  "bytesWritten",
  "c",
  "cache",
  "caches",
  "call",
  "caller",
  "canBeFormatted",
  "canBeMounted",
  "canBeShared",
  "canHaveChildren",
  "canHaveHTML",
  "canInsertDTMF",
  "canMakePayment",
  "canPlayType",
  "canPresent",
  "canTrickleIceCandidates",
  "cancel",
  "cancelAndHoldAtTime",
  "cancelAnimationFrame",
  "cancelBubble",
  "cancelIdleCallback",
  "cancelScheduledValues",
  "cancelVideoFrameCallback",
  "cancelWatchAvailability",
  "cancelable",
  "candidate",
  "canonicalUUID",
  "canvas",
  "capabilities",
  "caption",
  "caption-side",
  "captionSide",
  "capture",
  "captureEvents",
  "captureStackTrace",
  "captureStream",
  "caret-color",
  "caretBidiLevel",
  "caretColor",
  "caretPositionFromPoint",
  "caretRangeFromPoint",
  "cast",
  "catch",
  "category",
  "cbrt",
  "cd",
  "ceil",
  "cellIndex",
  "cellPadding",
  "cellSpacing",
  "cells",
  "ch",
  "chOff",
  "chain",
  "challenge",
  "changeType",
  "changedTouches",
  "channel",
  "channelCount",
  "channelCountMode",
  "channelInterpretation",
  "char",
  "charAt",
  "charCode",
  "charCodeAt",
  "charIndex",
  "charLength",
  "characterData",
  "characterDataOldValue",
  "characterSet",
  "characteristic",
  "charging",
  "chargingTime",
  "charset",
  "check",
  "checkEnclosure",
  "checkFramebufferStatus",
  "checkIntersection",
  "checkValidity",
  "checked",
  "childElementCount",
  "childList",
  "childNodes",
  "children",
  "chrome",
  "ciphertext",
  "cite",
  "city",
  "claimInterface",
  "claimed",
  "classList",
  "className",
  "classid",
  "clear",
  "clearAppBadge",
  "clearAttributes",
  "clearBufferfi",
  "clearBufferfv",
  "clearBufferiv",
  "clearBufferuiv",
  "clearColor",
  "clearData",
  "clearDepth",
  "clearHalt",
  "clearImmediate",
  "clearInterval",
  "clearLiveSeekableRange",
  "clearMarks",
  "clearMaxGCPauseAccumulator",
  "clearMeasures",
  "clearParameters",
  "clearRect",
  "clearResourceTimings",
  "clearShadow",
  "clearStencil",
  "clearTimeout",
  "clearWatch",
  "click",
  "clickCount",
  "clientDataJSON",
  "clientHeight",
  "clientInformation",
  "clientLeft",
  "clientRect",
  "clientRects",
  "clientTop",
  "clientWaitSync",
  "clientWidth",
  "clientX",
  "clientY",
  "clip",
  "clip-path",
  "clip-rule",
  "clipBottom",
  "clipLeft",
  "clipPath",
  "clipPathUnits",
  "clipRight",
  "clipRule",
  "clipTop",
  "clipboard",
  "clipboardData",
  "clone",
  "cloneContents",
  "cloneNode",
  "cloneRange",
  "close",
  "closePath",
  "closed",
  "closest",
  "clz",
  "clz32",
  "cm",
  "cmp",
  "code",
  "codeBase",
  "codePointAt",
  "codeType",
  "colSpan",
  "collapse",
  "collapseToEnd",
  "collapseToStart",
  "collapsed",
  "collect",
  "colno",
  "color",
  "color-adjust",
  "color-interpolation",
  "color-interpolation-filters",
  "colorAdjust",
  "colorDepth",
  "colorInterpolation",
  "colorInterpolationFilters",
  "colorMask",
  "colorType",
  "cols",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columnCount",
  "columnFill",
  "columnGap",
  "columnNumber",
  "columnRule",
  "columnRuleColor",
  "columnRuleStyle",
  "columnRuleWidth",
  "columnSpan",
  "columnWidth",
  "columns",
  "command",
  "commit",
  "commitPreferences",
  "commitStyles",
  "commonAncestorContainer",
  "compact",
  "compareBoundaryPoints",
  "compareDocumentPosition",
  "compareEndPoints",
  "compareExchange",
  "compareNode",
  "comparePoint",
  "compatMode",
  "compatible",
  "compile",
  "compileShader",
  "compileStreaming",
  "complete",
  "component",
  "componentFromPoint",
  "composed",
  "composedPath",
  "composite",
  "compositionEndOffset",
  "compositionStartOffset",
  "compressedTexImage2D",
  "compressedTexImage3D",
  "compressedTexSubImage2D",
  "compressedTexSubImage3D",
  "computedStyleMap",
  "concat",
  "conditionText",
  "coneInnerAngle",
  "coneOuterAngle",
  "coneOuterGain",
  "configuration",
  "configurationName",
  "configurationValue",
  "configurations",
  "confirm",
  "confirmComposition",
  "confirmSiteSpecificTrackingException",
  "confirmWebWideTrackingException",
  "connect",
  "connectEnd",
  "connectShark",
  "connectStart",
  "connected",
  "connection",
  "connectionList",
  "connectionSpeed",
  "connectionState",
  "connections",
  "console",
  "consolidate",
  "constraint",
  "constrictionActive",
  "construct",
  "constructor",
  "contactID",
  "contain",
  "containerId",
  "containerName",
  "containerSrc",
  "containerType",
  "contains",
  "containsNode",
  "content",
  "contentBoxSize",
  "contentDocument",
  "contentEditable",
  "contentHint",
  "contentOverflow",
  "contentRect",
  "contentScriptType",
  "contentStyleType",
  "contentType",
  "contentWindow",
  "context",
  "contextMenu",
  "contextmenu",
  "continue",
  "continuePrimaryKey",
  "continuous",
  "control",
  "controlTransferIn",
  "controlTransferOut",
  "controller",
  "controls",
  "controlsList",
  "convertPointFromNode",
  "convertQuadFromNode",
  "convertRectFromNode",
  "convertToBlob",
  "convertToSpecifiedUnits",
  "cookie",
  "cookieEnabled",
  "coords",
  "copyBufferSubData",
  "copyFromChannel",
  "copyTexImage2D",
  "copyTexSubImage2D",
  "copyTexSubImage3D",
  "copyToChannel",
  "copyWithin",
  "correspondingElement",
  "correspondingUseElement",
  "corruptedVideoFrames",
  "cos",
  "cosh",
  "count",
  "countReset",
  "counter-increment",
  "counter-reset",
  "counter-set",
  "counterIncrement",
  "counterReset",
  "counterSet",
  "country",
  "cpuClass",
  "cpuSleepAllowed",
  "create",
  "createAnalyser",
  "createAnswer",
  "createAttribute",
  "createAttributeNS",
  "createBiquadFilter",
  "createBuffer",
  "createBufferSource",
  "createCDATASection",
  "createCSSStyleSheet",
  "createCaption",
  "createChannelMerger",
  "createChannelSplitter",
  "createComment",
  "createConstantSource",
  "createContextualFragment",
  "createControlRange",
  "createConvolver",
  "createDTMFSender",
  "createDataChannel",
  "createDelay",
  "createDelayNode",
  "createDocument",
  "createDocumentFragment",
  "createDocumentType",
  "createDynamicsCompressor",
  "createElement",
  "createElementNS",
  "createEntityReference",
  "createEvent",
  "createEventObject",
  "createExpression",
  "createFramebuffer",
  "createFunction",
  "createGain",
  "createGainNode",
  "createHTML",
  "createHTMLDocument",
  "createIIRFilter",
  "createImageBitmap",
  "createImageData",
  "createIndex",
  "createJavaScriptNode",
  "createLinearGradient",
  "createMediaElementSource",
  "createMediaKeys",
  "createMediaStreamDestination",
  "createMediaStreamSource",
  "createMediaStreamTrackSource",
  "createMutableFile",
  "createNSResolver",
  "createNodeIterator",
  "createNotification",
  "createObjectStore",
  "createObjectURL",
  "createOffer",
  "createOscillator",
  "createPanner",
  "createPattern",
  "createPeriodicWave",
  "createPolicy",
  "createPopup",
  "createProcessingInstruction",
  "createProgram",
  "createQuery",
  "createRadialGradient",
  "createRange",
  "createRangeCollection",
  "createReader",
  "createRenderbuffer",
  "createSVGAngle",
  "createSVGLength",
  "createSVGMatrix",
  "createSVGNumber",
  "createSVGPathSegArcAbs",
  "createSVGPathSegArcRel",
  "createSVGPathSegClosePath",
  "createSVGPathSegCurvetoCubicAbs",
  "createSVGPathSegCurvetoCubicRel",
  "createSVGPathSegCurvetoCubicSmoothAbs",
  "createSVGPathSegCurvetoCubicSmoothRel",
  "createSVGPathSegCurvetoQuadraticAbs",
  "createSVGPathSegCurvetoQuadraticRel",
  "createSVGPathSegCurvetoQuadraticSmoothAbs",
  "createSVGPathSegCurvetoQuadraticSmoothRel",
  "createSVGPathSegLinetoAbs",
  "createSVGPathSegLinetoHorizontalAbs",
  "createSVGPathSegLinetoHorizontalRel",
  "createSVGPathSegLinetoRel",
  "createSVGPathSegLinetoVerticalAbs",
  "createSVGPathSegLinetoVerticalRel",
  "createSVGPathSegMovetoAbs",
  "createSVGPathSegMovetoRel",
  "createSVGPoint",
  "createSVGRect",
  "createSVGTransform",
  "createSVGTransformFromMatrix",
  "createSampler",
  "createScript",
  "createScriptProcessor",
  "createScriptURL",
  "createSession",
  "createShader",
  "createShadowRoot",
  "createStereoPanner",
  "createStyleSheet",
  "createTBody",
  "createTFoot",
  "createTHead",
  "createTextNode",
  "createTextRange",
  "createTexture",
  "createTouch",
  "createTouchList",
  "createTransformFeedback",
  "createTreeWalker",
  "createVertexArray",
  "createWaveShaper",
  "creationTime",
  "credentials",
  "crossOrigin",
  "crossOriginIsolated",
  "crypto",
  "csi",
  "csp",
  "cssFloat",
  "cssRules",
  "cssText",
  "cssValueType",
  "ctrlKey",
  "ctrlLeft",
  "cues",
  "cullFace",
  "currentDirection",
  "currentLocalDescription",
  "currentNode",
  "currentPage",
  "currentRect",
  "currentRemoteDescription",
  "currentScale",
  "currentScript",
  "currentSrc",
  "currentState",
  "currentStyle",
  "currentTarget",
  "currentTime",
  "currentTranslate",
  "currentView",
  "cursor",
  "curve",
  "customElements",
  "customError",
  "cx",
  "cy",
  "d",
  "data",
  "dataFld",
  "dataFormatAs",
  "dataLoss",
  "dataLossMessage",
  "dataPageSize",
  "dataSrc",
  "dataTransfer",
  "database",
  "databases",
  "dataset",
  "dateTime",
  "db",
  "debug",
  "debuggerEnabled",
  "declare",
  "decode",
  "decodeAudioData",
  "decodeURI",
  "decodeURIComponent",
  "decodedBodySize",
  "decoding",
  "decodingInfo",
  "decrypt",
  "default",
  "defaultCharset",
  "defaultChecked",
  "defaultMuted",
  "defaultPlaybackRate",
  "defaultPolicy",
  "defaultPrevented",
  "defaultRequest",
  "defaultSelected",
  "defaultStatus",
  "defaultURL",
  "defaultValue",
  "defaultView",
  "defaultstatus",
  "defer",
  "define",
  "defineMagicFunction",
  "defineMagicVariable",
  "defineProperties",
  "defineProperty",
  "deg",
  "delay",
  "delayTime",
  "delegatesFocus",
  "delete",
  "deleteBuffer",
  "deleteCaption",
  "deleteCell",
  "deleteContents",
  "deleteData",
  "deleteDatabase",
  "deleteFramebuffer",
  "deleteFromDocument",
  "deleteIndex",
  "deleteMedium",
  "deleteObjectStore",
  "deleteProgram",
  "deleteProperty",
  "deleteQuery",
  "deleteRenderbuffer",
  "deleteRow",
  "deleteRule",
  "deleteSampler",
  "deleteShader",
  "deleteSync",
  "deleteTFoot",
  "deleteTHead",
  "deleteTexture",
  "deleteTransformFeedback",
  "deleteVertexArray",
  "deliverChangeRecords",
  "delivery",
  "deliveryInfo",
  "deliveryStatus",
  "deliveryTimestamp",
  "delta",
  "deltaMode",
  "deltaX",
  "deltaY",
  "deltaZ",
  "dependentLocality",
  "depthFar",
  "depthFunc",
  "depthMask",
  "depthNear",
  "depthRange",
  "deref",
  "deriveBits",
  "deriveKey",
  "description",
  "deselectAll",
  "designMode",
  "desiredSize",
  "destination",
  "destinationURL",
  "detach",
  "detachEvent",
  "detachShader",
  "detail",
  "details",
  "detect",
  "detune",
  "device",
  "deviceClass",
  "deviceId",
  "deviceMemory",
  "devicePixelContentBoxSize",
  "devicePixelRatio",
  "deviceProtocol",
  "deviceSubclass",
  "deviceVersionMajor",
  "deviceVersionMinor",
  "deviceVersionSubminor",
  "deviceXDPI",
  "deviceYDPI",
  "didTimeout",
  "diffuseConstant",
  "digest",
  "dimensions",
  "dir",
  "dirName",
  "direction",
  "dirxml",
  "disable",
  "disablePictureInPicture",
  "disableRemotePlayback",
  "disableVertexAttribArray",
  "disabled",
  "dischargingTime",
  "disconnect",
  "disconnectShark",
  "dispatchEvent",
  "display",
  "displayId",
  "displayName",
  "disposition",
  "distanceModel",
  "div",
  "divisor",
  "djsapi",
  "djsproxy",
  "doImport",
  "doNotTrack",
  "doScroll",
  "doctype",
  "document",
  "documentElement",
  "documentMode",
  "documentURI",
  "dolphin",
  "dolphinGameCenter",
  "dolphininfo",
  "dolphinmeta",
  "domComplete",
  "domContentLoadedEventEnd",
  "domContentLoadedEventStart",
  "domInteractive",
  "domLoading",
  "domOverlayState",
  "domain",
  "domainLookupEnd",
  "domainLookupStart",
  "dominant-baseline",
  "dominantBaseline",
  "done",
  "dopplerFactor",
  "dotAll",
  "downDegrees",
  "downlink",
  "download",
  "downloadTotal",
  "downloaded",
  "dpcm",
  "dpi",
  "dppx",
  "dragDrop",
  "draggable",
  "drawArrays",
  "drawArraysInstanced",
  "drawArraysInstancedANGLE",
  "drawBuffers",
  "drawCustomFocusRing",
  "drawElements",
  "drawElementsInstanced",
  "drawElementsInstancedANGLE",
  "drawFocusIfNeeded",
  "drawImage",
  "drawImageFromRect",
  "drawRangeElements",
  "drawSystemFocusRing",
  "drawingBufferHeight",
  "drawingBufferWidth",
  "dropEffect",
  "droppedVideoFrames",
  "dropzone",
  "dtmf",
  "dump",
  "dumpProfile",
  "duplicate",
  "durability",
  "duration",
  "dvname",
  "dvnum",
  "dx",
  "dy",
  "dynsrc",
  "e",
  "edgeMode",
  "effect",
  "effectAllowed",
  "effectiveDirective",
  "effectiveType",
  "elapsedTime",
  "element",
  "elementFromPoint",
  "elementTiming",
  "elements",
  "elementsFromPoint",
  "elevation",
  "ellipse",
  "em",
  "email",
  "embeds",
  "emma",
  "empty",
  "empty-cells",
  "emptyCells",
  "emptyHTML",
  "emptyScript",
  "emulatedPosition",
  "enable",
  "enableBackground",
  "enableDelegations",
  "enableStyleSheetsForSet",
  "enableVertexAttribArray",
  "enabled",
  "enabledPlugin",
  "encode",
  "encodeInto",
  "encodeURI",
  "encodeURIComponent",
  "encodedBodySize",
  "encoding",
  "encodingInfo",
  "encrypt",
  "enctype",
  "end",
  "endContainer",
  "endElement",
  "endElementAt",
  "endOfStream",
  "endOffset",
  "endQuery",
  "endTime",
  "endTransformFeedback",
  "ended",
  "endpoint",
  "endpointNumber",
  "endpoints",
  "endsWith",
  "enterKeyHint",
  "entities",
  "entries",
  "entryType",
  "enumerate",
  "enumerateDevices",
  "enumerateEditable",
  "environmentBlendMode",
  "equals",
  "error",
  "errorCode",
  "errorDetail",
  "errorText",
  "escape",
  "estimate",
  "eval",
  "evaluate",
  "event",
  "eventPhase",
  "every",
  "ex",
  "exception",
  "exchange",
  "exec",
  "execCommand",
  "execCommandShowHelp",
  "execScript",
  "exitFullscreen",
  "exitPictureInPicture",
  "exitPointerLock",
  "exitPresent",
  "exp",
  "expand",
  "expandEntityReferences",
  "expando",
  "expansion",
  "expiration",
  "expirationTime",
  "expires",
  "expiryDate",
  "explicitOriginalTarget",
  "expm1",
  "exponent",
  "exponentialRampToValueAtTime",
  "exportKey",
  "exports",
  "extend",
  "extensions",
  "extentNode",
  "extentOffset",
  "external",
  "externalResourcesRequired",
  "extractContents",
  "extractable",
  "eye",
  "f",
  "face",
  "factoryReset",
  "failureReason",
  "fallback",
  "family",
  "familyName",
  "farthestViewportElement",
  "fastSeek",
  "fatal",
  "featureId",
  "featurePolicy",
  "featureSettings",
  "features",
  "fenceSync",
  "fetch",
  "fetchStart",
  "fftSize",
  "fgColor",
  "fieldOfView",
  "file",
  "fileCreatedDate",
  "fileHandle",
  "fileModifiedDate",
  "fileName",
  "fileSize",
  "fileUpdatedDate",
  "filename",
  "files",
  "filesystem",
  "fill",
  "fill-opacity",
  "fill-rule",
  "fillLightMode",
  "fillOpacity",
  "fillRect",
  "fillRule",
  "fillStyle",
  "fillText",
  "filter",
  "filterResX",
  "filterResY",
  "filterUnits",
  "filters",
  "finally",
  "find",
  "findIndex",
  "findRule",
  "findText",
  "finish",
  "finished",
  "fireEvent",
  "firesTouchEvents",
  "firstChild",
  "firstElementChild",
  "firstPage",
  "fixed",
  "flags",
  "flat",
  "flatMap",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "flexBasis",
  "flexDirection",
  "flexFlow",
  "flexGrow",
  "flexShrink",
  "flexWrap",
  "flipX",
  "flipY",
  "float",
  "float32",
  "float64",
  "flood-color",
  "flood-opacity",
  "floodColor",
  "floodOpacity",
  "floor",
  "flush",
  "focus",
  "focusNode",
  "focusOffset",
  "font",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-optical-sizing",
  "font-size",
  "font-size-adjust",
  "font-stretch",
  "font-style",
  "font-synthesis",
  "font-variant",
  "font-variant-alternates",
  "font-variant-caps",
  "font-variant-east-asian",
  "font-variant-ligatures",
  "font-variant-numeric",
  "font-variant-position",
  "font-variation-settings",
  "font-weight",
  "fontFamily",
  "fontFeatureSettings",
  "fontKerning",
  "fontLanguageOverride",
  "fontOpticalSizing",
  "fontSize",
  "fontSizeAdjust",
  "fontSmoothingEnabled",
  "fontStretch",
  "fontStyle",
  "fontSynthesis",
  "fontVariant",
  "fontVariantAlternates",
  "fontVariantCaps",
  "fontVariantEastAsian",
  "fontVariantLigatures",
  "fontVariantNumeric",
  "fontVariantPosition",
  "fontVariationSettings",
  "fontWeight",
  "fontcolor",
  "fontfaces",
  "fonts",
  "fontsize",
  "for",
  "forEach",
  "force",
  "forceRedraw",
  "form",
  "formAction",
  "formData",
  "formEnctype",
  "formMethod",
  "formNoValidate",
  "formTarget",
  "format",
  "formatToParts",
  "forms",
  "forward",
  "forwardX",
  "forwardY",
  "forwardZ",
  "foundation",
  "fr",
  "fragmentDirective",
  "frame",
  "frameBorder",
  "frameElement",
  "frameSpacing",
  "framebuffer",
  "framebufferHeight",
  "framebufferRenderbuffer",
  "framebufferTexture2D",
  "framebufferTextureLayer",
  "framebufferWidth",
  "frames",
  "freeSpace",
  "freeze",
  "frequency",
  "frequencyBinCount",
  "from",
  "fromCharCode",
  "fromCodePoint",
  "fromElement",
  "fromEntries",
  "fromFloat32Array",
  "fromFloat64Array",
  "fromMatrix",
  "fromPoint",
  "fromQuad",
  "fromRect",
  "frontFace",
  "fround",
  "fullPath",
  "fullScreen",
  "fullVersionList",
  "fullscreen",
  "fullscreenElement",
  "fullscreenEnabled",
  "fx",
  "fy",
  "gain",
  "gamepad",
  "gamma",
  "gap",
  "gatheringState",
  "gatt",
  "genderIdentity",
  "generateCertificate",
  "generateKey",
  "generateMipmap",
  "generateRequest",
  "geolocation",
  "gestureObject",
  "get",
  "getActiveAttrib",
  "getActiveUniform",
  "getActiveUniformBlockName",
  "getActiveUniformBlockParameter",
  "getActiveUniforms",
  "getAdjacentText",
  "getAll",
  "getAllKeys",
  "getAllResponseHeaders",
  "getAllowlistForFeature",
  "getAnimations",
  "getAsFile",
  "getAsString",
  "getAttachedShaders",
  "getAttribLocation",
  "getAttribute",
  "getAttributeNS",
  "getAttributeNames",
  "getAttributeNode",
  "getAttributeNodeNS",
  "getAttributeType",
  "getAudioTracks",
  "getAvailability",
  "getBBox",
  "getBattery",
  "getBigInt64",
  "getBigUint64",
  "getBlob",
  "getBookmark",
  "getBoundingClientRect",
  "getBounds",
  "getBoxQuads",
  "getBufferParameter",
  "getBufferSubData",
  "getByteFrequencyData",
  "getByteTimeDomainData",
  "getCSSCanvasContext",
  "getCTM",
  "getCandidateWindowClientRect",
  "getCanonicalLocales",
  "getCapabilities",
  "getChannelData",
  "getCharNumAtPosition",
  "getCharacteristic",
  "getCharacteristics",
  "getClientExtensionResults",
  "getClientRect",
  "getClientRects",
  "getCoalescedEvents",
  "getCompositionAlternatives",
  "getComputedStyle",
  "getComputedTextLength",
  "getComputedTiming",
  "getConfiguration",
  "getConstraints",
  "getContext",
  "getContextAttributes",
  "getContributingSources",
  "getCounterValue",
  "getCueAsHTML",
  "getCueById",
  "getCurrentPosition",
  "getCurrentTime",
  "getData",
  "getDatabaseNames",
  "getDate",
  "getDay",
  "getDefaultComputedStyle",
  "getDescriptor",
  "getDescriptors",
  "getDestinationInsertionPoints",
  "getDevices",
  "getDirectory",
  "getDisplayMedia",
  "getDistributedNodes",
  "getEditable",
  "getElementById",
  "getElementsByClassName",
  "getElementsByName",
  "getElementsByTagName",
  "getElementsByTagNameNS",
  "getEnclosureList",
  "getEndPositionOfChar",
  "getEntries",
  "getEntriesByName",
  "getEntriesByType",
  "getError",
  "getExtension",
  "getExtentOfChar",
  "getEyeParameters",
  "getFeature",
  "getFile",
  "getFiles",
  "getFilesAndDirectories",
  "getFingerprints",
  "getFloat32",
  "getFloat64",
  "getFloatFrequencyData",
  "getFloatTimeDomainData",
  "getFloatValue",
  "getFragDataLocation",
  "getFrameData",
  "getFramebufferAttachmentParameter",
  "getFrequencyResponse",
  "getFullYear",
  "getGamepads",
  "getHighEntropyValues",
  "getHitTestResults",
  "getHitTestResultsForTransientInput",
  "getHours",
  "getIdentityAssertion",
  "getIds",
  "getImageData",
  "getIndexedParameter",
  "getInstalledRelatedApps",
  "getInt16",
  "getInt32",
  "getInt8",
  "getInternalformatParameter",
  "getIntersectionList",
  "getItem",
  "getItems",
  "getKey",
  "getKeyframes",
  "getLayers",
  "getLayoutMap",
  "getLineDash",
  "getLocalCandidates",
  "getLocalParameters",
  "getLocalStreams",
  "getMarks",
  "getMatchedCSSRules",
  "getMaxGCPauseSinceClear",
  "getMeasures",
  "getMetadata",
  "getMilliseconds",
  "getMinutes",
  "getModifierState",
  "getMonth",
  "getNamedItem",
  "getNamedItemNS",
  "getNativeFramebufferScaleFactor",
  "getNotifications",
  "getNotifier",
  "getNumberOfChars",
  "getOffsetReferenceSpace",
  "getOutputTimestamp",
  "getOverrideHistoryNavigationMode",
  "getOverrideStyle",
  "getOwnPropertyDescriptor",
  "getOwnPropertyDescriptors",
  "getOwnPropertyNames",
  "getOwnPropertySymbols",
  "getParameter",
  "getParameters",
  "getParent",
  "getPathSegAtLength",
  "getPhotoCapabilities",
  "getPhotoSettings",
  "getPointAtLength",
  "getPose",
  "getPredictedEvents",
  "getPreference",
  "getPreferenceDefault",
  "getPresentationAttribute",
  "getPreventDefault",
  "getPrimaryService",
  "getPrimaryServices",
  "getProgramInfoLog",
  "getProgramParameter",
  "getPropertyCSSValue",
  "getPropertyPriority",
  "getPropertyShorthand",
  "getPropertyType",
  "getPropertyValue",
  "getPrototypeOf",
  "getQuery",
  "getQueryParameter",
  "getRGBColorValue",
  "getRandomValues",
  "getRangeAt",
  "getReader",
  "getReceivers",
  "getRectValue",
  "getRegistration",
  "getRegistrations",
  "getRemoteCandidates",
  "getRemoteCertificates",
  "getRemoteParameters",
  "getRemoteStreams",
  "getRenderbufferParameter",
  "getResponseHeader",
  "getRoot",
  "getRootNode",
  "getRotationOfChar",
  "getSVGDocument",
  "getSamplerParameter",
  "getScreenCTM",
  "getSeconds",
  "getSelectedCandidatePair",
  "getSelection",
  "getSenders",
  "getService",
  "getSettings",
  "getShaderInfoLog",
  "getShaderParameter",
  "getShaderPrecisionFormat",
  "getShaderSource",
  "getSimpleDuration",
  "getSiteIcons",
  "getSources",
  "getSpeculativeParserUrls",
  "getStartPositionOfChar",
  "getStartTime",
  "getState",
  "getStats",
  "getStatusForPolicy",
  "getStorageUpdates",
  "getStreamById",
  "getStringValue",
  "getSubStringLength",
  "getSubscription",
  "getSupportedConstraints",
  "getSupportedExtensions",
  "getSupportedFormats",
  "getSyncParameter",
  "getSynchronizationSources",
  "getTags",
  "getTargetRanges",
  "getTexParameter",
  "getTime",
  "getTimezoneOffset",
  "getTiming",
  "getTotalLength",
  "getTrackById",
  "getTracks",
  "getTransceivers",
  "getTransform",
  "getTransformFeedbackVarying",
  "getTransformToElement",
  "getTransports",
  "getType",
  "getTypeMapping",
  "getUTCDate",
  "getUTCDay",
  "getUTCFullYear",
  "getUTCHours",
  "getUTCMilliseconds",
  "getUTCMinutes",
  "getUTCMonth",
  "getUTCSeconds",
  "getUint16",
  "getUint32",
  "getUint8",
  "getUniform",
  "getUniformBlockIndex",
  "getUniformIndices",
  "getUniformLocation",
  "getUserMedia",
  "getVRDisplays",
  "getValues",
  "getVarDate",
  "getVariableValue",
  "getVertexAttrib",
  "getVertexAttribOffset",
  "getVideoPlaybackQuality",
  "getVideoTracks",
  "getViewerPose",
  "getViewport",
  "getVoices",
  "getWakeLockState",
  "getWriter",
  "getYear",
  "givenName",
  "global",
  "globalAlpha",
  "globalCompositeOperation",
  "globalThis",
  "glyphOrientationHorizontal",
  "glyphOrientationVertical",
  "glyphRef",
  "go",
  "grabFrame",
  "grad",
  "gradientTransform",
  "gradientUnits",
  "grammars",
  "green",
  "grid",
  "grid-area",
  "grid-auto-columns",
  "grid-auto-flow",
  "grid-auto-rows",
  "grid-column",
  "grid-column-end",
  "grid-column-gap",
  "grid-column-start",
  "grid-gap",
  "grid-row",
  "grid-row-end",
  "grid-row-gap",
  "grid-row-start",
  "grid-template",
  "grid-template-areas",
  "grid-template-columns",
  "grid-template-rows",
  "gridArea",
  "gridAutoColumns",
  "gridAutoFlow",
  "gridAutoRows",
  "gridColumn",
  "gridColumnEnd",
  "gridColumnGap",
  "gridColumnStart",
  "gridGap",
  "gridRow",
  "gridRowEnd",
  "gridRowGap",
  "gridRowStart",
  "gridTemplate",
  "gridTemplateAreas",
  "gridTemplateColumns",
  "gridTemplateRows",
  "gripSpace",
  "group",
  "groupCollapsed",
  "groupEnd",
  "groupId",
  "hadRecentInput",
  "hand",
  "handedness",
  "hapticActuators",
  "hardwareConcurrency",
  "has",
  "hasAttribute",
  "hasAttributeNS",
  "hasAttributes",
  "hasBeenActive",
  "hasChildNodes",
  "hasComposition",
  "hasEnrolledInstrument",
  "hasExtension",
  "hasExternalDisplay",
  "hasFeature",
  "hasFocus",
  "hasInstance",
  "hasLayout",
  "hasOrientation",
  "hasOwnProperty",
  "hasPointerCapture",
  "hasPosition",
  "hasReading",
  "hasStorageAccess",
  "hash",
  "head",
  "headers",
  "heading",
  "height",
  "hidden",
  "hide",
  "hideFocus",
  "high",
  "highWaterMark",
  "hint",
  "history",
  "honorificPrefix",
  "honorificSuffix",
  "horizontalOverflow",
  "host",
  "hostCandidate",
  "hostname",
  "href",
  "hrefTranslate",
  "hreflang",
  "hspace",
  "html5TagCheckInerface",
  "htmlFor",
  "htmlText",
  "httpEquiv",
  "httpRequestStatusCode",
  "hwTimestamp",
  "hyphens",
  "hypot",
  "iccId",
  "iceConnectionState",
  "iceGatheringState",
  "iceTransport",
  "icon",
  "iconURL",
  "id",
  "identifier",
  "identity",
  "idpLoginUrl",
  "ignoreBOM",
  "ignoreCase",
  "ignoreDepthValues",
  "image-orientation",
  "image-rendering",
  "imageHeight",
  "imageOrientation",
  "imageRendering",
  "imageSizes",
  "imageSmoothingEnabled",
  "imageSmoothingQuality",
  "imageSrcset",
  "imageWidth",
  "images",
  "ime-mode",
  "imeMode",
  "implementation",
  "importKey",
  "importNode",
  "importStylesheet",
  "imports",
  "impp",
  "imul",
  "in",
  "in1",
  "in2",
  "inBandMetadataTrackDispatchType",
  "inRange",
  "includes",
  "incremental",
  "indeterminate",
  "index",
  "indexNames",
  "indexOf",
  "indexedDB",
  "indicate",
  "inertiaDestinationX",
  "inertiaDestinationY",
  "info",
  "init",
  "initAnimationEvent",
  "initBeforeLoadEvent",
  "initClipboardEvent",
  "initCloseEvent",
  "initCommandEvent",
  "initCompositionEvent",
  "initCustomEvent",
  "initData",
  "initDataType",
  "initDeviceMotionEvent",
  "initDeviceOrientationEvent",
  "initDragEvent",
  "initErrorEvent",
  "initEvent",
  "initFocusEvent",
  "initGestureEvent",
  "initHashChangeEvent",
  "initKeyEvent",
  "initKeyboardEvent",
  "initMSManipulationEvent",
  "initMessageEvent",
  "initMouseEvent",
  "initMouseScrollEvent",
  "initMouseWheelEvent",
  "initMutationEvent",
  "initNSMouseEvent",
  "initOverflowEvent",
  "initPageEvent",
  "initPageTransitionEvent",
  "initPointerEvent",
  "initPopStateEvent",
  "initProgressEvent",
  "initScrollAreaEvent",
  "initSimpleGestureEvent",
  "initStorageEvent",
  "initTextEvent",
  "initTimeEvent",
  "initTouchEvent",
  "initTransitionEvent",
  "initUIEvent",
  "initWebKitAnimationEvent",
  "initWebKitTransitionEvent",
  "initWebKitWheelEvent",
  "initWheelEvent",
  "initialTime",
  "initialize",
  "initiatorType",
  "inline-size",
  "inlineSize",
  "inlineVerticalFieldOfView",
  "inner",
  "innerHTML",
  "innerHeight",
  "innerText",
  "innerWidth",
  "input",
  "inputBuffer",
  "inputEncoding",
  "inputMethod",
  "inputMode",
  "inputSource",
  "inputSources",
  "inputType",
  "inputs",
  "insertAdjacentElement",
  "insertAdjacentHTML",
  "insertAdjacentText",
  "insertBefore",
  "insertCell",
  "insertDTMF",
  "insertData",
  "insertItemBefore",
  "insertNode",
  "insertRow",
  "insertRule",
  "inset",
  "inset-block",
  "inset-block-end",
  "inset-block-start",
  "inset-inline",
  "inset-inline-end",
  "inset-inline-start",
  "insetBlock",
  "insetBlockEnd",
  "insetBlockStart",
  "insetInline",
  "insetInlineEnd",
  "insetInlineStart",
  "installing",
  "instanceRoot",
  "instantiate",
  "instantiateStreaming",
  "instruments",
  "int16",
  "int32",
  "int8",
  "integrity",
  "interactionMode",
  "intercept",
  "interfaceClass",
  "interfaceName",
  "interfaceNumber",
  "interfaceProtocol",
  "interfaceSubclass",
  "interfaces",
  "interimResults",
  "internalSubset",
  "interpretation",
  "intersectionRatio",
  "intersectionRect",
  "intersectsNode",
  "interval",
  "invalidIteratorState",
  "invalidateFramebuffer",
  "invalidateSubFramebuffer",
  "inverse",
  "invertSelf",
  "is",
  "is2D",
  "isActive",
  "isAlternate",
  "isArray",
  "isBingCurrentSearchDefault",
  "isBuffer",
  "isCandidateWindowVisible",
  "isChar",
  "isCollapsed",
  "isComposing",
  "isConcatSpreadable",
  "isConnected",
  "isContentEditable",
  "isContentHandlerRegistered",
  "isContextLost",
  "isDefaultNamespace",
  "isDirectory",
  "isDisabled",
  "isEnabled",
  "isEqual",
  "isEqualNode",
  "isExtensible",
  "isExternalCTAP2SecurityKeySupported",
  "isFile",
  "isFinite",
  "isFramebuffer",
  "isFrozen",
  "isGenerator",
  "isHTML",
  "isHistoryNavigation",
  "isId",
  "isIdentity",
  "isInjected",
  "isInteger",
  "isIntersecting",
  "isLockFree",
  "isMap",
  "isMultiLine",
  "isNaN",
  "isOpen",
  "isPointInFill",
  "isPointInPath",
  "isPointInRange",
  "isPointInStroke",
  "isPrefAlternate",
  "isPresenting",
  "isPrimary",
  "isProgram",
  "isPropertyImplicit",
  "isProtocolHandlerRegistered",
  "isPrototypeOf",
  "isQuery",
  "isRenderbuffer",
  "isSafeInteger",
  "isSameNode",
  "isSampler",
  "isScript",
  "isScriptURL",
  "isSealed",
  "isSecureContext",
  "isSessionSupported",
  "isShader",
  "isSupported",
  "isSync",
  "isTextEdit",
  "isTexture",
  "isTransformFeedback",
  "isTrusted",
  "isTypeSupported",
  "isUserVerifyingPlatformAuthenticatorAvailable",
  "isVertexArray",
  "isView",
  "isVisible",
  "isochronousTransferIn",
  "isochronousTransferOut",
  "isolation",
  "italics",
  "item",
  "itemId",
  "itemProp",
  "itemRef",
  "itemScope",
  "itemType",
  "itemValue",
  "items",
  "iterateNext",
  "iterationComposite",
  "iterator",
  "javaEnabled",
  "jobTitle",
  "join",
  "json",
  "justify-content",
  "justify-items",
  "justify-self",
  "justifyContent",
  "justifyItems",
  "justifySelf",
  "k1",
  "k2",
  "k3",
  "k4",
  "kHz",
  "keepalive",
  "kernelMatrix",
  "kernelUnitLengthX",
  "kernelUnitLengthY",
  "kerning",
  "key",
  "keyCode",
  "keyFor",
  "keyIdentifier",
  "keyLightEnabled",
  "keyLocation",
  "keyPath",
  "keyStatuses",
  "keySystem",
  "keyText",
  "keyUsage",
  "keyboard",
  "keys",
  "keytype",
  "kind",
  "knee",
  "label",
  "labels",
  "lang",
  "language",
  "languages",
  "largeArcFlag",
  "lastChild",
  "lastElementChild",
  "lastEventId",
  "lastIndex",
  "lastIndexOf",
  "lastInputTime",
  "lastMatch",
  "lastMessageSubject",
  "lastMessageType",
  "lastModified",
  "lastModifiedDate",
  "lastPage",
  "lastParen",
  "lastState",
  "lastStyleSheetSet",
  "latitude",
  "layerX",
  "layerY",
  "layoutFlow",
  "layoutGrid",
  "layoutGridChar",
  "layoutGridLine",
  "layoutGridMode",
  "layoutGridType",
  "lbound",
  "left",
  "leftContext",
  "leftDegrees",
  "leftMargin",
  "leftProjectionMatrix",
  "leftViewMatrix",
  "length",
  "lengthAdjust",
  "lengthComputable",
  "letter-spacing",
  "letterSpacing",
  "level",
  "lighting-color",
  "lightingColor",
  "limitingConeAngle",
  "line",
  "line-break",
  "line-height",
  "lineAlign",
  "lineBreak",
  "lineCap",
  "lineDashOffset",
  "lineHeight",
  "lineJoin",
  "lineNumber",
  "lineTo",
  "lineWidth",
  "linearAcceleration",
  "linearRampToValueAtTime",
  "linearVelocity",
  "lineno",
  "lines",
  "link",
  "linkColor",
  "linkProgram",
  "links",
  "list",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "listStyle",
  "listStyleImage",
  "listStylePosition",
  "listStyleType",
  "listener",
  "load",
  "loadEventEnd",
  "loadEventStart",
  "loadTime",
  "loadTimes",
  "loaded",
  "loading",
  "localDescription",
  "localName",
  "localService",
  "localStorage",
  "locale",
  "localeCompare",
  "location",
  "locationbar",
  "lock",
  "locked",
  "lockedFile",
  "locks",
  "log",
  "log10",
  "log1p",
  "log2",
  "logicalXDPI",
  "logicalYDPI",
  "longDesc",
  "longitude",
  "lookupNamespaceURI",
  "lookupPrefix",
  "loop",
  "loopEnd",
  "loopStart",
  "looping",
  "low",
  "lower",
  "lowerBound",
  "lowerOpen",
  "lowsrc",
  "m11",
  "m12",
  "m13",
  "m14",
  "m21",
  "m22",
  "m23",
  "m24",
  "m31",
  "m32",
  "m33",
  "m34",
  "m41",
  "m42",
  "m43",
  "m44",
  "makeXRCompatible",
  "manifest",
  "manufacturer",
  "manufacturerName",
  "map",
  "mapping",
  "margin",
  "margin-block",
  "margin-block-end",
  "margin-block-start",
  "margin-bottom",
  "margin-inline",
  "margin-inline-end",
  "margin-inline-start",
  "margin-left",
  "margin-right",
  "margin-top",
  "marginBlock",
  "marginBlockEnd",
  "marginBlockStart",
  "marginBottom",
  "marginHeight",
  "marginInline",
  "marginInlineEnd",
  "marginInlineStart",
  "marginLeft",
  "marginRight",
  "marginTop",
  "marginWidth",
  "mark",
  "marker",
  "marker-end",
  "marker-mid",
  "marker-offset",
  "marker-start",
  "markerEnd",
  "markerHeight",
  "markerMid",
  "markerOffset",
  "markerStart",
  "markerUnits",
  "markerWidth",
  "marks",
  "mask",
  "mask-clip",
  "mask-composite",
  "mask-image",
  "mask-mode",
  "mask-origin",
  "mask-position",
  "mask-position-x",
  "mask-position-y",
  "mask-repeat",
  "mask-size",
  "mask-type",
  "maskClip",
  "maskComposite",
  "maskContentUnits",
  "maskImage",
  "maskMode",
  "maskOrigin",
  "maskPosition",
  "maskPositionX",
  "maskPositionY",
  "maskRepeat",
  "maskSize",
  "maskType",
  "maskUnits",
  "match",
  "matchAll",
  "matchMedia",
  "matchMedium",
  "matches",
  "matrix",
  "matrixTransform",
  "max",
  "max-block-size",
  "max-height",
  "max-inline-size",
  "max-width",
  "maxActions",
  "maxAlternatives",
  "maxBlockSize",
  "maxChannelCount",
  "maxChannels",
  "maxConnectionsPerServer",
  "maxDecibels",
  "maxDistance",
  "maxHeight",
  "maxInlineSize",
  "maxLayers",
  "maxLength",
  "maxMessageSize",
  "maxPacketLifeTime",
  "maxRetransmits",
  "maxTouchPoints",
  "maxValue",
  "maxWidth",
  "measure",
  "measureText",
  "media",
  "mediaCapabilities",
  "mediaDevices",
  "mediaElement",
  "mediaGroup",
  "mediaKeys",
  "mediaSession",
  "mediaStream",
  "mediaText",
  "meetOrSlice",
  "memory",
  "menubar",
  "mergeAttributes",
  "message",
  "messageClass",
  "messageHandlers",
  "messageType",
  "metaKey",
  "metadata",
  "method",
  "methodDetails",
  "methodName",
  "mid",
  "mimeType",
  "mimeTypes",
  "min",
  "min-block-size",
  "min-height",
  "min-inline-size",
  "min-width",
  "minBlockSize",
  "minDecibels",
  "minHeight",
  "minInlineSize",
  "minLength",
  "minValue",
  "minWidth",
  "miterLimit",
  "mix-blend-mode",
  "mixBlendMode",
  "mm",
  "mobile",
  "mode",
  "model",
  "modify",
  "mount",
  "move",
  "moveBy",
  "moveEnd",
  "moveFirst",
  "moveFocusDown",
  "moveFocusLeft",
  "moveFocusRight",
  "moveFocusUp",
  "moveNext",
  "moveRow",
  "moveStart",
  "moveTo",
  "moveToBookmark",
  "moveToElementText",
  "moveToPoint",
  "movementX",
  "movementY",
  "mozAdd",
  "mozAnimationStartTime",
  "mozAnon",
  "mozApps",
  "mozAudioCaptured",
  "mozAudioChannelType",
  "mozAutoplayEnabled",
  "mozCancelAnimationFrame",
  "mozCancelFullScreen",
  "mozCancelRequestAnimationFrame",
  "mozCaptureStream",
  "mozCaptureStreamUntilEnded",
  "mozClearDataAt",
  "mozContact",
  "mozContacts",
  "mozCreateFileHandle",
  "mozCurrentTransform",
  "mozCurrentTransformInverse",
  "mozCursor",
  "mozDash",
  "mozDashOffset",
  "mozDecodedFrames",
  "mozExitPointerLock",
  "mozFillRule",
  "mozFragmentEnd",
  "mozFrameDelay",
  "mozFullScreen",
  "mozFullScreenElement",
  "mozFullScreenEnabled",
  "mozGetAll",
  "mozGetAllKeys",
  "mozGetAsFile",
  "mozGetDataAt",
  "mozGetMetadata",
  "mozGetUserMedia",
  "mozHasAudio",
  "mozHasItem",
  "mozHidden",
  "mozImageSmoothingEnabled",
  "mozIndexedDB",
  "mozInnerScreenX",
  "mozInnerScreenY",
  "mozInputSource",
  "mozIsTextField",
  "mozItem",
  "mozItemCount",
  "mozItems",
  "mozLength",
  "mozLockOrientation",
  "mozMatchesSelector",
  "mozMovementX",
  "mozMovementY",
  "mozOpaque",
  "mozOrientation",
  "mozPaintCount",
  "mozPaintedFrames",
  "mozParsedFrames",
  "mozPay",
  "mozPointerLockElement",
  "mozPresentedFrames",
  "mozPreservesPitch",
  "mozPressure",
  "mozPrintCallback",
  "mozRTCIceCandidate",
  "mozRTCPeerConnection",
  "mozRTCSessionDescription",
  "mozRemove",
  "mozRequestAnimationFrame",
  "mozRequestFullScreen",
  "mozRequestPointerLock",
  "mozSetDataAt",
  "mozSetImageElement",
  "mozSourceNode",
  "mozSrcObject",
  "mozSystem",
  "mozTCPSocket",
  "mozTextStyle",
  "mozTypesAt",
  "mozUnlockOrientation",
  "mozUserCancelled",
  "mozVisibilityState",
  "ms",
  "msAnimation",
  "msAnimationDelay",
  "msAnimationDirection",
  "msAnimationDuration",
  "msAnimationFillMode",
  "msAnimationIterationCount",
  "msAnimationName",
  "msAnimationPlayState",
  "msAnimationStartTime",
  "msAnimationTimingFunction",
  "msBackfaceVisibility",
  "msBlockProgression",
  "msCSSOMElementFloatMetrics",
  "msCaching",
  "msCachingEnabled",
  "msCancelRequestAnimationFrame",
  "msCapsLockWarningOff",
  "msClearImmediate",
  "msClose",
  "msContentZoomChaining",
  "msContentZoomFactor",
  "msContentZoomLimit",
  "msContentZoomLimitMax",
  "msContentZoomLimitMin",
  "msContentZoomSnap",
  "msContentZoomSnapPoints",
  "msContentZoomSnapType",
  "msContentZooming",
  "msConvertURL",
  "msCrypto",
  "msDoNotTrack",
  "msElementsFromPoint",
  "msElementsFromRect",
  "msExitFullscreen",
  "msExtendedCode",
  "msFillRule",
  "msFirstPaint",
  "msFlex",
  "msFlexAlign",
  "msFlexDirection",
  "msFlexFlow",
  "msFlexItemAlign",
  "msFlexLinePack",
  "msFlexNegative",
  "msFlexOrder",
  "msFlexPack",
  "msFlexPositive",
  "msFlexPreferredSize",
  "msFlexWrap",
  "msFlowFrom",
  "msFlowInto",
  "msFontFeatureSettings",
  "msFullscreenElement",
  "msFullscreenEnabled",
  "msGetInputContext",
  "msGetRegionContent",
  "msGetUntransformedBounds",
  "msGraphicsTrustStatus",
  "msGridColumn",
  "msGridColumnAlign",
  "msGridColumnSpan",
  "msGridColumns",
  "msGridRow",
  "msGridRowAlign",
  "msGridRowSpan",
  "msGridRows",
  "msHidden",
  "msHighContrastAdjust",
  "msHyphenateLimitChars",
  "msHyphenateLimitLines",
  "msHyphenateLimitZone",
  "msHyphens",
  "msImageSmoothingEnabled",
  "msImeAlign",
  "msIndexedDB",
  "msInterpolationMode",
  "msIsStaticHTML",
  "msKeySystem",
  "msKeys",
  "msLaunchUri",
  "msLockOrientation",
  "msManipulationViewsEnabled",
  "msMatchMedia",
  "msMatchesSelector",
  "msMaxTouchPoints",
  "msOrientation",
  "msOverflowStyle",
  "msPerspective",
  "msPerspectiveOrigin",
  "msPlayToDisabled",
  "msPlayToPreferredSourceUri",
  "msPlayToPrimary",
  "msPointerEnabled",
  "msRegionOverflow",
  "msReleasePointerCapture",
  "msRequestAnimationFrame",
  "msRequestFullscreen",
  "msSaveBlob",
  "msSaveOrOpenBlob",
  "msScrollChaining",
  "msScrollLimit",
  "msScrollLimitXMax",
  "msScrollLimitXMin",
  "msScrollLimitYMax",
  "msScrollLimitYMin",
  "msScrollRails",
  "msScrollSnapPointsX",
  "msScrollSnapPointsY",
  "msScrollSnapType",
  "msScrollSnapX",
  "msScrollSnapY",
  "msScrollTranslation",
  "msSetImmediate",
  "msSetMediaKeys",
  "msSetPointerCapture",
  "msTextCombineHorizontal",
  "msTextSizeAdjust",
  "msToBlob",
  "msTouchAction",
  "msTouchSelect",
  "msTraceAsyncCallbackCompleted",
  "msTraceAsyncCallbackStarting",
  "msTraceAsyncOperationCompleted",
  "msTraceAsyncOperationStarting",
  "msTransform",
  "msTransformOrigin",
  "msTransformStyle",
  "msTransition",
  "msTransitionDelay",
  "msTransitionDuration",
  "msTransitionProperty",
  "msTransitionTimingFunction",
  "msUnlockOrientation",
  "msUpdateAsyncCallbackRelation",
  "msUserSelect",
  "msVisibilityState",
  "msWrapFlow",
  "msWrapMargin",
  "msWrapThrough",
  "msWriteProfilerMark",
  "msZoom",
  "msZoomTo",
  "mt",
  "mul",
  "multiEntry",
  "multiSelectionObj",
  "multiline",
  "multiple",
  "multiply",
  "multiplySelf",
  "mutableFile",
  "muted",
  "n",
  "name",
  "nameProp",
  "namedItem",
  "namedRecordset",
  "names",
  "namespaceURI",
  "namespaces",
  "naturalHeight",
  "naturalWidth",
  "navigate",
  "navigation",
  "navigationMode",
  "navigationPreload",
  "navigationStart",
  "navigator",
  "near",
  "nearestViewportElement",
  "negative",
  "negotiated",
  "netscape",
  "networkState",
  "newScale",
  "newTranslate",
  "newURL",
  "newValue",
  "newValueSpecifiedUnits",
  "newVersion",
  "newhome",
  "next",
  "nextElementSibling",
  "nextHopProtocol",
  "nextNode",
  "nextPage",
  "nextSibling",
  "nickname",
  "noHref",
  "noModule",
  "noResize",
  "noShade",
  "noValidate",
  "noWrap",
  "node",
  "nodeName",
  "nodeType",
  "nodeValue",
  "nonce",
  "normalize",
  "normalizedPathSegList",
  "notationName",
  "notations",
  "note",
  "noteGrainOn",
  "noteOff",
  "noteOn",
  "notify",
  "now",
  "numOctaves",
  "number",
  "numberOfChannels",
  "numberOfInputs",
  "numberOfItems",
  "numberOfOutputs",
  "numberValue",
  "oMatchesSelector",
  "object",
  "object-fit",
  "object-position",
  "objectFit",
  "objectPosition",
  "objectStore",
  "objectStoreNames",
  "objectType",
  "observe",
  "of",
  "offscreenBuffering",
  "offset",
  "offset-anchor",
  "offset-distance",
  "offset-path",
  "offset-rotate",
  "offsetAnchor",
  "offsetDistance",
  "offsetHeight",
  "offsetLeft",
  "offsetNode",
  "offsetParent",
  "offsetPath",
  "offsetRotate",
  "offsetTop",
  "offsetWidth",
  "offsetX",
  "offsetY",
  "ok",
  "oldURL",
  "oldValue",
  "oldVersion",
  "olderShadowRoot",
  "onLine",
  "onabort",
  "onabsolutedeviceorientation",
  "onactivate",
  "onactive",
  "onaddsourcebuffer",
  "onaddstream",
  "onaddtrack",
  "onafterprint",
  "onafterscriptexecute",
  "onafterupdate",
  "onanimationcancel",
  "onanimationend",
  "onanimationiteration",
  "onanimationstart",
  "onappinstalled",
  "onaudioend",
  "onaudioprocess",
  "onaudiostart",
  "onautocomplete",
  "onautocompleteerror",
  "onauxclick",
  "onbeforeactivate",
  "onbeforecopy",
  "onbeforecut",
  "onbeforedeactivate",
  "onbeforeeditfocus",
  "onbeforeinstallprompt",
  "onbeforepaste",
  "onbeforeprint",
  "onbeforescriptexecute",
  "onbeforeunload",
  "onbeforeupdate",
  "onbeforexrselect",
  "onbegin",
  "onblocked",
  "onblur",
  "onbounce",
  "onboundary",
  "onbufferedamountlow",
  "oncached",
  "oncancel",
  "oncandidatewindowhide",
  "oncandidatewindowshow",
  "oncandidatewindowupdate",
  "oncanplay",
  "oncanplaythrough",
  "once",
  "oncellchange",
  "onchange",
  "oncharacteristicvaluechanged",
  "onchargingchange",
  "onchargingtimechange",
  "onchecking",
  "onclick",
  "onclose",
  "onclosing",
  "oncompassneedscalibration",
  "oncomplete",
  "onconnect",
  "onconnecting",
  "onconnectionavailable",
  "onconnectionstatechange",
  "oncontextmenu",
  "oncontrollerchange",
  "oncontrolselect",
  "oncopy",
  "oncuechange",
  "oncut",
  "ondataavailable",
  "ondatachannel",
  "ondatasetchanged",
  "ondatasetcomplete",
  "ondblclick",
  "ondeactivate",
  "ondevicechange",
  "ondevicelight",
  "ondevicemotion",
  "ondeviceorientation",
  "ondeviceorientationabsolute",
  "ondeviceproximity",
  "ondischargingtimechange",
  "ondisconnect",
  "ondisplay",
  "ondownloading",
  "ondrag",
  "ondragend",
  "ondragenter",
  "ondragexit",
  "ondragleave",
  "ondragover",
  "ondragstart",
  "ondrop",
  "ondurationchange",
  "onemptied",
  "onencrypted",
  "onend",
  "onended",
  "onenter",
  "onenterpictureinpicture",
  "onerror",
  "onerrorupdate",
  "onexit",
  "onfilterchange",
  "onfinish",
  "onfocus",
  "onfocusin",
  "onfocusout",
  "onformdata",
  "onfreeze",
  "onfullscreenchange",
  "onfullscreenerror",
  "ongatheringstatechange",
  "ongattserverdisconnected",
  "ongesturechange",
  "ongestureend",
  "ongesturestart",
  "ongotpointercapture",
  "onhashchange",
  "onhelp",
  "onicecandidate",
  "onicecandidateerror",
  "oniceconnectionstatechange",
  "onicegatheringstatechange",
  "oninactive",
  "oninput",
  "oninputsourceschange",
  "oninvalid",
  "onkeydown",
  "onkeypress",
  "onkeystatuseschange",
  "onkeyup",
  "onlanguagechange",
  "onlayoutcomplete",
  "onleavepictureinpicture",
  "onlevelchange",
  "onload",
  "onloadeddata",
  "onloadedmetadata",
  "onloadend",
  "onloading",
  "onloadingdone",
  "onloadingerror",
  "onloadstart",
  "onlosecapture",
  "onlostpointercapture",
  "only",
  "onmark",
  "onmessage",
  "onmessageerror",
  "onmidimessage",
  "onmousedown",
  "onmouseenter",
  "onmouseleave",
  "onmousemove",
  "onmouseout",
  "onmouseover",
  "onmouseup",
  "onmousewheel",
  "onmove",
  "onmoveend",
  "onmovestart",
  "onmozfullscreenchange",
  "onmozfullscreenerror",
  "onmozorientationchange",
  "onmozpointerlockchange",
  "onmozpointerlockerror",
  "onmscontentzoom",
  "onmsfullscreenchange",
  "onmsfullscreenerror",
  "onmsgesturechange",
  "onmsgesturedoubletap",
  "onmsgestureend",
  "onmsgesturehold",
  "onmsgesturestart",
  "onmsgesturetap",
  "onmsgotpointercapture",
  "onmsinertiastart",
  "onmslostpointercapture",
  "onmsmanipulationstatechanged",
  "onmsneedkey",
  "onmsorientationchange",
  "onmspointercancel",
  "onmspointerdown",
  "onmspointerenter",
  "onmspointerhover",
  "onmspointerleave",
  "onmspointermove",
  "onmspointerout",
  "onmspointerover",
  "onmspointerup",
  "onmssitemodejumplistitemremoved",
  "onmsthumbnailclick",
  "onmute",
  "onnegotiationneeded",
  "onnomatch",
  "onnoupdate",
  "onobsolete",
  "onoffline",
  "ononline",
  "onopen",
  "onorientationchange",
  "onpagechange",
  "onpagehide",
  "onpageshow",
  "onpaste",
  "onpause",
  "onpayerdetailchange",
  "onpaymentmethodchange",
  "onplay",
  "onplaying",
  "onpluginstreamstart",
  "onpointercancel",
  "onpointerdown",
  "onpointerenter",
  "onpointerleave",
  "onpointerlockchange",
  "onpointerlockerror",
  "onpointermove",
  "onpointerout",
  "onpointerover",
  "onpointerrawupdate",
  "onpointerup",
  "onpopstate",
  "onprocessorerror",
  "onprogress",
  "onpropertychange",
  "onratechange",
  "onreading",
  "onreadystatechange",
  "onrejectionhandled",
  "onrelease",
  "onremove",
  "onremovesourcebuffer",
  "onremovestream",
  "onremovetrack",
  "onrepeat",
  "onreset",
  "onresize",
  "onresizeend",
  "onresizestart",
  "onresourcetimingbufferfull",
  "onresult",
  "onresume",
  "onrowenter",
  "onrowexit",
  "onrowsdelete",
  "onrowsinserted",
  "onscroll",
  "onsearch",
  "onsecuritypolicyviolation",
  "onseeked",
  "onseeking",
  "onselect",
  "onselectedcandidatepairchange",
  "onselectend",
  "onselectionchange",
  "onselectstart",
  "onshippingaddresschange",
  "onshippingoptionchange",
  "onshow",
  "onsignalingstatechange",
  "onsoundend",
  "onsoundstart",
  "onsourceclose",
  "onsourceclosed",
  "onsourceended",
  "onsourceopen",
  "onspeechend",
  "onspeechstart",
  "onsqueeze",
  "onsqueezeend",
  "onsqueezestart",
  "onstalled",
  "onstart",
  "onstatechange",
  "onstop",
  "onstorage",
  "onstoragecommit",
  "onsubmit",
  "onsuccess",
  "onsuspend",
  "onterminate",
  "ontextinput",
  "ontimeout",
  "ontimeupdate",
  "ontoggle",
  "ontonechange",
  "ontouchcancel",
  "ontouchend",
  "ontouchmove",
  "ontouchstart",
  "ontrack",
  "ontransitioncancel",
  "ontransitionend",
  "ontransitionrun",
  "ontransitionstart",
  "onunhandledrejection",
  "onunload",
  "onunmute",
  "onupdate",
  "onupdateend",
  "onupdatefound",
  "onupdateready",
  "onupdatestart",
  "onupgradeneeded",
  "onuserproximity",
  "onversionchange",
  "onvisibilitychange",
  "onvoiceschanged",
  "onvolumechange",
  "onvrdisplayactivate",
  "onvrdisplayconnect",
  "onvrdisplaydeactivate",
  "onvrdisplaydisconnect",
  "onvrdisplaypresentchange",
  "onwaiting",
  "onwaitingforkey",
  "onwarning",
  "onwebkitanimationend",
  "onwebkitanimationiteration",
  "onwebkitanimationstart",
  "onwebkitcurrentplaybacktargetiswirelesschanged",
  "onwebkitfullscreenchange",
  "onwebkitfullscreenerror",
  "onwebkitkeyadded",
  "onwebkitkeyerror",
  "onwebkitkeymessage",
  "onwebkitneedkey",
  "onwebkitorientationchange",
  "onwebkitplaybacktargetavailabilitychanged",
  "onwebkitpointerlockchange",
  "onwebkitpointerlockerror",
  "onwebkitresourcetimingbufferfull",
  "onwebkittransitionend",
  "onwheel",
  "onzoom",
  "opacity",
  "open",
  "openCursor",
  "openDatabase",
  "openKeyCursor",
  "opened",
  "opener",
  "opera",
  "operationType",
  "operator",
  "opr",
  "optimum",
  "options",
  "or",
  "order",
  "orderX",
  "orderY",
  "ordered",
  "org",
  "organization",
  "orient",
  "orientAngle",
  "orientType",
  "orientation",
  "orientationX",
  "orientationY",
  "orientationZ",
  "origin",
  "originalPolicy",
  "originalTarget",
  "orphans",
  "oscpu",
  "outerHTML",
  "outerHeight",
  "outerText",
  "outerWidth",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "outlineColor",
  "outlineOffset",
  "outlineStyle",
  "outlineWidth",
  "outputBuffer",
  "outputChannelCount",
  "outputLatency",
  "outputs",
  "overflow",
  "overflow-anchor",
  "overflow-block",
  "overflow-inline",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "overflowAnchor",
  "overflowBlock",
  "overflowInline",
  "overflowWrap",
  "overflowX",
  "overflowY",
  "overrideMimeType",
  "oversample",
  "overscroll-behavior",
  "overscroll-behavior-block",
  "overscroll-behavior-inline",
  "overscroll-behavior-x",
  "overscroll-behavior-y",
  "overscrollBehavior",
  "overscrollBehaviorBlock",
  "overscrollBehaviorInline",
  "overscrollBehaviorX",
  "overscrollBehaviorY",
  "ownKeys",
  "ownerDocument",
  "ownerElement",
  "ownerNode",
  "ownerRule",
  "ownerSVGElement",
  "owningElement",
  "p1",
  "p2",
  "p3",
  "p4",
  "packetSize",
  "packets",
  "pad",
  "padEnd",
  "padStart",
  "padding",
  "padding-block",
  "padding-block-end",
  "padding-block-start",
  "padding-bottom",
  "padding-inline",
  "padding-inline-end",
  "padding-inline-start",
  "padding-left",
  "padding-right",
  "padding-top",
  "paddingBlock",
  "paddingBlockEnd",
  "paddingBlockStart",
  "paddingBottom",
  "paddingInline",
  "paddingInlineEnd",
  "paddingInlineStart",
  "paddingLeft",
  "paddingRight",
  "paddingTop",
  "page",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "pageBreakAfter",
  "pageBreakBefore",
  "pageBreakInside",
  "pageCount",
  "pageLeft",
  "pageTop",
  "pageX",
  "pageXOffset",
  "pageY",
  "pageYOffset",
  "pages",
  "paint-order",
  "paintOrder",
  "paintRequests",
  "paintType",
  "paintWorklet",
  "palette",
  "pan",
  "panningModel",
  "parameterData",
  "parameters",
  "parent",
  "parentElement",
  "parentNode",
  "parentRule",
  "parentStyleSheet",
  "parentTextEdit",
  "parentWindow",
  "parse",
  "parseAll",
  "parseFloat",
  "parseFromString",
  "parseInt",
  "part",
  "participants",
  "passive",
  "password",
  "pasteHTML",
  "path",
  "pathLength",
  "pathSegList",
  "pathSegType",
  "pathSegTypeAsLetter",
  "pathname",
  "pattern",
  "patternContentUnits",
  "patternMismatch",
  "patternTransform",
  "patternUnits",
  "pause",
  "pauseAnimations",
  "pauseOnExit",
  "pauseProfilers",
  "pauseTransformFeedback",
  "paused",
  "payerEmail",
  "payerName",
  "payerPhone",
  "paymentManager",
  "pc",
  "peerIdentity",
  "pending",
  "pendingLocalDescription",
  "pendingRemoteDescription",
  "percent",
  "performance",
  "periodicSync",
  "permission",
  "permissionState",
  "permissions",
  "persist",
  "persisted",
  "personalbar",
  "perspective",
  "perspective-origin",
  "perspectiveOrigin",
  "phone",
  "phoneticFamilyName",
  "phoneticGivenName",
  "photo",
  "pictureInPictureElement",
  "pictureInPictureEnabled",
  "pictureInPictureWindow",
  "ping",
  "pipeThrough",
  "pipeTo",
  "pitch",
  "pixelBottom",
  "pixelDepth",
  "pixelHeight",
  "pixelLeft",
  "pixelRight",
  "pixelStorei",
  "pixelTop",
  "pixelUnitToMillimeterX",
  "pixelUnitToMillimeterY",
  "pixelWidth",
  "place-content",
  "place-items",
  "place-self",
  "placeContent",
  "placeItems",
  "placeSelf",
  "placeholder",
  "platformVersion",
  "platform",
  "platforms",
  "play",
  "playEffect",
  "playState",
  "playbackRate",
  "playbackState",
  "playbackTime",
  "played",
  "playoutDelayHint",
  "playsInline",
  "plugins",
  "pluginspage",
  "pname",
  "pointer-events",
  "pointerBeforeReferenceNode",
  "pointerEnabled",
  "pointerEvents",
  "pointerId",
  "pointerLockElement",
  "pointerType",
  "points",
  "pointsAtX",
  "pointsAtY",
  "pointsAtZ",
  "polygonOffset",
  "pop",
  "populateMatrix",
  "popupWindowFeatures",
  "popupWindowName",
  "popupWindowURI",
  "port",
  "port1",
  "port2",
  "ports",
  "posBottom",
  "posHeight",
  "posLeft",
  "posRight",
  "posTop",
  "posWidth",
  "pose",
  "position",
  "positionAlign",
  "positionX",
  "positionY",
  "positionZ",
  "postError",
  "postMessage",
  "postalCode",
  "poster",
  "pow",
  "powerEfficient",
  "powerOff",
  "preMultiplySelf",
  "precision",
  "preferredStyleSheetSet",
  "preferredStylesheetSet",
  "prefix",
  "preload",
  "prepend",
  "presentation",
  "preserveAlpha",
  "preserveAspectRatio",
  "preserveAspectRatioString",
  "pressed",
  "pressure",
  "prevValue",
  "preventDefault",
  "preventExtensions",
  "preventSilentAccess",
  "previousElementSibling",
  "previousNode",
  "previousPage",
  "previousRect",
  "previousScale",
  "previousSibling",
  "previousTranslate",
  "primaryKey",
  "primitiveType",
  "primitiveUnits",
  "principals",
  "print",
  "priority",
  "privateKey",
  "probablySupportsContext",
  "process",
  "processIceMessage",
  "processingEnd",
  "processingStart",
  "processorOptions",
  "product",
  "productId",
  "productName",
  "productSub",
  "profile",
  "profileEnd",
  "profiles",
  "projectionMatrix",
  "promise",
  "prompt",
  "properties",
  "propertyIsEnumerable",
  "propertyName",
  "protocol",
  "protocolLong",
  "prototype",
  "provider",
  "pseudoClass",
  "pseudoElement",
  "pt",
  "publicId",
  "publicKey",
  "published",
  "pulse",
  "push",
  "pushManager",
  "pushNotification",
  "pushState",
  "put",
  "putImageData",
  "px",
  "quadraticCurveTo",
  "qualifier",
  "quaternion",
  "query",
  "queryCommandEnabled",
  "queryCommandIndeterm",
  "queryCommandState",
  "queryCommandSupported",
  "queryCommandText",
  "queryCommandValue",
  "querySelector",
  "querySelectorAll",
  "queueMicrotask",
  "quote",
  "quotes",
  "r",
  "r1",
  "r2",
  "race",
  "rad",
  "radiogroup",
  "radiusX",
  "radiusY",
  "random",
  "range",
  "rangeCount",
  "rangeMax",
  "rangeMin",
  "rangeOffset",
  "rangeOverflow",
  "rangeParent",
  "rangeUnderflow",
  "rate",
  "ratio",
  "raw",
  "rawId",
  "read",
  "readAsArrayBuffer",
  "readAsBinaryString",
  "readAsBlob",
  "readAsDataURL",
  "readAsText",
  "readBuffer",
  "readEntries",
  "readOnly",
  "readPixels",
  "readReportRequested",
  "readText",
  "readValue",
  "readable",
  "ready",
  "readyState",
  "reason",
  "reboot",
  "receivedAlert",
  "receiver",
  "receivers",
  "recipient",
  "reconnect",
  "recordNumber",
  "recordsAvailable",
  "recordset",
  "rect",
  "red",
  "redEyeReduction",
  "redirect",
  "redirectCount",
  "redirectEnd",
  "redirectStart",
  "redirected",
  "reduce",
  "reduceRight",
  "reduction",
  "refDistance",
  "refX",
  "refY",
  "referenceNode",
  "referenceSpace",
  "referrer",
  "referrerPolicy",
  "refresh",
  "region",
  "regionAnchorX",
  "regionAnchorY",
  "regionId",
  "regions",
  "register",
  "registerContentHandler",
  "registerElement",
  "registerProperty",
  "registerProtocolHandler",
  "reject",
  "rel",
  "relList",
  "relatedAddress",
  "relatedNode",
  "relatedPort",
  "relatedTarget",
  "release",
  "releaseCapture",
  "releaseEvents",
  "releaseInterface",
  "releaseLock",
  "releasePointerCapture",
  "releaseShaderCompiler",
  "reliable",
  "reliableWrite",
  "reload",
  "rem",
  "remainingSpace",
  "remote",
  "remoteDescription",
  "remove",
  "removeAllRanges",
  "removeAttribute",
  "removeAttributeNS",
  "removeAttributeNode",
  "removeBehavior",
  "removeChild",
  "removeCue",
  "removeEventListener",
  "removeFilter",
  "removeImport",
  "removeItem",
  "removeListener",
  "removeNamedItem",
  "removeNamedItemNS",
  "removeNode",
  "removeParameter",
  "removeProperty",
  "removeRange",
  "removeRegion",
  "removeRule",
  "removeSiteSpecificTrackingException",
  "removeSourceBuffer",
  "removeStream",
  "removeTrack",
  "removeVariable",
  "removeWakeLockListener",
  "removeWebWideTrackingException",
  "removed",
  "removedNodes",
  "renderHeight",
  "renderState",
  "renderTime",
  "renderWidth",
  "renderbufferStorage",
  "renderbufferStorageMultisample",
  "renderedBuffer",
  "renderingMode",
  "renotify",
  "repeat",
  "replace",
  "replaceAdjacentText",
  "replaceAll",
  "replaceChild",
  "replaceChildren",
  "replaceData",
  "replaceId",
  "replaceItem",
  "replaceNode",
  "replaceState",
  "replaceSync",
  "replaceTrack",
  "replaceWholeText",
  "replaceWith",
  "reportValidity",
  "request",
  "requestAnimationFrame",
  "requestAutocomplete",
  "requestData",
  "requestDevice",
  "requestFrame",
  "requestFullscreen",
  "requestHitTestSource",
  "requestHitTestSourceForTransientInput",
  "requestId",
  "requestIdleCallback",
  "requestMIDIAccess",
  "requestMediaKeySystemAccess",
  "requestPermission",
  "requestPictureInPicture",
  "requestPointerLock",
  "requestPresent",
  "requestReferenceSpace",
  "requestSession",
  "requestStart",
  "requestStorageAccess",
  "requestSubmit",
  "requestVideoFrameCallback",
  "requestingWindow",
  "requireInteraction",
  "required",
  "requiredExtensions",
  "requiredFeatures",
  "reset",
  "resetPose",
  "resetTransform",
  "resize",
  "resizeBy",
  "resizeTo",
  "resolve",
  "response",
  "responseBody",
  "responseEnd",
  "responseReady",
  "responseStart",
  "responseText",
  "responseType",
  "responseURL",
  "responseXML",
  "restartIce",
  "restore",
  "result",
  "resultIndex",
  "resultType",
  "results",
  "resume",
  "resumeProfilers",
  "resumeTransformFeedback",
  "retry",
  "returnValue",
  "rev",
  "reverse",
  "reversed",
  "revocable",
  "revokeObjectURL",
  "rgbColor",
  "right",
  "rightContext",
  "rightDegrees",
  "rightMargin",
  "rightProjectionMatrix",
  "rightViewMatrix",
  "role",
  "rolloffFactor",
  "root",
  "rootBounds",
  "rootElement",
  "rootMargin",
  "rotate",
  "rotateAxisAngle",
  "rotateAxisAngleSelf",
  "rotateFromVector",
  "rotateFromVectorSelf",
  "rotateSelf",
  "rotation",
  "rotationAngle",
  "rotationRate",
  "round",
  "row-gap",
  "rowGap",
  "rowIndex",
  "rowSpan",
  "rows",
  "rtcpTransport",
  "rtt",
  "ruby-align",
  "ruby-position",
  "rubyAlign",
  "rubyOverhang",
  "rubyPosition",
  "rules",
  "runtime",
  "runtimeStyle",
  "rx",
  "ry",
  "s",
  "safari",
  "sample",
  "sampleCoverage",
  "sampleRate",
  "samplerParameterf",
  "samplerParameteri",
  "sandbox",
  "save",
  "saveData",
  "scale",
  "scale3d",
  "scale3dSelf",
  "scaleNonUniform",
  "scaleNonUniformSelf",
  "scaleSelf",
  "scheme",
  "scissor",
  "scope",
  "scopeName",
  "scoped",
  "screen",
  "screenBrightness",
  "screenEnabled",
  "screenLeft",
  "screenPixelToMillimeterX",
  "screenPixelToMillimeterY",
  "screenTop",
  "screenX",
  "screenY",
  "scriptURL",
  "scripts",
  "scroll",
  "scroll-behavior",
  "scroll-margin",
  "scroll-margin-block",
  "scroll-margin-block-end",
  "scroll-margin-block-start",
  "scroll-margin-bottom",
  "scroll-margin-inline",
  "scroll-margin-inline-end",
  "scroll-margin-inline-start",
  "scroll-margin-left",
  "scroll-margin-right",
  "scroll-margin-top",
  "scroll-padding",
  "scroll-padding-block",
  "scroll-padding-block-end",
  "scroll-padding-block-start",
  "scroll-padding-bottom",
  "scroll-padding-inline",
  "scroll-padding-inline-end",
  "scroll-padding-inline-start",
  "scroll-padding-left",
  "scroll-padding-right",
  "scroll-padding-top",
  "scroll-snap-align",
  "scroll-snap-type",
  "scrollAmount",
  "scrollBehavior",
  "scrollBy",
  "scrollByLines",
  "scrollByPages",
  "scrollDelay",
  "scrollHeight",
  "scrollIntoView",
  "scrollIntoViewIfNeeded",
  "scrollLeft",
  "scrollLeftMax",
  "scrollMargin",
  "scrollMarginBlock",
  "scrollMarginBlockEnd",
  "scrollMarginBlockStart",
  "scrollMarginBottom",
  "scrollMarginInline",
  "scrollMarginInlineEnd",
  "scrollMarginInlineStart",
  "scrollMarginLeft",
  "scrollMarginRight",
  "scrollMarginTop",
  "scrollMaxX",
  "scrollMaxY",
  "scrollPadding",
  "scrollPaddingBlock",
  "scrollPaddingBlockEnd",
  "scrollPaddingBlockStart",
  "scrollPaddingBottom",
  "scrollPaddingInline",
  "scrollPaddingInlineEnd",
  "scrollPaddingInlineStart",
  "scrollPaddingLeft",
  "scrollPaddingRight",
  "scrollPaddingTop",
  "scrollRestoration",
  "scrollSnapAlign",
  "scrollSnapType",
  "scrollTo",
  "scrollTop",
  "scrollTopMax",
  "scrollWidth",
  "scrollX",
  "scrollY",
  "scrollbar-color",
  "scrollbar-width",
  "scrollbar3dLightColor",
  "scrollbarArrowColor",
  "scrollbarBaseColor",
  "scrollbarColor",
  "scrollbarDarkShadowColor",
  "scrollbarFaceColor",
  "scrollbarHighlightColor",
  "scrollbarShadowColor",
  "scrollbarTrackColor",
  "scrollbarWidth",
  "scrollbars",
  "scrolling",
  "scrollingElement",
  "sctp",
  "sctpCauseCode",
  "sdp",
  "sdpLineNumber",
  "sdpMLineIndex",
  "sdpMid",
  "seal",
  "search",
  "searchBox",
  "searchBoxJavaBridge_",
  "searchParams",
  "sectionRowIndex",
  "secureConnectionStart",
  "security",
  "seed",
  "seekToNextFrame",
  "seekable",
  "seeking",
  "select",
  "selectAllChildren",
  "selectAlternateInterface",
  "selectConfiguration",
  "selectNode",
  "selectNodeContents",
  "selectNodes",
  "selectSingleNode",
  "selectSubString",
  "selected",
  "selectedIndex",
  "selectedOptions",
  "selectedStyleSheetSet",
  "selectedStylesheetSet",
  "selection",
  "selectionDirection",
  "selectionEnd",
  "selectionStart",
  "selector",
  "selectorText",
  "self",
  "send",
  "sendAsBinary",
  "sendBeacon",
  "sender",
  "sentAlert",
  "sentTimestamp",
  "separator",
  "serialNumber",
  "serializeToString",
  "serverTiming",
  "service",
  "serviceWorker",
  "session",
  "sessionId",
  "sessionStorage",
  "set",
  "setActionHandler",
  "setActive",
  "setAlpha",
  "setAppBadge",
  "setAttribute",
  "setAttributeNS",
  "setAttributeNode",
  "setAttributeNodeNS",
  "setBaseAndExtent",
  "setBigInt64",
  "setBigUint64",
  "setBingCurrentSearchDefault",
  "setCapture",
  "setCodecPreferences",
  "setColor",
  "setCompositeOperation",
  "setConfiguration",
  "setCurrentTime",
  "setCustomValidity",
  "setData",
  "setDate",
  "setDragImage",
  "setEnd",
  "setEndAfter",
  "setEndBefore",
  "setEndPoint",
  "setFillColor",
  "setFilterRes",
  "setFloat32",
  "setFloat64",
  "setFloatValue",
  "setFormValue",
  "setFullYear",
  "setHeaderValue",
  "setHours",
  "setIdentityProvider",
  "setImmediate",
  "setInt16",
  "setInt32",
  "setInt8",
  "setInterval",
  "setItem",
  "setKeyframes",
  "setLineCap",
  "setLineDash",
  "setLineJoin",
  "setLineWidth",
  "setLiveSeekableRange",
  "setLocalDescription",
  "setMatrix",
  "setMatrixValue",
  "setMediaKeys",
  "setMilliseconds",
  "setMinutes",
  "setMiterLimit",
  "setMonth",
  "setNamedItem",
  "setNamedItemNS",
  "setNonUserCodeExceptions",
  "setOrientToAngle",
  "setOrientToAuto",
  "setOrientation",
  "setOverrideHistoryNavigationMode",
  "setPaint",
  "setParameter",
  "setParameters",
  "setPeriodicWave",
  "setPointerCapture",
  "setPosition",
  "setPositionState",
  "setPreference",
  "setProperty",
  "setPrototypeOf",
  "setRGBColor",
  "setRGBColorICCColor",
  "setRadius",
  "setRangeText",
  "setRemoteDescription",
  "setRequestHeader",
  "setResizable",
  "setResourceTimingBufferSize",
  "setRotate",
  "setScale",
  "setSeconds",
  "setSelectionRange",
  "setServerCertificate",
  "setShadow",
  "setSinkId",
  "setSkewX",
  "setSkewY",
  "setStart",
  "setStartAfter",
  "setStartBefore",
  "setStdDeviation",
  "setStreams",
  "setStringValue",
  "setStrokeColor",
  "setSuggestResult",
  "setTargetAtTime",
  "setTargetValueAtTime",
  "setTime",
  "setTimeout",
  "setTransform",
  "setTranslate",
  "setUTCDate",
  "setUTCFullYear",
  "setUTCHours",
  "setUTCMilliseconds",
  "setUTCMinutes",
  "setUTCMonth",
  "setUTCSeconds",
  "setUint16",
  "setUint32",
  "setUint8",
  "setUri",
  "setValidity",
  "setValueAtTime",
  "setValueCurveAtTime",
  "setVariable",
  "setVelocity",
  "setVersion",
  "setYear",
  "settingName",
  "settingValue",
  "sex",
  "shaderSource",
  "shadowBlur",
  "shadowColor",
  "shadowOffsetX",
  "shadowOffsetY",
  "shadowRoot",
  "shape",
  "shape-image-threshold",
  "shape-margin",
  "shape-outside",
  "shape-rendering",
  "shapeImageThreshold",
  "shapeMargin",
  "shapeOutside",
  "shapeRendering",
  "sheet",
  "shift",
  "shiftKey",
  "shiftLeft",
  "shippingAddress",
  "shippingOption",
  "shippingType",
  "show",
  "showHelp",
  "showModal",
  "showModalDialog",
  "showModelessDialog",
  "showNotification",
  "sidebar",
  "sign",
  "signal",
  "signalingState",
  "signature",
  "silent",
  "sin",
  "singleNodeValue",
  "sinh",
  "sinkId",
  "sittingToStandingTransform",
  "size",
  "sizeToContent",
  "sizeX",
  "sizeZ",
  "sizes",
  "skewX",
  "skewXSelf",
  "skewY",
  "skewYSelf",
  "slice",
  "slope",
  "slot",
  "small",
  "smil",
  "smooth",
  "smoothingTimeConstant",
  "snapToLines",
  "snapshotItem",
  "snapshotLength",
  "some",
  "sort",
  "sortingCode",
  "source",
  "sourceBuffer",
  "sourceBuffers",
  "sourceCapabilities",
  "sourceFile",
  "sourceIndex",
  "sources",
  "spacing",
  "span",
  "speak",
  "speakAs",
  "speaking",
  "species",
  "specified",
  "specularConstant",
  "specularExponent",
  "speechSynthesis",
  "speed",
  "speedOfSound",
  "spellcheck",
  "splice",
  "split",
  "splitText",
  "spreadMethod",
  "sqrt",
  "src",
  "srcElement",
  "srcFilter",
  "srcObject",
  "srcUrn",
  "srcdoc",
  "srclang",
  "srcset",
  "stack",
  "stackTraceLimit",
  "stacktrace",
  "stageParameters",
  "standalone",
  "standby",
  "start",
  "startContainer",
  "startIce",
  "startMessages",
  "startNotifications",
  "startOffset",
  "startProfiling",
  "startRendering",
  "startShark",
  "startTime",
  "startsWith",
  "state",
  "status",
  "statusCode",
  "statusMessage",
  "statusText",
  "statusbar",
  "stdDeviationX",
  "stdDeviationY",
  "stencilFunc",
  "stencilFuncSeparate",
  "stencilMask",
  "stencilMaskSeparate",
  "stencilOp",
  "stencilOpSeparate",
  "step",
  "stepDown",
  "stepMismatch",
  "stepUp",
  "sticky",
  "stitchTiles",
  "stop",
  "stop-color",
  "stop-opacity",
  "stopColor",
  "stopImmediatePropagation",
  "stopNotifications",
  "stopOpacity",
  "stopProfiling",
  "stopPropagation",
  "stopShark",
  "stopped",
  "storage",
  "storageArea",
  "storageName",
  "storageStatus",
  "store",
  "storeSiteSpecificTrackingException",
  "storeWebWideTrackingException",
  "stpVersion",
  "stream",
  "streams",
  "stretch",
  "strike",
  "string",
  "stringValue",
  "stringify",
  "stroke",
  "stroke-dasharray",
  "stroke-dashoffset",
  "stroke-linecap",
  "stroke-linejoin",
  "stroke-miterlimit",
  "stroke-opacity",
  "stroke-width",
  "strokeDasharray",
  "strokeDashoffset",
  "strokeLinecap",
  "strokeLinejoin",
  "strokeMiterlimit",
  "strokeOpacity",
  "strokeRect",
  "strokeStyle",
  "strokeText",
  "strokeWidth",
  "style",
  "styleFloat",
  "styleMap",
  "styleMedia",
  "styleSheet",
  "styleSheetSets",
  "styleSheets",
  "sub",
  "subarray",
  "subject",
  "submit",
  "submitFrame",
  "submitter",
  "subscribe",
  "substr",
  "substring",
  "substringData",
  "subtle",
  "subtree",
  "suffix",
  "suffixes",
  "summary",
  "sup",
  "supported",
  "supportedContentEncodings",
  "supportedEntryTypes",
  "supports",
  "supportsSession",
  "surfaceScale",
  "surroundContents",
  "suspend",
  "suspendRedraw",
  "swapCache",
  "swapNode",
  "sweepFlag",
  "symbols",
  "sync",
  "sysexEnabled",
  "system",
  "systemCode",
  "systemId",
  "systemLanguage",
  "systemXDPI",
  "systemYDPI",
  "tBodies",
  "tFoot",
  "tHead",
  "tabIndex",
  "table",
  "table-layout",
  "tableLayout",
  "tableValues",
  "tag",
  "tagName",
  "tagUrn",
  "tags",
  "taintEnabled",
  "takePhoto",
  "takeRecords",
  "tan",
  "tangentialPressure",
  "tanh",
  "target",
  "targetElement",
  "targetRayMode",
  "targetRaySpace",
  "targetTouches",
  "targetX",
  "targetY",
  "tcpType",
  "tee",
  "tel",
  "terminate",
  "test",
  "texImage2D",
  "texImage3D",
  "texParameterf",
  "texParameteri",
  "texStorage2D",
  "texStorage3D",
  "texSubImage2D",
  "texSubImage3D",
  "text",
  "text-align",
  "text-align-last",
  "text-anchor",
  "text-combine-upright",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-skip-ink",
  "text-decoration-style",
  "text-decoration-thickness",
  "text-emphasis",
  "text-emphasis-color",
  "text-emphasis-position",
  "text-emphasis-style",
  "text-indent",
  "text-justify",
  "text-orientation",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-transform",
  "text-underline-offset",
  "text-underline-position",
  "textAlign",
  "textAlignLast",
  "textAnchor",
  "textAutospace",
  "textBaseline",
  "textCombineUpright",
  "textContent",
  "textDecoration",
  "textDecorationBlink",
  "textDecorationColor",
  "textDecorationLine",
  "textDecorationLineThrough",
  "textDecorationNone",
  "textDecorationOverline",
  "textDecorationSkipInk",
  "textDecorationStyle",
  "textDecorationThickness",
  "textDecorationUnderline",
  "textEmphasis",
  "textEmphasisColor",
  "textEmphasisPosition",
  "textEmphasisStyle",
  "textIndent",
  "textJustify",
  "textJustifyTrim",
  "textKashida",
  "textKashidaSpace",
  "textLength",
  "textOrientation",
  "textOverflow",
  "textRendering",
  "textShadow",
  "textTracks",
  "textTransform",
  "textUnderlineOffset",
  "textUnderlinePosition",
  "then",
  "threadId",
  "threshold",
  "thresholds",
  "tiltX",
  "tiltY",
  "time",
  "timeEnd",
  "timeLog",
  "timeOrigin",
  "timeRemaining",
  "timeStamp",
  "timecode",
  "timeline",
  "timelineTime",
  "timeout",
  "timestamp",
  "timestampOffset",
  "timing",
  "title",
  "to",
  "toArray",
  "toBlob",
  "toDataURL",
  "toDateString",
  "toElement",
  "toExponential",
  "toFixed",
  "toFloat32Array",
  "toFloat64Array",
  "toGMTString",
  "toISOString",
  "toJSON",
  "toLocaleDateString",
  "toLocaleFormat",
  "toLocaleLowerCase",
  "toLocaleString",
  "toLocaleTimeString",
  "toLocaleUpperCase",
  "toLowerCase",
  "toMatrix",
  "toMethod",
  "toPrecision",
  "toPrimitive",
  "toSdp",
  "toSource",
  "toStaticHTML",
  "toString",
  "toStringTag",
  "toSum",
  "toTimeString",
  "toUTCString",
  "toUpperCase",
  "toggle",
  "toggleAttribute",
  "toggleLongPressEnabled",
  "tone",
  "toneBuffer",
  "tooLong",
  "tooShort",
  "toolbar",
  "top",
  "topMargin",
  "total",
  "totalFrameDelay",
  "totalVideoFrames",
  "touch-action",
  "touchAction",
  "touched",
  "touches",
  "trace",
  "track",
  "trackVisibility",
  "transaction",
  "transactions",
  "transceiver",
  "transferControlToOffscreen",
  "transferFromImageBitmap",
  "transferImageBitmap",
  "transferIn",
  "transferOut",
  "transferSize",
  "transferToImageBitmap",
  "transform",
  "transform-box",
  "transform-origin",
  "transform-style",
  "transformBox",
  "transformFeedbackVaryings",
  "transformOrigin",
  "transformPoint",
  "transformString",
  "transformStyle",
  "transformToDocument",
  "transformToFragment",
  "transition",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "transitionDelay",
  "transitionDuration",
  "transitionProperty",
  "transitionTimingFunction",
  "translate",
  "translateSelf",
  "translationX",
  "translationY",
  "transport",
  "trim",
  "trimEnd",
  "trimLeft",
  "trimRight",
  "trimStart",
  "trueSpeed",
  "trunc",
  "truncate",
  "trustedTypes",
  "turn",
  "twist",
  "type",
  "typeDetail",
  "typeMismatch",
  "typeMustMatch",
  "types",
  "u2f",
  "ubound",
  "uint16",
  "uint32",
  "uint8",
  "uint8Clamped",
  "undefined",
  "unescape",
  "uneval",
  "unicode",
  "unicode-bidi",
  "unicodeBidi",
  "unicodeRange",
  "uniform1f",
  "uniform1fv",
  "uniform1i",
  "uniform1iv",
  "uniform1ui",
  "uniform1uiv",
  "uniform2f",
  "uniform2fv",
  "uniform2i",
  "uniform2iv",
  "uniform2ui",
  "uniform2uiv",
  "uniform3f",
  "uniform3fv",
  "uniform3i",
  "uniform3iv",
  "uniform3ui",
  "uniform3uiv",
  "uniform4f",
  "uniform4fv",
  "uniform4i",
  "uniform4iv",
  "uniform4ui",
  "uniform4uiv",
  "uniformBlockBinding",
  "uniformMatrix2fv",
  "uniformMatrix2x3fv",
  "uniformMatrix2x4fv",
  "uniformMatrix3fv",
  "uniformMatrix3x2fv",
  "uniformMatrix3x4fv",
  "uniformMatrix4fv",
  "uniformMatrix4x2fv",
  "uniformMatrix4x3fv",
  "unique",
  "uniqueID",
  "uniqueNumber",
  "unit",
  "unitType",
  "units",
  "unloadEventEnd",
  "unloadEventStart",
  "unlock",
  "unmount",
  "unobserve",
  "unpause",
  "unpauseAnimations",
  "unreadCount",
  "unregister",
  "unregisterContentHandler",
  "unregisterProtocolHandler",
  "unscopables",
  "unselectable",
  "unshift",
  "unsubscribe",
  "unsuspendRedraw",
  "unsuspendRedrawAll",
  "unwatch",
  "unwrapKey",
  "upDegrees",
  "upX",
  "upY",
  "upZ",
  "update",
  "updateCommands",
  "updateIce",
  "updateInterval",
  "updatePlaybackRate",
  "updateRenderState",
  "updateSettings",
  "updateTiming",
  "updateViaCache",
  "updateWith",
  "updated",
  "updating",
  "upgrade",
  "upload",
  "uploadTotal",
  "uploaded",
  "upper",
  "upperBound",
  "upperOpen",
  "uri",
  "url",
  "urn",
  "urns",
  "usages",
  "usb",
  "usbVersionMajor",
  "usbVersionMinor",
  "usbVersionSubminor",
  "useCurrentView",
  "useMap",
  "useProgram",
  "usedSpace",
  "user-select",
  "userActivation",
  "userAgent",
  "userAgentData",
  "userChoice",
  "userHandle",
  "userHint",
  "userLanguage",
  "userSelect",
  "userVisibleOnly",
  "username",
  "usernameFragment",
  "utterance",
  "uuid",
  "v8BreakIterator",
  "vAlign",
  "vLink",
  "valid",
  "validate",
  "validateProgram",
  "validationMessage",
  "validity",
  "value",
  "valueAsDate",
  "valueAsNumber",
  "valueAsString",
  "valueInSpecifiedUnits",
  "valueMissing",
  "valueOf",
  "valueText",
  "valueType",
  "values",
  "variable",
  "variant",
  "variationSettings",
  "vector-effect",
  "vectorEffect",
  "velocityAngular",
  "velocityExpansion",
  "velocityX",
  "velocityY",
  "vendor",
  "vendorId",
  "vendorSub",
  "verify",
  "version",
  "vertexAttrib1f",
  "vertexAttrib1fv",
  "vertexAttrib2f",
  "vertexAttrib2fv",
  "vertexAttrib3f",
  "vertexAttrib3fv",
  "vertexAttrib4f",
  "vertexAttrib4fv",
  "vertexAttribDivisor",
  "vertexAttribDivisorANGLE",
  "vertexAttribI4i",
  "vertexAttribI4iv",
  "vertexAttribI4ui",
  "vertexAttribI4uiv",
  "vertexAttribIPointer",
  "vertexAttribPointer",
  "vertical",
  "vertical-align",
  "verticalAlign",
  "verticalOverflow",
  "vh",
  "vibrate",
  "vibrationActuator",
  "videoBitsPerSecond",
  "videoHeight",
  "videoTracks",
  "videoWidth",
  "view",
  "viewBox",
  "viewBoxString",
  "viewTarget",
  "viewTargetString",
  "viewport",
  "viewportAnchorX",
  "viewportAnchorY",
  "viewportElement",
  "views",
  "violatedDirective",
  "visibility",
  "visibilityState",
  "visible",
  "visualViewport",
  "vlinkColor",
  "vmax",
  "vmin",
  "voice",
  "voiceURI",
  "volume",
  "vrml",
  "vspace",
  "vw",
  "w",
  "wait",
  "waitSync",
  "waiting",
  "wake",
  "wakeLock",
  "wand",
  "warn",
  "wasClean",
  "wasDiscarded",
  "watch",
  "watchAvailability",
  "watchPosition",
  "webdriver",
  "webkitAddKey",
  "webkitAlignContent",
  "webkitAlignItems",
  "webkitAlignSelf",
  "webkitAnimation",
  "webkitAnimationDelay",
  "webkitAnimationDirection",
  "webkitAnimationDuration",
  "webkitAnimationFillMode",
  "webkitAnimationIterationCount",
  "webkitAnimationName",
  "webkitAnimationPlayState",
  "webkitAnimationTimingFunction",
  "webkitAppearance",
  "webkitAudioContext",
  "webkitAudioDecodedByteCount",
  "webkitAudioPannerNode",
  "webkitBackfaceVisibility",
  "webkitBackground",
  "webkitBackgroundAttachment",
  "webkitBackgroundClip",
  "webkitBackgroundColor",
  "webkitBackgroundImage",
  "webkitBackgroundOrigin",
  "webkitBackgroundPosition",
  "webkitBackgroundPositionX",
  "webkitBackgroundPositionY",
  "webkitBackgroundRepeat",
  "webkitBackgroundSize",
  "webkitBackingStorePixelRatio",
  "webkitBorderBottomLeftRadius",
  "webkitBorderBottomRightRadius",
  "webkitBorderImage",
  "webkitBorderImageOutset",
  "webkitBorderImageRepeat",
  "webkitBorderImageSlice",
  "webkitBorderImageSource",
  "webkitBorderImageWidth",
  "webkitBorderRadius",
  "webkitBorderTopLeftRadius",
  "webkitBorderTopRightRadius",
  "webkitBoxAlign",
  "webkitBoxDirection",
  "webkitBoxFlex",
  "webkitBoxOrdinalGroup",
  "webkitBoxOrient",
  "webkitBoxPack",
  "webkitBoxShadow",
  "webkitBoxSizing",
  "webkitCancelAnimationFrame",
  "webkitCancelFullScreen",
  "webkitCancelKeyRequest",
  "webkitCancelRequestAnimationFrame",
  "webkitClearResourceTimings",
  "webkitClosedCaptionsVisible",
  "webkitConvertPointFromNodeToPage",
  "webkitConvertPointFromPageToNode",
  "webkitCreateShadowRoot",
  "webkitCurrentFullScreenElement",
  "webkitCurrentPlaybackTargetIsWireless",
  "webkitDecodedFrameCount",
  "webkitDirectionInvertedFromDevice",
  "webkitDisplayingFullscreen",
  "webkitDroppedFrameCount",
  "webkitEnterFullScreen",
  "webkitEnterFullscreen",
  "webkitEntries",
  "webkitExitFullScreen",
  "webkitExitFullscreen",
  "webkitExitPointerLock",
  "webkitFilter",
  "webkitFlex",
  "webkitFlexBasis",
  "webkitFlexDirection",
  "webkitFlexFlow",
  "webkitFlexGrow",
  "webkitFlexShrink",
  "webkitFlexWrap",
  "webkitFullScreenKeyboardInputAllowed",
  "webkitFullscreenElement",
  "webkitFullscreenEnabled",
  "webkitGenerateKeyRequest",
  "webkitGetAsEntry",
  "webkitGetDatabaseNames",
  "webkitGetEntries",
  "webkitGetEntriesByName",
  "webkitGetEntriesByType",
  "webkitGetFlowByName",
  "webkitGetGamepads",
  "webkitGetImageDataHD",
  "webkitGetNamedFlows",
  "webkitGetRegionFlowRanges",
  "webkitGetUserMedia",
  "webkitHasClosedCaptions",
  "webkitHidden",
  "webkitIDBCursor",
  "webkitIDBDatabase",
  "webkitIDBDatabaseError",
  "webkitIDBDatabaseException",
  "webkitIDBFactory",
  "webkitIDBIndex",
  "webkitIDBKeyRange",
  "webkitIDBObjectStore",
  "webkitIDBRequest",
  "webkitIDBTransaction",
  "webkitImageSmoothingEnabled",
  "webkitIndexedDB",
  "webkitInitMessageEvent",
  "webkitIsFullScreen",
  "webkitJustifyContent",
  "webkitKeys",
  "webkitLineClamp",
  "webkitLineDashOffset",
  "webkitLockOrientation",
  "webkitMask",
  "webkitMaskClip",
  "webkitMaskComposite",
  "webkitMaskImage",
  "webkitMaskOrigin",
  "webkitMaskPosition",
  "webkitMaskPositionX",
  "webkitMaskPositionY",
  "webkitMaskRepeat",
  "webkitMaskSize",
  "webkitMatchesSelector",
  "webkitMediaStream",
  "webkitNotifications",
  "webkitOfflineAudioContext",
  "webkitOrder",
  "webkitOrientation",
  "webkitPeerConnection00",
  "webkitPersistentStorage",
  "webkitPerspective",
  "webkitPerspectiveOrigin",
  "webkitPointerLockElement",
  "webkitPostMessage",
  "webkitPreservesPitch",
  "webkitPutImageDataHD",
  "webkitRTCPeerConnection",
  "webkitRegionOverset",
  "webkitRelativePath",
  "webkitRequestAnimationFrame",
  "webkitRequestFileSystem",
  "webkitRequestFullScreen",
  "webkitRequestFullscreen",
  "webkitRequestPointerLock",
  "webkitResolveLocalFileSystemURL",
  "webkitSetMediaKeys",
  "webkitSetResourceTimingBufferSize",
  "webkitShadowRoot",
  "webkitShowPlaybackTargetPicker",
  "webkitSlice",
  "webkitSpeechGrammar",
  "webkitSpeechGrammarList",
  "webkitSpeechRecognition",
  "webkitSpeechRecognitionError",
  "webkitSpeechRecognitionEvent",
  "webkitStorageInfo",
  "webkitSupportsFullscreen",
  "webkitTemporaryStorage",
  "webkitTextFillColor",
  "webkitTextSizeAdjust",
  "webkitTextStroke",
  "webkitTextStrokeColor",
  "webkitTextStrokeWidth",
  "webkitTransform",
  "webkitTransformOrigin",
  "webkitTransformStyle",
  "webkitTransition",
  "webkitTransitionDelay",
  "webkitTransitionDuration",
  "webkitTransitionProperty",
  "webkitTransitionTimingFunction",
  "webkitURL",
  "webkitUnlockOrientation",
  "webkitUserSelect",
  "webkitVideoDecodedByteCount",
  "webkitVisibilityState",
  "webkitWirelessVideoPlaybackDisabled",
  "webkitdirectory",
  "webkitdropzone",
  "webstore",
  "weight",
  "whatToShow",
  "wheelDelta",
  "wheelDeltaX",
  "wheelDeltaY",
  "whenDefined",
  "which",
  "white-space",
  "whiteSpace",
  "wholeText",
  "widows",
  "width",
  "will-change",
  "willChange",
  "willValidate",
  "window",
  "withCredentials",
  "word-break",
  "word-spacing",
  "word-wrap",
  "wordBreak",
  "wordSpacing",
  "wordWrap",
  "workerStart",
  "wow64",
  "wrap",
  "wrapKey",
  "writable",
  "writableAuxiliaries",
  "write",
  "writeText",
  "writeValue",
  "writeWithoutResponse",
  "writeln",
  "writing-mode",
  "writingMode",
  "x",
  "x1",
  "x2",
  "xChannelSelector",
  "xmlEncoding",
  "xmlStandalone",
  "xmlVersion",
  "xmlbase",
  "xmllang",
  "xmlspace",
  "xor",
  "xr",
  "y",
  "y1",
  "y2",
  "yChannelSelector",
  "yandex",
  "z",
  "z-index",
  "zIndex",
  "zoom",
  "zoomAndPan",
  "zoomRectScreen"
];

// node_modules/terser/lib/propmangle.js
function find_builtins(reserved) {
  domprops.forEach(add);
  var new_globals = ["Symbol", "Map", "Promise", "Proxy", "Reflect", "Set", "WeakMap", "WeakSet"];
  var objects = {};
  var global_ref = typeof global === "object" ? global : self;
  new_globals.forEach(function(new_global) {
    objects[new_global] = global_ref[new_global] || function() {
    };
  });
  [
    "null",
    "true",
    "false",
    "NaN",
    "Infinity",
    "-Infinity",
    "undefined"
  ].forEach(add);
  [
    Object,
    Array,
    Function,
    Number,
    String,
    Boolean,
    Error,
    Math,
    Date,
    RegExp,
    objects.Symbol,
    ArrayBuffer,
    DataView,
    decodeURI,
    decodeURIComponent,
    encodeURI,
    encodeURIComponent,
    eval,
    EvalError,
    Float32Array,
    Float64Array,
    Int8Array,
    Int16Array,
    Int32Array,
    isFinite,
    isNaN,
    JSON,
    objects.Map,
    parseFloat,
    parseInt,
    objects.Promise,
    objects.Proxy,
    RangeError,
    ReferenceError,
    objects.Reflect,
    objects.Set,
    SyntaxError,
    TypeError,
    Uint8Array,
    Uint8ClampedArray,
    Uint16Array,
    Uint32Array,
    URIError,
    objects.WeakMap,
    objects.WeakSet
  ].forEach(function(ctor) {
    Object.getOwnPropertyNames(ctor).map(add);
    if (ctor.prototype) {
      Object.getOwnPropertyNames(ctor.prototype).map(add);
    }
  });
  function add(name) {
    reserved.add(name);
  }
}
function reserve_quoted_keys(ast, reserved) {
  function add(name) {
    push_uniq(reserved, name);
  }
  ast.walk(new TreeWalker(function(node) {
    if (node instanceof AST_ObjectKeyVal && node.quote) {
      add(node.key);
    } else if (node instanceof AST_ObjectProperty && node.quote) {
      add(node.key.name);
    } else if (node instanceof AST_Sub) {
      addStrings(node.property, add);
    }
  }));
}
function addStrings(node, add) {
  node.walk(new TreeWalker(function(node2) {
    if (node2 instanceof AST_Sequence) {
      addStrings(node2.tail_node(), add);
    } else if (node2 instanceof AST_String) {
      add(node2.value);
    } else if (node2 instanceof AST_Conditional) {
      addStrings(node2.consequent, add);
      addStrings(node2.alternative, add);
    }
    return true;
  }));
}
function mangle_private_properties(ast, options3) {
  var cprivate = -1;
  var private_cache = /* @__PURE__ */ new Map();
  var nth_identifier = options3.nth_identifier || base54;
  ast = ast.transform(new TreeTransformer(function(node) {
    if (node instanceof AST_ClassPrivateProperty || node instanceof AST_PrivateMethod || node instanceof AST_PrivateGetter || node instanceof AST_PrivateSetter || node instanceof AST_PrivateIn) {
      node.key.name = mangle_private(node.key.name);
    } else if (node instanceof AST_DotHash) {
      node.property = mangle_private(node.property);
    }
  }));
  return ast;
  function mangle_private(name) {
    let mangled = private_cache.get(name);
    if (!mangled) {
      mangled = nth_identifier.get(++cprivate);
      private_cache.set(name, mangled);
    }
    return mangled;
  }
}
function mangle_properties(ast, options3) {
  options3 = defaults2(options3, {
    builtins: false,
    cache: null,
    debug: false,
    keep_quoted: false,
    nth_identifier: base54,
    only_cache: false,
    regex: null,
    reserved: null,
    undeclared: false
  }, true);
  var nth_identifier = options3.nth_identifier;
  var reserved_option = options3.reserved;
  if (!Array.isArray(reserved_option))
    reserved_option = [reserved_option];
  var reserved = new Set(reserved_option);
  if (!options3.builtins)
    find_builtins(reserved);
  var cname = -1;
  var cache;
  if (options3.cache) {
    cache = options3.cache.props;
  } else {
    cache = /* @__PURE__ */ new Map();
  }
  var regex = options3.regex && new RegExp(options3.regex);
  var debug = options3.debug !== false;
  var debug_name_suffix;
  if (debug) {
    debug_name_suffix = options3.debug === true ? "" : options3.debug;
  }
  var names_to_mangle = /* @__PURE__ */ new Set();
  var unmangleable = /* @__PURE__ */ new Set();
  cache.forEach((mangled_name) => unmangleable.add(mangled_name));
  var keep_quoted = !!options3.keep_quoted;
  ast.walk(new TreeWalker(function(node) {
    if (node instanceof AST_ClassPrivateProperty || node instanceof AST_PrivateMethod || node instanceof AST_PrivateGetter || node instanceof AST_PrivateSetter || node instanceof AST_DotHash) {
    } else if (node instanceof AST_ObjectKeyVal) {
      if (typeof node.key == "string" && (!keep_quoted || !node.quote)) {
        add(node.key);
      }
    } else if (node instanceof AST_ObjectProperty) {
      if (!keep_quoted || !node.quote) {
        add(node.key.name);
      }
    } else if (node instanceof AST_Dot) {
      var declared = !!options3.undeclared;
      if (!declared) {
        var root = node;
        while (root.expression) {
          root = root.expression;
        }
        declared = !(root.thedef && root.thedef.undeclared);
      }
      if (declared && (!keep_quoted || !node.quote)) {
        add(node.property);
      }
    } else if (node instanceof AST_Sub) {
      if (!keep_quoted) {
        addStrings(node.property, add);
      }
    } else if (node instanceof AST_Call && node.expression.print_to_string() == "Object.defineProperty") {
      addStrings(node.args[1], add);
    } else if (node instanceof AST_Binary && node.operator === "in") {
      addStrings(node.left, add);
    }
  }));
  return ast.transform(new TreeTransformer(function(node) {
    if (node instanceof AST_ClassPrivateProperty || node instanceof AST_PrivateMethod || node instanceof AST_PrivateGetter || node instanceof AST_PrivateSetter || node instanceof AST_DotHash) {
    } else if (node instanceof AST_ObjectKeyVal) {
      if (typeof node.key == "string" && (!keep_quoted || !node.quote)) {
        node.key = mangle(node.key);
      }
    } else if (node instanceof AST_ObjectProperty) {
      if (!keep_quoted || !node.quote) {
        node.key.name = mangle(node.key.name);
      }
    } else if (node instanceof AST_Dot) {
      if (!keep_quoted || !node.quote) {
        node.property = mangle(node.property);
      }
    } else if (!keep_quoted && node instanceof AST_Sub) {
      node.property = mangleStrings(node.property);
    } else if (node instanceof AST_Call && node.expression.print_to_string() == "Object.defineProperty") {
      node.args[1] = mangleStrings(node.args[1]);
    } else if (node instanceof AST_Binary && node.operator === "in") {
      node.left = mangleStrings(node.left);
    }
  }));
  function can_mangle(name) {
    if (unmangleable.has(name))
      return false;
    if (reserved.has(name))
      return false;
    if (options3.only_cache) {
      return cache.has(name);
    }
    if (/^-?[0-9]+(\.[0-9]+)?(e[+-][0-9]+)?$/.test(name))
      return false;
    return true;
  }
  function should_mangle(name) {
    if (regex && !regex.test(name))
      return false;
    if (reserved.has(name))
      return false;
    return cache.has(name) || names_to_mangle.has(name);
  }
  function add(name) {
    if (can_mangle(name))
      names_to_mangle.add(name);
    if (!should_mangle(name)) {
      unmangleable.add(name);
    }
  }
  function mangle(name) {
    if (!should_mangle(name)) {
      return name;
    }
    var mangled = cache.get(name);
    if (!mangled) {
      if (debug) {
        var debug_mangled = "_$" + name + "$" + debug_name_suffix + "_";
        if (can_mangle(debug_mangled)) {
          mangled = debug_mangled;
        }
      }
      if (!mangled) {
        do {
          mangled = nth_identifier.get(++cname);
        } while (!can_mangle(mangled));
      }
      cache.set(name, mangled);
    }
    return mangled;
  }
  function mangleStrings(node) {
    return node.transform(new TreeTransformer(function(node2) {
      if (node2 instanceof AST_Sequence) {
        var last = node2.expressions.length - 1;
        node2.expressions[last] = mangleStrings(node2.expressions[last]);
      } else if (node2 instanceof AST_String) {
        node2.value = mangle(node2.value);
      } else if (node2 instanceof AST_Conditional) {
        node2.consequent = mangleStrings(node2.consequent);
        node2.alternative = mangleStrings(node2.alternative);
      }
      return node2;
    }));
  }
}

// node_modules/terser/lib/minify.js
var to_ascii = typeof Buffer !== "undefined" ? (b64) => Buffer.from(b64, "base64").toString() : (b64) => decodeURIComponent(escape(atob(b64)));
var to_base64 = typeof Buffer !== "undefined" ? (str) => Buffer.from(str).toString("base64") : (str) => btoa(unescape(encodeURIComponent(str)));
function read_source_map(code) {
  var match2 = /(?:^|[^.])\/\/# sourceMappingURL=data:application\/json(;[\w=-]*)?;base64,([+/0-9A-Za-z]*=*)\s*$/.exec(code);
  if (!match2) {
    console.warn("inline source map not found");
    return null;
  }
  return to_ascii(match2[2]);
}
function set_shorthand(name, options3, keys) {
  if (options3[name]) {
    keys.forEach(function(key) {
      if (options3[key]) {
        if (typeof options3[key] != "object")
          options3[key] = {};
        if (!(name in options3[key]))
          options3[key][name] = options3[name];
      }
    });
  }
}
function init_cache(cache) {
  if (!cache)
    return;
  if (!("props" in cache)) {
    cache.props = /* @__PURE__ */ new Map();
  } else if (!(cache.props instanceof Map)) {
    cache.props = map_from_object(cache.props);
  }
}
function cache_to_json(cache) {
  return {
    props: map_to_object(cache.props)
  };
}
function log_input(files, options3, fs10, debug_folder) {
  if (!(fs10 && fs10.writeFileSync && fs10.mkdirSync)) {
    return;
  }
  try {
    fs10.mkdirSync(debug_folder);
  } catch (e) {
    if (e.code !== "EEXIST")
      throw e;
  }
  const log_path = `${debug_folder}/terser-debug-${Math.random() * 9999999 | 0}.log`;
  options3 = options3 || {};
  const options_str = JSON.stringify(options3, (_key, thing) => {
    if (typeof thing === "function")
      return "[Function " + thing.toString() + "]";
    if (thing instanceof RegExp)
      return "[RegExp " + thing.toString() + "]";
    return thing;
  }, 4);
  const files_str = (file) => {
    if (typeof file === "object" && options3.parse && options3.parse.spidermonkey) {
      return JSON.stringify(file, null, 2);
    } else if (typeof file === "object") {
      return Object.keys(file).map((key) => key + ": " + files_str(file[key])).join("\n\n");
    } else if (typeof file === "string") {
      return "```\n" + file + "\n```";
    } else {
      return file;
    }
  };
  fs10.writeFileSync(log_path, "Options: \n" + options_str + "\n\nInput files:\n\n" + files_str(files) + "\n");
}
async function minify(files, options3, _fs_module) {
  if (_fs_module && typeof process === "object" && process.env && typeof process.env.TERSER_DEBUG_DIR === "string") {
    log_input(files, options3, _fs_module, process.env.TERSER_DEBUG_DIR);
  }
  options3 = defaults2(options3, {
    compress: {},
    ecma: void 0,
    enclose: false,
    ie8: false,
    keep_classnames: void 0,
    keep_fnames: false,
    mangle: {},
    module: false,
    nameCache: null,
    output: null,
    format: null,
    parse: {},
    rename: void 0,
    safari10: false,
    sourceMap: false,
    spidermonkey: false,
    timings: false,
    toplevel: false,
    warnings: false,
    wrap: false
  }, true);
  var timings = options3.timings && {
    start: Date.now()
  };
  if (options3.keep_classnames === void 0) {
    options3.keep_classnames = options3.keep_fnames;
  }
  if (options3.rename === void 0) {
    options3.rename = options3.compress && options3.mangle;
  }
  if (options3.output && options3.format) {
    throw new Error("Please only specify either output or format option, preferrably format.");
  }
  options3.format = options3.format || options3.output || {};
  set_shorthand("ecma", options3, ["parse", "compress", "format"]);
  set_shorthand("ie8", options3, ["compress", "mangle", "format"]);
  set_shorthand("keep_classnames", options3, ["compress", "mangle"]);
  set_shorthand("keep_fnames", options3, ["compress", "mangle"]);
  set_shorthand("module", options3, ["parse", "compress", "mangle"]);
  set_shorthand("safari10", options3, ["mangle", "format"]);
  set_shorthand("toplevel", options3, ["compress", "mangle"]);
  set_shorthand("warnings", options3, ["compress"]);
  var quoted_props;
  if (options3.mangle) {
    options3.mangle = defaults2(options3.mangle, {
      cache: options3.nameCache && (options3.nameCache.vars || {}),
      eval: false,
      ie8: false,
      keep_classnames: false,
      keep_fnames: false,
      module: false,
      nth_identifier: base54,
      properties: false,
      reserved: [],
      safari10: false,
      toplevel: false
    }, true);
    if (options3.mangle.properties) {
      if (typeof options3.mangle.properties != "object") {
        options3.mangle.properties = {};
      }
      if (options3.mangle.properties.keep_quoted) {
        quoted_props = options3.mangle.properties.reserved;
        if (!Array.isArray(quoted_props))
          quoted_props = [];
        options3.mangle.properties.reserved = quoted_props;
      }
      if (options3.nameCache && !("cache" in options3.mangle.properties)) {
        options3.mangle.properties.cache = options3.nameCache.props || {};
      }
    }
    init_cache(options3.mangle.cache);
    init_cache(options3.mangle.properties.cache);
  }
  if (options3.sourceMap) {
    options3.sourceMap = defaults2(options3.sourceMap, {
      asObject: false,
      content: null,
      filename: null,
      includeSources: false,
      root: null,
      url: null
    }, true);
  }
  if (timings)
    timings.parse = Date.now();
  var toplevel;
  if (files instanceof AST_Toplevel) {
    toplevel = files;
  } else {
    if (typeof files == "string" || options3.parse.spidermonkey && !Array.isArray(files)) {
      files = [files];
    }
    options3.parse = options3.parse || {};
    options3.parse.toplevel = null;
    if (options3.parse.spidermonkey) {
      options3.parse.toplevel = AST_Node.from_mozilla_ast(Object.keys(files).reduce(function(toplevel2, name2) {
        if (!toplevel2)
          return files[name2];
        toplevel2.body = toplevel2.body.concat(files[name2].body);
        return toplevel2;
      }, null));
    } else {
      delete options3.parse.spidermonkey;
      for (var name in files)
        if (HOP(files, name)) {
          options3.parse.filename = name;
          options3.parse.toplevel = parse(files[name], options3.parse);
          if (options3.sourceMap && options3.sourceMap.content == "inline") {
            if (Object.keys(files).length > 1)
              throw new Error("inline source map only works with singular input");
            options3.sourceMap.content = read_source_map(files[name]);
          }
        }
    }
    toplevel = options3.parse.toplevel;
  }
  if (quoted_props && options3.mangle.properties.keep_quoted !== "strict") {
    reserve_quoted_keys(toplevel, quoted_props);
  }
  if (options3.wrap) {
    toplevel = toplevel.wrap_commonjs(options3.wrap);
  }
  if (options3.enclose) {
    toplevel = toplevel.wrap_enclose(options3.enclose);
  }
  if (timings)
    timings.rename = Date.now();
  if (0) {
    toplevel.figure_out_scope(options3.mangle);
    toplevel.expand_names(options3.mangle);
  }
  if (timings)
    timings.compress = Date.now();
  if (options3.compress) {
    toplevel = new Compressor(options3.compress, {
      mangle_options: options3.mangle
    }).compress(toplevel);
  }
  if (timings)
    timings.scope = Date.now();
  if (options3.mangle)
    toplevel.figure_out_scope(options3.mangle);
  if (timings)
    timings.mangle = Date.now();
  if (options3.mangle) {
    toplevel.compute_char_frequency(options3.mangle);
    toplevel.mangle_names(options3.mangle);
    toplevel = mangle_private_properties(toplevel, options3.mangle);
  }
  if (timings)
    timings.properties = Date.now();
  if (options3.mangle && options3.mangle.properties) {
    toplevel = mangle_properties(toplevel, options3.mangle.properties);
  }
  if (timings)
    timings.format = Date.now();
  var result = {};
  if (options3.format.ast) {
    result.ast = toplevel;
  }
  if (options3.format.spidermonkey) {
    result.ast = toplevel.to_mozilla_ast();
  }
  let format_options;
  if (!HOP(options3.format, "code") || options3.format.code) {
    format_options = { ...options3.format };
    if (!format_options.ast) {
      format_options._destroy_ast = true;
      walk(toplevel, (node) => {
        if (node instanceof AST_Scope) {
          node.variables = void 0;
          node.enclosed = void 0;
          node.parent_scope = void 0;
        }
        if (node.block_scope) {
          node.block_scope.variables = void 0;
          node.block_scope.enclosed = void 0;
          node.parent_scope = void 0;
        }
      });
    }
    if (options3.sourceMap) {
      if (options3.sourceMap.includeSources && files instanceof AST_Toplevel) {
        throw new Error("original source content unavailable");
      }
      format_options.source_map = await SourceMap({
        file: options3.sourceMap.filename,
        orig: options3.sourceMap.content,
        root: options3.sourceMap.root,
        files: options3.sourceMap.includeSources ? files : null
      });
    }
    delete format_options.ast;
    delete format_options.code;
    delete format_options.spidermonkey;
    var stream2 = OutputStream(format_options);
    toplevel.print(stream2);
    result.code = stream2.get();
    if (options3.sourceMap) {
      Object.defineProperty(result, "map", {
        configurable: true,
        enumerable: true,
        get() {
          const map = format_options.source_map.getEncoded();
          return result.map = options3.sourceMap.asObject ? map : JSON.stringify(map);
        },
        set(value) {
          Object.defineProperty(result, "map", {
            value,
            writable: true
          });
        }
      });
      result.decoded_map = format_options.source_map.getDecoded();
      if (options3.sourceMap.url == "inline") {
        var sourceMap = typeof result.map === "object" ? JSON.stringify(result.map) : result.map;
        result.code += "\n//# sourceMappingURL=data:application/json;charset=utf-8;base64," + to_base64(sourceMap);
      } else if (options3.sourceMap.url) {
        result.code += "\n//# sourceMappingURL=" + options3.sourceMap.url;
      }
    }
  }
  if (options3.nameCache && options3.mangle) {
    if (options3.mangle.cache)
      options3.nameCache.vars = cache_to_json(options3.mangle.cache);
    if (options3.mangle.properties && options3.mangle.properties.cache) {
      options3.nameCache.props = cache_to_json(options3.mangle.properties.cache);
    }
  }
  if (format_options && format_options.source_map) {
    format_options.source_map.destroy();
  }
  if (timings) {
    timings.end = Date.now();
    result.timings = {
      parse: 1e-3 * (timings.rename - timings.parse),
      rename: 1e-3 * (timings.compress - timings.rename),
      compress: 1e-3 * (timings.scope - timings.compress),
      scope: 1e-3 * (timings.mangle - timings.scope),
      mangle: 1e-3 * (timings.properties - timings.mangle),
      properties: 1e-3 * (timings.format - timings.properties),
      format: 1e-3 * (timings.end - timings.format),
      total: 1e-3 * (timings.end - timings.start)
    };
  }
  return result;
}

// node_modules/@node-minify/terser/dist/index.mjs
var __getOwnPropNames3 = Object.getOwnPropertyNames;
var __commonJS3 = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames3(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var require_src2 = __commonJS3({
  "src/index.ts"(exports, module) {
    var minifyTerser = async ({ settings, content, callback, index }) => {
      try {
        const contentMinified = await minify(content ?? "", settings?.options);
        if (contentMinified.map && typeof settings?.options?.sourceMap?.url === "string") {
          utils.writeFile({ file: settings.options.sourceMap.url, content: contentMinified.map, index });
        }
        if (settings && !settings.content && settings.output) {
          utils.writeFile({ file: settings.output, content: contentMinified.code, index });
        }
        if (callback) {
          return callback(null, contentMinified.code);
        }
        return contentMinified.code;
      } catch (error) {
        return callback && callback(error);
      }
    };
    minifyTerser.default = minifyTerser;
    module.exports = minifyTerser;
  }
});
var dist_default2 = require_src2();

// node_modules/open-next/dist/minimize-js.js
var failed_files = [];
var total_files = 0;
var options = {};
var promiseSeries = async (tasks, initial) => {
  if (!Array.isArray(tasks)) {
    return Promise.reject(new TypeError("promise.series only accepts an array of functions"));
  }
  return tasks.reduce((current, next) => {
    return current.then(next);
  }, Promise.resolve(initial));
};
var minifyJS = async (file) => {
  total_files++;
  try {
    await dist_default({
      compressor: dist_default2,
      input: file,
      output: file,
      options: {
        module: options.module,
        mangle: options.mangle,
        compress: { reduce_vars: false }
      }
    });
  } catch (e) {
    failed_files.push(file);
  }
};
var minifyJSON = async (file) => {
  try {
    if (options.compress_json || options.packagejson) {
      total_files++;
      var is_package_json = file.indexOf("package.json") > -1;
      var data = await fs3.readFile(file, "utf8");
      var json = JSON.parse(data);
      var new_json = {};
      if (options.packagejson && is_package_json) {
        var { name, version, bin, main, binary, engines } = json;
        new_json = { name, version };
        if (bin)
          new_json.bin = bin;
        if (binary)
          new_json.binary = binary;
        if (main)
          new_json.main = main;
        if (engines)
          new_json.engines = engines;
      } else {
        new_json = json;
      }
      await fs3.writeFile(file, JSON.stringify(new_json));
    }
  } catch (e) {
  }
};
var walk2 = async (currentDirPath) => {
  var js_files = [];
  var json_files = [];
  var dirs = [];
  var current_dirs = await fs3.readdir(currentDirPath);
  for (const name of current_dirs) {
    var filePath = path4.join(currentDirPath, name);
    var stat = await fs3.stat(filePath);
    var is_bin = /\.bin$/;
    if (stat.isFile()) {
      if (filePath.substr(-5) === ".json")
        json_files.push(filePath);
      else if (filePath.substr(-3) === ".js" || options.all_js)
        js_files.push(filePath);
    } else if (stat.isDirectory() && !is_bin.test(filePath)) {
      dirs.push(filePath);
    }
  }
  var js_promise = Promise.all(js_files.map((f) => minifyJS(f)));
  var json_promise = Promise.all(json_files.map((f) => minifyJSON(f)));
  await Promise.all([js_promise, json_promise]);
  await promiseSeries(dirs.map((dir) => () => walk2(dir)));
};
async function minifyAll(dir, opts) {
  Object.assign(options, opts || {});
  await walk2(dir);
  if (failed_files.length) {
    console.log(`

Failed to minify files:`);
    failed_files.forEach((f) => console.log("	" + f));
  }
}

// node_modules/open-next/dist/plugins/replacement.js
import { readFile } from "node:fs/promises";
var overridePattern = /\/\/#override (\w+)\n([\s\S]*?)\n\/\/#endOverride/gm;
var importPattern = /\/\/#import([\s\S]*?)\n\/\/#endImport/gm;
function openNextReplacementPlugin({ target, replacements, deletes, name }) {
  return {
    name: name ?? "opennext",
    setup(build3) {
      build3.onLoad({ filter: target }, async (args2) => {
        let contents = await readFile(args2.path, "utf-8");
        await Promise.all([
          ...(deletes ?? []).map(async (id) => {
            const pattern = new RegExp(`//#override (${id})
([\\s\\S]*?)//#endOverride`);
            logger_default.debug(source_default.blue(`Open-next replacement plugin ${name}`), ` -- Deleting override for ${id}`);
            contents = contents.replace(pattern, "");
          }),
          ...(replacements ?? []).map(async (fp) => {
            const p = fp;
            const replacementFile = await readFile(p, "utf-8");
            const matches = replacementFile.matchAll(overridePattern);
            const importMatch = replacementFile.match(importPattern);
            const addedImport = importMatch ? importMatch[0] : "";
            contents = `${addedImport}
${contents}`;
            for (const match2 of matches) {
              const replacement = match2[2];
              const id = match2[1];
              const pattern = new RegExp(`//#override (${id})
([\\s\\S]*?)//#endOverride`, "g");
              logger_default.debug(source_default.blue(`Open-next replacement plugin ${name}`), `-- Applying override for ${id} from ${fp}`);
              contents = contents.replace(pattern, replacement);
            }
          })
        ]);
        return {
          contents
        };
      });
    }
  };
}

// node_modules/open-next/dist/plugins/resolve.js
import { readFileSync as readFileSync2 } from "node:fs";
function getOverrideOrDefault(override, defaultOverride) {
  if (typeof override === "string") {
    return override;
  }
  return defaultOverride;
}
function openNextResolvePlugin({ overrides, fnName }) {
  return {
    name: "opennext-resolve",
    setup(build3) {
      logger_default.debug(`OpenNext Resolve plugin for ${fnName}`);
      build3.onLoad({ filter: /core(\/|\\)resolve\.js/g }, async (args2) => {
        let contents = readFileSync2(args2.path, "utf-8");
        if (overrides?.wrapper) {
          contents = contents.replace("../wrappers/aws-lambda.js", `../wrappers/${getOverrideOrDefault(overrides.wrapper, "aws-lambda")}.js`);
        }
        if (overrides?.converter) {
          contents = contents.replace("../converters/aws-apigw-v2.js", `../converters/${getOverrideOrDefault(overrides.converter, "dummy")}.js`);
        }
        if (overrides?.tagCache) {
          contents = contents.replace("../cache/tag/dynamodb.js", `../cache/tag/${getOverrideOrDefault(overrides.tagCache, "dynamodb-lite")}.js`);
        }
        if (overrides?.queue) {
          contents = contents.replace("../queue/sqs.js", `../queue/${getOverrideOrDefault(overrides.queue, "sqs-lite")}.js`);
        }
        if (overrides?.incrementalCache) {
          contents = contents.replace("../cache/incremental/s3.js", `../cache/incremental/${getOverrideOrDefault(overrides.incrementalCache, "s3-lite")}.js`);
        }
        if (overrides?.imageLoader) {
          contents = contents.replace("../overrides/imageLoader/s3.js", `../overrides/imageLoader/${getOverrideOrDefault(overrides.imageLoader, "s3")}.js`);
        }
        return {
          contents
        };
      });
    }
  };
}

// node_modules/open-next/dist/build/bundleNextServer.js
var import_esbuild2 = __toESM(require_main(), 1);
import { createRequire as topLevelCreateRequire } from "node:module";
import path5 from "path";
var externals = [
  // This one was causing trouble, don't know why
  "../experimental/testmode/server",
  // sharedExternals
  "styled-jsx",
  "styled-jsx/style",
  "@opentelemetry/api",
  "next/dist/compiled/@next/react-dev-overlay/dist/middleware",
  "next/dist/compiled/@ampproject/toolbox-optimizer",
  "next/dist/compiled/edge-runtime",
  "next/dist/compiled/@edge-runtime/ponyfill",
  "next/dist/compiled/undici",
  "next/dist/compiled/raw-body",
  "next/dist/server/capsize-font-metrics.json",
  "critters",
  "next/dist/compiled/node-html-parser",
  "next/dist/compiled/compression",
  "next/dist/compiled/jsonwebtoken",
  "next/dist/compiled/@opentelemetry/api",
  "next/dist/compiled/@mswjs/interceptors/ClientRequest",
  "next/dist/compiled/ws",
  // externalsMap
  // In the config they replace it, but we don't use this one inside NextServer anymore 13.4.12+
  // For earlier versions we might have to alias it
  "./web/sandbox",
  // pagesExternal
  "react",
  "react-dom",
  "react-server-dom-webpack",
  "react-server-dom-turbopack",
  // We need to remove this since this is what webpack is building
  // Adding it cause to add a lot of unnecessary deps
  "next/dist/compiled/next-server"
];
async function bundleNextServer(outputDir, appPath) {
  const require5 = topLevelCreateRequire(`${appPath}/package.json`);
  const entrypoint = require5.resolve("next/dist/esm/server/next-server.js");
  await (0, import_esbuild2.build)({
    entryPoints: [entrypoint],
    bundle: true,
    platform: "node",
    target: ["node18"],
    // packages: "external",
    format: "cjs",
    external: externals,
    minify: true,
    outfile: path5.join(outputDir, "next-server.runtime.prod.js"),
    sourcemap: false,
    plugins: [
      {
        name: "opennext-next-server",
        setup(build3) {
          build3.onResolve({ filter: /\.\/module.compiled/ }, (args2) => {
            const dir = args2.resolveDir.split("/").slice(-1);
            return {
              path: path5.join("next/dist/compiled/next-server/", `${dir}.runtime.prod.js`),
              external: true
            };
          });
          build3.onResolve({ filter: /[\\/]react-server\.node/ }, (args2) => {
            return {
              path: args2.path,
              external: true
            };
          });
          build3.onResolve({ filter: /vendored[\\/]rsc[\\/]entrypoints/ }, (args2) => {
            return {
              path: args2.path,
              external: true
            };
          });
          build3.onResolve({ filter: /\.external/ }, (args2) => {
            return {
              path: args2.path.replace(/\.\./, "next/dist"),
              external: true
            };
          });
        }
      }
    ]
  });
}

// node_modules/open-next/dist/build/copyTracedFiles.js
import url from "node:url";
import { copyFileSync, existsSync as existsSync2, mkdirSync, readdirSync as readdirSync2, readFileSync as readFileSync3, readlinkSync as readlinkSync2, statSync as statSync2, symlinkSync, writeFileSync as writeFileSync2 } from "fs";
import path6 from "path";
var __dirname2 = url.fileURLToPath(new URL(".", import.meta.url));
function copyPatchFile(outputDir) {
  const patchFile = path6.join(__dirname2, "patch", "patchedAsyncStorage.js");
  const outputPatchFile = path6.join(outputDir, "patchedAsyncStorage.cjs");
  copyFileSync(patchFile, outputPatchFile);
}
async function copyTracedFiles(buildOutputPath, packagePath, outputDir, routes, bundledNextServer) {
  const tsStart = Date.now();
  const dotNextDir = path6.join(buildOutputPath, ".next");
  const standaloneDir = path6.join(dotNextDir, "standalone");
  const standaloneNextDir = path6.join(standaloneDir, packagePath, ".next");
  const outputNextDir = path6.join(outputDir, packagePath, ".next");
  const extractFiles = (files, from = standaloneNextDir) => {
    return files.map((f) => path6.resolve(from, f));
  };
  const requiredServerFiles = JSON.parse(readFileSync3(path6.join(dotNextDir, bundledNextServer ? "next-minimal-server.js.nft.json" : "next-server.js.nft.json"), "utf8"));
  const filesToCopy = /* @__PURE__ */ new Map();
  extractFiles(requiredServerFiles.files).forEach((f) => {
    filesToCopy.set(f, f.replace(standaloneDir, outputDir));
  });
  if (existsSync2(path6.join(standaloneDir, ".next/server/pages"))) {
    mkdirSync(path6.join(outputNextDir, "server/pages"), {
      recursive: true
    });
  }
  if (existsSync2(path6.join(standaloneDir, ".next/server/app"))) {
    mkdirSync(path6.join(outputNextDir, "server/app"), {
      recursive: true
    });
  }
  mkdirSync(path6.join(outputNextDir, "server/chunks"), {
    recursive: true
  });
  const computeCopyFilesForPage = (pagePath) => {
    const fullFilePath = `server/${pagePath}.js`;
    let requiredFiles;
    try {
      requiredFiles = JSON.parse(readFileSync3(path6.join(standaloneNextDir, `${fullFilePath}.nft.json`), "utf8"));
    } catch (e) {
      if (existsSync2(path6.join(standaloneNextDir, fullFilePath))) {
        throw new Error(`
--------------------------------------------------------------------------------
${pagePath} cannot use the edge runtime.
OpenNext requires edge runtime function to be defined in a separate function. 
See the docs for more information on how to bundle edge runtime functions.
--------------------------------------------------------------------------------
        `);
      } else {
        throw new Error(`
--------------------------------------------------------------------------------
We cannot find the route for ${pagePath}.
File ${fullFilePath} does not exist
--------------------------------------------------------------------------------`);
      }
    }
    const dir = path6.dirname(fullFilePath);
    extractFiles(requiredFiles.files, path6.join(standaloneNextDir, dir)).forEach((f) => {
      filesToCopy.set(f, f.replace(standaloneDir, outputDir));
    });
    if (!existsSync2(path6.join(standaloneNextDir, `${fullFilePath}`))) {
      throw new Error(`This error should only happen for static 404 and 500 page from page router. Report this if that's not the case.,
        File ${fullFilePath} does not exist`);
    }
    filesToCopy.set(path6.join(standaloneNextDir, fullFilePath), path6.join(outputNextDir, fullFilePath));
  };
  const safeComputeCopyFilesForPage = (pagePath, alternativePath) => {
    try {
      computeCopyFilesForPage(pagePath);
    } catch (e) {
      if (alternativePath) {
        computeCopyFilesForPage(alternativePath);
      }
    }
  };
  const hasPageDir = routes.some((route) => route.startsWith("pages/"));
  const hasAppDir = routes.some((route) => route.startsWith("app/"));
  if (hasPageDir) {
    computeCopyFilesForPage("pages/_app");
    computeCopyFilesForPage("pages/_document");
    computeCopyFilesForPage("pages/_error");
    safeComputeCopyFilesForPage("pages/404");
    safeComputeCopyFilesForPage("pages/500");
  }
  if (hasAppDir) {
    safeComputeCopyFilesForPage("app/_not-found", "app/_not-found/page");
  }
  routes.forEach((route) => {
    computeCopyFilesForPage(route);
  });
  filesToCopy.forEach((to, from) => {
    if (
      //TODO: we need to figure which packages we could safely remove
      from.includes(path6.join("node_modules", "caniuse-lite")) || // from.includes("jest-worker") || This ones seems necessary for next 12
      from.includes(path6.join("node_modules", "sharp"))
    ) {
      return;
    }
    mkdirSync(path6.dirname(to), { recursive: true });
    let symlink = null;
    try {
      symlink = readlinkSync2(from);
    } catch (e) {
    }
    if (symlink) {
      try {
        symlinkSync(symlink, to);
      } catch (e) {
        if (e.code !== "EEXIST") {
          throw e;
        }
      }
    } else {
      copyFileSync(from, to);
    }
  });
  readdirSync2(standaloneNextDir).forEach((f) => {
    if (statSync2(path6.join(standaloneNextDir, f)).isDirectory())
      return;
    copyFileSync(path6.join(standaloneNextDir, f), path6.join(outputNextDir, f));
  });
  mkdirSync(path6.join(outputNextDir, "server"), { recursive: true });
  readdirSync2(path6.join(standaloneNextDir, "server")).forEach((f) => {
    if (statSync2(path6.join(standaloneNextDir, "server", f)).isDirectory())
      return;
    if (f !== "server.js") {
      copyFileSync(path6.join(standaloneNextDir, "server", f), path6.join(path6.join(outputNextDir, "server"), f));
    }
  });
  copyPatchFile(path6.join(outputDir, packagePath));
  if (!hasPageDir) {
    writeFileSync2(path6.join(outputNextDir, "server/pages-manifest.json"), "{}");
  }
  const copyStaticFile = (filePath) => {
    if (existsSync2(path6.join(standaloneNextDir, filePath))) {
      mkdirSync(path6.dirname(path6.join(outputNextDir, filePath)), {
        recursive: true
      });
      copyFileSync(path6.join(standaloneNextDir, filePath), path6.join(outputNextDir, filePath));
    }
  };
  if (hasPageDir) {
    const staticFiles = Object.values(JSON.parse(readFileSync3(path6.join(standaloneNextDir, "server/pages-manifest.json"), "utf8")));
    const prerenderManifest = JSON.parse(readFileSync3(path6.join(standaloneNextDir, "prerender-manifest.json"), "utf8"));
    const config2 = JSON.parse(readFileSync3(path6.join(standaloneNextDir, "required-server-files.json"), "utf8")).config;
    const locales = config2.i18n?.locales;
    Object.values(prerenderManifest.dynamicRoutes).forEach((route) => {
      if (typeof route.fallback === "string") {
        if (locales) {
          locales.forEach((locale) => {
            staticFiles.push(`pages/${locale}${route.fallback}`);
          });
        } else {
          staticFiles.push(`pages${route.fallback}`);
        }
      }
    });
    staticFiles.forEach((f) => {
      if (f.endsWith(".html")) {
        copyStaticFile(`server/${f}`);
      }
    });
  }
  logger_default.debug("copyTracedFiles:", Date.now() - tsStart, "ms");
}

// node_modules/open-next/dist/build/edge/createEdgeBundle.js
import { mkdirSync as mkdirSync2 } from "node:fs";
import url3 from "node:url";
import fs6 from "fs";
import path10 from "path";

// node_modules/open-next/dist/plugins/edge.js
import { readFileSync as readFileSync4 } from "node:fs";
import path8 from "node:path";

// node_modules/open-next/dist/adapters/config/util.js
import fs4 from "fs";
import path7 from "path";
function loadConfig(nextDir) {
  const filePath = path7.join(nextDir, "required-server-files.json");
  const json = fs4.readFileSync(filePath, "utf-8");
  const { config: config2 } = JSON.parse(json);
  return config2;
}
function loadBuildId(nextDir) {
  const filePath = path7.join(nextDir, "BUILD_ID");
  return fs4.readFileSync(filePath, "utf-8").trim();
}
function loadHtmlPages(nextDir) {
  const filePath = path7.join(nextDir, "server", "pages-manifest.json");
  const json = fs4.readFileSync(filePath, "utf-8");
  return Object.entries(JSON.parse(json)).filter(([_, value]) => value.endsWith(".html")).map(([key]) => key);
}
function loadRoutesManifest(nextDir) {
  const filePath = path7.join(nextDir, "routes-manifest.json");
  const json = fs4.readFileSync(filePath, "utf-8");
  const routesManifest = JSON.parse(json);
  const _dataRoutes = routesManifest.dataRoutes ?? [];
  const dataRoutes = {
    static: _dataRoutes.filter((r) => r.routeKeys === void 0),
    dynamic: _dataRoutes.filter((r) => r.routeKeys !== void 0)
  };
  return {
    basePath: routesManifest.basePath,
    rewrites: Array.isArray(routesManifest.rewrites) ? { beforeFiles: [], afterFiles: routesManifest.rewrites, fallback: [] } : {
      beforeFiles: routesManifest.rewrites.beforeFiles ?? [],
      afterFiles: routesManifest.rewrites.afterFiles ?? [],
      fallback: routesManifest.rewrites.fallback ?? []
    },
    redirects: routesManifest.redirects ?? [],
    routes: {
      static: routesManifest.staticRoutes ?? [],
      dynamic: routesManifest.dynamicRoutes ?? [],
      data: dataRoutes
    },
    locales: routesManifest.i18n?.locales ?? []
  };
}
function loadConfigHeaders(nextDir) {
  const filePath = path7.join(nextDir, "routes-manifest.json");
  const json = fs4.readFileSync(filePath, "utf-8");
  const routesManifest = JSON.parse(json);
  return routesManifest.headers;
}
function loadPrerenderManifest(nextDir) {
  const filePath = path7.join(nextDir, "prerender-manifest.json");
  const json = fs4.readFileSync(filePath, "utf-8");
  return JSON.parse(json);
}
function loadAppPathsManifestKeys(nextDir) {
  const appPathsManifestPath = path7.join(nextDir, "server", "app-paths-manifest.json");
  const appPathsManifestJson = fs4.existsSync(appPathsManifestPath) ? fs4.readFileSync(appPathsManifestPath, "utf-8") : "{}";
  const appPathsManifest = JSON.parse(appPathsManifestJson);
  return Object.keys(appPathsManifest).map((key) => {
    let cleanedKey = key.replace(/\/@[^\/]+/g, "");
    cleanedKey = cleanedKey.replace(/\/\((?!\.)[^\)]*\)/g, "");
    cleanedKey = cleanedKey.replace(/\/page$/g, "");
    return cleanedKey === "" ? "/" : cleanedKey;
  });
}
function loadMiddlewareManifest(nextDir) {
  const filePath = path7.join(nextDir, "server", "middleware-manifest.json");
  const json = fs4.readFileSync(filePath, "utf-8");
  return JSON.parse(json);
}

// node_modules/open-next/dist/plugins/edge.js
function openNextEdgePlugins({ nextDir, edgeFunctionHandlerPath, middlewareInfo, isInCloudfare }) {
  const entryFiles = middlewareInfo.files.map((file) => path8.join(nextDir, file));
  const routes = [
    {
      name: middlewareInfo.name || "/",
      page: middlewareInfo.page,
      regex: middlewareInfo.matchers.map((m) => m.regexp)
    }
  ];
  const wasmFiles = middlewareInfo.wasm ?? [];
  return {
    name: "opennext-edge",
    setup(build3) {
      if (edgeFunctionHandlerPath) {
        build3.onResolve({ filter: /\.\/middleware.mjs/g }, () => {
          return {
            path: edgeFunctionHandlerPath
          };
        });
      }
      build3.onResolve({ filter: /\.(mjs|wasm)$/g }, (args2) => {
        return {
          external: true
        };
      });
      build3.onResolve({ filter: /^node:/ }, ({ kind, path: path14 }) => {
        return kind === "require-call" ? { path: path14, namespace: "node-built-in-modules" } : void 0;
      });
      build3.onLoad({ filter: /.*/, namespace: "node-built-in-modules" }, ({ path: path14 }) => {
        return {
          contents: `export * from '${path14}'`,
          loader: "js"
        };
      });
      build3.onLoad({ filter: /\/edgeFunctionHandler.js/g }, async (args2) => {
        let contents = readFileSync4(args2.path, "utf-8");
        contents = `
globalThis._ENTRIES = {};
globalThis.self = globalThis;
if(!globalThis.process){
  globalThis.process = {env: {}};
}
globalThis._ROUTES = ${JSON.stringify(routes)};

import {Buffer} from "node:buffer";
globalThis.Buffer = Buffer;

import {AsyncLocalStorage} from "node:async_hooks";
globalThis.AsyncLocalStorage = AsyncLocalStorage;
${isInCloudfare ? `` : `
import {readFileSync} from "node:fs";
import path from "node:path";
function addDuplexToInit(init) {
  return typeof init === 'undefined' ||
    (typeof init === 'object' && init.duplex === undefined)
    ? { duplex: 'half', ...init }
    : init
}
// We need to override Request to add duplex to the init, it seems Next expects it to work like this
class OverrideRequest extends Request {
  constructor(input, init) {
    super(input, addDuplexToInit(init))
  }
}
globalThis.Request = OverrideRequest;

// If we're not in cloudflare, we polyfill crypto
// https://github.com/vercel/edge-runtime/blob/main/packages/primitives/src/primitives/crypto.js
import { webcrypto } from 'node:crypto'
if(!globalThis.crypto){
  globalThis.crypto = new webcrypto.Crypto()
}
if(!globalThis.CryptoKey){
  globalThis.CryptoKey = webcrypto.CryptoKey
}
function SubtleCrypto() {
  if (!(this instanceof SubtleCrypto)) return new SubtleCrypto()
  throw TypeError('Illegal constructor')
}
if(!globalThis.SubtleCrypto) {
  globalThis.SubtleCrypto = SubtleCrypto
}
if(!globalThis.Crypto) {
  globalThis.Crypto = webcrypto.Crypto
}
// We also need to polyfill URLPattern
if (!globalThis.URLPattern) { 
  await import("urlpattern-polyfill");
}
`}
${wasmFiles.map((file) => isInCloudfare ? `import ${file.name} from './wasm/${file.name}.wasm';` : `const ${file.name} = readFileSync(path.join(__dirname,'/wasm/${file.name}.wasm'));`).join("\n")}
${entryFiles?.map((file) => `require("${file}");`).join("\n")}
${contents}        
        `;
        return {
          contents
        };
      });
      build3.onLoad({ filter: /adapters\/config\/index/g }, async () => {
        const NextConfig = loadConfig(nextDir);
        const BuildId = loadBuildId(nextDir);
        const HtmlPages = loadHtmlPages(nextDir);
        const RoutesManifest = loadRoutesManifest(nextDir);
        const ConfigHeaders = loadConfigHeaders(nextDir);
        const PrerenderManifest = loadPrerenderManifest(nextDir);
        const AppPathsManifestKeys = loadAppPathsManifestKeys(nextDir);
        const MiddlewareManifest = loadMiddlewareManifest(nextDir);
        const contents = `
  import path from "path";
  
  import { debug } from "../logger";
  
  if(!globalThis.__dirname) {
    globalThis.__dirname = ""
  }
  
  export const NEXT_DIR = path.join(__dirname, ".next");
  export const OPEN_NEXT_DIR = path.join(__dirname, ".open-next");
  
  debug({ NEXT_DIR, OPEN_NEXT_DIR });
  
  export const NextConfig = ${JSON.stringify(NextConfig)};
  export const BuildId = ${JSON.stringify(BuildId)};
  export const HtmlPages = ${JSON.stringify(HtmlPages)};
  export const RoutesManifest = ${JSON.stringify(RoutesManifest)};
  export const ConfigHeaders = ${JSON.stringify(ConfigHeaders)};
  export const PrerenderManifest = ${JSON.stringify(PrerenderManifest)};
  export const AppPathsManifestKeys = ${JSON.stringify(AppPathsManifestKeys)};
  export const MiddlewareManifest = ${JSON.stringify(MiddlewareManifest)};

  process.env.NEXT_BUILD_ID = BuildId;
  
          `;
        return {
          contents
        };
      });
    }
  };
}

// node_modules/open-next/dist/build/helper.js
var import_esbuild3 = __toESM(require_main(), 1);
import fs5 from "node:fs";
import { createRequire as topLevelCreateRequire2 } from "node:module";
import path9 from "node:path";
import url2 from "node:url";
var require2 = topLevelCreateRequire2(import.meta.url);
var __dirname3 = url2.fileURLToPath(new URL(".", import.meta.url));
function normalizeOptions(config2, root) {
  const appPath = path9.join(process.cwd(), config2.appPath || ".");
  const buildOutputPath = path9.join(process.cwd(), config2.buildOutputPath || ".");
  const outputDir = path9.join(buildOutputPath, ".open-next");
  let appPackageJsonPath;
  if (config2.packageJsonPath) {
    const _pkgPath = path9.join(process.cwd(), config2.packageJsonPath);
    appPackageJsonPath = _pkgPath.endsWith("package.json") ? _pkgPath : path9.join(_pkgPath, "./package.json");
  } else {
    appPackageJsonPath = findNextPackageJsonPath(appPath, root);
  }
  return {
    openNextVersion: getOpenNextVersion(),
    nextVersion: getNextVersion(appPath),
    appPackageJsonPath,
    appPath,
    appBuildOutputPath: buildOutputPath,
    appPublicPath: path9.join(appPath, "public"),
    outputDir,
    tempDir: path9.join(outputDir, ".build"),
    debug: Boolean(process.env.OPEN_NEXT_DEBUG) ?? false,
    monorepoRoot: root
  };
}
function findNextPackageJsonPath(appPath, root) {
  return fs5.existsSync(path9.join(appPath, "./package.json")) ? path9.join(appPath, "./package.json") : path9.join(root, "./package.json");
}
function esbuildSync(esbuildOptions, options3) {
  const { openNextVersion, debug } = options3;
  const result = (0, import_esbuild3.buildSync)({
    target: "esnext",
    format: "esm",
    platform: "node",
    bundle: true,
    minify: debug ? false : true,
    mainFields: ["module", "main"],
    sourcemap: debug ? "inline" : false,
    sourcesContent: false,
    ...esbuildOptions,
    external: ["./open-next.config.mjs", ...esbuildOptions.external ?? []],
    banner: {
      ...esbuildOptions.banner,
      js: [
        esbuildOptions.banner?.js || "",
        `globalThis.openNextDebug = ${debug};`,
        `globalThis.openNextVersion = "${openNextVersion}";`
      ].join("")
    }
  });
  if (result.errors.length > 0) {
    result.errors.forEach((error) => logger_default.error(error));
    throw new Error(`There was a problem bundling ${esbuildOptions.entryPoints[0]}.`);
  }
}
async function esbuildAsync(esbuildOptions, options3) {
  const { openNextVersion, debug } = options3;
  const result = await (0, import_esbuild3.build)({
    target: "esnext",
    format: "esm",
    platform: "node",
    bundle: true,
    minify: debug ? false : true,
    mainFields: ["module", "main"],
    sourcemap: debug ? "inline" : false,
    sourcesContent: false,
    ...esbuildOptions,
    external: [
      ...esbuildOptions.external ?? [],
      "next",
      "./open-next.config.mjs"
    ],
    banner: {
      ...esbuildOptions.banner,
      js: [
        esbuildOptions.banner?.js || "",
        `globalThis.openNextDebug = ${debug};`,
        `globalThis.openNextVersion = "${openNextVersion}";`
      ].join("")
    }
  });
  if (result.errors.length > 0) {
    result.errors.forEach((error) => logger_default.error(error));
    throw new Error(`There was a problem bundling ${esbuildOptions.entryPoints[0]}.`);
  }
}
function removeFiles(root, conditionFn, searchingDir = "") {
  traverseFiles(root, conditionFn, (filePath) => fs5.rmSync(filePath, { force: true }), searchingDir);
}
function traverseFiles(root, conditionFn, callbackFn, searchingDir = "") {
  fs5.readdirSync(path9.join(root, searchingDir)).forEach((file) => {
    const filePath = path9.join(root, searchingDir, file);
    if (fs5.statSync(filePath).isDirectory()) {
      traverseFiles(root, conditionFn, callbackFn, path9.join(searchingDir, file));
      return;
    }
    if (conditionFn(path9.join(searchingDir, file))) {
      callbackFn(filePath);
    }
  });
}
function getHtmlPages(dotNextPath) {
  const manifestPath = path9.join(dotNextPath, ".next/server/pages-manifest.json");
  const manifest = fs5.readFileSync(manifestPath, "utf-8");
  return Object.entries(JSON.parse(manifest)).filter(([_, value]) => value.endsWith(".html")).map(([_, value]) => value.replace(/^pages\//, "")).reduce((acc, page) => {
    acc.add(page);
    return acc;
  }, /* @__PURE__ */ new Set());
}
function getBuildId(dotNextPath) {
  return fs5.readFileSync(path9.join(dotNextPath, ".next/BUILD_ID"), "utf-8").trim();
}
function getOpenNextVersion() {
  return require2(path9.join(__dirname3, "../../package.json")).version;
}
function getNextVersion(appPath) {
  const nextPackageJsonPath = require2.resolve("next/package.json", {
    paths: [appPath]
  });
  const version = require2(nextPackageJsonPath)?.version;
  if (!version) {
    throw new Error("Failed to find Next version");
  }
  return version.split("-")[0];
}
function compareSemver(v1, v2) {
  if (v1 === "latest")
    return 1;
  if (/^[^\d]/.test(v1)) {
    v1 = v1.substring(1);
  }
  if (/^[^\d]/.test(v2)) {
    v2 = v2.substring(1);
  }
  const [major1, minor1, patch1] = v1.split(".").map(Number);
  const [major2, minor2, patch2] = v2.split(".").map(Number);
  if (major1 !== major2)
    return major1 - major2;
  if (minor1 !== minor2)
    return minor1 - minor2;
  return patch1 - patch2;
}
function copyOpenNextConfig(tempDir, outputPath, isEdge = false) {
  fs5.copyFileSync(path9.join(tempDir, isEdge ? "open-next.config.edge.mjs" : "open-next.config.mjs"), path9.join(outputPath, "open-next.config.mjs"));
}
function copyEnvFile(appPath, packagePath, outputPath) {
  const baseAppPath = path9.join(appPath, ".next/standalone", packagePath);
  const baseOutputPath = path9.join(outputPath, packagePath);
  const envPath = path9.join(baseAppPath, ".env");
  if (fs5.existsSync(envPath)) {
    fs5.copyFileSync(envPath, path9.join(baseOutputPath, ".env"));
  }
  const envProdPath = path9.join(baseAppPath, ".env.production");
  if (fs5.existsSync(envProdPath)) {
    fs5.copyFileSync(envProdPath, path9.join(baseOutputPath, ".env.production"));
  }
}

// node_modules/open-next/dist/build/edge/createEdgeBundle.js
var __dirname4 = url3.fileURLToPath(new URL(".", import.meta.url));
async function buildEdgeBundle({ appBuildOutputPath, middlewareInfo, entrypoint, outfile, options: options3, defaultConverter, overrides, additionalInject, includeCache }) {
  await esbuildAsync({
    entryPoints: [entrypoint],
    // inject: ,
    bundle: true,
    outfile,
    external: ["node:*", "next", "@aws-sdk/*"],
    target: "es2022",
    platform: "neutral",
    plugins: [
      openNextResolvePlugin({
        overrides: {
          wrapper: typeof overrides?.wrapper === "string" ? overrides.wrapper : "aws-lambda",
          converter: typeof overrides?.converter === "string" ? overrides.converter : defaultConverter,
          ...includeCache ? {
            tagCache: typeof overrides?.tagCache === "string" ? overrides.tagCache : "dynamodb-lite",
            incrementalCache: typeof overrides?.incrementalCache === "string" ? overrides.incrementalCache : "s3-lite",
            queue: typeof overrides?.queue === "string" ? overrides.queue : "sqs-lite"
          } : {}
        }
      }),
      openNextReplacementPlugin({
        name: "externalMiddlewareOverrides",
        target: /adapters(\/|\\)middleware\.js/g,
        deletes: includeCache ? [] : ["includeCacheInMiddleware"]
      }),
      openNextEdgePlugins({
        middlewareInfo,
        nextDir: path10.join(appBuildOutputPath, ".next"),
        edgeFunctionHandlerPath: path10.join(__dirname4, "../../core", "edgeFunctionHandler.js"),
        isInCloudfare: overrides?.wrapper === "cloudflare"
      })
    ],
    treeShaking: true,
    alias: {
      path: "node:path",
      stream: "node:stream",
      fs: "node:fs"
    },
    conditions: ["module"],
    mainFields: ["module", "main"],
    banner: {
      js: `
  ${overrides?.wrapper === "cloudflare" ? "" : `
  const require = (await import("node:module")).createRequire(import.meta.url);
  const __filename = (await import("node:url")).fileURLToPath(import.meta.url);
  const __dirname = (await import("node:path")).dirname(__filename);

  const defaultDefineProperty = Object.defineProperty;
  Object.defineProperty = function(o, p, a) {
    if(p=== '__import_unsupported' && Boolean(globalThis.__import_unsupported)) {
      return;
    }
    return defaultDefineProperty(o, p, a);
  };
  `}
  ${additionalInject ?? ""}
  `
    }
  }, options3);
}
async function generateEdgeBundle(name, options3, fnOptions) {
  const { appBuildOutputPath, outputDir } = options3;
  logger_default.info(`Generating edge bundle for: ${name}`);
  const outputPath = path10.join(outputDir, "server-functions", name);
  fs6.mkdirSync(outputPath, { recursive: true });
  copyOpenNextConfig(path10.join(outputDir, ".build"), outputPath, true);
  const middlewareManifest = JSON.parse(fs6.readFileSync(path10.join(appBuildOutputPath, ".next/server/middleware-manifest.json"), "utf8"));
  const functions = Object.values(middlewareManifest.functions).filter((fn2) => fnOptions.routes.includes(fn2.name));
  if (functions.length > 1) {
    throw new Error("Only one function is supported for now");
  }
  const fn = functions[0];
  const wasmFiles = fn.wasm;
  mkdirSync2(path10.join(outputPath, "wasm"), { recursive: true });
  for (const wasmFile of wasmFiles) {
    fs6.copyFileSync(path10.join(appBuildOutputPath, ".next", wasmFile.filePath), path10.join(outputPath, `wasm/${wasmFile.name}.wasm`));
  }
  const assets = fn.assets;
  mkdirSync2(path10.join(outputPath, "assets"), { recursive: true });
  for (const asset of assets) {
    fs6.copyFileSync(path10.join(appBuildOutputPath, ".next", asset.filePath), path10.join(outputPath, `assets/${asset.name}`));
  }
  await buildEdgeBundle({
    appBuildOutputPath,
    middlewareInfo: fn,
    entrypoint: path10.join(__dirname4, "../../adapters", "edge-adapter.js"),
    outfile: path10.join(outputPath, "index.mjs"),
    options: options3,
    overrides: fnOptions.override
  });
}

// node_modules/open-next/dist/build/createServerBundle.js
var require3 = topLevelCreateRequire3(import.meta.url);
var __dirname5 = url4.fileURLToPath(new URL(".", import.meta.url));
async function createServerBundle(config2, options3) {
  const foundRoutes = /* @__PURE__ */ new Set();
  const defaultFn = config2.default;
  const functions = Object.entries(config2.functions ?? {});
  if (defaultFn.runtime === "deno" || functions.some(([, fn]) => fn.runtime === "deno")) {
    compileCache("esm");
  }
  const promises = functions.map(async ([name, fnOptions]) => {
    const routes = fnOptions.routes;
    routes.forEach((route) => foundRoutes.add(route));
    if (fnOptions.runtime === "edge") {
      await generateEdgeBundle(name, options3, fnOptions);
    } else {
      await generateBundle(name, config2, options3, fnOptions);
    }
  });
  await Promise.all(promises);
  const remainingRoutes = /* @__PURE__ */ new Set();
  const { monorepoRoot, appBuildOutputPath } = options3;
  const packagePath = path11.relative(monorepoRoot, appBuildOutputPath);
  const serverPath = path11.join(appBuildOutputPath, ".next", "standalone", packagePath, ".next", "server");
  if (existsSync3(path11.join(serverPath, "app"))) {
    const appPath = path11.join(serverPath, "app");
    traverseFiles(appPath, (file) => {
      if (file.endsWith("page.js") || file.endsWith("route.js")) {
        const route = `app/${file.replace(/\.js$/, "")}`;
        if (!foundRoutes.has(route)) {
          remainingRoutes.add(route);
        }
      }
      return false;
    }, () => {
    });
  }
  if (existsSync3(path11.join(serverPath, "pages"))) {
    const pagePath = path11.join(serverPath, "pages");
    traverseFiles(pagePath, (file) => {
      if (file.endsWith(".js")) {
        const route = `pages/${file.replace(/\.js$/, "")}`;
        if (!foundRoutes.has(route)) {
          remainingRoutes.add(route);
        }
      }
      return false;
    }, () => {
    });
  }
  await generateBundle("default", config2, options3, {
    ...defaultFn,
    // @ts-expect-error - Those string are RouteTemplate
    routes: Array.from(remainingRoutes),
    patterns: ["*"]
  });
}
async function generateBundle(name, config2, options3, fnOptions) {
  const { appPath, appBuildOutputPath, outputDir, monorepoRoot } = options3;
  logger_default.info(`Building server function: ${name}...`);
  const outputPath = path11.join(outputDir, "server-functions", name);
  const isMonorepo = monorepoRoot !== appPath;
  const packagePath = path11.relative(monorepoRoot, appBuildOutputPath);
  fs7.mkdirSync(path11.join(outputPath, packagePath), { recursive: true });
  const ext2 = fnOptions.runtime === "deno" ? "mjs" : "cjs";
  fs7.copyFileSync(path11.join(outputDir, ".build", `cache.${ext2}`), path11.join(outputPath, packagePath, "cache.cjs"));
  if (fnOptions.runtime === "deno") {
    addDenoJson(outputPath, packagePath);
  }
  const isBundled = fnOptions.experimentalBundledNextServer ?? false;
  if (isBundled) {
    await bundleNextServer(path11.join(outputPath, packagePath), appPath);
  }
  if (!config2.middleware?.external && existsSync3(path11.join(outputDir, ".build", "middleware.mjs"))) {
    fs7.copyFileSync(path11.join(outputDir, ".build", "middleware.mjs"), path11.join(outputPath, packagePath, "middleware.mjs"));
  }
  copyOpenNextConfig(path11.join(outputDir, ".build"), path11.join(outputPath, packagePath));
  copyEnvFile(appBuildOutputPath, packagePath, outputPath);
  await copyTracedFiles(appBuildOutputPath, packagePath, outputPath, fnOptions.routes ?? ["app/page.tsx"], isBundled);
  const disableNextPrebundledReact = compareSemver(options3.nextVersion, "13.5.1") >= 0 || compareSemver(options3.nextVersion, "13.4.1") <= 0;
  const overrides = fnOptions.override ?? {};
  const isBefore13413 = compareSemver(options3.nextVersion, "13.4.13") <= 0;
  const isAfter141 = compareSemver(options3.nextVersion, "14.0.4") >= 0;
  const disableRouting = isBefore13413 || config2.middleware?.external;
  const plugins = [
    openNextReplacementPlugin({
      name: `requestHandlerOverride ${name}`,
      target: /core(\/|\\)requestHandler\.js/g,
      deletes: disableNextPrebundledReact ? ["applyNextjsPrebundledReact"] : [],
      replacements: disableRouting ? [
        require3.resolve("../adapters/plugins/without-routing/requestHandler.js")
      ] : []
    }),
    openNextReplacementPlugin({
      name: `utilOverride ${name}`,
      target: /core(\/|\\)util\.js/g,
      deletes: [
        ...disableNextPrebundledReact ? ["requireHooks"] : [],
        ...disableRouting ? ["trustHostHeader"] : [],
        ...!isBefore13413 ? ["requestHandlerHost"] : [],
        ...!isAfter141 ? ["stableIncrementalCache"] : [],
        ...isAfter141 ? ["experimentalIncrementalCacheHandler"] : []
      ]
    }),
    openNextResolvePlugin({
      fnName: name,
      overrides
    })
  ];
  if (plugins && plugins.length > 0) {
    logger_default.debug(`Applying plugins:: [${plugins.map(({ name: name2 }) => name2).join(",")}] for Next version: ${options3.nextVersion}`);
  }
  const outfileExt = fnOptions.runtime === "deno" ? "ts" : "mjs";
  await esbuildAsync({
    entryPoints: [path11.join(__dirname5, "../adapters", "server-adapter.js")],
    external: ["next", "./middleware.mjs", "./next-server.runtime.prod.js"],
    outfile: path11.join(outputPath, packagePath, `index.${outfileExt}`),
    banner: {
      js: [
        `globalThis.monorepoPackagePath = "${packagePath}";`,
        "import process from 'node:process';",
        "import { Buffer } from 'node:buffer';",
        "import { createRequire as topLevelCreateRequire } from 'module';",
        "const require = topLevelCreateRequire(import.meta.url);",
        "import bannerUrl from 'url';",
        "const __dirname = bannerUrl.fileURLToPath(new URL('.', import.meta.url));",
        name === "default" ? "" : `globalThis.fnName = "${name}";`
      ].join("")
    },
    plugins,
    alias: {
      "next/dist/server/next-server.js": isBundled ? "./next-server.runtime.prod.js" : "next/dist/server/next-server.js"
    }
  }, options3);
  if (isMonorepo) {
    addMonorepoEntrypoint(outputPath, packagePath);
  }
  if (fnOptions.minify) {
    await minifyServerBundle(outputPath);
  }
  const shouldGenerateDocker = shouldGenerateDockerfile(fnOptions);
  if (shouldGenerateDocker) {
    fs7.writeFileSync(path11.join(outputPath, "Dockerfile"), typeof shouldGenerateDocker === "string" ? shouldGenerateDocker : `
FROM node:18-alpine
WORKDIR /app
COPY . /app
EXPOSE 3000
CMD ["node", "index.mjs"]
    `);
  }
}
function shouldGenerateDockerfile(options3) {
  return options3.override?.generateDockerfile ?? false;
}
function addDenoJson(outputPath, packagePath) {
  const config2 = {
    // Enable "bring your own node_modules" mode
    // and allow `__proto__`
    unstable: ["byonm", "fs", "unsafe-proto"]
  };
  fs7.writeFileSync(path11.join(outputPath, packagePath, "deno.json"), JSON.stringify(config2, null, 2));
}
function addMonorepoEntrypoint(outputPath, packagePath) {
  const packagePosixPath = packagePath.split(path11.sep).join(path11.posix.sep);
  fs7.writeFileSync(path11.join(outputPath, "index.mjs"), [`export * from "./${packagePosixPath}/index.mjs";`].join(""));
}
async function minifyServerBundle(outputDir) {
  logger_default.info(`Minimizing server function...`);
  await minifyAll(outputDir, {
    compress_json: true,
    mangle: true
  });
}

// node_modules/open-next/dist/build/generateOutput.js
import * as fs8 from "node:fs";
import path12 from "node:path";
async function canStream(opts) {
  if (!opts.override?.wrapper) {
    return false;
  } else {
    if (typeof opts.override.wrapper === "string") {
      return opts.override.wrapper === "aws-lambda-streaming";
    } else {
      const wrapper = await opts.override.wrapper();
      return wrapper.supportStreaming;
    }
  }
}
async function extractOverrideName(defaultName, override) {
  if (!override) {
    return defaultName;
  }
  if (typeof override === "string") {
    return override;
  } else {
    const overrideModule = await override();
    return overrideModule.name;
  }
}
async function extractOverrideFn(override) {
  if (!override) {
    return {
      wrapper: "aws-lambda",
      converter: "aws-apigw-v2"
    };
  }
  const wrapper = await extractOverrideName("aws-lambda", override.wrapper);
  const converter = await extractOverrideName("aws-apigw-v2", override.converter);
  return { wrapper, converter };
}
async function extractCommonOverride(override) {
  if (!override) {
    return {
      queue: "sqs",
      incrementalCache: "s3",
      tagCache: "dynamodb"
    };
  }
  const queue = await extractOverrideName("sqs", override.queue);
  const incrementalCache = await extractOverrideName("s3", override.incrementalCache);
  const tagCache = await extractOverrideName("dynamodb", override.tagCache);
  return { queue, incrementalCache, tagCache };
}
function prefixPattern(basePath) {
  return (pattern) => {
    return basePath && basePath.length > 0 ? `${basePath.slice(1)}/${pattern}` : pattern;
  };
}
async function generateOutput(outputPath, config2) {
  const edgeFunctions = {};
  const isExternalMiddleware = config2.middleware?.external ?? false;
  if (isExternalMiddleware) {
    edgeFunctions.middleware = {
      bundle: ".open-next/middleware",
      handler: "handler.handler",
      pathResolver: await extractOverrideName("pattern-env", config2.middleware.originResolver),
      ...await extractOverrideFn(config2.middleware?.override)
    };
  }
  Object.entries(config2.functions ?? {}).forEach(async ([key, value]) => {
    if (value.placement === "global") {
      edgeFunctions[key] = {
        bundle: `.open-next/functions/${key}`,
        handler: "index.handler",
        ...await extractOverrideFn(value.override)
      };
    }
  });
  const defaultOriginCanstream = await canStream(config2.default);
  const requiredServerFiles = JSON.parse(fs8.readFileSync(path12.join(outputPath, ".next", "required-server-files.json"), "utf-8")).config;
  const prefixer = prefixPattern(requiredServerFiles.basePath ?? "");
  const defaultOrigins = {
    s3: {
      type: "s3",
      originPath: "_assets",
      copy: [
        {
          from: ".open-next/assets",
          to: requiredServerFiles.basePath ? `_assets${requiredServerFiles.basePath}` : "_assets",
          cached: true,
          versionedSubDir: prefixer("_next")
        },
        ...config2.dangerous?.disableIncrementalCache ? [] : [
          {
            from: ".open-next/cache",
            to: "_cache",
            cached: false
          }
        ]
      ]
    },
    imageOptimizer: {
      type: "function",
      handler: "index.handler",
      bundle: ".open-next/image-optimization-function",
      streaming: false,
      imageLoader: await extractOverrideName("s3", config2.imageOptimization?.loader),
      ...await extractOverrideFn(config2.imageOptimization?.override)
    },
    default: config2.default.override?.generateDockerfile ? {
      type: "ecs",
      bundle: ".open-next/server-functions/default",
      dockerfile: ".open-next/server-functions/default/Dockerfile",
      ...await extractOverrideFn(config2.default.override),
      ...await extractCommonOverride(config2.default.override)
    } : {
      type: "function",
      handler: "index.handler",
      bundle: ".open-next/server-functions/default",
      streaming: defaultOriginCanstream,
      ...await extractOverrideFn(config2.default.override),
      ...await extractCommonOverride(config2.default.override)
    }
  };
  const origins = defaultOrigins;
  await Promise.all(Object.entries(config2.functions ?? {}).map(async ([key, value]) => {
    if (!value.placement || value.placement === "regional") {
      if (value.override?.generateDockerfile) {
        origins[key] = {
          type: "ecs",
          bundle: `.open-next/server-functions/${key}`,
          dockerfile: `.open-next/server-functions/${key}/Dockerfile`,
          ...await extractOverrideFn(value.override),
          ...await extractCommonOverride(value.override)
        };
      } else {
        const streaming = await canStream(value);
        origins[key] = {
          type: "function",
          handler: "index.handler",
          bundle: `.open-next/server-functions/${key}`,
          streaming,
          ...await extractOverrideFn(value.override),
          ...await extractCommonOverride(value.override)
        };
      }
    }
  }));
  const behaviors = [
    { pattern: prefixer("_next/image*"), origin: "imageOptimizer" }
  ];
  Object.entries(config2.functions ?? {}).forEach(([key, value]) => {
    const patterns = "patterns" in value ? value.patterns : ["*"];
    patterns.forEach((pattern) => {
      behaviors.push({
        pattern: prefixer(pattern.replace(/BUILD_ID/, getBuildId(outputPath))),
        origin: value.placement === "global" ? void 0 : key,
        edgeFunction: value.placement === "global" ? key : isExternalMiddleware ? "middleware" : void 0
      });
    });
  });
  behaviors.push({
    pattern: prefixer("_next/data/*"),
    origin: "default",
    edgeFunction: isExternalMiddleware ? "middleware" : void 0
  });
  behaviors.push({
    pattern: "*",
    origin: "default",
    edgeFunction: isExternalMiddleware ? "middleware" : void 0
  });
  const assetPath = path12.join(outputPath, ".open-next", "assets");
  fs8.readdirSync(assetPath).forEach((item) => {
    if (fs8.statSync(path12.join(assetPath, item)).isDirectory()) {
      behaviors.push({
        pattern: prefixer(`${item}/*`),
        origin: "s3"
      });
    } else {
      behaviors.push({
        pattern: prefixer(item),
        origin: "s3"
      });
    }
  });
  const isTagCacheDisabled = config2.dangerous?.disableTagCache || !fs8.existsSync(path12.join(outputPath, ".open-next", "dynamodb-provider"));
  const output = {
    edgeFunctions,
    origins,
    behaviors,
    additionalProps: {
      disableIncrementalCache: config2.dangerous?.disableIncrementalCache,
      disableTagCache: config2.dangerous?.disableTagCache,
      warmer: {
        handler: "index.handler",
        bundle: ".open-next/warmer-function"
      },
      initializationFunction: isTagCacheDisabled ? void 0 : {
        handler: "index.handler",
        bundle: ".open-next/dynamodb-provider"
      },
      revalidationFunction: config2.dangerous?.disableIncrementalCache ? void 0 : {
        handler: "index.handler",
        bundle: ".open-next/revalidation-function"
      }
    }
  };
  fs8.writeFileSync(path12.join(outputPath, ".open-next", "open-next.output.json"), JSON.stringify(output));
}

// node_modules/open-next/dist/build/validateConfig.js
var compatibilityMatrix = {
  "aws-lambda": [
    "aws-apigw-v1",
    "aws-apigw-v2",
    "aws-cloudfront",
    "sqs-revalidate"
  ],
  "aws-lambda-streaming": ["aws-apigw-v2"],
  cloudflare: ["edge"],
  node: ["node"]
};
function validateFunctionOptions(fnOptions) {
  if (fnOptions.runtime === "edge" && fnOptions.experimentalBundledNextServer) {
    logger_default.warn("experimentalBundledNextServer has no effect for edge functions");
  }
  const wrapper = typeof fnOptions.override?.wrapper === "string" ? fnOptions.override.wrapper : "aws-lambda";
  const converter = typeof fnOptions.override?.converter === "string" ? fnOptions.override.converter : "aws-apigw-v2";
  if (fnOptions.override?.generateDockerfile && converter !== "node" && wrapper !== "node") {
    logger_default.warn("You've specified generateDockerfile without node converter and wrapper. Without custom converter and wrapper the dockerfile will not work");
  }
  if (converter === "aws-cloudfront" && fnOptions.placement !== "global") {
    logger_default.warn("You've specified aws-cloudfront converter without global placement. This may not generate the correct output");
  }
  const isCustomWrapper = typeof fnOptions.override?.wrapper === "function";
  const isCustomConverter = typeof fnOptions.override?.converter === "function";
  if (!compatibilityMatrix[wrapper].includes(converter) && !isCustomWrapper && !isCustomConverter) {
    logger_default.error(`Wrapper ${wrapper} and converter ${converter} are not compatible. For the wrapper ${wrapper} you should only use the following converters: ${compatibilityMatrix[wrapper].join(", ")}`);
  }
}
function validateSplittedFunctionOptions(fnOptions, name) {
  validateFunctionOptions(fnOptions);
  if (fnOptions.routes.length === 0) {
    throw new Error(`Splitted function ${name} must have at least one route`);
  }
  fnOptions.routes.forEach((route) => {
    if (!route.startsWith("app/") && !route.startsWith("pages/")) {
      throw new Error(`Route ${route} in function ${name} is not a valid route. It should starts with app/ or pages/ depending on if you use page or app router`);
    }
  });
  if (fnOptions.runtime === "edge" && fnOptions.routes.length > 1) {
    throw new Error(`Edge function ${name} can only have one route`);
  }
}
function validateConfig(config2) {
  validateFunctionOptions(config2.default);
  Object.entries(config2.functions ?? {}).forEach(([name, fnOptions]) => {
    validateSplittedFunctionOptions(fnOptions, name);
  });
  if (config2.dangerous?.disableIncrementalCache) {
    logger_default.warn("You've disabled incremental cache. This means that ISR and SSG will not work.");
  }
  if (config2.dangerous?.disableTagCache) {
    logger_default.warn(`You've disabled tag cache. 
       This means that revalidatePath and revalidateTag from next/cache will not work.
       It is safe to disable if you only use page router`);
  }
  validateFunctionOptions(config2.imageOptimization ?? {});
  validateFunctionOptions(config2.middleware ?? {});
  validateFunctionOptions(config2.revalidate ?? {});
  validateFunctionOptions(config2.warmer ?? {});
  validateFunctionOptions(config2.initializationFunction ?? {});
}

// node_modules/open-next/dist/build.js
var require4 = topLevelCreateRequire4(import.meta.url);
var __dirname6 = url5.fileURLToPath(new URL(".", import.meta.url));
var options2;
var config;
async function build2(openNextConfigPath, nodeExternals) {
  showWindowsWarning();
  const tempDir = initTempDir();
  let configPath = compileOpenNextConfigNode(tempDir, openNextConfigPath, nodeExternals);
  if (process.platform === "win32")
    configPath = `file://${configPath}`;
  config = (await import(configPath)).default;
  if (!config || !config.default) {
    logger_default.error(`config.default cannot be empty, it should be at least {}, see more info here: https://open-next.js.org/config#configuration-file`);
    process.exit(1);
  }
  validateConfig(config);
  compileOpenNextConfigEdge(tempDir, config, openNextConfigPath);
  const { root: monorepoRoot, packager } = findMonorepoRoot(path13.join(process.cwd(), config.appPath || "."));
  options2 = normalizeOptions(config, monorepoRoot);
  logger_default.setLevel(options2.debug ? "debug" : "info");
  checkRunningInsideNextjsApp();
  printNextjsVersion();
  printOpenNextVersion();
  printHeader("Building Next.js app");
  setStandaloneBuildMode(monorepoRoot);
  buildNextjsApp(packager);
  printHeader("Generating bundle");
  initOutputDir(tempDir);
  compileCache();
  await createMiddleware();
  createStaticAssets();
  await createCacheAssets(monorepoRoot);
  await createServerBundle(config, options2);
  await createRevalidationBundle(config);
  await createImageOptimizationBundle(config);
  await createWarmerBundle(config);
  await generateOutput(options2.appBuildOutputPath, config);
  logger_default.info("OpenNext build complete.");
}
function showWindowsWarning() {
  if (os2.platform() !== "win32")
    return;
  logger_default.warn("OpenNext is not fully compatible with Windows.");
  logger_default.warn("For optimal performance, it is recommended to use Windows Subsystem for Linux (WSL).");
  logger_default.warn("While OpenNext may function on Windows, it could encounter unpredictable failures during runtime.");
}
function initTempDir() {
  const dir = path13.join(process.cwd(), ".open-next");
  const tempDir = path13.join(dir, ".build");
  fs9.rmSync(dir, { recursive: true, force: true });
  fs9.mkdirSync(tempDir, { recursive: true });
  return tempDir;
}
function checkRunningInsideNextjsApp() {
  const { appPath } = options2;
  const extension = ["js", "cjs", "mjs", "ts"].find((ext2) => fs9.existsSync(path13.join(appPath, `next.config.${ext2}`)));
  if (!extension) {
    logger_default.error("Error: next.config.js not found. Please make sure you are running this command inside a Next.js app.");
    process.exit(1);
  }
}
function findMonorepoRoot(appPath) {
  let currentPath = appPath;
  while (currentPath !== "/") {
    const found2 = [
      { file: "package-lock.json", packager: "npm" },
      { file: "yarn.lock", packager: "yarn" },
      { file: "pnpm-lock.yaml", packager: "pnpm" },
      { file: "bun.lockb", packager: "bun" }
    ].find((f) => fs9.existsSync(path13.join(currentPath, f.file)));
    if (found2) {
      if (currentPath !== appPath) {
        logger_default.info("Monorepo detected at", currentPath);
      }
      return { root: currentPath, packager: found2.packager };
    }
    currentPath = path13.dirname(currentPath);
  }
  return { root: appPath, packager: "npm" };
}
function setStandaloneBuildMode(monorepoRoot) {
  process.env.NEXT_PRIVATE_STANDALONE = "true";
  process.env.NEXT_PRIVATE_OUTPUT_TRACE_ROOT = monorepoRoot;
}
function buildNextjsApp(packager) {
  const { appPackageJsonPath } = options2;
  const command2 = config.buildCommand ?? (["bun", "npm"].includes(packager) ? `${packager} run build` : `${packager} build`);
  cp.execSync(command2, {
    stdio: "inherit",
    cwd: path13.dirname(appPackageJsonPath)
  });
}
function printHeader(header) {
  header = `OpenNext \u2014 ${header}`;
  logger_default.info([
    "",
    "\u250C" + "\u2500".repeat(header.length + 2) + "\u2510",
    `\u2502 ${header} \u2502`,
    "\u2514" + "\u2500".repeat(header.length + 2) + "\u2518",
    ""
  ].join("\n"));
}
function printNextjsVersion() {
  const { nextVersion } = options2;
  logger_default.info(`Next.js version : ${nextVersion}`);
}
function printOpenNextVersion() {
  const { openNextVersion } = options2;
  logger_default.info(`OpenNext v${openNextVersion}`);
}
function initOutputDir(tempDir) {
  const { outputDir, tempDir: lTempDir } = options2;
  const openNextConfig = readFileSync6(path13.join(tempDir, "open-next.config.mjs"), "utf8");
  let openNextConfigEdge = null;
  if (fs9.existsSync(path13.join(tempDir, "open-next.config.edge.mjs"))) {
    openNextConfigEdge = readFileSync6(path13.join(tempDir, "open-next.config.edge.mjs"), "utf8");
  }
  fs9.rmSync(outputDir, { recursive: true, force: true });
  fs9.mkdirSync(lTempDir, { recursive: true });
  fs9.writeFileSync(path13.join(lTempDir, "open-next.config.mjs"), openNextConfig);
  if (openNextConfigEdge) {
    fs9.writeFileSync(path13.join(lTempDir, "open-next.config.edge.mjs"), openNextConfigEdge);
  }
}
async function createWarmerBundle(config2) {
  logger_default.info(`Bundling warmer function...`);
  const { outputDir } = options2;
  const outputPath = path13.join(outputDir, "warmer-function");
  fs9.mkdirSync(outputPath, { recursive: true });
  copyOpenNextConfig(options2.tempDir, outputPath);
  await esbuildAsync({
    entryPoints: [path13.join(__dirname6, "adapters", "warmer-function.js")],
    external: ["next"],
    outfile: path13.join(outputPath, "index.mjs"),
    plugins: [
      openNextResolvePlugin({
        overrides: {
          converter: config2.warmer?.override?.converter ?? "dummy",
          wrapper: config2.warmer?.override?.wrapper
        },
        fnName: "warmer"
      })
    ],
    banner: {
      js: [
        "import { createRequire as topLevelCreateRequire } from 'module';",
        "const require = topLevelCreateRequire(import.meta.url);",
        "import bannerUrl from 'url';",
        "const __dirname = bannerUrl.fileURLToPath(new URL('.', import.meta.url));"
      ].join("")
    }
  }, options2);
}
async function createRevalidationBundle(config2) {
  logger_default.info(`Bundling revalidation function...`);
  const { appBuildOutputPath, outputDir } = options2;
  const outputPath = path13.join(outputDir, "revalidation-function");
  fs9.mkdirSync(outputPath, { recursive: true });
  copyOpenNextConfig(options2.tempDir, outputPath);
  await esbuildAsync({
    external: ["next", "styled-jsx", "react"],
    entryPoints: [path13.join(__dirname6, "adapters", "revalidate.js")],
    outfile: path13.join(outputPath, "index.mjs"),
    plugins: [
      openNextResolvePlugin({
        fnName: "revalidate",
        overrides: {
          converter: config2.revalidate?.override?.converter ?? "sqs-revalidate",
          wrapper: config2.revalidate?.override?.wrapper
        }
      })
    ]
  }, options2);
  fs9.copyFileSync(path13.join(appBuildOutputPath, ".next", "prerender-manifest.json"), path13.join(outputPath, "prerender-manifest.json"));
}
async function createImageOptimizationBundle(config2) {
  logger_default.info(`Bundling image optimization function...`);
  const { appPath, appBuildOutputPath, outputDir } = options2;
  const outputPath = path13.join(outputDir, "image-optimization-function");
  fs9.mkdirSync(outputPath, { recursive: true });
  copyOpenNextConfig(options2.tempDir, outputPath);
  const plugins = [
    openNextResolvePlugin({
      fnName: "imageOptimization",
      overrides: {
        converter: config2.imageOptimization?.override?.converter,
        wrapper: config2.imageOptimization?.override?.wrapper,
        imageLoader: config2.imageOptimization?.loader
      }
    })
  ];
  if (compareSemver(options2.nextVersion, "14.1.1") >= 0) {
    plugins.push(openNextReplacementPlugin({
      name: "opennext-14.1.1-image-optimization",
      target: /plugins(\/|\\)image-optimization(\/|\\)image-optimization\.js/g,
      replacements: [
        require4.resolve("./adapters/plugins/image-optimization/image-optimization.replacement.js")
      ]
    }));
  }
  await esbuildAsync({
    entryPoints: [
      path13.join(__dirname6, "adapters", "image-optimization-adapter.js")
    ],
    external: ["sharp", "next"],
    outfile: path13.join(outputPath, "index.mjs"),
    plugins
  }, options2);
  esbuildSync({
    entryPoints: [path13.join(outputPath, "index.mjs")],
    external: ["sharp", "@opentelemetry/api"],
    allowOverwrite: true,
    outfile: path13.join(outputPath, "index.mjs"),
    banner: {
      js: [
        "import { createRequire as topLevelCreateRequire } from 'module';",
        "const require = topLevelCreateRequire(import.meta.url);",
        "import bannerUrl from 'url';",
        "const __dirname = bannerUrl.fileURLToPath(new URL('.', import.meta.url));"
      ].join("\n")
    }
  }, options2);
  fs9.mkdirSync(path13.join(outputPath, ".next"));
  fs9.copyFileSync(path13.join(appBuildOutputPath, ".next/required-server-files.json"), path13.join(outputPath, ".next/required-server-files.json"));
  fs9.copyFileSync(path13.join(appBuildOutputPath, ".next/BUILD_ID"), path13.join(outputPath, ".next/BUILD_ID"));
  const nodeOutputPath = path13.resolve(outputPath);
  const sharpVersion = process.env.SHARP_VERSION ?? "0.32.6";
  const arch = config2.imageOptimization?.arch ?? "arm64";
  const nodeVersion = config2.imageOptimization?.nodeVersion ?? "18";
  try {
    cp.execSync(
      // We might want to change the arch args to cpu args, it seems to be the documented way
      `npm install --arch=${arch} --platform=linux --target=${nodeVersion} --libc=glibc --prefix="${nodeOutputPath}" sharp@${sharpVersion}`,
      {
        stdio: "pipe",
        cwd: appPath,
        env: {
          ...process.env,
          SHARP_IGNORE_GLOBAL_LIBVIPS: "1"
        }
      }
    );
  } catch (e) {
    logger_default.error(e.stdout.toString());
    logger_default.error(e.stderr.toString());
    logger_default.error("Failed to install sharp.");
  }
}
function createStaticAssets() {
  logger_default.info(`Bundling static assets...`);
  const { appBuildOutputPath, appPublicPath, outputDir, appPath } = options2;
  const outputPath = path13.join(outputDir, "assets");
  fs9.mkdirSync(outputPath, { recursive: true });
  fs9.copyFileSync(path13.join(appBuildOutputPath, ".next/BUILD_ID"), path13.join(outputPath, "BUILD_ID"));
  fs9.cpSync(path13.join(appBuildOutputPath, ".next/static"), path13.join(outputPath, "_next", "static"), { recursive: true });
  if (fs9.existsSync(appPublicPath)) {
    fs9.cpSync(appPublicPath, outputPath, { recursive: true });
  }
  const appSrcPath = fs9.existsSync(path13.join(appPath, "src")) ? "src/app" : "app";
  const faviconPath = path13.join(appPath, appSrcPath, "favicon.ico");
  if (fs9.existsSync(faviconPath)) {
    fs9.copyFileSync(faviconPath, path13.join(outputPath, "favicon.ico"));
  }
}
async function createCacheAssets(monorepoRoot) {
  if (config.dangerous?.disableIncrementalCache)
    return;
  logger_default.info(`Bundling cache assets...`);
  const { appBuildOutputPath, outputDir } = options2;
  const packagePath = path13.relative(monorepoRoot, appBuildOutputPath);
  const buildId = getBuildId(appBuildOutputPath);
  const dotNextPath = path13.join(appBuildOutputPath, ".next/standalone", packagePath);
  const outputPath = path13.join(outputDir, "cache", buildId);
  [".next/server/pages", ".next/server/app"].map((dir) => path13.join(dotNextPath, dir)).filter(fs9.existsSync).forEach((dir) => fs9.cpSync(dir, outputPath, { recursive: true }));
  const htmlPages = getHtmlPages(dotNextPath);
  removeFiles(outputPath, (file) => file.endsWith(".js") || file.endsWith(".js.nft.json") || file.endsWith(".html") && htmlPages.has(file));
  const cacheFilesPath = {};
  traverseFiles(outputPath, () => true, (filepath) => {
    const ext2 = path13.extname(filepath);
    const newFilePath = ext2 !== "" ? filepath.replace(ext2, ".cache") : `${filepath}.cache`;
    switch (ext2) {
      case ".meta":
      case ".html":
      case ".json":
      case ".body":
      case ".rsc":
        cacheFilesPath[newFilePath] = {
          [ext2.slice(1)]: filepath,
          ...cacheFilesPath[newFilePath]
        };
        break;
      case ".map":
        break;
      default:
        logger_default.warn(`Unknown file extension: ${ext2}`);
        break;
    }
  });
  Object.entries(cacheFilesPath).forEach(([cacheFilePath, files]) => {
    const cacheFileMeta = files.meta ? JSON.parse(fs9.readFileSync(files.meta, "utf8")) : void 0;
    const cacheFileContent = {
      type: files.body ? "route" : files.json ? "page" : "app",
      meta: cacheFileMeta,
      html: files.html ? fs9.readFileSync(files.html, "utf8") : void 0,
      json: files.json ? JSON.parse(fs9.readFileSync(files.json, "utf8")) : void 0,
      rsc: files.rsc ? fs9.readFileSync(files.rsc, "utf8") : void 0,
      body: files.body ? fs9.readFileSync(files.body).toString(isBinaryContentType(cacheFileMeta.headers["content-type"]) ? "base64" : "utf8") : void 0
    };
    fs9.writeFileSync(cacheFilePath, JSON.stringify(cacheFileContent));
  });
  if (!config.dangerous?.disableTagCache) {
    const metaFiles = [];
    traverseFiles(outputPath, (file) => file.endsWith(".meta"), (filePath) => {
      const fileContent = fs9.readFileSync(filePath, "utf8");
      const fileData = JSON.parse(fileContent);
      if (fileData.headers?.["x-next-cache-tags"]) {
        fileData.headers["x-next-cache-tags"].split(",").forEach((tag) => {
          metaFiles.push({
            tag: { S: path13.posix.join(buildId, tag.trim()) },
            path: {
              S: path13.posix.join(buildId, path13.relative(outputPath, filePath).replace(".meta", ""))
            },
            // We don't care about the revalidation time here, we just need to make sure it's there
            revalidatedAt: { N: "1" }
          });
        });
      }
    });
    const fetchCachePath = path13.join(appBuildOutputPath, ".next/cache/fetch-cache");
    if (fs9.existsSync(fetchCachePath)) {
      const fetchOutputPath = path13.join(outputDir, "cache", "__fetch", buildId);
      fs9.mkdirSync(fetchOutputPath, { recursive: true });
      fs9.cpSync(fetchCachePath, fetchOutputPath, { recursive: true });
      traverseFiles(fetchCachePath, () => true, (filepath) => {
        const fileContent = fs9.readFileSync(filepath, "utf8");
        const fileData = JSON.parse(fileContent);
        fileData?.tags?.forEach((tag) => {
          metaFiles.push({
            tag: { S: path13.posix.join(buildId, tag) },
            path: {
              S: path13.posix.join(buildId, path13.relative(fetchCachePath, filepath))
            },
            revalidatedAt: { N: "1" }
          });
        });
      });
    }
    if (metaFiles.length > 0) {
      const providerPath = path13.join(outputDir, "dynamodb-provider");
      await esbuildAsync({
        external: ["@aws-sdk/client-dynamodb"],
        entryPoints: [path13.join(__dirname6, "adapters", "dynamo-provider.js")],
        outfile: path13.join(providerPath, "index.mjs"),
        target: ["node18"],
        plugins: [
          openNextResolvePlugin({
            fnName: "initializationFunction",
            overrides: {
              converter: config.initializationFunction?.override?.converter ?? "dummy",
              wrapper: config.initializationFunction?.override?.wrapper
            }
          })
        ]
      }, options2);
      copyOpenNextConfig(options2.tempDir, providerPath);
      fs9.writeFileSync(path13.join(providerPath, "dynamodb-cache.json"), JSON.stringify(metaFiles));
    }
  }
  removeFiles(outputPath, (file) => !file.endsWith(".cache"));
}
function compileCache(format = "cjs") {
  const ext2 = format === "cjs" ? "cjs" : "mjs";
  const outfile = path13.join(options2.outputDir, ".build", `cache.${ext2}`);
  const isAfter15 = compareSemver(options2.nextVersion, "15.0.0") >= 0;
  esbuildSync({
    external: ["next", "styled-jsx", "react", "@aws-sdk/*"],
    entryPoints: [path13.join(__dirname6, "adapters", "cache.js")],
    outfile,
    target: ["node18"],
    format,
    banner: {
      js: [
        `globalThis.disableIncrementalCache = ${config.dangerous?.disableIncrementalCache ?? false};`,
        `globalThis.disableDynamoDBCache = ${config.dangerous?.disableTagCache ?? false};`,
        `globalThis.isNextAfter15 = ${isAfter15};`
      ].join("")
    }
  }, options2);
  return outfile;
}
async function createMiddleware() {
  console.info(`Bundling middleware function...`);
  const { appBuildOutputPath, outputDir } = options2;
  const middlewareManifest = JSON.parse(readFileSync6(path13.join(appBuildOutputPath, ".next/server/middleware-manifest.json"), "utf8"));
  const entry = middlewareManifest.middleware["/"];
  if (!entry) {
    return;
  }
  let outputPath = path13.join(outputDir, "server-function");
  const commonMiddlewareOptions = {
    middlewareInfo: entry,
    options: options2,
    appBuildOutputPath
  };
  if (config.middleware?.external) {
    outputPath = path13.join(outputDir, "middleware");
    fs9.mkdirSync(outputPath, { recursive: true });
    copyOpenNextConfig(options2.tempDir, outputPath, config.middleware.override?.wrapper === "cloudflare");
    await buildEdgeBundle({
      entrypoint: path13.join(__dirname6, "adapters", "middleware.js"),
      outfile: path13.join(outputPath, "handler.mjs"),
      ...commonMiddlewareOptions,
      overrides: config.middleware?.override,
      defaultConverter: "aws-cloudfront",
      includeCache: config.dangerous?.enableCacheInterception
    });
  } else {
    await buildEdgeBundle({
      entrypoint: path13.join(__dirname6, "core", "edgeFunctionHandler.js"),
      outfile: path13.join(outputDir, ".build", "middleware.mjs"),
      ...commonMiddlewareOptions
    });
  }
}

// node_modules/open-next/dist/index.js
var command = process.argv[2];
if (command !== "build")
  printHelp();
var args = parseArgs();
if (Object.keys(args).includes("--help"))
  printHelp();
await build2(args["--config-path"], args["--node-externals"]);
function parseArgs() {
  return process.argv.slice(2).reduce((acc, key, ind, self2) => {
    if (key.startsWith("--")) {
      if (self2[ind + 1] && self2[ind + 1].startsWith("-")) {
        acc[key] = void 0;
      } else if (self2[ind + 1]) {
        acc[key] = self2[ind + 1];
      } else if (!self2[ind + 1]) {
        acc[key] = void 0;
      }
    }
    return acc;
  }, {});
}
function printHelp() {
  console.log("Unknown command");
  console.log("");
  console.log("Usage:");
  console.log("  npx open-next build");
  console.log("You can use a custom config path here");
  console.log("  npx open-next build --config-path ./path/to/open-next.config.ts");
  console.log("You can configure externals for the esbuild compilation of the open-next.config.ts file");
  console.log("  npx open-next build --node-externals aws-sdk,sharp,sqlite3");
  console.log("");
  process.exit(1);
}

// open-next.config.ts
var open_next_config_default = (void 0)({
  default: {
    override: {
      wrapper: "cloudflare"
    }
  }
});
export {
  open_next_config_default as default
};
/*! Bundled license information:

@node-minify/utils/dist/index.mjs:
  (*!
   * node-minify
   * Copyright(c) 2011-2023 Rodolphe Stoclin
   * MIT Licensed
   *)

@node-minify/core/dist/index.mjs:
  (*!
   * node-minify
   * Copyright(c) 2011-2023 Rodolphe Stoclin
   * MIT Licensed
   *)

@node-minify/terser/dist/index.mjs:
  (*!
   * node-minify
   * Copyright(c) 2011-2023 Rodolphe Stoclin
   * MIT Licensed
   *)
*/
